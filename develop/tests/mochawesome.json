{
  "stats": {
    "suites": 93,
    "tests": 165,
    "passes": 163,
    "pending": 2,
    "failures": 0,
    "start": "2024-07-30T19:27:37.713Z",
    "end": "2024-07-30T19:27:49.803Z",
    "duration": 12090,
    "testsRegistered": 165,
    "passPercent": 100,
    "pendingPercent": 1.2121212121212122,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "316c820c-9af7-4229-bb41-02badd827a07",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1153e2eb-768f-42bd-9d2d-4eb7de0aa40f",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4390d556-b762-44bf-82ec-6aacb3744d0d",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "da0ec5e2-0af2-402d-b138-76bc15965873",
                  "parentUUID": "4390d556-b762-44bf-82ec-6aacb3744d0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da0ec5e2-0af2-402d-b138-76bc15965873"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6df0ac4b-e86e-41ec-b184-2ecbfcaf072d",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "530dddaa-ca07-4d6a-a7ee-00780aeaed34",
                  "parentUUID": "6df0ac4b-e86e-41ec-b184-2ecbfcaf072d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "530dddaa-ca07-4d6a-a7ee-00780aeaed34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90278213-1b08-4ce8-8666-e83246f784bf",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "b17ecdf3-8a80-43d4-be74-3e66d41d777c",
                  "parentUUID": "90278213-1b08-4ce8-8666-e83246f784bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b17ecdf3-8a80-43d4-be74-3e66d41d777c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c7338b8-9b0e-4f51-af05-7a5647e98f00",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "87c3b3af-2aad-4088-a933-ea311a1f172d",
                  "parentUUID": "2c7338b8-9b0e-4f51-af05-7a5647e98f00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87c3b3af-2aad-4088-a933-ea311a1f172d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5b3c9006-aabb-43bc-b7ff-b29a079a71f3",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "1c6113a6-5d63-47e8-8003-f8532ae27645",
                  "parentUUID": "5b3c9006-aabb-43bc-b7ff-b29a079a71f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c6113a6-5d63-47e8-8003-f8532ae27645"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "011c60a2-0229-45c3-a50e-ffad4fc5644a",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:title', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "2b149540-6abc-4e12-a13c-7268905132e3",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "6a682d06-950f-4df5-8250-3914410c081f",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst sort = [];\nawait Promise.race([\n    new Promise(cb => {\n        device.once('update', () => {\n            sort.push('update');\n            cb(undefined);\n        });\n    }),\n    new Promise(cb => {\n        device.once('update:title', () => {\n            sort.push('update:title');\n            cb(undefined);\n        });\n    })\n]);\nassert.deepStrictEqual(sort, ['update:title', 'update']);",
                  "err": {},
                  "uuid": "f5359c07-6b5e-4b6f-98d2-883468913205",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('error', error => {\n        assert.ok(error instanceof Error);\n        assert.ok(error.toString().includes('invalid credentials: 321'));\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "59e81615-532f-46ff-9a7e-438968976469",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter = 0;\nlet eventCounter = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        if (spawnCounter === 0) {\n            cp.onStdIn(() => cp.end());\n        }\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n        spawnCounter++;\n        if (spawnCounter >= 2) {\n            cp.end();\n        }\n    })\n});\nconst listener = () => {\n    eventCounter++;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\nawait device.getState();\ndevice.off('update', listener);\nassert.strictEqual(spawnCounter, 2);\nassert.strictEqual(eventCounter, 1);",
                  "err": {},
                  "uuid": "3038e68b-80b6-42bf-a76b-339ac41ab6c2",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nlet callCounter = 0;\nconst error = new Error('This is an error. Be nice.');\ndevice.once('error', err => {\n    assert.strictEqual(err, error);\n    callCounter++;\n});\nconst listener = () => {\n    throw error;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\ndevice.off('update', listener);\nassert.strictEqual(callCounter, 1);",
                  "err": {},
                  "uuid": "df07ac0b-33af-4f8a-852c-e9ab83f3a717",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:powerState', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'powerState');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'off');\n        assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n        assert.strictEqual(event.value, 'off');\n        assert.strictEqual(event.value, NodePyATVPowerState.off);\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "a14f12fb-a4df-43b9-a327-60e448345599",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'powerState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'off');\n    assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n    assert.strictEqual(event.value, 'off');\n    assert.strictEqual(event.value, NodePyATVPowerState.off);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "c024fb20-039e-465e-a6fe-8bd84d6d57c6",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            focus_state: 'unfocused'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'focusState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'unfocused');\n    assert.strictEqual(event.newValue, NodePyATVFocusState.unfocused);\n    assert.strictEqual(event.value, 'unfocused');\n    assert.strictEqual(event.value, NodePyATVFocusState.unfocused);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "fdfbb3f2-e144-4ad3-8ad3-5b603f3009fc",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            output_devices: [{\n                    name: 'Living room',\n                    identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n                }]\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'outputDevices');\n    assert.strictEqual(event.oldValue, null);\n    assert.deepStrictEqual(event.newValue, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.value, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "e32a3d4e-ed90-4c65-84e3-18ad227c4929",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            volume: 20.0\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'volume');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 20);\n    assert.strictEqual(event.value, 20);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "68aee34c-2f04-43da-ba6e-d57a3f94fdff",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            foo: 'bar'\n        });\n        cp.end();\n    })\n});\ndevice.on('update', event => {\n    assert.fail(`Got an update event for a new field: ${event}`);\n});\nawait new Promise(cb => setTimeout(cb, 10));\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "fb721c7b-6642-49cd-8a7e-a409c25b7aef",
                  "parentUUID": "4acf5158-543f-427f-bfd0-779fd8fd07c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b149540-6abc-4e12-a13c-7268905132e3",
                "6a682d06-950f-4df5-8250-3914410c081f",
                "f5359c07-6b5e-4b6f-98d2-883468913205",
                "59e81615-532f-46ff-9a7e-438968976469",
                "3038e68b-80b6-42bf-a76b-339ac41ab6c2",
                "df07ac0b-33af-4f8a-852c-e9ab83f3a717",
                "a14f12fb-a4df-43b9-a327-60e448345599",
                "c024fb20-039e-465e-a6fe-8bd84d6d57c6",
                "fdfbb3f2-e144-4ad3-8ad3-5b603f3009fc",
                "e32a3d4e-ed90-4c65-84e3-18ad227c4929",
                "68aee34c-2f04-43da-ba6e-d57a3f94fdff",
                "fb721c7b-6642-49cd-8a7e-a409c25b7aef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "877d033a-914d-4531-957f-771612329ff1",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error();\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.error(error).end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.strictEqual(err, error);\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "65e25820-cad6-40af-85ee-e335f16c7447",
                  "parentUUID": "877d033a-914d-4531-957f-771612329ff1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stderr('Hello World!').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "72ff90e1-c97d-4752-9d00-e12f7d7e25df",
                  "parentUUID": "877d033a-914d-4531-957f-771612329ff1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('#').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Unable to parse stdout json: SyntaxError'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "b0f3071a-3e28-4fbc-b75c-713e4030fc97",
                  "parentUUID": "877d033a-914d-4531-957f-771612329ff1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "eadf9298-bd02-4267-be21-4c2b76c65b49",
                  "parentUUID": "877d033a-914d-4531-957f-771612329ff1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65e25820-cad6-40af-85ee-e335f16c7447",
                "72ff90e1-c97d-4752-9d00-e12f7d7e25df",
                "b0f3071a-3e28-4fbc-b75c-713e4030fc97"
              ],
              "failures": [],
              "pending": [
                "eadf9298-bd02-4267-be21-4c2b76c65b49"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c32c62e-6a18-412e-901b-317c7c55c290",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "63b4f88e-f7ec-4dee-9e91-4008c8795b0f",
                  "parentUUID": "5c32c62e-6a18-412e-901b-317c7c55c290",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63b4f88e-f7ec-4dee-9e91-4008c8795b0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ad46e65-e7f4-4753-ba5c-18c51e112d19",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert.strictEqual(e, event);\n    assert.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "98e2f726-13ad-49c7-9700-351c4172c34f",
                  "parentUUID": "7ad46e65-e7f4-4753-ba5c-18c51e112d19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98e2f726-13ad-49c7-9700-351c4172c34f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e776f79-0873-44fe-8174-21fb15c30403",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "667a475c-d890-4a22-a520-da6239b840d6",
                  "parentUUID": "1e776f79-0873-44fe-8174-21fb15c30403",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "667a475c-d890-4a22-a520-da6239b840d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22dd1618-d591-4ab4-a5d5-3d72afdc952f",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert.ok(typeof result, 'number');\nassert.ok(result >= 10);",
                  "err": {},
                  "uuid": "32d76b9d-5847-40d3-aa0d-0e98246eace9",
                  "parentUUID": "22dd1618-d591-4ab4-a5d5-3d72afdc952f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32d76b9d-5847-40d3-aa0d-0e98246eace9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4350547b-bb83-4ee6-afb1-7fd72d7a072e",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "fafa6912-0d82-4ad6-b1c1-4219adcc8107",
                  "parentUUID": "4350547b-bb83-4ee6-afb1-7fd72d7a072e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fafa6912-0d82-4ad6-b1c1-4219adcc8107"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9852656f-ab36-4e32-9541-bdf3cb6a3951",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listeners('test').length, 1);\nassert.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "96e1fc0e-e09f-4a89-b539-829b9ad76d19",
                  "parentUUID": "9852656f-ab36-4e32-9541-bdf3cb6a3951",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96e1fc0e-e09f-4a89-b539-829b9ad76d19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2420e762-123a-418e-931f-2a01c6ef6767",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "68923b81-50ba-4cba-8573-072afbee6189",
                  "parentUUID": "2420e762-123a-418e-931f-2a01c6ef6767",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68923b81-50ba-4cba-8573-072afbee6189"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "574f2026-3344-4cba-be93-b1bfb8245fe2",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "08fe955d-2265-46c4-883f-b053ae5d20db",
                  "parentUUID": "574f2026-3344-4cba-be93-b1bfb8245fe2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08fe955d-2265-46c4-883f-b053ae5d20db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee6b57e1-a67d-49f6-9d76-4292ab478b2a",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.rawListeners('test').length, 1);\nassert.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "2e4cd02d-57b5-46b8-9938-e75e0c2beb3b",
                  "parentUUID": "ee6b57e1-a67d-49f6-9d76-4292ab478b2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e4cd02d-57b5-46b8-9938-e75e0c2beb3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "947468ea-bedd-4554-af7e-4b00cc72fc9a",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 1);\ndevice.removeListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 0);",
                  "err": {},
                  "uuid": "37e6f8d8-bff8-4722-b26f-c10ca7fff5a2",
                  "parentUUID": "947468ea-bedd-4554-af7e-4b00cc72fc9a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37e6f8d8-bff8-4722-b26f-c10ca7fff5a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "84f0cc50-f2d4-42ad-a857-cf7284a73ce3",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "34016449-c125-444f-aea9-9e80cd0d0ff6",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "a36a7bbf-df4f-4a3d-94fd-6452151c5239",
                  "parentUUID": "34016449-c125-444f-aea9-9e80cd0d0ff6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a36a7bbf-df4f-4a3d-94fd-6452151c5239"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c7efdeb5-55fe-4636-86ee-6553df68c975",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "07cd31b4-b03b-4a84-a266-78eb5a2a95ee",
                  "parentUUID": "c7efdeb5-55fe-4636-86ee-6553df68c975",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07cd31b4-b03b-4a84-a266-78eb5a2a95ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3fecd92-678a-4f72-99b2-ce6b2ec03863",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "396243ac-bb99-44ff-a7b6-1a3fa098ec6a",
                  "parentUUID": "b3fecd92-678a-4f72-99b2-ce6b2ec03863",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "396243ac-bb99-44ff-a7b6-1a3fa098ec6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1936f8f2-b00a-400a-990a-e2b66b7f8135",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    allIDs: [\n        'some_id_1',\n        'some_id_2',\n        'some_id_3',\n    ]\n});\nassert.deepStrictEqual(device.allIDs, [\n    'some_id_1',\n    'some_id_2',\n    'some_id_3',\n]);",
                  "err": {},
                  "uuid": "ecb56f21-4b39-4911-8120-68a46d4cf37f",
                  "parentUUID": "1936f8f2-b00a-400a-990a-e2b66b7f8135",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecb56f21-4b39-4911-8120-68a46d4cf37f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "287d7083-161f-4210-a8a1-9ef4a8f621e9",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.strictEqual(device.protocol, NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "86619f52-f615-465e-b3a6-f4870f0815cc",
                  "parentUUID": "287d7083-161f-4210-a8a1-9ef4a8f621e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86619f52-f615-465e-b3a6-f4870f0815cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f80e10e6-fcd4-456c-b381-8ad1dff11c70",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    mac: 'AA:BB:CC:DD:EE:FF'\n});\nassert.strictEqual(device.mac, 'AA:BB:CC:DD:EE:FF');",
                  "err": {},
                  "uuid": "caf1b3b5-615c-489b-8ebd-70e7376dd716",
                  "parentUUID": "f80e10e6-fcd4-456c-b381-8ad1dff11c70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "caf1b3b5-615c-489b-8ebd-70e7376dd716"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb85a946-96bc-4b56-b875-6e35873e0841",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    model: 'Gen4K'\n});\nassert.strictEqual(device.model, 'Gen4K');",
                  "err": {},
                  "uuid": "e6bc8473-0d2e-401a-9698-cbb2371a35e6",
                  "parentUUID": "bb85a946-96bc-4b56-b875-6e35873e0841",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.model, undefined);",
                  "err": {},
                  "uuid": "7061036a-34f5-4f9b-a085-a84d6b38b1b0",
                  "parentUUID": "bb85a946-96bc-4b56-b875-6e35873e0841",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6bc8473-0d2e-401a-9698-cbb2371a35e6",
                "7061036a-34f5-4f9b-a085-a84d6b38b1b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a6b7ca5c-b6b9-48d7-b45b-d0b8fa71c344",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    modelName: 'Apple TV 4K'\n});\nassert.strictEqual(device.modelName, 'Apple TV 4K');",
                  "err": {},
                  "uuid": "e8b77f7b-192f-4c63-8e9b-342ed3e5ec25",
                  "parentUUID": "a6b7ca5c-b6b9-48d7-b45b-d0b8fa71c344",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.modelName, undefined);",
                  "err": {},
                  "uuid": "2e5b60c7-274d-448a-842b-ae4a8b5cb446",
                  "parentUUID": "a6b7ca5c-b6b9-48d7-b45b-d0b8fa71c344",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8b77f7b-192f-4c63-8e9b-342ed3e5ec25",
                "2e5b60c7-274d-448a-842b-ae4a8b5cb446"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36c8699f-d572-43ae-be83-0a9ebd2a1125",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    os: 'TvOS'\n});\nassert.strictEqual(device.os, 'TvOS');",
                  "err": {},
                  "uuid": "aa397247-9ab8-41af-bdf9-f75d1b7058f7",
                  "parentUUID": "36c8699f-d572-43ae-be83-0a9ebd2a1125",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.os, undefined);",
                  "err": {},
                  "uuid": "9c21d318-e414-412c-9f2a-a7ebb0e03d60",
                  "parentUUID": "36c8699f-d572-43ae-be83-0a9ebd2a1125",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa397247-9ab8-41af-bdf9-f75d1b7058f7",
                "9c21d318-e414-412c-9f2a-a7ebb0e03d60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "191c0493-4091-4bc2-bc94-c92ab8bf45a4",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    version: '15.5.1'\n});\nassert.strictEqual(device.version, '15.5.1');",
                  "err": {},
                  "uuid": "c9672a2a-7cc8-416f-bfde-f823e8ced77e",
                  "parentUUID": "191c0493-4091-4bc2-bc94-c92ab8bf45a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.version, undefined);",
                  "err": {},
                  "uuid": "4cbb8ed7-cf05-4314-8d53-93c776cad26a",
                  "parentUUID": "191c0493-4091-4bc2-bc94-c92ab8bf45a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9672a2a-7cc8-416f-bfde-f823e8ced77e",
                "4cbb8ed7-cf05-4314-8d53-93c776cad26a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba71b1bf-e43c-4113-aae0-b610eb6d5923",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    services: [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]\n});\nassert.deepStrictEqual(device.services, [\n    {\n        protocol: 'mrp',\n        port: 49152\n    },\n    {\n        protocol: 'airplay',\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "e320135e-52cb-40f0-9c95-93e060ddb881",
                  "parentUUID": "ba71b1bf-e43c-4113-aae0-b610eb6d5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.services, undefined);",
                  "err": {},
                  "uuid": "3a305a36-fe8d-4a70-af93-6acc34b8621b",
                  "parentUUID": "ba71b1bf-e43c-4113-aae0-b610eb6d5923",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e320135e-52cb-40f0-9c95-93e060ddb881",
                "3a305a36-fe8d-4a70-af93-6acc34b8621b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7fa71f53-8e66-4aee-b7ea-f3a14e95c147",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "b608aab7-b5de-405e-a5a6-e6d67820d01d",
                  "parentUUID": "7fa71f53-8e66-4aee-b7ea-f3a14e95c147",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn = () => { };\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "0fb6c9b7-e136-4b5c-a698-1397129bc8ac",
                  "parentUUID": "7fa71f53-8e66-4aee-b7ea-f3a14e95c147",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "bd1a02d5-ee2a-4b3b-8d34-5a351f6a81a5",
                  "parentUUID": "7fa71f53-8e66-4aee-b7ea-f3a14e95c147",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b608aab7-b5de-405e-a5a6-e6d67820d01d",
                "0fb6c9b7-e136-4b5c-a698-1397129bc8ac",
                "bd1a02d5-ee2a-4b3b-8d34-5a351f6a81a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce8d3a3e-0119-45e4-89a3-64f86eacae0b",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "c749f740-ff37-4d08-a863-ffa7a639aab1",
                  "parentUUID": "ce8d3a3e-0119-45e4-89a3-64f86eacae0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "902d4284-425d-4c13-9a93-556f8db5da47",
                  "parentUUID": "ce8d3a3e-0119-45e4-89a3-64f86eacae0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "8aa2f7b5-005a-4ec3-9fe9-07118f1c5004",
                  "parentUUID": "ce8d3a3e-0119-45e4-89a3-64f86eacae0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nconst fn = () => {\n};\nassert.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "c408113c-7484-4fa6-8641-891cfe9c77db",
                  "parentUUID": "ce8d3a3e-0119-45e4-89a3-64f86eacae0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c749f740-ff37-4d08-a863-ffa7a639aab1",
                "902d4284-425d-4c13-9a93-556f8db5da47",
                "8aa2f7b5-005a-4ec3-9fe9-07118f1c5004",
                "c408113c-7484-4fa6-8641-891cfe9c77db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4cb4469a-f1f4-44e3-afdc-aac73e97b176",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "66bb3171-59f9-4e3e-9bb1-fd74b9684ffe",
                  "parentUUID": "4cb4469a-f1f4-44e3-afdc-aac73e97b176",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n};\nconst deviceA = new NodePyATVDevice(config);\nconst deviceB = new NodePyATVDevice(deviceA.toJSON());\nassert.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "a894e023-508a-4695-9d57-de5664e20dfd",
                  "parentUUID": "4cb4469a-f1f4-44e3-afdc-aac73e97b176",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66bb3171-59f9-4e3e-9bb1-fd74b9684ffe",
                "a894e023-508a-4695-9d57-de5664e20dfd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe1f6560-1478-40c2-86ea-ae5eac2ca0a4",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "9359a77f-7fdc-400a-82c5-4f66bff9b796",
                  "parentUUID": "fe1f6560-1478-40c2-86ea-ae5eac2ca0a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9359a77f-7fdc-400a-82c5-4f66bff9b796"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "789e1f04-c832-4df5-a771-cd6935baba6e",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "864185e9-a3ff-4ba3-9b49-0486f2604206",
                  "parentUUID": "789e1f04-c832-4df5-a771-cd6935baba6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst result = await device.getState();\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    focusState: null,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    volume: null,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "30680208-87fa-49a6-9304-ebb7f621c6d4",
                  "parentUUID": "789e1f04-c832-4df5-a771-cd6935baba6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nassert.rejects(async () => {\n    await device.getState();\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "615867b6-81e2-40a6-a055-906e147d7537",
                  "parentUUID": "789e1f04-c832-4df5-a771-cd6935baba6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nconst secondResult = await device.getState();\nassert.strictEqual(firstResult.dateTime, secondResult.dateTime);\nassert.strictEqual(executions, 1);",
                  "err": {},
                  "uuid": "62c2e56d-ba0e-4ef5-8362-622b9ce40040",
                  "parentUUID": "789e1f04-c832-4df5-a771-cd6935baba6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date(new Date().getTime() - 1000).toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nassert.strictEqual(firstResult.position, 27);\nconst secondResult = await device.getState();\nassert.ok(secondResult.position);\nassert.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\nassert.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);",
                  "err": {},
                  "uuid": "00cffaea-8aba-4260-855b-4623ef1ffa32",
                  "parentUUID": "789e1f04-c832-4df5-a771-cd6935baba6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30680208-87fa-49a6-9304-ebb7f621c6d4",
                "615867b6-81e2-40a6-a055-906e147d7537",
                "62c2e56d-ba0e-4ef5-8362-622b9ce40040",
                "00cffaea-8aba-4260-855b-4623ef1ffa32"
              ],
              "failures": [],
              "pending": [
                "864185e9-a3ff-4ba3-9b49-0486f2604206"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "adbaddaf-ab30-46e0-802e-8ad35532fad7",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            title: 'Solo: A Star Wars Story'\n        });\n    })\n});\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\ndevice.clearState();\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\nassert.strictEqual(executions, 2);",
                  "err": {},
                  "uuid": "91044459-51b3-4f63-98c4-bfefcd383d7c",
                  "parentUUID": "adbaddaf-ab30-46e0-802e-8ad35532fad7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91044459-51b3-4f63-98c4-bfefcd383d7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b41ce50-1948-46b4-a4d6-016a5bc6f5ab",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON()\n        });\n    })\n});\nconst result = await device.getDateTime();\nassert.ok(result instanceof Date);",
                  "err": {},
                  "uuid": "4cb0cd2b-38c2-42eb-b4e6-1445705099c6",
                  "parentUUID": "4b41ce50-1948-46b4-a4d6-016a5bc6f5ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4cb0cd2b-38c2-42eb-b4e6-1445705099c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63beae81-0944-44bd-89a6-f5def867209d",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            hash: '12345'\n        });\n    })\n});\nconst result = await device.getHash();\nassert.strictEqual(result, '12345');",
                  "err": {},
                  "uuid": "b663ecfa-93ca-4c9f-b96a-d469a6cda3ed",
                  "parentUUID": "63beae81-0944-44bd-89a6-f5def867209d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b663ecfa-93ca-4c9f-b96a-d469a6cda3ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "38d9b4e4-8514-4f92-960e-9da67a93831d",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            media_type: 'video'\n        });\n    })\n});\nconst result = await device.getMediaType();\nassert.deepStrictEqual(result, NodePyATVMediaType.video);\nassert.deepStrictEqual(result, 'video');",
                  "err": {},
                  "uuid": "ab97bf5a-783b-4bfb-8d44-6d5f7f4dbfd4",
                  "parentUUID": "38d9b4e4-8514-4f92-960e-9da67a93831d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab97bf5a-783b-4bfb-8d44-6d5f7f4dbfd4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d407c094-36f2-4b47-81bf-86f05671a1b6",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            device_state: 'seeking'\n        });\n    })\n});\nconst result = await device.getDeviceState();\nassert.deepStrictEqual(result, NodePyATVDeviceState.seeking);\nassert.deepStrictEqual(result, 'seeking');",
                  "err": {},
                  "uuid": "44797092-e087-45fa-a199-6e07f1f2849c",
                  "parentUUID": "d407c094-36f2-4b47-81bf-86f05671a1b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44797092-e087-45fa-a199-6e07f1f2849c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f0cd787-16af-4594-b2f4-373ca365f78e",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst result = await device.getTitle();\nassert.strictEqual(result, 'My Movie');",
                  "err": {},
                  "uuid": "dd9848f4-421e-4380-9a5b-0df89ead5643",
                  "parentUUID": "2f0cd787-16af-4594-b2f4-373ca365f78e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd9848f4-421e-4380-9a5b-0df89ead5643"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1ab1a0f-eb4e-404e-8fbd-719a92e6e9f5",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            artist: 'My Artist'\n        });\n    })\n});\nconst result = await device.getArtist();\nassert.strictEqual(result, 'My Artist');",
                  "err": {},
                  "uuid": "2b380966-17d6-40e6-b822-290ef2aabc4c",
                  "parentUUID": "a1ab1a0f-eb4e-404e-8fbd-719a92e6e9f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b380966-17d6-40e6-b822-290ef2aabc4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d5c2900-091b-4758-af1b-040bbc1648dc",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            album: 'My ALbum'\n        });\n    })\n});\nconst result = await device.getAlbum();\nassert.strictEqual(result, 'My ALbum');",
                  "err": {},
                  "uuid": "77d46070-4e97-47eb-9b76-f836a29bb8be",
                  "parentUUID": "8d5c2900-091b-4758-af1b-040bbc1648dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77d46070-4e97-47eb-9b76-f836a29bb8be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4998ef3a-4dbc-4fd7-8186-7dbf5ddc3c4d",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            genre: 'My Genre'\n        });\n    })\n});\nconst result = await device.getGenre();\nassert.strictEqual(result, 'My Genre');",
                  "err": {},
                  "uuid": "65cbf29a-3e2e-420c-8e7d-ad5bd5a93d8f",
                  "parentUUID": "4998ef3a-4dbc-4fd7-8186-7dbf5ddc3c4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65cbf29a-3e2e-420c-8e7d-ad5bd5a93d8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c5d49204-0595-4ce1-bbd6-0074637e5145",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            total_time: 45\n        });\n    })\n});\nconst result = await device.getTotalTime();\nassert.strictEqual(result, 45);",
                  "err": {},
                  "uuid": "a00f84df-c014-4be1-8f4d-6888ce3e239e",
                  "parentUUID": "c5d49204-0595-4ce1-bbd6-0074637e5145",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a00f84df-c014-4be1-8f4d-6888ce3e239e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9be49057-53b9-40f7-9c39-dd97ad4e4128",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            position: 30\n        });\n    })\n});\nconst result = await device.getPosition();\nassert.strictEqual(result, 30);",
                  "err": {},
                  "uuid": "a1845c41-b961-4c4a-b819-0b4e4c480bbe",
                  "parentUUID": "9be49057-53b9-40f7-9c39-dd97ad4e4128",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1845c41-b961-4c4a-b819-0b4e4c480bbe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eadd77a0-2cb0-45b7-90c7-9595eef86dcd",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            shuffle: 'songs'\n        });\n    })\n});\nconst result = await device.getShuffle();\nassert.deepStrictEqual(result, NodePyATVShuffleState.songs);\nassert.deepStrictEqual(result, 'songs');",
                  "err": {},
                  "uuid": "b5a84704-803d-4e51-a6ac-6438ab4642e3",
                  "parentUUID": "eadd77a0-2cb0-45b7-90c7-9595eef86dcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5a84704-803d-4e51-a6ac-6438ab4642e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd7c1d03-9937-41cb-9c2f-e54048b4797a",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            repeat: 'all'\n        });\n    })\n});\nconst result = await device.getRepeat();\nassert.deepStrictEqual(result, NodePyATVRepeatState.all);\nassert.deepStrictEqual(result, 'all');",
                  "err": {},
                  "uuid": "be6b8931-ec1b-4a5f-a622-b5cf3517f45b",
                  "parentUUID": "fd7c1d03-9937-41cb-9c2f-e54048b4797a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be6b8931-ec1b-4a5f-a622-b5cf3517f45b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f82bbba2-379a-4e40-908d-9cd641bc323f",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app: 'My App'\n        });\n    })\n});\nconst result = await device.getApp();\nassert.strictEqual(result, 'My App');",
                  "err": {},
                  "uuid": "d8607422-de00-40b7-a9c4-520769c620ca",
                  "parentUUID": "f82bbba2-379a-4e40-908d-9cd641bc323f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8607422-de00-40b7-a9c4-520769c620ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1413ad5e-59b7-4916-9656-3f824dfbb01c",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app_id: 'app.example.com'\n        });\n    })\n});\nconst result = await device.getAppId();\nassert.strictEqual(result, 'app.example.com');",
                  "err": {},
                  "uuid": "977daa64-4ad5-4462-93c8-39f9cf332f18",
                  "parentUUID": "1413ad5e-59b7-4916-9656-3f824dfbb01c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "977daa64-4ad5-4462-93c8-39f9cf332f18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "781f8101-eebc-4807-ba1c-8580ab952e4a",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), ' +\n            'App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), ' +\n            'App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App Store ' +\n            '(com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), ' +\n            'App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ ' +\n            '(com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE ' +\n            '(tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek ' +\n            '(de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), ' +\n            'App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), ' +\n            'App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), ' +\n            'App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), ' +\n            'App: Musik (com.apple.TVMusic)');\n    })\n});\nconst result = await device.listApps();\nassert.strictEqual(result.length, 25);\nassert.strictEqual(result[0].id, 'com.apple.Fitness');\nassert.strictEqual(result[0].name, 'Fitness');",
                  "err": {},
                  "uuid": "510ffe79-7eb4-4d83-b5bf-0e3695c9c8b7",
                  "parentUUID": "781f8101-eebc-4807-ba1c-8580ab952e4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "510ffe79-7eb4-4d83-b5bf-0e3695c9c8b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "134d53e0-1b2e-4223-b74a-69acedda4d8c",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\nawait device.pressKey(NodePyATVKeys.home);",
                  "err": {},
                  "uuid": "47e7c51d-9a36-4b31-a4fa-d8d0101f9bbf",
                  "parentUUID": "134d53e0-1b2e-4223-b74a-69acedda4d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nawait assert.rejects(async () => {\n    // @ts-ignore\n    await device.pressKey('foo');\n}, /Unsupported key value foo/);",
                  "err": {},
                  "uuid": "a942e445-6056-4c0b-94e4-d0d8115e8a8e",
                  "parentUUID": "134d53e0-1b2e-4223-b74a-69acedda4d8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"failure\"}');\n    })\n});\nawait assert.rejects(async () => {\n    await device.pressKey(NodePyATVKeys.home);\n}, /Unable to parse pyatv response/);",
                  "err": {},
                  "uuid": "b377e550-6ac2-488b-a4c2-01a6854a2c6b",
                  "parentUUID": "134d53e0-1b2e-4223-b74a-69acedda4d8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47e7c51d-9a36-4b31-a4fa-d8d0101f9bbf",
                "a942e445-6056-4c0b-94e4-d0d8115e8a8e",
                "b377e550-6ac2-488b-a4c2-01a6854a2c6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c564c6c-f9d4-4777-8f7a-f9dbdabd3f47",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "7fc4c8c0-44f3-4ed3-8a6b-aab5f2b728f1",
                  "parentUUID": "8c564c6c-f9d4-4777-8f7a-f9dbdabd3f47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fc4c8c0-44f3-4ed3-8a6b-aab5f2b728f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "664e8cc6-cd34-4195-bb22-a16a4363a72d",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "6e90df20-52e4-493d-8d47-f5f4a850af71",
                  "parentUUID": "664e8cc6-cd34-4195-bb22-a16a4363a72d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e90df20-52e4-493d-8d47-f5f4a850af71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76bca106-e416-4874-83a5-24001ce5d1c1",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "74418cd3-43ef-47a2-b00e-275d6ed79c0d",
                  "parentUUID": "76bca106-e416-4874-83a5-24001ce5d1c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74418cd3-43ef-47a2-b00e-275d6ed79c0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d517ac5c-41f1-4b07-9f4b-d30acf882206",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "221b9c52-7314-4534-82e1-0f74385f4077",
                  "parentUUID": "d517ac5c-41f1-4b07-9f4b-d30acf882206",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "221b9c52-7314-4534-82e1-0f74385f4077"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a62c509-0560-451c-b84e-cbeaf98073e1",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "f8752717-f0e2-41ba-91e5-52a6be81fe11",
                  "parentUUID": "6a62c509-0560-451c-b84e-cbeaf98073e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8752717-f0e2-41ba-91e5-52a6be81fe11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "97b38601-c1f6-47d1-b7c2-126a9c71d86d",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "0fb8e889-c8b5-4d39-9701-80b119161495",
                  "parentUUID": "97b38601-c1f6-47d1-b7c2-126a9c71d86d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fb8e889-c8b5-4d39-9701-80b119161495"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ab755d0-52ce-4a28-a317-2a66c4041d91",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "c8198eaa-5a2d-40b5-925f-6ad35f3f4700",
                  "parentUUID": "4ab755d0-52ce-4a28-a317-2a66c4041d91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8198eaa-5a2d-40b5-925f-6ad35f3f4700"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f7b9130-c3d4-4a4a-8372-0471ca363f54",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "2cf7052c-30b9-40fd-86ce-2073195bac26",
                  "parentUUID": "4f7b9130-c3d4-4a4a-8372-0471ca363f54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2cf7052c-30b9-40fd-86ce-2073195bac26"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b779ceb6-2406-41be-8f10-ba3f9dc9edcb",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "a88c5d71-4fc2-4e1e-a6a4-29708da56ce6",
                  "parentUUID": "b779ceb6-2406-41be-8f10-ba3f9dc9edcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a88c5d71-4fc2-4e1e-a6a4-29708da56ce6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c3bfcdf2-16a8-4398-90e9-199a46507abf",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "66a3e1ce-cdc8-4d74-b9a0-084383695cb2",
                  "parentUUID": "c3bfcdf2-16a8-4398-90e9-199a46507abf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66a3e1ce-cdc8-4d74-b9a0-084383695cb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c2f0377-d7f8-4a2f-887e-0ce657f9df9c",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "09e69a6d-28ea-4fd5-8619-2e9a27f956c2",
                  "parentUUID": "5c2f0377-d7f8-4a2f-887e-0ce657f9df9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09e69a6d-28ea-4fd5-8619-2e9a27f956c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab847c86-a1b2-4725-afe8-813e3c3af99c",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "ac4392a1-bdc6-4383-a403-0f109b7a9e30",
                  "parentUUID": "ab847c86-a1b2-4725-afe8-813e3c3af99c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac4392a1-bdc6-4383-a403-0f109b7a9e30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0b403b7-c58e-4ceb-9e42-fc43ae761227",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "5bc1d2fb-402b-4682-8936-dceee10882fe",
                  "parentUUID": "f0b403b7-c58e-4ceb-9e42-fc43ae761227",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bc1d2fb-402b-4682-8936-dceee10882fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a61dcb6-1859-4da3-861c-0bb9442bc3f5",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9ee49662-2a06-431c-b519-922534098e32",
                  "parentUUID": "4a61dcb6-1859-4da3-861c-0bb9442bc3f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ee49662-2a06-431c-b519-922534098e32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c63d13f-e3ad-46b6-beca-71882ca1cbe6",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "8c2fe0c7-f04f-4a5a-a174-2b64bd1da7f5",
                  "parentUUID": "2c63d13f-e3ad-46b6-beca-71882ca1cbe6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c2fe0c7-f04f-4a5a-a174-2b64bd1da7f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75b87fe4-e8e3-427d-9d43-220f71ddfe5d",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "0276e60d-f67e-4f54-b0c5-8fa99f66754e",
                  "parentUUID": "75b87fe4-e8e3-427d-9d43-220f71ddfe5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0276e60d-f67e-4f54-b0c5-8fa99f66754e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1042fb77-6c99-4e45-8a7c-9b8a476ad219",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "d859f5a2-30fd-4003-8b33-f2dabf501dda",
                  "parentUUID": "1042fb77-6c99-4e45-8a7c-9b8a476ad219",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d859f5a2-30fd-4003-8b33-f2dabf501dda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0afcf61-d2c1-43f7-8bfc-057462e72e9b",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9602a03b-0829-4c06-a2be-e2ce1f1e6ee2",
                  "parentUUID": "d0afcf61-d2c1-43f7-8bfc-057462e72e9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9602a03b-0829-4c06-a2be-e2ce1f1e6ee2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0fa717bc-c2cf-48fe-8e1a-85037e4d5e75",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "e2a7e3e5-2beb-497e-9909-f751ae8ef1f1",
                  "parentUUID": "0fa717bc-c2cf-48fe-8e1a-85037e4d5e75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2a7e3e5-2beb-497e-9909-f751ae8ef1f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fdce3d76-d561-4075-b896-26072f6a4485",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "01cfa839-ba0e-489e-9e82-490c1b01f8e1",
                  "parentUUID": "fdce3d76-d561-4075-b896-26072f6a4485",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01cfa839-ba0e-489e-9e82-490c1b01f8e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf91e6b5-6dd1-4889-bc14-6fbc48d81470",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "a1685191-18e2-4e94-9cff-5b7aff17f217",
                  "parentUUID": "bf91e6b5-6dd1-4889-bc14-6fbc48d81470",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1685191-18e2-4e94-9cff-5b7aff17f217"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7439d975-af56-464d-957c-69e8fc158e9a",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "f9a1ed77-d255-4c84-98c4-d064ec67875d",
                  "parentUUID": "7439d975-af56-464d-957c-69e8fc158e9a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9a1ed77-d255-4c84-98c4-d064ec67875d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74fdcbe1-9883-41a2-a9c6-c0f8a0d46309",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "98df4438-5c26-4ade-9ba2-020b01525100",
                  "parentUUID": "74fdcbe1-9883-41a2-a9c6-c0f8a0d46309",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98df4438-5c26-4ade-9ba2-020b01525100"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0dc391fa-7aa7-4648-b34b-43c38535e1b5",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('');\n    })\n});\nawait device.launchApp('com.apple.TVShows');",
                  "err": {},
                  "uuid": "fd319a24-f8b1-4ccd-858b-0a22826db702",
                  "parentUUID": "0dc391fa-7aa7-4648-b34b-43c38535e1b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd319a24-f8b1-4ccd-858b-0a22826db702"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e0e9c9c6-4eb0-459e-93a3-207b04528d88",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "80978762-5364-42a7-b834-0a164b120eca",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 506,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000);\nconst result = await NodePyATVInstance.version();\nif (result.pyatv === null) {\n    throw new Error('No version found for pyatv. Is it installed in test environment?');\n}\nassert.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\nassert.ok(result.pyatv.length >= 5, 'result.pyatv has content');\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "34b530d6-d940-4e3e-b177-c31bab3fbeb1",
                  "parentUUID": "80978762-5364-42a7-b834-0a164b120eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.code(1);\n        cp.end('atvremote 0.7.4');\n    })\n});\nassert.ok(result.pyatv);\nassert.strictEqual(result.pyatv, '0.7.4');",
                  "err": {},
                  "uuid": "3b9e8e77-328c-4f0b-ac04-9deadd11a1b4",
                  "parentUUID": "80978762-5364-42a7-b834-0a164b120eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "56492226-1761-4c81-9a4e-b8897a46afdf",
                  "parentUUID": "80978762-5364-42a7-b834-0a164b120eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    atvremotePath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "2bba25ab-2834-40ed-a142-93bb18c4f1a0",
                  "parentUUID": "80978762-5364-42a7-b834-0a164b120eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "04207167-2463-4317-9242-72919180224b",
                  "parentUUID": "80978762-5364-42a7-b834-0a164b120eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: () => {\n        // no debug log\n    },\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "db9feba2-877f-4d44-b3fb-63c0b6beb1ae",
                  "parentUUID": "80978762-5364-42a7-b834-0a164b120eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "6de2b13f-9a64-4d0c-bc8d-50336c4ec4a0",
                  "parentUUID": "80978762-5364-42a7-b834-0a164b120eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.error(new Error('Hello world!')).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "ab431a34-d44c-4e4f-86ec-2adceff87418",
                  "parentUUID": "80978762-5364-42a7-b834-0a164b120eca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('atvremote 42').code(1).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "254d19d5-8741-4853-a852-be822b3fa2c7",
                  "parentUUID": "80978762-5364-42a7-b834-0a164b120eca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34b530d6-d940-4e3e-b177-c31bab3fbeb1",
                "3b9e8e77-328c-4f0b-ac04-9deadd11a1b4",
                "56492226-1761-4c81-9a4e-b8897a46afdf",
                "2bba25ab-2834-40ed-a142-93bb18c4f1a0",
                "04207167-2463-4317-9242-72919180224b",
                "db9feba2-877f-4d44-b3fb-63c0b6beb1ae",
                "6de2b13f-9a64-4d0c-bc8d-50336c4ec4a0",
                "ab431a34-d44c-4e4f-86ec-2adceff87418",
                "254d19d5-8741-4853-a852-be822b3fa2c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 519,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9caf5814-2f3d-44cb-a61d-ad4fec78a58d",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5917,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12000);\nawait NodePyATVInstance.check();",
                  "err": {},
                  "uuid": "ab1a93ca-0f55-4843-b591-3853a3f88bec",
                  "parentUUID": "9caf5814-2f3d-44cb-a61d-ad4fec78a58d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "b88ac799-8d6d-4aa4-b2d3-b3d21e0983d0",
                  "parentUUID": "9caf5814-2f3d-44cb-a61d-ad4fec78a58d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('atvremote 0.5.1').code(1).end();\n        })\n    });\n}, /Found pyatv, but unforunately it's too old. Please update pyatv./);",
                  "err": {},
                  "uuid": "dbc45263-80d8-4e93-8b93-32570aa13695",
                  "parentUUID": "9caf5814-2f3d-44cb-a61d-ad4fec78a58d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i = 0;\nawait assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            if (i === 0) {\n                cp.stdout('atvremote 0.7.0').code(1).end();\n                i++;\n            }\n            else {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            }\n        })\n    });\n}, /Unable to scan for devices/);",
                  "err": {},
                  "uuid": "cd2b9cf8-494c-48ae-a90d-9aac1d1533f2",
                  "parentUUID": "9caf5814-2f3d-44cb-a61d-ad4fec78a58d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab1a93ca-0f55-4843-b591-3853a3f88bec",
                "b88ac799-8d6d-4aa4-b2d3-b3d21e0983d0",
                "dbc45263-80d8-4e93-8b93-32570aa13695",
                "cd2b9cf8-494c-48ae-a90d-9aac1d1533f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5924,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff27b9a2-3741-431c-997b-31ac84718e1b",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5445,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(10000);\nconst result = await NodePyATVInstance.find();\nassert.ok(Array.isArray(result));",
                  "err": {},
                  "uuid": "4802207f-7601-4f00-aa9a-d26265c7d7df",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({\n    atvscriptPath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "0f321571-79b3-44da-877a-13d769f80aa9",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stderr('Hello World!').code(1).end();\n        })\n    });\n}, /Unable to execute request/);",
                  "err": {},
                  "uuid": "284dc8d1-08fc-454d-bde5-0a62d19505a0",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).code(1).end();\n        })\n    });\n}, /Hello world!/);",
                  "err": {},
                  "uuid": "8c03b69d-01a2-4319-89a6-887a93b93f88",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            // Example output from @maxileith\n            // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n            cp.stdout({\n                result: 'failure',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                error: 'Task exception was never retrieved',\n                exception: '[Errno 113] Connect call failed'\n            }).code(1).end();\n        })\n    });\n}, /Unable to find any devices, but received 1 error: /);",
                  "err": {},
                  "uuid": "d18de873-ba3b-4d1b-bd22-c392561f4899",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout(JSON.stringify({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).substr(1)).end();\n        })\n    });\n}, /Unable to parse result/);",
                  "err": {},
                  "uuid": "404e4a49-63bb-437d-b7cb-e6e0678c086d",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'error'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "1f6dac70-2cf3-4c40-8ee6-81425b67e7d7",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "3a0fb513-f334-4859-8f65-1bc2ac8a7f94",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx'\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, undefined);\nassert.strictEqual(devices[0].modelName, undefined);\nassert.strictEqual(devices[0].os, undefined);\nassert.strictEqual(devices[0].version, undefined);\nassert.deepStrictEqual(devices[0].services, undefined);",
                  "err": {},
                  "uuid": "e2d0eea1-5134-4284-936a-c35eeee32952",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx',\n                    device_info: {\n                        'model': 'Gen4K',\n                        'model_str': 'Apple TV 4K',\n                        'operating_system': 'TvOS',\n                        'version': '15.5.1'\n                    },\n                    services: [\n                        {\n                            protocol: 'mrp',\n                            port: 49152\n                        },\n                        {\n                            protocol: 'airplay',\n                            port: 7000\n                        }\n                    ]\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, 'Gen4K');\nassert.strictEqual(devices[0].modelName, 'Apple TV 4K');\nassert.strictEqual(devices[0].os, 'TvOS');\nassert.strictEqual(devices[0].version, '15.5.1');\nassert.deepStrictEqual(devices[0].services, [\n    {\n        protocol: NodePyATVProtocol.mrp,\n        port: 49152\n    },\n    {\n        protocol: NodePyATVProtocol.airplay,\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "3935fb03-35f1-4135-bcbc-fe28db64dc9e",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 4);\nassert.strictEqual(devices[0].name, 'Living Room');\nassert.strictEqual(devices[0].host, '10.0.0.30');\nassert.strictEqual(devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(devices[1].name, 'Kitchen');\nassert.strictEqual(devices[1].host, '10.0.0.79');\nassert.strictEqual(devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(devices[2].name, 'Bedroom');\nassert.strictEqual(devices[2].host, '10.0.0.20');\nassert.strictEqual(devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(devices[3].name, 'Basement');\nassert.strictEqual(devices[3].host, '10.0.0.156');\nassert.strictEqual(devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');",
                  "err": {},
                  "uuid": "105387d1-ca49-41ea-9047-4368c87625b6",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n}, true);\nassert.strictEqual(response.devices.length, 4);\nassert.strictEqual(response.errors.length, 2);\nassert.strictEqual(response.devices[0].name, 'Living Room');\nassert.strictEqual(response.devices[0].host, '10.0.0.30');\nassert.strictEqual(response.devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(response.devices[1].name, 'Kitchen');\nassert.strictEqual(response.devices[1].host, '10.0.0.79');\nassert.strictEqual(response.devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(response.devices[2].name, 'Bedroom');\nassert.strictEqual(response.devices[2].host, '10.0.0.20');\nassert.strictEqual(response.devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(response.devices[3].name, 'Basement');\nassert.strictEqual(response.devices[3].host, '10.0.0.156');\nassert.strictEqual(response.devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');\nassert.strictEqual(response.errors[0].exception, '[Errno 113] Connect call failed (\\'10.0.0.232\\', 32498)');\nassert.strictEqual(response.errors[1].exception, '[Errno 113] Connect call failed (\\'10.0.0.229\\', 32498)');",
                  "err": {},
                  "uuid": "8fb9eb76-49d1-4909-a0b0-31e225ec2100",
                  "parentUUID": "ff27b9a2-3741-431c-997b-31ac84718e1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4802207f-7601-4f00-aa9a-d26265c7d7df",
                "0f321571-79b3-44da-877a-13d769f80aa9",
                "284dc8d1-08fc-454d-bde5-0a62d19505a0",
                "8c03b69d-01a2-4319-89a6-887a93b93f88",
                "d18de873-ba3b-4d1b-bd22-c392561f4899",
                "404e4a49-63bb-437d-b7cb-e6e0678c086d",
                "1f6dac70-2cf3-4c40-8ee6-81425b67e7d7",
                "3a0fb513-f334-4859-8f65-1bc2ac8a7f94",
                "e2d0eea1-5134-4284-936a-c35eeee32952",
                "3935fb03-35f1-4135-bcbc-fe28db64dc9e",
                "105387d1-ca49-41ea-9047-4368c87625b6",
                "8fb9eb76-49d1-4909-a0b0-31e225ec2100"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5460,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8fc30ee5-aa5b-4340-81df-1f7f23125281",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = NodePyATVInstance.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert.strictEqual(device.host, '192.168.178.6');\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "a9a3818a-b9cd-4e9c-83e0-082361f8745f",
                  "parentUUID": "8fc30ee5-aa5b-4340-81df-1f7f23125281",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9a3818a-b9cd-4e9c-83e0-082361f8745f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47214cc7-9e4b-4dda-8277-a887109dccfc",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait i.version({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "b0a4c95d-9e43-4018-8eb2-5cd6af206a04",
                  "parentUUID": "47214cc7-9e4b-4dda-8277-a887109dccfc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0a4c95d-9e43-4018-8eb2-5cd6af206a04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "acc69358-8087-46a9-8be7-7e8665ccd508",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait assert.rejects(async () => {\n    await i.check({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "78430f34-96a6-4d7e-b3be-38c3e11488cb",
                  "parentUUID": "acc69358-8087-46a9-8be7-7e8665ccd508",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78430f34-96a6-4d7e-b3be-38c3e11488cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73fce8a9-a3a2-466f-8703-3f7bfe672636",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvscriptPath: 'test' });\nawait i.find({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "e6b7e586-3e89-4d44-a50b-7fb462b75010",
                  "parentUUID": "73fce8a9-a3a2-466f-8703-3f7bfe672636",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6b7e586-3e89-4d44-a50b-7fb462b75010"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "047ed703-c534-48b7-9d43-60d154e52bc4",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ debug: true });\nconst d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\nassert.deepStrictEqual(d.debug, true);",
                  "err": {},
                  "uuid": "1b3c559b-022d-4931-b6ed-7d4a2bd058bd",
                  "parentUUID": "047ed703-c534-48b7-9d43-60d154e52bc4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b3c559b-022d-4931-b6ed-7d4a2bd058bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol);",
                  "err": {},
                  "uuid": "9bb1a0cf-6c1b-493a-b35f-96a86021eab6",
                  "parentUUID": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType);",
                  "err": {},
                  "uuid": "f9d46052-51ad-48ed-960c-36d35260a2d0",
                  "parentUUID": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "ae693f31-ad8c-4f70-baf1-e3da69d104c7",
                  "parentUUID": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "fde97b84-3e47-4f66-8889-976548ea2340",
                  "parentUUID": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "b84f2abe-1d05-4070-8d74-361eebbd4a52",
                  "parentUUID": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "d4bcb356-065c-4798-bb61-653530b3260a",
                  "parentUUID": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys);",
                  "err": {},
                  "uuid": "5bb78e82-da84-4796-945c-df2f174462d2",
                  "parentUUID": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState);",
                  "err": {},
                  "uuid": "e9117a5e-ce86-4e48-945e-41badabbf744",
                  "parentUUID": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState);",
                  "err": {},
                  "uuid": "b3f847ff-70a3-48fa-b179-e9fc635ea035",
                  "parentUUID": "8238109d-953a-4a98-99f5-cf9d0fd7ea9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bb1a0cf-6c1b-493a-b35f-96a86021eab6",
                "f9d46052-51ad-48ed-960c-36d35260a2d0",
                "ae693f31-ad8c-4f70-baf1-e3da69d104c7",
                "fde97b84-3e47-4f66-8889-976548ea2340",
                "b84f2abe-1d05-4070-8d74-361eebbd4a52",
                "d4bcb356-065c-4798-bb61-653530b3260a",
                "5bb78e82-da84-4796-945c-df2f174462d2",
                "e9117a5e-ce86-4e48-945e-41badabbf744",
                "b3f847ff-70a3-48fa-b179-e9fc635ea035"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c97dd6c3-01b0-4787-b8d2-8bc488b7b0ff",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4078a075-cbb8-460c-8edb-ff0be63483bc",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = addRequestId();\nassert.strictEqual(typeof id, 'string');\nremoveRequestId(id);",
                  "err": {},
                  "uuid": "9159713f-a6fa-42c0-9aec-f0029cacac68",
                  "parentUUID": "4078a075-cbb8-460c-8edb-ff0be63483bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId('FOO');",
                  "err": {},
                  "uuid": "f5565d30-2dbb-4714-8f36-0a0d52e74997",
                  "parentUUID": "4078a075-cbb8-460c-8edb-ff0be63483bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9159713f-a6fa-42c0-9aec-f0029cacac68",
                "f5565d30-2dbb-4714-8f36-0a0d52e74997"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c819d777-33c2-418f-80d6-f5594da34aed",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "02612228-11ff-4f33-a85d-9084bd1bcbab",
                  "parentUUID": "c819d777-33c2-418f-80d6-f5594da34aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "9772b8be-8847-44d2-af82-9fa0f823bcf2",
                  "parentUUID": "c819d777-33c2-418f-80d6-f5594da34aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "a0a553ea-0a85-487f-940f-d87727287145",
                  "parentUUID": "c819d777-33c2-418f-80d6-f5594da34aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "a6c90288-855a-466c-91a3-6fbc22ce9720",
                  "parentUUID": "c819d777-33c2-418f-80d6-f5594da34aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "20edc539-79b1-4b16-b4fe-2d9d3f162e7a",
                  "parentUUID": "c819d777-33c2-418f-80d6-f5594da34aed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02612228-11ff-4f33-a85d-9084bd1bcbab",
                "9772b8be-8847-44d2-af82-9fa0f823bcf2",
                "a0a553ea-0a85-487f-940f-d87727287145",
                "a6c90288-855a-466c-91a3-6fbc22ce9720",
                "20edc539-79b1-4b16-b4fe-2d9d3f162e7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "540230ed-484d-4049-81f4-cbe0f3ed0422",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "e4ce57d6-ae14-4909-977a-e018206fd1d8",
                  "parentUUID": "540230ed-484d-4049-81f4-cbe0f3ed0422",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "9d243cc0-631e-41d3-919a-488a548a5cbb",
                  "parentUUID": "540230ed-484d-4049-81f4-cbe0f3ed0422",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "47b1834a-27a1-4188-84e5-5ea342da20b0",
                  "parentUUID": "540230ed-484d-4049-81f4-cbe0f3ed0422",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "70d6624d-99da-485f-afba-2f562aed5195",
                  "parentUUID": "540230ed-484d-4049-81f4-cbe0f3ed0422",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4ce57d6-ae14-4909-977a-e018206fd1d8",
                "9d243cc0-631e-41d3-919a-488a548a5cbb",
                "47b1834a-27a1-4188-84e5-5ea342da20b0",
                "70d6624d-99da-485f-afba-2f562aed5195"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11175d75-7566-4a45-8073-9f682165df4a",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters();\nassert.deepEqual(result, []);",
                  "err": {},
                  "uuid": "e63e8f04-a6c4-423c-b83e-db6863f64ac3",
                  "parentUUID": "11175d75-7566-4a45-8073-9f682165df4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    host: '192.168.178.2'\n});\nassert.deepEqual(result, ['-s', '192.168.178.2']);",
                  "err": {},
                  "uuid": "0747c67d-4716-4c70-ad74-63fa0c50f7b4",
                  "parentUUID": "11175d75-7566-4a45-8073-9f682165df4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    hosts: ['192.168.178.2', '192.168.178.3'],\n    id: '****',\n    protocol: NodePyATVProtocol.mrp,\n    dmapCredentials: '****',\n    mrpCredentials: '****',\n    airplayCredentials: '****',\n    companionCredentials: '1234',\n    raopCredentials: '::foo:'\n});\nassert.deepEqual(result, [\n    '-s', '192.168.178.2,192.168.178.3',\n    '-i', '****',\n    '--protocol', 'mrp',\n    '--dmap-credentials', '****',\n    '--mrp-credentials', '****',\n    '--airplay-credentials', '****',\n    '--companion-credentials', '1234',\n    '--raop-credentials', '::foo:'\n]);",
                  "err": {},
                  "uuid": "82fb5ab1-237b-4641-985d-b4d24036d60e",
                  "parentUUID": "11175d75-7566-4a45-8073-9f682165df4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e63e8f04-a6c4-423c-b83e-db6863f64ac3",
                "0747c67d-4716-4c70-ad74-63fa0c50f7b4",
                "82fb5ab1-237b-4641-985d-b4d24036d60e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a10523cf-65ec-4ceb-804a-67c13a2c96e6",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "5ad292c5-44ee-4c94-a46d-8d61b79019b0",
                  "parentUUID": "a10523cf-65ec-4ceb-804a-67c13a2c96e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = parseState(null, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "edef1ff4-e33c-49bf-8277-d861c59edf32",
                  "parentUUID": "a10523cf-65ec-4ceb-804a-67c13a2c96e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "01ec4e13-3ca9-4597-b17f-8324e31d9798",
                  "parentUUID": "a10523cf-65ec-4ceb-804a-67c13a2c96e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert.throws(() => {\n    parseState(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "38db627b-a57e-4f4f-95e5-804fc8f27bb8",
                  "parentUUID": "a10523cf-65ec-4ceb-804a-67c13a2c96e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "31bec2b5-b7c6-438c-9a01-3a9453a9c18c",
                  "parentUUID": "a10523cf-65ec-4ceb-804a-67c13a2c96e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "e2eb1c69-5af8-4998-8de0-9d7acccb9e55",
                  "parentUUID": "a10523cf-65ec-4ceb-804a-67c13a2c96e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "61c27dc0-1bfc-459a-9350-d8954c411bc6",
                  "parentUUID": "a10523cf-65ec-4ceb-804a-67c13a2c96e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ad292c5-44ee-4c94-a46d-8d61b79019b0",
                "edef1ff4-e33c-49bf-8277-d861c59edf32",
                "01ec4e13-3ca9-4597-b17f-8324e31d9798",
                "38db627b-a57e-4f4f-95e5-804fc8f27bb8",
                "31bec2b5-b7c6-438c-9a01-3a9453a9c18c",
                "e2eb1c69-5af8-4998-8de0-9d7acccb9e55",
                "61c27dc0-1bfc-459a-9350-d8954c411bc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}