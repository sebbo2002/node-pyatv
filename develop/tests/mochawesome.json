{
  "stats": {
    "suites": 93,
    "tests": 162,
    "passes": 160,
    "pending": 2,
    "failures": 0,
    "start": "2024-02-27T20:37:30.464Z",
    "end": "2024-02-27T20:37:42.572Z",
    "duration": 12108,
    "testsRegistered": 162,
    "passPercent": 100,
    "pendingPercent": 1.2345679012345678,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7aecc240-4d34-40ab-8e75-94f9bbe18913",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f4985f5c-0125-42e2-8e37-a3b4552fd42e",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4cc02da4-efc6-4d2f-9ef9-d4808095e164",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "bc737deb-348d-4078-811f-02afa48e02b1",
                  "parentUUID": "4cc02da4-efc6-4d2f-9ef9-d4808095e164",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc737deb-348d-4078-811f-02afa48e02b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0692c0ad-3a1d-4fa1-9435-c5e155d9000c",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "10d88cf1-e959-4a2b-bc91-8cf52b432703",
                  "parentUUID": "0692c0ad-3a1d-4fa1-9435-c5e155d9000c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10d88cf1-e959-4a2b-bc91-8cf52b432703"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a0d9180-6fd4-4923-938c-f12ca5670dee",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "3ca822a1-4c74-413c-af76-2a53bf9f89ec",
                  "parentUUID": "4a0d9180-6fd4-4923-938c-f12ca5670dee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ca822a1-4c74-413c-af76-2a53bf9f89ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8e45383-4c69-49f0-a4d5-3b99d4f1b6de",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "57e26ee4-e21e-4f6c-ab87-b199d8255001",
                  "parentUUID": "f8e45383-4c69-49f0-a4d5-3b99d4f1b6de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57e26ee4-e21e-4f6c-ab87-b199d8255001"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a038c57-631a-4547-a8a6-68adb7c0a405",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "5f990bd4-6222-4be5-baf1-fa5807da3cf7",
                  "parentUUID": "1a038c57-631a-4547-a8a6-68adb7c0a405",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f990bd4-6222-4be5-baf1-fa5807da3cf7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c20b9b24-874e-4bac-b2c6-a071faf1003c",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:title', event => {\n            assert.ok(event instanceof NodePyATVDeviceEvent);\n            assert.strictEqual(event.key, 'title');\n            assert.strictEqual(event.oldValue, null);\n            assert.strictEqual(event.newValue, 'My Movie');\n            assert.strictEqual(event.value, 'My Movie');\n            assert.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "1b3c45ae-917c-4810-b1bf-fe3833babccc",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update', event => {\n            assert.ok(event instanceof NodePyATVDeviceEvent);\n            assert.strictEqual(event.key, 'title');\n            assert.strictEqual(event.oldValue, null);\n            assert.strictEqual(event.newValue, 'My Movie');\n            assert.strictEqual(event.value, 'My Movie');\n            assert.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "2ecdcab3-cd8b-46a8-a2dc-3725211b6699",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const sort = [];\n    yield Promise.race([\n        new Promise(cb => {\n            device.once('update', () => {\n                sort.push('update');\n                cb(undefined);\n            });\n        }),\n        new Promise(cb => {\n            device.once('update:title', () => {\n                sort.push('update:title');\n                cb(undefined);\n            });\n        })\n    ]);\n    assert.deepStrictEqual(sort, ['update:title', 'update']);\n});",
                  "err": {},
                  "uuid": "486b3e06-7411-499a-b589-3214f372bc4e",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('error', error => {\n            assert.ok(error instanceof Error);\n            assert.ok(error.toString().includes('invalid credentials: 321'));\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "cef08bfa-f8f4-4f64-8cfc-7fded49f5632",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let spawnCounter = 0;\n    let eventCounter = 0;\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            if (spawnCounter === 0) {\n                cp.onStdIn(() => cp.end());\n            }\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n            spawnCounter++;\n            if (spawnCounter >= 2) {\n                cp.end();\n            }\n        })\n    });\n    const listener = () => {\n        eventCounter++;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    yield device.getState();\n    device.off('update', listener);\n    assert.strictEqual(spawnCounter, 2);\n    assert.strictEqual(eventCounter, 1);\n});",
                  "err": {},
                  "uuid": "dd627993-4a12-4f91-98ec-793c46685bd4",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    let callCounter = 0;\n    const error = new Error('This is an error. Be nice.');\n    device.once('error', err => {\n        assert.strictEqual(err, error);\n        callCounter++;\n    });\n    const listener = () => {\n        throw error;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    device.off('update', listener);\n    assert.strictEqual(callCounter, 1);\n});",
                  "err": {},
                  "uuid": "3e780295-06b7-47bb-aa07-d8d34eeee399",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:powerState', event => {\n            assert.ok(event instanceof NodePyATVDeviceEvent);\n            assert.strictEqual(event.key, 'powerState');\n            assert.strictEqual(event.oldValue, null);\n            assert.strictEqual(event.newValue, 'off');\n            assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n            assert.strictEqual(event.value, 'off');\n            assert.strictEqual(event.value, NodePyATVPowerState.off);\n            assert.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "28733317-67e1-431f-8241-ea3603eefd54",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n            cp.end();\n        })\n    });\n    let counter = 0;\n    device.on('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'powerState');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'off');\n        assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n        assert.strictEqual(event.value, 'off');\n        assert.strictEqual(event.value, NodePyATVPowerState.off);\n        assert.deepStrictEqual(event.device, device);\n        counter++;\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    assert.strictEqual(counter, 1);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "62281a87-8450-46a3-b420-7032f2d0c58b",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                focus_state: 'unfocused'\n            });\n            cp.end();\n        })\n    });\n    let counter = 0;\n    device.on('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'focusState');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'unfocused');\n        assert.strictEqual(event.newValue, NodePyATVFocusState.unfocused);\n        assert.strictEqual(event.value, 'unfocused');\n        assert.strictEqual(event.value, NodePyATVFocusState.unfocused);\n        assert.deepStrictEqual(event.device, device);\n        counter++;\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    assert.strictEqual(counter, 1);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "b85fd0ba-969e-466c-b45c-9a0acf693678",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                output_devices: [{\n                        name: 'Living room',\n                        identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n                    }]\n            });\n            cp.end();\n        })\n    });\n    let counter = 0;\n    device.on('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'outputDevices');\n        assert.strictEqual(event.oldValue, null);\n        assert.deepStrictEqual(event.newValue, [{\n                name: 'Living room',\n                identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n            }]);\n        assert.deepStrictEqual(event.value, [{\n                name: 'Living room',\n                identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n            }]);\n        assert.deepStrictEqual(event.device, device);\n        counter++;\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    assert.strictEqual(counter, 1);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "84022bda-7fb5-455d-8015-b50209d5f119",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                volume: 20.0\n            });\n            cp.end();\n        })\n    });\n    let counter = 0;\n    device.on('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'volume');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 20);\n        assert.strictEqual(event.value, 20);\n        assert.deepStrictEqual(event.device, device);\n        counter++;\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    assert.strictEqual(counter, 1);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "6d3baa52-2acd-494a-b1d4-ad4afabd8c22",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                foo: 'bar'\n            });\n            cp.end();\n        })\n    });\n    device.on('update', event => {\n        assert.fail(`Got an update event for a new field: ${event}`);\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "95a4d07f-d800-4475-a11c-64258e06f339",
                  "parentUUID": "ac73e537-a56c-4930-bc09-1d9eaecba29f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b3c45ae-917c-4810-b1bf-fe3833babccc",
                "2ecdcab3-cd8b-46a8-a2dc-3725211b6699",
                "486b3e06-7411-499a-b589-3214f372bc4e",
                "cef08bfa-f8f4-4f64-8cfc-7fded49f5632",
                "dd627993-4a12-4f91-98ec-793c46685bd4",
                "3e780295-06b7-47bb-aa07-d8d34eeee399",
                "28733317-67e1-431f-8241-ea3603eefd54",
                "62281a87-8450-46a3-b420-7032f2d0c58b",
                "b85fd0ba-969e-466c-b45c-9a0acf693678",
                "84022bda-7fb5-455d-8015-b50209d5f119",
                "6d3baa52-2acd-494a-b1d4-ad4afabd8c22",
                "95a4d07f-d800-4475-a11c-64258e06f339"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39b0ebaa-1050-4443-bad0-34935c6e56f4",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const error = new Error();\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.error(error).end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert.strictEqual(err, error);\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "4da01ff6-cfad-4399-97d7-68274d3ed0a4",
                  "parentUUID": "39b0ebaa-1050-4443-bad0-34935c6e56f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.stderr('Hello World!').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert.ok(err instanceof Error);\n            assert.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "93ef3d4f-fddb-48c7-9b6b-701a60698be6",
                  "parentUUID": "39b0ebaa-1050-4443-bad0-34935c6e56f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('#').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert.ok(err instanceof Error);\n            assert.ok(err.toString().includes('Unable to parse stdout json: SyntaxError'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "cd9c5b4c-5e1c-4bf8-b058-9fd9a207c091",
                  "parentUUID": "39b0ebaa-1050-4443-bad0-34935c6e56f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d0352e49-bda8-49b3-a5b8-3d2b85fc6ccb",
                  "parentUUID": "39b0ebaa-1050-4443-bad0-34935c6e56f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4da01ff6-cfad-4399-97d7-68274d3ed0a4",
                "93ef3d4f-fddb-48c7-9b6b-701a60698be6",
                "cd9c5b4c-5e1c-4bf8-b058-9fd9a207c091"
              ],
              "failures": [],
              "pending": [
                "d0352e49-bda8-49b3-a5b8-3d2b85fc6ccb"
              ],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a5d7e78-016f-4abe-ab0a-504348399841",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "ef6b71ef-0ee0-4036-94bf-a7bf3b2e09b4",
                  "parentUUID": "3a5d7e78-016f-4abe-ab0a-504348399841",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef6b71ef-0ee0-4036-94bf-a7bf3b2e09b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "adec49b2-739e-42fc-8d48-d420fe92ccfc",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert.strictEqual(e, event);\n    assert.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "a3dbfdbc-49f1-4a2e-9ca8-de69cb236571",
                  "parentUUID": "adec49b2-739e-42fc-8d48-d420fe92ccfc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3dbfdbc-49f1-4a2e-9ca8-de69cb236571"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fef397e4-de07-4d22-b642-9049dbbf1056",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "e8ae6c84-e1dc-43fa-a868-f8e58b7dec8e",
                  "parentUUID": "fef397e4-de07-4d22-b642-9049dbbf1056",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8ae6c84-e1dc-43fa-a868-f8e58b7dec8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d584246-da7a-4887-b25d-d6107d6fffda",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert.ok(typeof result, 'number');\nassert.ok(result >= 10);",
                  "err": {},
                  "uuid": "12e67a6b-9145-4cc8-b38b-066ae8e51ea1",
                  "parentUUID": "6d584246-da7a-4887-b25d-d6107d6fffda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12e67a6b-9145-4cc8-b38b-066ae8e51ea1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35c195e7-864f-49c4-bc3b-7b243cfee079",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "5b979452-8d7e-4f62-b480-9619616ca4e0",
                  "parentUUID": "35c195e7-864f-49c4-bc3b-7b243cfee079",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b979452-8d7e-4f62-b480-9619616ca4e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e883cc0a-f7f1-4587-879c-cd1ebe821ede",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listeners('test').length, 1);\nassert.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "19b223ad-f434-4ec7-a439-98b2a6136580",
                  "parentUUID": "e883cc0a-f7f1-4587-879c-cd1ebe821ede",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19b223ad-f434-4ec7-a439-98b2a6136580"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b23ddb4d-2174-41c2-ab1b-2220ea845605",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "1e0ee8d4-3a35-479e-a81d-fe39a8f06c9b",
                  "parentUUID": "b23ddb4d-2174-41c2-ab1b-2220ea845605",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e0ee8d4-3a35-479e-a81d-fe39a8f06c9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9af7c71-7a43-493e-8c2d-e82738e9872b",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "0ad2f2fe-f72b-4651-bd3e-01d137ce0eda",
                  "parentUUID": "e9af7c71-7a43-493e-8c2d-e82738e9872b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ad2f2fe-f72b-4651-bd3e-01d137ce0eda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c09ee673-3642-41f8-bfc4-96388e1c3489",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.rawListeners('test').length, 1);\nassert.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "64ce0839-22e7-4bc4-8a0c-b2247051708c",
                  "parentUUID": "c09ee673-3642-41f8-bfc4-96388e1c3489",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64ce0839-22e7-4bc4-8a0c-b2247051708c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7a29853-f2fe-4b11-9d9d-eeb622d5eaaf",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    assert.deepStrictEqual(device.listenerCount('update'), 1);\n    device.removeListener('update', listener);\n    assert.deepStrictEqual(device.listenerCount('update'), 0);\n});",
                  "err": {},
                  "uuid": "c339331d-6902-4093-a874-bb07103568d2",
                  "parentUUID": "e7a29853-f2fe-4b11-9d9d-eeb622d5eaaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c339331d-6902-4093-a874-bb07103568d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8cd71119-a4c9-4daa-81fc-74b739629faf",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0e010fed-0f41-4017-bcba-f0033cd9b591",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "6a3e21ef-fe0e-403e-b652-8b720d58620e",
                  "parentUUID": "0e010fed-0f41-4017-bcba-f0033cd9b591",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a3e21ef-fe0e-403e-b652-8b720d58620e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7d9041e-6273-421b-97c2-0f87fc56d81b",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "1f407ad5-60e4-42ba-8985-2fd37ff21987",
                  "parentUUID": "e7d9041e-6273-421b-97c2-0f87fc56d81b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f407ad5-60e4-42ba-8985-2fd37ff21987"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6afd1d14-4a41-4b2f-8ef9-72ffccef0954",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "71156bc5-8155-41da-9c70-7b513ec9d8d0",
                  "parentUUID": "6afd1d14-4a41-4b2f-8ef9-72ffccef0954",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71156bc5-8155-41da-9c70-7b513ec9d8d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7893c71f-9805-4ca6-968a-baa494394117",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    allIDs: [\n        'some_id_1',\n        'some_id_2',\n        'some_id_3',\n    ]\n});\nassert.deepStrictEqual(device.allIDs, [\n    'some_id_1',\n    'some_id_2',\n    'some_id_3',\n]);",
                  "err": {},
                  "uuid": "735f953b-a84d-4ce8-b980-01c202777863",
                  "parentUUID": "7893c71f-9805-4ca6-968a-baa494394117",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "735f953b-a84d-4ce8-b980-01c202777863"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc497d9a-2e92-4877-b2de-199777faddb8",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.strictEqual(device.protocol, NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "c0d7a122-3d75-4df3-b233-19b9cf4b9d3e",
                  "parentUUID": "cc497d9a-2e92-4877-b2de-199777faddb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0d7a122-3d75-4df3-b233-19b9cf4b9d3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5f71991-5bc1-46e2-8a50-0c130f04a650",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    mac: 'AA:BB:CC:DD:EE:FF'\n});\nassert.strictEqual(device.mac, 'AA:BB:CC:DD:EE:FF');",
                  "err": {},
                  "uuid": "c2cd7659-5219-4a76-841f-1dd80319d134",
                  "parentUUID": "d5f71991-5bc1-46e2-8a50-0c130f04a650",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2cd7659-5219-4a76-841f-1dd80319d134"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "383f4338-a099-4a71-b449-161f44a1c673",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    model: 'Gen4K'\n});\nassert.strictEqual(device.model, 'Gen4K');",
                  "err": {},
                  "uuid": "31ab277b-4daa-4cb5-afe0-ae7f7738c50a",
                  "parentUUID": "383f4338-a099-4a71-b449-161f44a1c673",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.model, undefined);",
                  "err": {},
                  "uuid": "920c9718-7971-427c-a056-002204259d2e",
                  "parentUUID": "383f4338-a099-4a71-b449-161f44a1c673",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31ab277b-4daa-4cb5-afe0-ae7f7738c50a",
                "920c9718-7971-427c-a056-002204259d2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98234c94-f46f-45cc-b610-97749b9a783d",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    modelName: 'Apple TV 4K'\n});\nassert.strictEqual(device.modelName, 'Apple TV 4K');",
                  "err": {},
                  "uuid": "bd303e3d-d341-4dc3-9a8d-a86e56cabc47",
                  "parentUUID": "98234c94-f46f-45cc-b610-97749b9a783d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.modelName, undefined);",
                  "err": {},
                  "uuid": "b3fe0e15-2bcb-491e-92eb-5b15bc8f9b3b",
                  "parentUUID": "98234c94-f46f-45cc-b610-97749b9a783d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd303e3d-d341-4dc3-9a8d-a86e56cabc47",
                "b3fe0e15-2bcb-491e-92eb-5b15bc8f9b3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e03c541-7033-4f4a-af46-28063ccae997",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    os: 'TvOS'\n});\nassert.strictEqual(device.os, 'TvOS');",
                  "err": {},
                  "uuid": "9e2a189b-7f2a-4a82-b6cf-b949cf548fdb",
                  "parentUUID": "0e03c541-7033-4f4a-af46-28063ccae997",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.os, undefined);",
                  "err": {},
                  "uuid": "f49bce67-39b0-430e-8566-b9d06194bcba",
                  "parentUUID": "0e03c541-7033-4f4a-af46-28063ccae997",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e2a189b-7f2a-4a82-b6cf-b949cf548fdb",
                "f49bce67-39b0-430e-8566-b9d06194bcba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "34003318-4ef1-4b61-9a51-3aa0ab2c8231",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    version: '15.5.1'\n});\nassert.strictEqual(device.version, '15.5.1');",
                  "err": {},
                  "uuid": "edcf7d52-3d8c-4dd6-b3b7-61d67c666597",
                  "parentUUID": "34003318-4ef1-4b61-9a51-3aa0ab2c8231",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.version, undefined);",
                  "err": {},
                  "uuid": "b7e264a9-3154-45bd-b7c8-ed9148b81461",
                  "parentUUID": "34003318-4ef1-4b61-9a51-3aa0ab2c8231",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edcf7d52-3d8c-4dd6-b3b7-61d67c666597",
                "b7e264a9-3154-45bd-b7c8-ed9148b81461"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2270955f-cc8f-4099-8f59-ecb2dd3faf74",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    services: [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]\n});\nassert.deepStrictEqual(device.services, [\n    {\n        protocol: 'mrp',\n        port: 49152\n    },\n    {\n        protocol: 'airplay',\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "d206ad61-5f27-45b2-9f86-ee4b988c2868",
                  "parentUUID": "2270955f-cc8f-4099-8f59-ecb2dd3faf74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.services, undefined);",
                  "err": {},
                  "uuid": "34fe6c07-04f2-407e-86e0-9f41545b6d59",
                  "parentUUID": "2270955f-cc8f-4099-8f59-ecb2dd3faf74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d206ad61-5f27-45b2-9f86-ee4b988c2868",
                "34fe6c07-04f2-407e-86e0-9f41545b6d59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7903491a-0b96-4e80-9be7-d9b869721176",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "1d5f31d4-01df-4bd3-83ed-8c3c83a1ef5a",
                  "parentUUID": "7903491a-0b96-4e80-9be7-d9b869721176",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "d2fe907a-2e5f-4118-ad38-89bf22870b42",
                  "parentUUID": "7903491a-0b96-4e80-9be7-d9b869721176",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "c4f0fb50-e0a3-4dbd-8af5-70a2e4806faa",
                  "parentUUID": "7903491a-0b96-4e80-9be7-d9b869721176",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d5f31d4-01df-4bd3-83ed-8c3c83a1ef5a",
                "d2fe907a-2e5f-4118-ad38-89bf22870b42",
                "c4f0fb50-e0a3-4dbd-8af5-70a2e4806faa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af013f75-a14f-4690-8db5-28deee11266a",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "61c79bd1-d188-43a8-bfb6-c98141df936e",
                  "parentUUID": "af013f75-a14f-4690-8db5-28deee11266a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "a63e4ced-8a3f-4b66-883c-4330bf676999",
                  "parentUUID": "af013f75-a14f-4690-8db5-28deee11266a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "18ab276a-1495-46a5-8aa9-75916ebe89c3",
                  "parentUUID": "af013f75-a14f-4690-8db5-28deee11266a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nassert.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "aa3ed031-849e-4f8c-8575-5af301354f5b",
                  "parentUUID": "af013f75-a14f-4690-8db5-28deee11266a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61c79bd1-d188-43a8-bfb6-c98141df936e",
                "a63e4ced-8a3f-4b66-883c-4330bf676999",
                "18ab276a-1495-46a5-8aa9-75916ebe89c3",
                "aa3ed031-849e-4f8c-8575-5af301354f5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f31e9811-72a5-4e95-b7c3-67340cba6741",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "c4282bc1-bb9e-4b4d-b648-bc7256dda530",
                  "parentUUID": "f31e9811-72a5-4e95-b7c3-67340cba6741",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n};\nconst deviceA = new NodePyATVDevice(config);\nconst deviceB = new NodePyATVDevice(deviceA.toJSON());\nassert.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "a667764e-a9dd-4a6f-8f58-c37178c83de4",
                  "parentUUID": "f31e9811-72a5-4e95-b7c3-67340cba6741",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4282bc1-bb9e-4b4d-b648-bc7256dda530",
                "a667764e-a9dd-4a6f-8f58-c37178c83de4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc959203-4b90-409b-b466-2ce873d0d622",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "3591fde2-46ef-40a6-b387-ea363e51121b",
                  "parentUUID": "dc959203-4b90-409b-b466-2ce873d0d622",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3591fde2-46ef-40a6-b387-ea363e51121b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e025e82-f89e-4e02-b8cd-8c80c0a6e092",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3f88746e-2abb-40e6-9dbc-fdb0dda8d266",
                  "parentUUID": "7e025e82-f89e-4e02-b8cd-8c80c0a6e092",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const result = yield device.getState();\n    assert.deepStrictEqual(result, {\n        dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n        hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n        mediaType: NodePyATVMediaType.video,\n        deviceState: NodePyATVDeviceState.playing,\n        focusState: null,\n        title: 'Solo: A Star Wars Story',\n        artist: null,\n        album: null,\n        genre: null,\n        totalTime: 8097,\n        volume: null,\n        position: 27,\n        shuffle: NodePyATVShuffleState.off,\n        repeat: NodePyATVRepeatState.off,\n        app: 'Disney+',\n        appId: 'com.disney.disneyplus',\n        powerState: null,\n        outputDevices: null\n    });\n});",
                  "err": {},
                  "uuid": "76856e50-4369-4b65-9409-3217adbd535c",
                  "parentUUID": "7e025e82-f89e-4e02-b8cd-8c80c0a6e092",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.getState();\n    }), /Got pyatv Error: invalid credentials: 321/);\n});",
                  "err": {},
                  "uuid": "f03c6c51-2e03-4e36-badd-c9813a0cbb03",
                  "parentUUID": "7e025e82-f89e-4e02-b8cd-8c80c0a6e092",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    const secondResult = yield device.getState();\n    assert.strictEqual(firstResult.dateTime, secondResult.dateTime);\n    assert.strictEqual(executions, 1);\n});",
                  "err": {},
                  "uuid": "c5e2f229-275a-4521-8fbd-fdf6bdbb60b0",
                  "parentUUID": "7e025e82-f89e-4e02-b8cd-8c80c0a6e092",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date(new Date().getTime() - 1000).toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    assert.strictEqual(firstResult.position, 27);\n    const secondResult = yield device.getState();\n    assert.ok(secondResult.position);\n    assert.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\n    assert.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);\n});",
                  "err": {},
                  "uuid": "805a5163-ffb3-4fc5-85cb-8e7f890636db",
                  "parentUUID": "7e025e82-f89e-4e02-b8cd-8c80c0a6e092",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76856e50-4369-4b65-9409-3217adbd535c",
                "f03c6c51-2e03-4e36-badd-c9813a0cbb03",
                "c5e2f229-275a-4521-8fbd-fdf6bdbb60b0",
                "805a5163-ffb3-4fc5-85cb-8e7f890636db"
              ],
              "failures": [],
              "pending": [
                "3f88746e-2abb-40e6-9dbc-fdb0dda8d266"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3c62d702-58f2-40e3-a736-a1285a58bc3d",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                title: 'Solo: A Star Wars Story'\n            });\n        })\n    });\n    assert.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    device.clearState();\n    assert.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    assert.strictEqual(executions, 2);\n});",
                  "err": {},
                  "uuid": "10625054-96f3-4bcd-bc21-549feea4014d",
                  "parentUUID": "3c62d702-58f2-40e3-a736-a1285a58bc3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10625054-96f3-4bcd-bc21-549feea4014d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "54198343-4225-4769-a96f-da11a15bed91",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON()\n            });\n        })\n    });\n    const result = yield device.getDateTime();\n    assert.ok(result instanceof Date);\n});",
                  "err": {},
                  "uuid": "efd4eae8-8248-4078-a47e-c8d7c3d9dee1",
                  "parentUUID": "54198343-4225-4769-a96f-da11a15bed91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "efd4eae8-8248-4078-a47e-c8d7c3d9dee1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c417ad8-a67f-4b38-9085-1ba9070ac814",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                hash: '12345'\n            });\n        })\n    });\n    const result = yield device.getHash();\n    assert.strictEqual(result, '12345');\n});",
                  "err": {},
                  "uuid": "25ac152f-8896-465e-a54c-19c35119b208",
                  "parentUUID": "0c417ad8-a67f-4b38-9085-1ba9070ac814",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25ac152f-8896-465e-a54c-19c35119b208"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1f10626f-9c5d-4eb7-8c47-9e859e098fa6",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                media_type: 'video'\n            });\n        })\n    });\n    const result = yield device.getMediaType();\n    assert.deepStrictEqual(result, NodePyATVMediaType.video);\n    assert.deepStrictEqual(result, 'video');\n});",
                  "err": {},
                  "uuid": "1fdbea80-faf1-416e-a3b6-cbbc29de6ecc",
                  "parentUUID": "1f10626f-9c5d-4eb7-8c47-9e859e098fa6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fdbea80-faf1-416e-a3b6-cbbc29de6ecc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df1d31f4-c2cb-4475-ac7d-6e609b10bcca",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                device_state: 'seeking'\n            });\n        })\n    });\n    const result = yield device.getDeviceState();\n    assert.deepStrictEqual(result, NodePyATVDeviceState.seeking);\n    assert.deepStrictEqual(result, 'seeking');\n});",
                  "err": {},
                  "uuid": "e765aa41-28fc-4d4d-87bd-af5aed5c533d",
                  "parentUUID": "df1d31f4-c2cb-4475-ac7d-6e609b10bcca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e765aa41-28fc-4d4d-87bd-af5aed5c533d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6e732e6-ea7b-4124-9518-b797dbf02d21",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const result = yield device.getTitle();\n    assert.strictEqual(result, 'My Movie');\n});",
                  "err": {},
                  "uuid": "fd0c594b-4cfc-4310-b8a3-098c06578825",
                  "parentUUID": "f6e732e6-ea7b-4124-9518-b797dbf02d21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd0c594b-4cfc-4310-b8a3-098c06578825"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1a36edf-9542-43f4-8796-8f0b20ca9402",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                artist: 'My Artist'\n            });\n        })\n    });\n    const result = yield device.getArtist();\n    assert.strictEqual(result, 'My Artist');\n});",
                  "err": {},
                  "uuid": "fe140f35-ae87-415d-951d-4c9d49e6a8b9",
                  "parentUUID": "a1a36edf-9542-43f4-8796-8f0b20ca9402",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe140f35-ae87-415d-951d-4c9d49e6a8b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93ac0de2-b889-4733-badd-e1478f6d98e3",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                album: 'My ALbum'\n            });\n        })\n    });\n    const result = yield device.getAlbum();\n    assert.strictEqual(result, 'My ALbum');\n});",
                  "err": {},
                  "uuid": "bc22b066-6d82-42ae-8c9c-6acb76f76013",
                  "parentUUID": "93ac0de2-b889-4733-badd-e1478f6d98e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc22b066-6d82-42ae-8c9c-6acb76f76013"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b1707e03-cea8-4afc-9a3f-67521d2eb730",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                genre: 'My Genre'\n            });\n        })\n    });\n    const result = yield device.getGenre();\n    assert.strictEqual(result, 'My Genre');\n});",
                  "err": {},
                  "uuid": "d42cd200-5129-4543-bed7-86410b08c4dc",
                  "parentUUID": "b1707e03-cea8-4afc-9a3f-67521d2eb730",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d42cd200-5129-4543-bed7-86410b08c4dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "875b0781-d959-4253-9fa7-4e312ed4cdd3",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                total_time: 45\n            });\n        })\n    });\n    const result = yield device.getTotalTime();\n    assert.strictEqual(result, 45);\n});",
                  "err": {},
                  "uuid": "7233f844-a04a-4def-89a0-48aca9f5e0ab",
                  "parentUUID": "875b0781-d959-4253-9fa7-4e312ed4cdd3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7233f844-a04a-4def-89a0-48aca9f5e0ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fba27f8-6989-4aab-ac02-0ebb2c5fcc00",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                position: 30\n            });\n        })\n    });\n    const result = yield device.getPosition();\n    assert.strictEqual(result, 30);\n});",
                  "err": {},
                  "uuid": "b8546123-ac1b-46c0-9a18-05e40a3ee9ef",
                  "parentUUID": "4fba27f8-6989-4aab-ac02-0ebb2c5fcc00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8546123-ac1b-46c0-9a18-05e40a3ee9ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "88bb8fce-3ab7-4c39-a1ee-6a89b0462426",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                shuffle: 'songs'\n            });\n        })\n    });\n    const result = yield device.getShuffle();\n    assert.deepStrictEqual(result, NodePyATVShuffleState.songs);\n    assert.deepStrictEqual(result, 'songs');\n});",
                  "err": {},
                  "uuid": "b18480c3-4bc8-4528-b39d-ef724358df7f",
                  "parentUUID": "88bb8fce-3ab7-4c39-a1ee-6a89b0462426",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b18480c3-4bc8-4528-b39d-ef724358df7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dbceb665-a416-4a68-bde0-33af76ecf2c3",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                repeat: 'all'\n            });\n        })\n    });\n    const result = yield device.getRepeat();\n    assert.deepStrictEqual(result, NodePyATVRepeatState.all);\n    assert.deepStrictEqual(result, 'all');\n});",
                  "err": {},
                  "uuid": "b91c9c8d-f81c-4246-bec6-c9e96913f55c",
                  "parentUUID": "dbceb665-a416-4a68-bde0-33af76ecf2c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b91c9c8d-f81c-4246-bec6-c9e96913f55c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f09ecb6c-4839-405e-a735-3c722c3a4cef",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app: 'My App'\n            });\n        })\n    });\n    const result = yield device.getApp();\n    assert.strictEqual(result, 'My App');\n});",
                  "err": {},
                  "uuid": "9a10672e-8dc6-4d01-8b06-1b0b67f80afb",
                  "parentUUID": "f09ecb6c-4839-405e-a735-3c722c3a4cef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a10672e-8dc6-4d01-8b06-1b0b67f80afb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "214a0520-6b97-4a03-a63a-e439a2fa83aa",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app_id: 'app.example.com'\n            });\n        })\n    });\n    const result = yield device.getAppId();\n    assert.strictEqual(result, 'app.example.com');\n});",
                  "err": {},
                  "uuid": "8efe5ea0-e23c-484e-9bd4-a9dae86fcea7",
                  "parentUUID": "214a0520-6b97-4a03-a63a-e439a2fa83aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8efe5ea0-e23c-484e-9bd4-a9dae86fcea7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d5679df-64d8-4326-92d6-c5d51dc1376e",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), ' +\n                'App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), ' +\n                'App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App Store ' +\n                '(com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), ' +\n                'App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ ' +\n                '(com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE ' +\n                '(tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek ' +\n                '(de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), ' +\n                'App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), ' +\n                'App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), ' +\n                'App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), ' +\n                'App: Musik (com.apple.TVMusic)');\n        })\n    });\n    const result = yield device.listApps();\n    assert.strictEqual(result.length, 25);\n    assert.strictEqual(result[0].id, 'com.apple.Fitness');\n    assert.strictEqual(result[0].name, 'Fitness');\n});",
                  "err": {},
                  "uuid": "92f2674b-09a9-4717-94bb-84a0f21db454",
                  "parentUUID": "9d5679df-64d8-4326-92d6-c5d51dc1376e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92f2674b-09a9-4717-94bb-84a0f21db454"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71e62c56-7d0c-4d4c-84f7-749baf9511aa",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    yield device.pressKey(NodePyATVKeys.home);\n});",
                  "err": {},
                  "uuid": "943cc2a8-cf3b-4e10-b852-2d464237fe94",
                  "parentUUID": "71e62c56-7d0c-4d4c-84f7-749baf9511aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2'\n    });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        yield device.pressKey('foo');\n    }), /Unsupported key value foo/);\n});",
                  "err": {},
                  "uuid": "902bf98b-5187-48c5-9a60-ef4496a600d4",
                  "parentUUID": "71e62c56-7d0c-4d4c-84f7-749baf9511aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"failure\"}');\n        })\n    });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.pressKey(NodePyATVKeys.home);\n    }), /Unable to parse pyatv response/);\n});",
                  "err": {},
                  "uuid": "96d59a14-8a98-4943-8457-0aff2e698a7d",
                  "parentUUID": "71e62c56-7d0c-4d4c-84f7-749baf9511aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "943cc2a8-cf3b-4e10-b852-2d464237fe94",
                "902bf98b-5187-48c5-9a60-ef4496a600d4",
                "96d59a14-8a98-4943-8457-0aff2e698a7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "92cb09a5-e640-4c8f-a7aa-2e925aea20c6",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "ed88dffa-10b8-439d-a058-a30b5aade122",
                  "parentUUID": "92cb09a5-e640-4c8f-a7aa-2e925aea20c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed88dffa-10b8-439d-a058-a30b5aade122"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b504f965-41a9-4ed0-adfd-5179873c53b6",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "6ca022b0-99b8-4016-ab2c-b2ea625af5f4",
                  "parentUUID": "b504f965-41a9-4ed0-adfd-5179873c53b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ca022b0-99b8-4016-ab2c-b2ea625af5f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16fcac9d-cc66-454b-aa61-0ea5e8d62e22",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "5121dc8c-6ae2-456d-80c1-95d34919db0a",
                  "parentUUID": "16fcac9d-cc66-454b-aa61-0ea5e8d62e22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5121dc8c-6ae2-456d-80c1-95d34919db0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b6d0cbf7-13c2-46e5-8489-613cde0b3c4d",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "eb726923-6e61-445d-b1d3-648ee2d7fc58",
                  "parentUUID": "b6d0cbf7-13c2-46e5-8489-613cde0b3c4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb726923-6e61-445d-b1d3-648ee2d7fc58"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7eba0891-e63a-473f-a528-282682fc4e53",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "b31e2d20-cf99-419b-8cb5-1e59d01084bd",
                  "parentUUID": "7eba0891-e63a-473f-a528-282682fc4e53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b31e2d20-cf99-419b-8cb5-1e59d01084bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "571a3a6d-d764-4604-a4c0-8dd6ab66db3a",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "301ad648-d1ab-4890-bf33-33e19b662fe4",
                  "parentUUID": "571a3a6d-d764-4604-a4c0-8dd6ab66db3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "301ad648-d1ab-4890-bf33-33e19b662fe4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4daeb7a7-30eb-4b6d-84fd-bc03500eceb2",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "e8357874-9110-43f1-9ac7-17564166c75c",
                  "parentUUID": "4daeb7a7-30eb-4b6d-84fd-bc03500eceb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8357874-9110-43f1-9ac7-17564166c75c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77cb671d-777c-40fe-8e50-2571e3788389",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "e0dc9fa7-cbe0-47d1-b4bc-7a1a24b92c72",
                  "parentUUID": "77cb671d-777c-40fe-8e50-2571e3788389",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0dc9fa7-cbe0-47d1-b4bc-7a1a24b92c72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73c8d161-3870-4430-a458-c36e33879056",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c98ace35-2dde-4ac6-ae57-bd448cb07983",
                  "parentUUID": "73c8d161-3870-4430-a458-c36e33879056",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c98ace35-2dde-4ac6-ae57-bd448cb07983"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b58059da-8a05-486e-8b92-e18296e20bf6",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "bdac8f40-d33d-48ca-b4ac-649eadf592cd",
                  "parentUUID": "b58059da-8a05-486e-8b92-e18296e20bf6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdac8f40-d33d-48ca-b4ac-649eadf592cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39f3e5da-812d-4e61-adea-3719ec814d0e",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "ff5064a3-6c57-4141-88c9-7a402fe53114",
                  "parentUUID": "39f3e5da-812d-4e61-adea-3719ec814d0e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff5064a3-6c57-4141-88c9-7a402fe53114"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "227c6a6f-78f7-476c-adb0-d0d73ec4264c",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "790d84f8-4e1d-497d-a89b-326e885b09f1",
                  "parentUUID": "227c6a6f-78f7-476c-adb0-d0d73ec4264c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "790d84f8-4e1d-497d-a89b-326e885b09f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c4c6854-1651-492c-9ebe-47c57bb4c594",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "449b0b23-1237-4a30-99bb-869d9dd75847",
                  "parentUUID": "6c4c6854-1651-492c-9ebe-47c57bb4c594",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "449b0b23-1237-4a30-99bb-869d9dd75847"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6b53eac-a3fe-468d-92cd-17d58cd0f438",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "7b0a35c8-45e5-4db3-9ba9-a0f39906e686",
                  "parentUUID": "d6b53eac-a3fe-468d-92cd-17d58cd0f438",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b0a35c8-45e5-4db3-9ba9-a0f39906e686"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c3db77c-3be3-419b-af95-3cd8533ebbfd",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "76b3d8b8-e73f-4928-94cf-d5d55dc1ff02",
                  "parentUUID": "1c3db77c-3be3-419b-af95-3cd8533ebbfd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76b3d8b8-e73f-4928-94cf-d5d55dc1ff02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52cc07cf-bef3-49f8-b74f-abe6bdbde0b5",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "deb9f742-81a2-4a65-b6fa-6e7b6719d77b",
                  "parentUUID": "52cc07cf-bef3-49f8-b74f-abe6bdbde0b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "deb9f742-81a2-4a65-b6fa-6e7b6719d77b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e30708a5-8d8d-4265-84bf-50905414b968",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "2dd11fd9-2664-4513-ae06-7baeb2db3bb4",
                  "parentUUID": "e30708a5-8d8d-4265-84bf-50905414b968",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dd11fd9-2664-4513-ae06-7baeb2db3bb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "62c02ff1-ae92-4b74-b172-edc296fc9833",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "3abdf9c5-cd26-43dc-91f8-0023c2aa99a6",
                  "parentUUID": "62c02ff1-ae92-4b74-b172-edc296fc9833",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3abdf9c5-cd26-43dc-91f8-0023c2aa99a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a45509f4-917e-44b9-acad-f3b556ded9aa",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c03c724c-ebd8-490b-9129-b8e4c0cd3e1b",
                  "parentUUID": "a45509f4-917e-44b9-acad-f3b556ded9aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c03c724c-ebd8-490b-9129-b8e4c0cd3e1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1abd8482-cdb0-409a-9ce3-b49984b5f712",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "f15bd956-0204-4aa9-a32d-fea9185fb1b0",
                  "parentUUID": "1abd8482-cdb0-409a-9ce3-b49984b5f712",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f15bd956-0204-4aa9-a32d-fea9185fb1b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23902d7c-cfc8-4a53-a7cd-e3a85c1da76d",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "4835ad1d-f6a9-4a07-898b-577c0c03c157",
                  "parentUUID": "23902d7c-cfc8-4a53-a7cd-e3a85c1da76d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4835ad1d-f6a9-4a07-898b-577c0c03c157"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32d93382-fbf4-4327-add9-a2f37870c7ec",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "304b2359-639d-423e-8794-deac6e4838bb",
                  "parentUUID": "32d93382-fbf4-4327-add9-a2f37870c7ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "304b2359-639d-423e-8794-deac6e4838bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc1afd72-bf44-4825-8191-fbb9b9d77326",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "ae8dc8b3-6212-4bfe-a5aa-948aa1b8f185",
                  "parentUUID": "cc1afd72-bf44-4825-8191-fbb9b9d77326",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae8dc8b3-6212-4bfe-a5aa-948aa1b8f185"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "649a8529-b1fc-42eb-b12c-012e3fcbfc87",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('');\n        })\n    });\n    yield device.launchApp('com.apple.TVShows');\n});",
                  "err": {},
                  "uuid": "63630a44-5ff1-4f71-8b3e-02b6ac7574ec",
                  "parentUUID": "649a8529-b1fc-42eb-b12c-012e3fcbfc87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63630a44-5ff1-4f71-8b3e-02b6ac7574ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "52d0e4c0-b1b4-4653-80bb-0fde55c82e03",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c4584deb-83f7-4920-9443-4e886fde51e0",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 750,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(4000);\n    const result = yield NodePyATVInstance.version();\n    if (result.pyatv === null) {\n        throw new Error('No version found for pyatv. Is it installed in test environment?');\n    }\n    assert.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\n    assert.ok(result.pyatv.length >= 5, 'result.pyatv has content');\n    assert.strictEqual(result.module, version);\n});",
                  "err": {},
                  "uuid": "4bb66c95-cd0a-4b8b-a108-ce421d57255d",
                  "parentUUID": "c4584deb-83f7-4920-9443-4e886fde51e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => {\n            cp.code(1);\n            cp.end('atvremote 0.7.4');\n        })\n    });\n    assert.ok(result.pyatv);\n    assert.strictEqual(result.pyatv, '0.7.4');\n});",
                  "err": {},
                  "uuid": "ed4a2d1b-36a3-4b98-8606-34235b15e43b",
                  "parentUUID": "c4584deb-83f7-4920-9443-4e886fde51e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        noColors: true,\n        spawn: createFakeSpawn(cp => cp.code(1).end())\n    });\n    assert.strictEqual(result.module, version);\n});",
                  "err": {},
                  "uuid": "d60785ea-28ce-4328-b453-a79fc5c5763b",
                  "parentUUID": "c4584deb-83f7-4920-9443-4e886fde51e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.version({\n        atvremotePath: '/foo/bar',\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), '/foo/bar');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "624c81c8-90d8-470c-9076-6bf93290c6cb",
                  "parentUUID": "c4584deb-83f7-4920-9443-4e886fde51e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.version({\n        debug: true,\n        spawn: createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "1ac0ed61-a6fa-4ccb-ae28-3de251dedc2d",
                  "parentUUID": "c4584deb-83f7-4920-9443-4e886fde51e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.version({\n        debug: () => {\n            // no debug log\n        },\n        noColors: true,\n        spawn: createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "a7b47f99-ae12-4dea-aee2-585d35897a8d",
                  "parentUUID": "c4584deb-83f7-4920-9443-4e886fde51e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n    });\n    assert.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "3e5899c4-87b8-49d6-bc30-6e6714f97957",
                  "parentUUID": "c4584deb-83f7-4920-9443-4e886fde51e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).end();\n        })\n    });\n    assert.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "90523aa4-d5b3-45a9-9cec-33816b2a35c2",
                  "parentUUID": "c4584deb-83f7-4920-9443-4e886fde51e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('atvremote 42').code(1).end();\n        })\n    });\n    assert.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "41d106e5-956a-447e-9fbd-6eb5a4b526aa",
                  "parentUUID": "c4584deb-83f7-4920-9443-4e886fde51e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4bb66c95-cd0a-4b8b-a108-ce421d57255d",
                "ed4a2d1b-36a3-4b98-8606-34235b15e43b",
                "d60785ea-28ce-4328-b453-a79fc5c5763b",
                "624c81c8-90d8-470c-9076-6bf93290c6cb",
                "1ac0ed61-a6fa-4ccb-ae28-3de251dedc2d",
                "a7b47f99-ae12-4dea-aee2-585d35897a8d",
                "3e5899c4-87b8-49d6-bc30-6e6714f97957",
                "90523aa4-d5b3-45a9-9cec-33816b2a35c2",
                "41d106e5-956a-447e-9fbd-6eb5a4b526aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 762,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8497bef9-0f20-45dc-b8f6-2dbc551a76c0",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5764,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(12000);\n    yield NodePyATVInstance.check();\n});",
                  "err": {},
                  "uuid": "8b85452f-1592-4df4-8163-47701e1dd863",
                  "parentUUID": "8497bef9-0f20-45dc-b8f6-2dbc551a76c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.check({\n            spawn: createFakeSpawn(cp => {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "406a342a-8e22-4521-a2e0-2f32fa075ab6",
                  "parentUUID": "8497bef9-0f20-45dc-b8f6-2dbc551a76c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.check({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout('atvremote 0.5.1').code(1).end();\n            })\n        });\n    }), /Found pyatv, but unforunately it's too old. Please update pyatv./);\n});",
                  "err": {},
                  "uuid": "ee0ea740-9b8f-47da-8dbb-b05291053253",
                  "parentUUID": "8497bef9-0f20-45dc-b8f6-2dbc551a76c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let i = 0;\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.check({\n            spawn: createFakeSpawn(cp => {\n                if (i === 0) {\n                    cp.stdout('atvremote 0.7.0').code(1).end();\n                    i++;\n                }\n                else {\n                    cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n                }\n            })\n        });\n    }), /Unable to scan for devices/);\n});",
                  "err": {},
                  "uuid": "021bf351-900b-4529-97bb-eae0547a6133",
                  "parentUUID": "8497bef9-0f20-45dc-b8f6-2dbc551a76c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b85452f-1592-4df4-8163-47701e1dd863",
                "406a342a-8e22-4521-a2e0-2f32fa075ab6",
                "ee0ea740-9b8f-47da-8dbb-b05291053253",
                "021bf351-900b-4529-97bb-eae0547a6133"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5771,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5379,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(10000);\n    const result = yield NodePyATVInstance.find();\n    assert.ok(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "b2c35809-aeae-4c9a-900c-46e17dd45946",
                  "parentUUID": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.find({\n        atvscriptPath: '/foo/bar',\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), '/foo/bar');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "caa16713-5eda-479f-839a-63ac26552c5a",
                  "parentUUID": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stderr('Hello World!').code(1).end();\n            })\n        });\n    }), /Unable to execute request/);\n});",
                  "err": {},
                  "uuid": "be88ed1a-0fa1-42fb-9493-f392eb1c585f",
                  "parentUUID": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.error(new Error('Hello world!')).code(1).end();\n            })\n        });\n    }), /Hello world!/);\n});",
                  "err": {},
                  "uuid": "723527eb-e624-4fec-a80f-cc32cb64b9ac",
                  "parentUUID": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout(JSON.stringify({\n                    'result': 'success',\n                    'datetime': '2020-11-06T20:47:30.840022+01:00',\n                    'devices': []\n                }).substr(1)).end();\n            })\n        });\n    }), /Unable to parse result/);\n});",
                  "err": {},
                  "uuid": "1a41fc1d-c6b5-4c3b-aa96-f3183e780121",
                  "parentUUID": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'error'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "68f0dde2-9f6b-44d3-a34e-d02c9eaf4305",
                  "parentUUID": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'success'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "f16f9974-9f9f-4672-aff2-2dbb32cdbc62",
                  "parentUUID": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                devices: [\n                    {\n                        name: 'Vardagsrum',\n                        address: '10.0.10.81',\n                        identifier: 'xxx'\n                    }\n                ]\n            }).code(1).end();\n        })\n    });\n    assert.strictEqual(devices.length, 1);\n    assert.strictEqual(devices[0].name, 'Vardagsrum');\n    assert.strictEqual(devices[0].host, '10.0.10.81');\n    assert.strictEqual(devices[0].id, 'xxx');\n    assert.strictEqual(devices[0].model, undefined);\n    assert.strictEqual(devices[0].modelName, undefined);\n    assert.strictEqual(devices[0].os, undefined);\n    assert.strictEqual(devices[0].version, undefined);\n    assert.deepStrictEqual(devices[0].services, undefined);\n});",
                  "err": {},
                  "uuid": "4f580254-c912-48b7-8384-1a5a582a282a",
                  "parentUUID": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                devices: [\n                    {\n                        name: 'Vardagsrum',\n                        address: '10.0.10.81',\n                        identifier: 'xxx',\n                        device_info: {\n                            'model': 'Gen4K',\n                            'model_str': 'Apple TV 4K',\n                            'operating_system': 'TvOS',\n                            'version': '15.5.1'\n                        },\n                        services: [\n                            {\n                                protocol: 'mrp',\n                                port: 49152\n                            },\n                            {\n                                protocol: 'airplay',\n                                port: 7000\n                            }\n                        ]\n                    }\n                ]\n            }).code(1).end();\n        })\n    });\n    assert.strictEqual(devices.length, 1);\n    assert.strictEqual(devices[0].name, 'Vardagsrum');\n    assert.strictEqual(devices[0].host, '10.0.10.81');\n    assert.strictEqual(devices[0].id, 'xxx');\n    assert.strictEqual(devices[0].model, 'Gen4K');\n    assert.strictEqual(devices[0].modelName, 'Apple TV 4K');\n    assert.strictEqual(devices[0].os, 'TvOS');\n    assert.strictEqual(devices[0].version, '15.5.1');\n    assert.deepStrictEqual(devices[0].services, [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]);\n});",
                  "err": {},
                  "uuid": "0fb18f27-3284-4cc2-9bc1-9ea6279fa86a",
                  "parentUUID": "4807d7bf-34f7-41d0-98d5-de65eff7bf9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2c35809-aeae-4c9a-900c-46e17dd45946",
                "caa16713-5eda-479f-839a-63ac26552c5a",
                "be88ed1a-0fa1-42fb-9493-f392eb1c585f",
                "723527eb-e624-4fec-a80f-cc32cb64b9ac",
                "1a41fc1d-c6b5-4c3b-aa96-f3183e780121",
                "68f0dde2-9f6b-44d3-a34e-d02c9eaf4305",
                "f16f9974-9f9f-4672-aff2-2dbb32cdbc62",
                "4f580254-c912-48b7-8384-1a5a582a282a",
                "0fb18f27-3284-4cc2-9bc1-9ea6279fa86a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5390,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8a2d3894-c1d1-4a4d-9395-4f4eb08f5595",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = NodePyATVInstance.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert.strictEqual(device.host, '192.168.178.6');\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "d01a5e20-218f-4ae2-a5bd-ba0ce5fcb0ad",
                  "parentUUID": "8a2d3894-c1d1-4a4d-9395-4f4eb08f5595",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d01a5e20-218f-4ae2-a5bd-ba0ce5fcb0ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77cd3e00-cf8c-4891-97ae-6a30249b0536",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ atvremotePath: 'test' });\n    yield i.version({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "ce30a54f-76b7-4774-808d-6763a58a0053",
                  "parentUUID": "77cd3e00-cf8c-4891-97ae-6a30249b0536",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce30a54f-76b7-4774-808d-6763a58a0053"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b32b4969-11f3-4c38-8f11-5bc9dfb1e30b",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ atvremotePath: 'test' });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield i.check({\n            spawn: createFakeSpawn(cp => {\n                assert.strictEqual(cp.cmd(), 'test');\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "ca9524c4-e843-4074-9aa0-c11b16b5cb2a",
                  "parentUUID": "b32b4969-11f3-4c38-8f11-5bc9dfb1e30b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca9524c4-e843-4074-9aa0-c11b16b5cb2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6263926-ea3c-4bfe-84c9-3f5e3c7208d7",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ atvscriptPath: 'test' });\n    yield i.find({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "b9e7a723-b8ba-4a69-b09f-460a9961077e",
                  "parentUUID": "f6263926-ea3c-4bfe-84c9-3f5e3c7208d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9e7a723-b8ba-4a69-b09f-460a9961077e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "20f86e62-e492-4281-9907-24aea46c7036",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ debug: true });\n    const d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\n    assert.deepStrictEqual(d.debug, true);\n});",
                  "err": {},
                  "uuid": "c7ce4783-292f-4b1f-bfee-5ed1766a6ea1",
                  "parentUUID": "20f86e62-e492-4281-9907-24aea46c7036",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7ce4783-292f-4b1f-bfee-5ed1766a6ea1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5319d5f8-3154-4827-859e-23f3f4824def",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol);",
                  "err": {},
                  "uuid": "e8426ba5-4f6a-480a-bbb6-c2c43b9cd8a1",
                  "parentUUID": "5319d5f8-3154-4827-859e-23f3f4824def",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType);",
                  "err": {},
                  "uuid": "8e535ce3-c1c6-4936-9753-c21ef5461cb0",
                  "parentUUID": "5319d5f8-3154-4827-859e-23f3f4824def",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "71faabf1-6a35-42fb-95fe-f940dd377761",
                  "parentUUID": "5319d5f8-3154-4827-859e-23f3f4824def",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "bfa991d5-3116-4798-81f7-2b4c4a3c497c",
                  "parentUUID": "5319d5f8-3154-4827-859e-23f3f4824def",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "76f2822e-7d83-4ba0-9c61-6dbcc0bf5dbd",
                  "parentUUID": "5319d5f8-3154-4827-859e-23f3f4824def",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "9f02c9be-eebf-4221-b418-4f759f5a5d15",
                  "parentUUID": "5319d5f8-3154-4827-859e-23f3f4824def",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys);",
                  "err": {},
                  "uuid": "e2deac7b-e763-4ced-b85b-78c9269699ee",
                  "parentUUID": "5319d5f8-3154-4827-859e-23f3f4824def",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState);",
                  "err": {},
                  "uuid": "acc981ce-1230-4951-8124-499cf8129517",
                  "parentUUID": "5319d5f8-3154-4827-859e-23f3f4824def",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState);",
                  "err": {},
                  "uuid": "c86d48ca-f835-413f-8b6e-e81b31821e64",
                  "parentUUID": "5319d5f8-3154-4827-859e-23f3f4824def",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8426ba5-4f6a-480a-bbb6-c2c43b9cd8a1",
                "8e535ce3-c1c6-4936-9753-c21ef5461cb0",
                "71faabf1-6a35-42fb-95fe-f940dd377761",
                "bfa991d5-3116-4798-81f7-2b4c4a3c497c",
                "76f2822e-7d83-4ba0-9c61-6dbcc0bf5dbd",
                "9f02c9be-eebf-4221-b418-4f759f5a5d15",
                "e2deac7b-e763-4ced-b85b-78c9269699ee",
                "acc981ce-1230-4951-8124-499cf8129517",
                "c86d48ca-f835-413f-8b6e-e81b31821e64"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa362d83-e4c9-48a8-bec9-04e8b252744d",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "20e58c17-ff0a-4be9-a2ac-f0e4b2f7e38b",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = addRequestId();\nassert.strictEqual(typeof id, 'string');\nremoveRequestId(id);",
                  "err": {},
                  "uuid": "7060d134-6448-458a-b48c-773dceed7f71",
                  "parentUUID": "20e58c17-ff0a-4be9-a2ac-f0e4b2f7e38b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId('FOO');",
                  "err": {},
                  "uuid": "670b8a54-9eb2-40a4-a701-586c2e1aeb8f",
                  "parentUUID": "20e58c17-ff0a-4be9-a2ac-f0e4b2f7e38b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7060d134-6448-458a-b48c-773dceed7f71",
                "670b8a54-9eb2-40a4-a701-586c2e1aeb8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9eb6e048-fb33-4dc7-a78a-c2acdf57599c",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "7b848a40-5474-4fb1-b387-37e50a3ebb47",
                  "parentUUID": "9eb6e048-fb33-4dc7-a78a-c2acdf57599c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "9136deae-8857-44fb-8fae-f1a29e9be0f4",
                  "parentUUID": "9eb6e048-fb33-4dc7-a78a-c2acdf57599c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "c429678b-e085-48bc-966d-3dc7efb9cc6f",
                  "parentUUID": "9eb6e048-fb33-4dc7-a78a-c2acdf57599c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "7a03a196-0bb6-4555-a056-9a759365c02b",
                  "parentUUID": "9eb6e048-fb33-4dc7-a78a-c2acdf57599c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "57c988ac-d2ea-4fe0-b3e1-4c2dceb28ce8",
                  "parentUUID": "9eb6e048-fb33-4dc7-a78a-c2acdf57599c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b848a40-5474-4fb1-b387-37e50a3ebb47",
                "9136deae-8857-44fb-8fae-f1a29e9be0f4",
                "c429678b-e085-48bc-966d-3dc7efb9cc6f",
                "7a03a196-0bb6-4555-a056-9a759365c02b",
                "57c988ac-d2ea-4fe0-b3e1-4c2dceb28ce8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a751bcd3-dc4b-4bec-b52a-fde06ce9f770",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "5a9b54c0-37ee-4395-913b-747d7c63896b",
                  "parentUUID": "a751bcd3-dc4b-4bec-b52a-fde06ce9f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "1222ed39-1072-4cdc-94ec-331a07f75c29",
                  "parentUUID": "a751bcd3-dc4b-4bec-b52a-fde06ce9f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "26239f63-dec6-41c4-a52f-1513287163bf",
                  "parentUUID": "a751bcd3-dc4b-4bec-b52a-fde06ce9f770",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "43cce3b9-dd88-4879-9023-f14f9cf7ffc4",
                  "parentUUID": "a751bcd3-dc4b-4bec-b52a-fde06ce9f770",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a9b54c0-37ee-4395-913b-747d7c63896b",
                "1222ed39-1072-4cdc-94ec-331a07f75c29",
                "26239f63-dec6-41c4-a52f-1513287163bf",
                "43cce3b9-dd88-4879-9023-f14f9cf7ffc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36ac19c6-4bf4-4555-b0f0-3a4fc9df579b",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield getParameters();\n    assert.deepEqual(result, []);\n});",
                  "err": {},
                  "uuid": "dfb04ef4-9f4c-4cf3-a507-dd55f4b929cd",
                  "parentUUID": "36ac19c6-4bf4-4555-b0f0-3a4fc9df579b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield getParameters({\n        host: '192.168.178.2'\n    });\n    assert.deepEqual(result, ['-s', '192.168.178.2']);\n});",
                  "err": {},
                  "uuid": "aa838154-a4d0-4734-bf3e-4f321c8cb15f",
                  "parentUUID": "36ac19c6-4bf4-4555-b0f0-3a4fc9df579b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield getParameters({\n        hosts: ['192.168.178.2', '192.168.178.3'],\n        id: '****',\n        protocol: NodePyATVProtocol.mrp,\n        dmapCredentials: '****',\n        mrpCredentials: '****',\n        airplayCredentials: '****',\n        companionCredentials: '1234',\n        raopCredentials: '::foo:'\n    });\n    assert.deepEqual(result, [\n        '-s', '192.168.178.2,192.168.178.3',\n        '-i', '****',\n        '--protocol', 'mrp',\n        '--dmap-credentials', '****',\n        '--mrp-credentials', '****',\n        '--airplay-credentials', '****',\n        '--companion-credentials', '1234',\n        '--raop-credentials', '::foo:'\n    ]);\n});",
                  "err": {},
                  "uuid": "ca69a8a1-829f-4e50-98c6-3205eb7d4293",
                  "parentUUID": "36ac19c6-4bf4-4555-b0f0-3a4fc9df579b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfb04ef4-9f4c-4cf3-a507-dd55f4b929cd",
                "aa838154-a4d0-4734-bf3e-4f321c8cb15f",
                "ca69a8a1-829f-4e50-98c6-3205eb7d4293"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6b0ec85-68e8-4e25-84e9-7b3eb322da8b",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "27695a81-ae07-48bd-8c18-119036c75261",
                  "parentUUID": "f6b0ec85-68e8-4e25-84e9-7b3eb322da8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = parseState(null, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "8047dee7-be09-4a81-9611-f114f029df42",
                  "parentUUID": "f6b0ec85-68e8-4e25-84e9-7b3eb322da8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "186ca2a3-438e-42bf-aed4-a9631447dd33",
                  "parentUUID": "f6b0ec85-68e8-4e25-84e9-7b3eb322da8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert.throws(() => {\n    parseState(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "7c19da0a-9045-428a-bd16-124e50239411",
                  "parentUUID": "f6b0ec85-68e8-4e25-84e9-7b3eb322da8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "63411313-29f2-4bc0-9990-618d4cac1cb7",
                  "parentUUID": "f6b0ec85-68e8-4e25-84e9-7b3eb322da8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "da7ed84a-c8b5-4364-95d7-3d8c1827e0be",
                  "parentUUID": "f6b0ec85-68e8-4e25-84e9-7b3eb322da8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "c35519d3-daa5-427a-a056-bb82c85bc0c3",
                  "parentUUID": "f6b0ec85-68e8-4e25-84e9-7b3eb322da8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27695a81-ae07-48bd-8c18-119036c75261",
                "8047dee7-be09-4a81-9611-f114f029df42",
                "186ca2a3-438e-42bf-aed4-a9631447dd33",
                "7c19da0a-9045-428a-bd16-124e50239411",
                "63411313-29f2-4bc0-9990-618d4cac1cb7",
                "da7ed84a-c8b5-4364-95d7-3d8c1827e0be",
                "c35519d3-daa5-427a-a056-bb82c85bc0c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}