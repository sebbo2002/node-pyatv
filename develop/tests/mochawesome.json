{
  "stats": {
    "suites": 102,
    "tests": 174,
    "passes": 172,
    "pending": 2,
    "failures": 0,
    "start": "2025-05-19T17:29:27.302Z",
    "end": "2025-05-19T17:29:39.534Z",
    "duration": 12232,
    "testsRegistered": 174,
    "passPercent": 100,
    "pendingPercent": 1.1494252873563218,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a3e04b2b-dd42-46e6-a433-12e956f718b5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b227e651-91b1-4882-bd1d-ad1c05d1f4c1",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eb72ea8d-fb05-45e5-adcd-af58f5590c64",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "b8d01eab-98f2-48c4-8dcf-296b2ac1e703",
                  "parentUUID": "eb72ea8d-fb05-45e5-adcd-af58f5590c64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8d01eab-98f2-48c4-8dcf-296b2ac1e703"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b93f4cf6-e89f-48da-a0f9-43541bcef0b8",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "584bcfe4-d2dc-442c-8844-54bb7ed2cb11",
                  "parentUUID": "b93f4cf6-e89f-48da-a0f9-43541bcef0b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "584bcfe4-d2dc-442c-8844-54bb7ed2cb11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "578d996e-24eb-4ed4-a694-9f9a27397738",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "265fea5e-1f79-475a-8e07-a66ce38ecc49",
                  "parentUUID": "578d996e-24eb-4ed4-a694-9f9a27397738",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "265fea5e-1f79-475a-8e07-a66ce38ecc49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "951265b2-39f0-469e-ab62-421210703bed",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "e4efacbc-18fc-4f04-8aae-9f6cec67b08d",
                  "parentUUID": "951265b2-39f0-469e-ab62-421210703bed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4efacbc-18fc-4f04-8aae-9f6cec67b08d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99aac6f0-859d-47a5-a645-2f14cb9bf609",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new NodePyATVDeviceEvent({device,key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "52d26f04-79c9-454d-add5-002bddfd3ecc",
                  "parentUUID": "99aac6f0-859d-47a5-a645-2f14cb9bf609",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52d26f04-79c9-454d-add5-002bddfd3ecc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5ff99d9-723f-4f84-aa73-987935199406",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3fccde13-c0be-413e-a491-c162a3dd83ce",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "46a04b79-3309-4c00-92d3-105aa775abfd",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "6e2d05b2-5c1a-4862-91c3-d646c0e040eb",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);assert.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "3062626d-aebc-4f1d-97b4-24f1f3e76431",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{assert.ok(error instanceof Error);assert.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "61f2f7cd-eea3-4284-ac9e-7fc2bb073e34",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);assert.strictEqual(spawnCounter,2);assert.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "ca144fab-7783-4665-9409-15557993417c",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{assert.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);assert.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "3250e8d1-90b5-4b66-b65d-510ed6ffc775",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "3897a0eb-7815-4913-b646-e9742f482485",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "a04e568d-be83-4798-9e8c-51adf40cfc2b",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),focus_state:\"unfocused\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"focusState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"unfocused\");assert.strictEqual(event.newValue,NodePyATVFocusState.unfocused);assert.strictEqual(event.value,\"unfocused\");assert.strictEqual(event.value,NodePyATVFocusState.unfocused);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "5bfaaa12-e19e-41c0-b9ea-f4bbfb88508c",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),output_devices:[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}],result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"outputDevices\");assert.strictEqual(event.oldValue,null);assert.deepStrictEqual(event.newValue,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);assert.deepStrictEqual(event.value,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "d0616e70-8b7f-438a-b411-d07d56052bdc",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),result:\"success\",volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"volume\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,20);assert.strictEqual(event.value,20);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "5b093866-43e8-453f-9436-935e888d4d8c",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),foo:\"bar\",result:\"success\"});cp.end()})});device.on(\"update\",event=>{assert.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "01761491-6c1d-4b05-bfa9-776e53b21fff",
                  "parentUUID": "3fccde13-c0be-413e-a491-c162a3dd83ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46a04b79-3309-4c00-92d3-105aa775abfd",
                "6e2d05b2-5c1a-4862-91c3-d646c0e040eb",
                "3062626d-aebc-4f1d-97b4-24f1f3e76431",
                "61f2f7cd-eea3-4284-ac9e-7fc2bb073e34",
                "ca144fab-7783-4665-9409-15557993417c",
                "3250e8d1-90b5-4b66-b65d-510ed6ffc775",
                "3897a0eb-7815-4913-b646-e9742f482485",
                "a04e568d-be83-4798-9e8c-51adf40cfc2b",
                "5bfaaa12-e19e-41c0-b9ea-f4bbfb88508c",
                "d0616e70-8b7f-438a-b411-d07d56052bdc",
                "5b093866-43e8-453f-9436-935e888d4d8c",
                "01761491-6c1d-4b05-bfa9-776e53b21fff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc03a77d-be76-43bc-b6f1-0cebf01857b7",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "e1b4d30f-98fb-4323-9193-c7cc6c20b15d",
                  "parentUUID": "fc03a77d-be76-43bc-b6f1-0cebf01857b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "72c3f23f-9cd6-4a5b-9bef-0a7bef61e5a1",
                  "parentUUID": "fc03a77d-be76-43bc-b6f1-0cebf01857b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "25376a9e-4c67-4dc6-a651-ba93ed9813d9",
                  "parentUUID": "fc03a77d-be76-43bc-b6f1-0cebf01857b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "bdb58070-a34f-45ff-be85-d759263cc8c3",
                  "parentUUID": "fc03a77d-be76-43bc-b6f1-0cebf01857b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1b4d30f-98fb-4323-9193-c7cc6c20b15d",
                "72c3f23f-9cd6-4a5b-9bef-0a7bef61e5a1",
                "25376a9e-4c67-4dc6-a651-ba93ed9813d9"
              ],
              "failures": [],
              "pending": [
                "bdb58070-a34f-45ff-be85-d759263cc8c3"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e49e2293-9ea1-4ec3-949f-7acb3d6ef021",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "4fe9aa9f-af76-4f48-9b1e-e784e6fd6b2f",
                  "parentUUID": "e49e2293-9ea1-4ec3-949f-7acb3d6ef021",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fe9aa9f-af76-4f48-9b1e-e784e6fd6b2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ba07eb5-c501-476f-9e74-1bbb05632d12",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const event=new NodePyATVDeviceEvent({device,key:\"dateTime\",new:\"bar\",old:\"foo\"});let executions=0;device.once(\"test\",e=>{executions++;assert.strictEqual(e,event);assert.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "6a6f20b8-2db3-41cf-b9f6-d232be635a90",
                  "parentUUID": "7ba07eb5-c501-476f-9e74-1bbb05632d12",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a6f20b8-2db3-41cf-b9f6-d232be635a90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b734ef3f-a57f-48fd-9694-efb06e94848d",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);assert.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "4039fc8a-7ecc-4c1e-a023-632d0e8e12fa",
                  "parentUUID": "b734ef3f-a57f-48fd-9694-efb06e94848d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4039fc8a-7ecc-4c1e-a023-632d0e8e12fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98ec4961-b60c-494c-b193-de72c0175b32",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();assert.ok(typeof result,\"number\");assert.ok(result>=10)",
                  "err": {},
                  "uuid": "d96c121b-6ab9-48ce-ba0b-2b8a2f79b715",
                  "parentUUID": "98ec4961-b60c-494c-b193-de72c0175b32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d96c121b-6ab9-48ce-ba0b-2b8a2f79b715"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9bc814fa-786f-429a-888e-7e5327451d28",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);assert.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "66b59df3-dfaf-4aee-977c-269008df2a92",
                  "parentUUID": "9bc814fa-786f-429a-888e-7e5327451d28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66b59df3-dfaf-4aee-977c-269008df2a92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c0cc3160-3816-4495-8a43-92eaf99710b5",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.listeners(\"test\").length,1);assert.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "ff286ebc-59ed-4929-beb8-377eed42500e",
                  "parentUUID": "c0cc3160-3816-4495-8a43-92eaf99710b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff286ebc-59ed-4929-beb8-377eed42500e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86c64212-df83-43b7-89f7-9f9df8c59b3b",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "ff390fac-cdcb-4769-b7b5-b205a7e6a89c",
                  "parentUUID": "86c64212-df83-43b7-89f7-9f9df8c59b3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff390fac-cdcb-4769-b7b5-b205a7e6a89c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b975ed01-572a-42e1-af1e-db7f96a711d8",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "968be3e0-d6ce-446f-835e-c11a70903298",
                  "parentUUID": "b975ed01-572a-42e1-af1e-db7f96a711d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "968be3e0-d6ce-446f-835e-c11a70903298"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea084520-e572-4e76-ac8c-57b4c2537a03",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.rawListeners(\"test\").length,1);assert.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "62da9624-bc4f-4730-84bb-c5011e49f1a5",
                  "parentUUID": "ea084520-e572-4e76-ac8c-57b4c2537a03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62da9624-bc4f-4730-84bb-c5011e49f1a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "949f0ede-8a22-47ee-b068-a34c2f6d67d6",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "af05f564-d8af-446a-9bdf-efed05b15f3f",
                  "parentUUID": "949f0ede-8a22-47ee-b068-a34c2f6d67d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af05f564-d8af-446a-9bdf-efed05b15f3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fb2d6260-a706-4eaa-ae89-cbaded8a31ac",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b7a907c5-8f47-41b3-a5e2-fc550c9c61e2",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "74d6a3f8-7730-4b5e-b59e-cc53cd3ad669",
                  "parentUUID": "b7a907c5-8f47-41b3-a5e2-fc550c9c61e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74d6a3f8-7730-4b5e-b59e-cc53cd3ad669"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75810c98-139e-4ff2-a05d-e39664737970",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "f5188a2b-e1fc-4926-9b7f-4a3e62fcf86c",
                  "parentUUID": "75810c98-139e-4ff2-a05d-e39664737970",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5188a2b-e1fc-4926-9b7f-4a3e62fcf86c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3eb1267c-a69a-4a0b-9d62-30bde4635e8c",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});assert.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "a1a1e030-b16e-48cb-9175-14d5932486f1",
                  "parentUUID": "3eb1267c-a69a-4a0b-9d62-30bde4635e8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1a1e030-b16e-48cb-9175-14d5932486f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a45fc63-fcbe-44bc-a8ab-1b557b73acaa",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"],host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});assert.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "358f83ce-e393-4f9f-9ebb-7d759f6f3ae4",
                  "parentUUID": "7a45fc63-fcbe-44bc-a8ab-1b557b73acaa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "358f83ce-e393-4f9f-9ebb-7d759f6f3ae4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb39daed-d04a-45f1-bed6-e81a81ad2d48",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",protocol:NodePyATVProtocol.airplay});assert.strictEqual(device.protocol,NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "22382ac7-8977-48c4-9b40-8a26342f7667",
                  "parentUUID": "cb39daed-d04a-45f1-bed6-e81a81ad2d48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22382ac7-8977-48c4-9b40-8a26342f7667"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "209e5845-53d4-4b6f-ae35-66a95c822745",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\",name:\"My Testdevice\"});assert.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "2a414b74-39e8-4157-afd7-46f446a93823",
                  "parentUUID": "209e5845-53d4-4b6f-ae35-66a95c822745",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a414b74-39e8-4157-afd7-46f446a93823"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2ec62704-f302-47cb-9646-5e20484ff0f6",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\",name:\"Vardagsrum\"});assert.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "938028b2-4b4d-4695-b617-e185d6b49902",
                  "parentUUID": "2ec62704-f302-47cb-9646-5e20484ff0f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "bd6e6561-0066-40f9-910d-4c7cf8a3f1e4",
                  "parentUUID": "2ec62704-f302-47cb-9646-5e20484ff0f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "938028b2-4b4d-4695-b617-e185d6b49902",
                "bd6e6561-0066-40f9-910d-4c7cf8a3f1e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d50564c4-3b38-45a4-a722-4a5acb841572",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\",name:\"Vardagsrum\"});assert.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "f968b63b-66cd-4759-971f-5afb4d0704ea",
                  "parentUUID": "d50564c4-3b38-45a4-a722-4a5acb841572",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "02214827-9bad-46e1-95d5-ee9e12e1ce21",
                  "parentUUID": "d50564c4-3b38-45a4-a722-4a5acb841572",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f968b63b-66cd-4759-971f-5afb4d0704ea",
                "02214827-9bad-46e1-95d5-ee9e12e1ce21"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b6b6f22b-6b73-4017-8103-8f9d0388d0a2",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",os:\"TvOS\"});assert.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "9431b483-f576-4f9c-b68d-6e56ed1f8c29",
                  "parentUUID": "b6b6f22b-6b73-4017-8103-8f9d0388d0a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "5bdbe315-08cc-46ef-99ef-2b8a95e36911",
                  "parentUUID": "b6b6f22b-6b73-4017-8103-8f9d0388d0a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9431b483-f576-4f9c-b68d-6e56ed1f8c29",
                "5bdbe315-08cc-46ef-99ef-2b8a95e36911"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "138fc435-9140-4c4c-97b5-fa6f134eff32",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",version:\"15.5.1\"});assert.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "c9bf5c38-8412-4a5a-850a-b6d81ec00408",
                  "parentUUID": "138fc435-9140-4c4c-97b5-fa6f134eff32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "772fb958-7e4a-40b2-99dd-1fcca69a2f5e",
                  "parentUUID": "138fc435-9140-4c4c-97b5-fa6f134eff32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9bf5c38-8412-4a5a-850a-b6d81ec00408",
                "772fb958-7e4a-40b2-99dd-1fcca69a2f5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14b9a5ff-029c-4757-baaf-c1be138b2abf",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:NodePyATVProtocol.mrp},{port:7e3,protocol:NodePyATVProtocol.airplay}]});assert.deepStrictEqual(device.services,[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}])",
                  "err": {},
                  "uuid": "41008d84-5ab3-4114-b41e-dcc250729d48",
                  "parentUUID": "14b9a5ff-029c-4757-baaf-c1be138b2abf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "e2da0992-a49f-401e-a529-57d182c61d8b",
                  "parentUUID": "14b9a5ff-029c-4757-baaf-c1be138b2abf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41008d84-5ab3-4114-b41e-dcc250729d48",
                "e2da0992-a49f-401e-a529-57d182c61d8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "748ee378-f37a-4175-aef8-85ce692be4c7",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "9b490fcb-7ba3-4d41-ae09-dd5d09523e9a",
                  "parentUUID": "748ee378-f37a-4175-aef8-85ce692be4c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new NodePyATVDevice({debug:fn,host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "91f4c61f-3ff9-4240-8166-493a22014969",
                  "parentUUID": "748ee378-f37a-4175-aef8-85ce692be4c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "f9725430-c030-4626-8038-7a9feaa5950a",
                  "parentUUID": "748ee378-f37a-4175-aef8-85ce692be4c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b490fcb-7ba3-4d41-ae09-dd5d09523e9a",
                "91f4c61f-3ff9-4240-8166-493a22014969",
                "f9725430-c030-4626-8038-7a9feaa5950a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fcf1c2e1-62a3-41cc-a18a-7f13aa81d353",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,void 0);device.debug=true;assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "b1c2bcc2-69c0-4c8e-83d1-12365d4d1b11",
                  "parentUUID": "fcf1c2e1-62a3-41cc-a18a-7f13aa81d353",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "85def7c1-bf66-48f0-99fa-c22cf326d737",
                  "parentUUID": "fcf1c2e1-62a3-41cc-a18a-7f13aa81d353",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "5047da12-e055-4b4b-9fba-18881775ab8c",
                  "parentUUID": "fcf1c2e1-62a3-41cc-a18a-7f13aa81d353",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});const fn=__name(()=>{},\"fn\");assert.strictEqual(device.debug,void 0);device.debug=fn;assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "bcfa9c12-29e7-4cd5-bad8-1799fb488b7d",
                  "parentUUID": "fcf1c2e1-62a3-41cc-a18a-7f13aa81d353",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1c2bcc2-69c0-4c8e-83d1-12365d4d1b11",
                "85def7c1-bf66-48f0-99fa-c22cf326d737",
                "5047da12-e055-4b4b-9fba-18881775ab8c",
                "bcfa9c12-29e7-4cd5-bad8-1799fb488b7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f35c19e-b107-4072-a599-cd78456e4fb0",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\",protocol:NodePyATVProtocol.airplay});assert.deepEqual(device.toJSON(),{host:\"192.168.178.2\",id:\"*****\",mac:void 0,name:\"My Testdevice\",protocol:NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "68708d82-b926-4252-8234-551cd9e17f50",
                  "parentUUID": "8f35c19e-b107-4072-a599-cd78456e4fb0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={host:\"192.168.178.2\",id:\"*****\",mac:\"469943881251875\",name:\"My Testdevice\",protocol:NodePyATVProtocol.airplay};const deviceA=new NodePyATVDevice(config);const deviceB=new NodePyATVDevice(deviceA.toJSON());assert.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "a3b1a6d3-791d-4aa5-8904-4ef38e5903a3",
                  "parentUUID": "8f35c19e-b107-4072-a599-cd78456e4fb0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68708d82-b926-4252-8234-551cd9e17f50",
                "a3b1a6d3-791d-4aa5-8904-4ef38e5903a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e6f4afc-71dd-48f0-86bf-d3c5f1da001a",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "4116833f-adff-4592-9e9e-eed6ca8d9ceb",
                  "parentUUID": "8e6f4afc-71dd-48f0-86bf-d3c5f1da001a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4116833f-adff-4592-9e9e-eed6ca8d9ceb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43167334-5f4a-4f96-9d01-d2b922a8e28f",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6d9762bb-3404-459d-9e4a-3cc1b2be490f",
                  "parentUUID": "43167334-5f4a-4f96-9d01-d2b922a8e28f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const result=await device.getState();assert.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "da77afea-e79f-4952-9e9a-e17afcc4f38f",
                  "parentUUID": "43167334-5f4a-4f96-9d01-d2b922a8e28f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});assert.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "b8c7e5a0-025c-4f87-b74d-4ccc5d224a88",
                  "parentUUID": "43167334-5f4a-4f96-9d01-d2b922a8e28f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{executions++;cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date().toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();const secondResult=await device.getState();assert.strictEqual(firstResult.dateTime,secondResult.dateTime);assert.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "6eac5f4f-2ea5-4767-a716-17da14876111",
                  "parentUUID": "43167334-5f4a-4f96-9d01-d2b922a8e28f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date(new Date().getTime()-1e3).toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();assert.strictEqual(firstResult.position,27);const secondResult=await device.getState();assert.ok(secondResult.position);assert.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);assert.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "359c2caa-298a-4b61-a87a-77342cf71500",
                  "parentUUID": "43167334-5f4a-4f96-9d01-d2b922a8e28f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da77afea-e79f-4952-9e9a-e17afcc4f38f",
                "b8c7e5a0-025c-4f87-b74d-4ccc5d224a88",
                "6eac5f4f-2ea5-4767-a716-17da14876111",
                "359c2caa-298a-4b61-a87a-77342cf71500"
              ],
              "failures": [],
              "pending": [
                "6d9762bb-3404-459d-9e4a-3cc1b2be490f"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aece9f95-a80a-4b5a-8f58-c263d445c17e",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{executions++;cp.end({datetime:\"2020-11-07T22:38:43.608030+01:00\",result:\"success\",title:\"Solo: A Star Wars Story\"})})});assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");assert.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "086d129d-b7d1-42cd-8249-687a3e46132a",
                  "parentUUID": "aece9f95-a80a-4b5a-8f58-c263d445c17e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "086d129d-b7d1-42cd-8249-687a3e46132a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "472b0350-5d40-4208-b41d-42d9cc8298d7",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({datetime:new Date().toJSON(),result:\"success\"})})});const result=await device.getDateTime();assert.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "8353b5be-f11c-439d-84b4-187b4233a57e",
                  "parentUUID": "472b0350-5d40-4208-b41d-42d9cc8298d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8353b5be-f11c-439d-84b4-187b4233a57e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9234d02-ac7b-40dd-837c-da4da7b5c25e",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({hash:\"12345\",result:\"success\"})})});const result=await device.getHash();assert.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "638bb77d-d3ca-4ebe-8f7c-eab1fee6a088",
                  "parentUUID": "e9234d02-ac7b-40dd-837c-da4da7b5c25e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "638bb77d-d3ca-4ebe-8f7c-eab1fee6a088"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8358fba7-0dfd-4b5b-8383-150e7ce7f8ba",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({media_type:\"video\",result:\"success\"})})});const result=await device.getMediaType();assert.deepStrictEqual(result,NodePyATVMediaType.video);assert.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "21901afc-9b91-4123-9a15-a79bcfe97a1f",
                  "parentUUID": "8358fba7-0dfd-4b5b-8383-150e7ce7f8ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21901afc-9b91-4123-9a15-a79bcfe97a1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e1f2b2d-1c86-49f8-96b5-d7b1120da03d",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({device_state:\"seeking\",result:\"success\"})})});const result=await device.getDeviceState();assert.deepStrictEqual(result,NodePyATVDeviceState.seeking);assert.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "89d32118-e7cc-4b74-8dfb-dd8526406ae6",
                  "parentUUID": "0e1f2b2d-1c86-49f8-96b5-d7b1120da03d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89d32118-e7cc-4b74-8dfb-dd8526406ae6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d7e56bb7-3198-4d1e-8f45-7cdb871a89d5",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();assert.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "7b126418-6eab-489c-8094-f316cdfda5bb",
                  "parentUUID": "d7e56bb7-3198-4d1e-8f45-7cdb871a89d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b126418-6eab-489c-8094-f316cdfda5bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d92e8eaf-cf14-4d70-afcc-b87812e8ee19",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({artist:\"My Artist\",result:\"success\"})})});const result=await device.getArtist();assert.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "3eef3d74-d3b5-47e6-9647-13baad580719",
                  "parentUUID": "d92e8eaf-cf14-4d70-afcc-b87812e8ee19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3eef3d74-d3b5-47e6-9647-13baad580719"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da49d5e5-6203-4d28-a405-ad5c46fcd3bf",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({album:\"My ALbum\",result:\"success\"})})});const result=await device.getAlbum();assert.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "f2f0f068-423d-40b4-9068-d3f1cb42f46c",
                  "parentUUID": "da49d5e5-6203-4d28-a405-ad5c46fcd3bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2f0f068-423d-40b4-9068-d3f1cb42f46c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b86a20e1-729d-4fcd-8eac-d7b606a7c60f",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({genre:\"My Genre\",result:\"success\"})})});const result=await device.getGenre();assert.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "1616bca8-67a3-4694-95ec-a2f4f216c43d",
                  "parentUUID": "b86a20e1-729d-4fcd-8eac-d7b606a7c60f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1616bca8-67a3-4694-95ec-a2f4f216c43d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4731a470-f055-473c-90b9-df8054d8b075",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();assert.strictEqual(result,45)",
                  "err": {},
                  "uuid": "46106d78-b7c5-4568-82f3-274f6ff1dae5",
                  "parentUUID": "4731a470-f055-473c-90b9-df8054d8b075",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46106d78-b7c5-4568-82f3-274f6ff1dae5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0875df8a-947f-4715-be4f-ea8830cba83c",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({position:30,result:\"success\"})})});const result=await device.getPosition();assert.strictEqual(result,30)",
                  "err": {},
                  "uuid": "cbc96969-5c16-4e70-b7ef-dece87834e98",
                  "parentUUID": "0875df8a-947f-4715-be4f-ea8830cba83c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cbc96969-5c16-4e70-b7ef-dece87834e98"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6e1089ce-079c-46c9-877e-870d0ed50f52",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();assert.deepStrictEqual(result,NodePyATVShuffleState.songs);assert.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "18c7dada-4749-4dd9-bc86-9a441da1ec7c",
                  "parentUUID": "6e1089ce-079c-46c9-877e-870d0ed50f52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18c7dada-4749-4dd9-bc86-9a441da1ec7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ffd9022-7fd5-4d93-b79a-555462f92c09",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({repeat:\"all\",result:\"success\"})})});const result=await device.getRepeat();assert.deepStrictEqual(result,NodePyATVRepeatState.all);assert.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "3f338998-b305-4ac0-9a34-b847650380fb",
                  "parentUUID": "7ffd9022-7fd5-4d93-b79a-555462f92c09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f338998-b305-4ac0-9a34-b847650380fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50991df2-660a-4417-bf0f-ba22aa0579e1",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({app:\"My App\",result:\"success\"})})});const result=await device.getApp();assert.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "c2155e2c-8f3c-405f-98a5-f8b28d959679",
                  "parentUUID": "50991df2-660a-4417-bf0f-ba22aa0579e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2155e2c-8f3c-405f-98a5-f8b28d959679"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d731913f-21b6-46ef-b92c-050927ee7889",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({app_id:\"app.example.com\",result:\"success\"})})});const result=await device.getAppId();assert.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "21dc5fad-46a2-4abb-8d90-99ced36e8b11",
                  "parentUUID": "d731913f-21b6-46ef-b92c-050927ee7889",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21dc5fad-46a2-4abb-8d90-99ced36e8b11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df9b9bd7-171c-49b1-9a9b-2a97cb8ff28d",
              "title": "getPowerState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPowerState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({power_state:\"on\",result:\"success\"})})});const result=await device.getPowerState();assert.strictEqual(result,NodePyATVPowerState.on)",
                  "err": {},
                  "uuid": "b71f7f63-ad8e-4147-88c7-3ccb3a485cda",
                  "parentUUID": "df9b9bd7-171c-49b1-9a9b-2a97cb8ff28d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b71f7f63-ad8e-4147-88c7-3ccb3a485cda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ef39169-5091-482e-b785-81d6f1952f4f",
              "title": "getVolume()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getVolume() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",volume:50})})});const result=await device.getVolume();assert.strictEqual(result,50)",
                  "err": {},
                  "uuid": "c6780067-6713-4224-bc39-dfcc1af2e75c",
                  "parentUUID": "9ef39169-5091-482e-b785-81d6f1952f4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6780067-6713-4224-bc39-dfcc1af2e75c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ae3b45f-4675-4c98-94dc-6aa484c90ae3",
              "title": "getFocusState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getFocusState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({focus_state:\"focused\",result:\"success\"})})});const result=await device.getFocusState();assert.strictEqual(result,NodePyATVFocusState.focused)",
                  "err": {},
                  "uuid": "8f400629-3af4-4714-b489-71ebbcbc544e",
                  "parentUUID": "5ae3b45f-4675-4c98-94dc-6aa484c90ae3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f400629-3af4-4714-b489-71ebbcbc544e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cea1c07f-5b64-4651-b4bd-533b92e85091",
              "title": "getOutputDevices()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getOutputDevices() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({output_devices:[{identifier:\"foo\",name:\"Apple TV\"}],result:\"success\"})})});const result=await device.getOutputDevices();assert.deepStrictEqual(result,[{identifier:\"foo\",name:\"Apple TV\"}])",
                  "err": {},
                  "uuid": "56fd0e4f-e3f2-420d-ad73-1d27ccb31a05",
                  "parentUUID": "cea1c07f-5b64-4651-b4bd-533b92e85091",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56fd0e4f-e3f2-420d-ad73-1d27ccb31a05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7541d79-4677-440c-b953-eeef98649791",
              "title": "getContentIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getContentIdentifier() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({content_identifier:\"1234\",result:\"success\"})})});const result=await device.getContentIdentifier();assert.strictEqual(result,\"1234\")",
                  "err": {},
                  "uuid": "fe8cfa70-e1eb-47a8-9e54-87303037103b",
                  "parentUUID": "f7541d79-4677-440c-b953-eeef98649791",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe8cfa70-e1eb-47a8-9e54-87303037103b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35787773-c6be-4b4d-8295-6fe06ee65c8e",
              "title": "getiTunesStoreIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getiTunesStoreIdentifier() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({itunes_store_identifier:1234,result:\"success\"})})});const result=await device.getiTunesStoreIdentifier();assert.strictEqual(result,1234)",
                  "err": {},
                  "uuid": "82889554-5b55-4181-a3ab-103d4a17c5e6",
                  "parentUUID": "35787773-c6be-4b4d-8295-6fe06ee65c8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82889554-5b55-4181-a3ab-103d4a17c5e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e5dbeb41-2f93-4baa-a3b7-3426689fb3a9",
              "title": "getEpisodeNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getEpisodeNumber() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({episode_number:12,result:\"success\"})})});const result=await device.getEpisodeNumber();assert.strictEqual(result,12)",
                  "err": {},
                  "uuid": "590e75ef-dc94-4cc3-8261-222085a2c9a8",
                  "parentUUID": "e5dbeb41-2f93-4baa-a3b7-3426689fb3a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "590e75ef-dc94-4cc3-8261-222085a2c9a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b9281d0-d7f8-4fe5-817a-357353ee9f9a",
              "title": "getSeasonNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeasonNumber() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",season_number:2})})});const result=await device.getSeasonNumber();assert.strictEqual(result,2)",
                  "err": {},
                  "uuid": "68150067-1478-440e-a932-ff6338fdbc7a",
                  "parentUUID": "4b9281d0-d7f8-4fe5-817a-357353ee9f9a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68150067-1478-440e-a932-ff6338fdbc7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d8ba954-bb6a-4042-a4fc-b354ab684efe",
              "title": "getSeriesName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeriesName() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",series_name:\"The Testing Disaster\"})})});const result=await device.getSeriesName();assert.strictEqual(result,\"The Testing Disaster\")",
                  "err": {},
                  "uuid": "a73cd281-bca2-44aa-a434-216edf4d9a91",
                  "parentUUID": "3d8ba954-bb6a-4042-a4fc-b354ab684efe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a73cd281-bca2-44aa-a434-216edf4d9a91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac572e34-99f3-41b4-86dd-3b082e14d1bf",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();assert.strictEqual(result.length,25);assert.strictEqual(result[0].id,\"com.apple.Fitness\");assert.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "d3eb4bbd-b455-4d7a-ad61-57577a638d18",
                  "parentUUID": "ac572e34-99f3-41b4-86dd-3b082e14d1bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3eb4bbd-b455-4d7a-ad61-57577a638d18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53da202e-e111-4805-9802-24ecf448316e",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "f9e17c7a-9a2a-4e4d-a9f2-80679f83541a",
                  "parentUUID": "53da202e-e111-4805-9802-24ecf448316e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});await assert.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "c279d115-5406-4de5-865c-56ea2563d732",
                  "parentUUID": "53da202e-e111-4805-9802-24ecf448316e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"failure\"}')})});await assert.rejects(async()=>{await device.pressKey(NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "4aff70da-2c79-4c2e-af7e-9cb87738fb5d",
                  "parentUUID": "53da202e-e111-4805-9802-24ecf448316e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9e17c7a-9a2a-4e4d-a9f2-80679f83541a",
                "c279d115-5406-4de5-865c-56ea2563d732",
                "4aff70da-2c79-4c2e-af7e-9cb87738fb5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32fc48dc-8a24-4104-9b0d-d6d6f19a2fc6",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9e373d66-ec42-4745-b503-1c5bbc4a61c1",
                  "parentUUID": "32fc48dc-8a24-4104-9b0d-d6d6f19a2fc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e373d66-ec42-4745-b503-1c5bbc4a61c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f8d050a-860a-470a-bf30-b2960e73f8dc",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "20373f1b-1e94-4d4f-a0b8-4bb249bf6639",
                  "parentUUID": "8f8d050a-860a-470a-bf30-b2960e73f8dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20373f1b-1e94-4d4f-a0b8-4bb249bf6639"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e675f0f4-1e5d-4acb-8bb7-a0b8cf63c91c",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "dde9fe26-1b29-4c98-8df5-7e8aca49dd92",
                  "parentUUID": "e675f0f4-1e5d-4acb-8bb7-a0b8cf63c91c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dde9fe26-1b29-4c98-8df5-7e8aca49dd92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "322ba7c0-cf7d-4f84-9d65-dcb1262d1c07",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "8f90d4b7-9d31-46d1-9926-e422bd5f997b",
                  "parentUUID": "322ba7c0-cf7d-4f84-9d65-dcb1262d1c07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f90d4b7-9d31-46d1-9926-e422bd5f997b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de2f646c-9ab6-4644-92c0-6924153753c3",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3d0f3a82-477e-4ff5-aec0-8073ea11008d",
                  "parentUUID": "de2f646c-9ab6-4644-92c0-6924153753c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d0f3a82-477e-4ff5-aec0-8073ea11008d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6422fa40-661f-4a7b-b184-e5dc47af1e66",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3b152e7b-6a83-480f-bb36-94a956015d31",
                  "parentUUID": "6422fa40-661f-4a7b-b184-e5dc47af1e66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b152e7b-6a83-480f-bb36-94a956015d31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "55f98408-8da5-47b0-b534-df5eee0e8c59",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "66879e95-fc8b-4a9b-a679-22a904baaed9",
                  "parentUUID": "55f98408-8da5-47b0-b534-df5eee0e8c59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66879e95-fc8b-4a9b-a679-22a904baaed9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "023aa350-969f-4528-b4e2-98f76fb73c3a",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "49533ae4-17b7-420f-9446-03037a64e2fb",
                  "parentUUID": "023aa350-969f-4528-b4e2-98f76fb73c3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49533ae4-17b7-420f-9446-03037a64e2fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c56f1442-d145-4c83-ba60-566202aed6d7",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "ce970f9e-f2cb-4284-a2bd-27cf7be09069",
                  "parentUUID": "c56f1442-d145-4c83-ba60-566202aed6d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce970f9e-f2cb-4284-a2bd-27cf7be09069"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "564eefe5-b98d-4146-8a67-443080fdde39",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c134fade-dcb1-4d85-a748-365c337e126b",
                  "parentUUID": "564eefe5-b98d-4146-8a67-443080fdde39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c134fade-dcb1-4d85-a748-365c337e126b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b73e7554-4e8e-49a9-9227-51ca5beb71dd",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b90897c4-c986-454f-bf98-ab52d385edc5",
                  "parentUUID": "b73e7554-4e8e-49a9-9227-51ca5beb71dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b90897c4-c986-454f-bf98-ab52d385edc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4d6a5de-98d9-4dc1-ae33-a27a2b6dc756",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3231de54-4e88-4c24-a4b4-f7060525bdc3",
                  "parentUUID": "b4d6a5de-98d9-4dc1-ae33-a27a2b6dc756",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3231de54-4e88-4c24-a4b4-f7060525bdc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb52db0c-2350-45ab-9dd0-508381f5d51d",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1bc765ae-215f-4325-97b4-d40bc3570f1f",
                  "parentUUID": "bb52db0c-2350-45ab-9dd0-508381f5d51d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1bc765ae-215f-4325-97b4-d40bc3570f1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "397c16ae-a90e-4864-b848-f42f8614be90",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "2dfde1fa-1313-4646-858c-59f7189c52b6",
                  "parentUUID": "397c16ae-a90e-4864-b848-f42f8614be90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dfde1fa-1313-4646-858c-59f7189c52b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3283edf5-79ee-462b-b123-99093c79b4c6",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b0f3089e-9bf0-48aa-9dce-08d829252651",
                  "parentUUID": "3283edf5-79ee-462b-b123-99093c79b4c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0f3089e-9bf0-48aa-9dce-08d829252651"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b433ab44-7b4f-44c1-ad15-a68c4c3370be",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "acd19b7c-faba-49e5-a118-e76d3b9b89e9",
                  "parentUUID": "b433ab44-7b4f-44c1-ad15-a68c4c3370be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "acd19b7c-faba-49e5-a118-e76d3b9b89e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "645e08b7-46aa-4354-840c-46811b0ad969",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "27a10da9-59da-462f-bf84-989b5cb500fa",
                  "parentUUID": "645e08b7-46aa-4354-840c-46811b0ad969",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27a10da9-59da-462f-bf84-989b5cb500fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63a8dc21-a307-4067-a6d1-f8675504e0ad",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "467fa054-1a0f-4408-945d-562ab9cbb435",
                  "parentUUID": "63a8dc21-a307-4067-a6d1-f8675504e0ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "467fa054-1a0f-4408-945d-562ab9cbb435"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "653ea4fb-eaf6-43ec-9025-50b045a386b0",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "acf51155-033a-4a84-b5f0-2df653da570b",
                  "parentUUID": "653ea4fb-eaf6-43ec-9025-50b045a386b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "acf51155-033a-4a84-b5f0-2df653da570b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c76f86b-7f4c-400b-8939-cc35b84b2e51",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "d2e1be9a-1c0f-4cb0-a07a-847ff7401141",
                  "parentUUID": "2c76f86b-7f4c-400b-8939-cc35b84b2e51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2e1be9a-1c0f-4cb0-a07a-847ff7401141"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5aa1e284-e91a-4bea-b680-273f1e779b77",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1c544d25-563e-4d96-91f4-c013395ca302",
                  "parentUUID": "5aa1e284-e91a-4bea-b680-273f1e779b77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c544d25-563e-4d96-91f4-c013395ca302"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "838a510c-41cf-4eec-a1bb-751bb076696b",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "7b7d184f-ceb8-448e-bc06-b46eeeef07e9",
                  "parentUUID": "838a510c-41cf-4eec-a1bb-751bb076696b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b7d184f-ceb8-448e-bc06-b46eeeef07e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d29b0c7b-e614-4c4b-9ddf-804faa08e2d8",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "0c96631c-4ca6-4586-a7f5-100a6a931e9d",
                  "parentUUID": "d29b0c7b-e614-4c4b-9ddf-804faa08e2d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c96631c-4ca6-4586-a7f5-100a6a931e9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3772c315-0846-4c88-ac84-392ca2ccfee8",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "e48f4e67-248a-4b84-810e-fe6c85652bc2",
                  "parentUUID": "3772c315-0846-4c88-ac84-392ca2ccfee8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e48f4e67-248a-4b84-810e-fe6c85652bc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1360642a-501a-4410-8f76-c92c5d080c94",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2ed670c2-e050-4274-b1a8-11ff90191a44",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 710,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await NodePyATVInstance.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}assert.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");assert.ok(result.pyatv.length>=5,\"result.pyatv has content\");assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "16d12fb3-1aaf-4c56-920c-91f3111e448b",
                  "parentUUID": "2ed670c2-e050-4274-b1a8-11ff90191a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});assert.ok(result.pyatv);assert.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "f4a0885d-d953-470c-b528-7af0ebcd9538",
                  "parentUUID": "2ed670c2-e050-4274-b1a8-11ff90191a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())});assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "ed5fc6df-ebcc-461b-ac16-3a53a4cec980",
                  "parentUUID": "2ed670c2-e050-4274-b1a8-11ff90191a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({atvremotePath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "4cd0f5e8-12e3-4e5e-9f65-ea0650d53ffe",
                  "parentUUID": "2ed670c2-e050-4274-b1a8-11ff90191a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "26a04a0b-87f7-4e96-9f15-dc0c32b76c8f",
                  "parentUUID": "2ed670c2-e050-4274-b1a8-11ff90191a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "506117c2-0dc6-4fa6-8b02-0b2848dbb1ec",
                  "parentUUID": "2ed670c2-e050-4274-b1a8-11ff90191a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>cp.stderr(\"Hello World!\").code(123).end())});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "a0df0082-7dc5-4b23-af9d-72535ff51455",
                  "parentUUID": "2ed670c2-e050-4274-b1a8-11ff90191a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "2d0104db-3fd3-4f07-981a-6a680f066f02",
                  "parentUUID": "2ed670c2-e050-4274-b1a8-11ff90191a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "e44ec773-7453-4495-8853-f35565163efa",
                  "parentUUID": "2ed670c2-e050-4274-b1a8-11ff90191a44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16d12fb3-1aaf-4c56-920c-91f3111e448b",
                "f4a0885d-d953-470c-b528-7af0ebcd9538",
                "ed5fc6df-ebcc-461b-ac16-3a53a4cec980",
                "4cd0f5e8-12e3-4e5e-9f65-ea0650d53ffe",
                "26a04a0b-87f7-4e96-9f15-dc0c32b76c8f",
                "506117c2-0dc6-4fa6-8b02-0b2848dbb1ec",
                "a0df0082-7dc5-4b23-af9d-72535ff51455",
                "2d0104db-3fd3-4f07-981a-6a680f066f02",
                "e44ec773-7453-4495-8853-f35565163efa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 721,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1edb1f9-91ee-4398-a813-8be5bca69004",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5856,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await NodePyATVInstance.check()",
                  "err": {},
                  "uuid": "5beb33aa-1e45-48b5-b312-706412899bd3",
                  "parentUUID": "a1edb1f9-91ee-4398-a813-8be5bca69004",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "90262a59-cf06-4a15-94c6-b022ef6cf119",
                  "parentUUID": "a1edb1f9-91ee-4398-a813-8be5bca69004",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "07cbe4df-2a14-4ad6-9028-68fcb07b5adc",
                  "parentUUID": "a1edb1f9-91ee-4398-a813-8be5bca69004",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "ebdc84c0-c1cb-49c2-9487-8ac62910a5e8",
                  "parentUUID": "a1edb1f9-91ee-4398-a813-8be5bca69004",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5beb33aa-1e45-48b5-b312-706412899bd3",
                "90262a59-cf06-4a15-94c6-b022ef6cf119",
                "07cbe4df-2a14-4ad6-9028-68fcb07b5adc",
                "ebdc84c0-c1cb-49c2-9487-8ac62910a5e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5861,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5432,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await NodePyATVInstance.find();assert.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "3e7b04b6-c9d0-4995-aebc-d6fc2b32d587",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({atvscriptPath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "aae000f3-7c49-4176-bddd-48bcf9c07811",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "7fcd781f-40f6-4390-a28c-4b87269ae66f",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "8ef556f4-87af-455b-af4d-adb5d47fbcb2",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\",result:\"failure\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "4b7b7369-76a9-4595-8562-04a647e431c4",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(JSON.stringify({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "b1a94dec-c205-4121-bcce-fd272f05c12b",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "32dfbe8f-d738-4185-93f2-0548f714c521",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "8299fa6a-6b77-4c51-86e1-69d5209f6fdc",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",identifier:\"xxx\",name:\"Vardagsrum\"}],result:\"success\"}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,void 0);assert.strictEqual(devices[0].modelName,void 0);assert.strictEqual(devices[0].os,void 0);assert.strictEqual(devices[0].version,void 0);assert.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "42dbc381-c38b-4d50-9fdc-739c19c6c8a6",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",device_info:{model:\"Gen4K\",model_str:\"Apple TV 4K\",operating_system:\"TvOS\",version:\"15.5.1\"},identifier:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}]}],result:\"success\"}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,\"Gen4K\");assert.strictEqual(devices[0].modelName,\"Apple TV 4K\");assert.strictEqual(devices[0].os,\"TvOS\");assert.strictEqual(devices[0].version,\"15.5.1\");assert.deepStrictEqual(devices[0].services,[{port:49152,protocol:NodePyATVProtocol.mrp},{port:7e3,protocol:NodePyATVProtocol.airplay}])",
                  "err": {},
                  "uuid": "db50ac19-fbd4-441a-996c-cd181289652e",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});assert.strictEqual(devices.length,4);assert.strictEqual(devices[0].name,\"Living Room\");assert.strictEqual(devices[0].host,\"10.0.0.30\");assert.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(devices[1].name,\"Kitchen\");assert.strictEqual(devices[1].host,\"10.0.0.79\");assert.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(devices[2].name,\"Bedroom\");assert.strictEqual(devices[2].host,\"10.0.0.20\");assert.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(devices[3].name,\"Basement\");assert.strictEqual(devices[3].host,\"10.0.0.156\");assert.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "404dcf2a-b7e5-4fc4-99b5-ccf895af60c2",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);assert.strictEqual(response.devices.length,4);assert.strictEqual(response.errors.length,2);assert.strictEqual(response.devices[0].name,\"Living Room\");assert.strictEqual(response.devices[0].host,\"10.0.0.30\");assert.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(response.devices[1].name,\"Kitchen\");assert.strictEqual(response.devices[1].host,\"10.0.0.79\");assert.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(response.devices[2].name,\"Bedroom\");assert.strictEqual(response.devices[2].host,\"10.0.0.20\");assert.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(response.devices[3].name,\"Basement\");assert.strictEqual(response.devices[3].host,\"10.0.0.156\");assert.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");assert.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");assert.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "a4b5925b-7f80-4353-819b-453cf56c88c2",
                  "parentUUID": "ff7cd6f8-ee34-443f-81c7-51c3ccfd2858",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e7b04b6-c9d0-4995-aebc-d6fc2b32d587",
                "aae000f3-7c49-4176-bddd-48bcf9c07811",
                "7fcd781f-40f6-4390-a28c-4b87269ae66f",
                "8ef556f4-87af-455b-af4d-adb5d47fbcb2",
                "4b7b7369-76a9-4595-8562-04a647e431c4",
                "b1a94dec-c205-4121-bcce-fd272f05c12b",
                "32dfbe8f-d738-4185-93f2-0548f714c521",
                "8299fa6a-6b77-4c51-86e1-69d5209f6fdc",
                "42dbc381-c38b-4d50-9fdc-739c19c6c8a6",
                "db50ac19-fbd4-441a-996c-cd181289652e",
                "404dcf2a-b7e5-4fc4-99b5-ccf895af60c2",
                "a4b5925b-7f80-4353-819b-453cf56c88c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5448,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2b3b8d9-3da3-476b-9aa2-bb8501896186",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=NodePyATVInstance.device({host:\"192.168.178.6\",name:\"My Testdevice\"});assert.strictEqual(device.host,\"192.168.178.6\");assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "7254d233-1d72-4b31-a354-bd0e40576fe3",
                  "parentUUID": "d2b3b8d9-3da3-476b-9aa2-bb8501896186",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7254d233-1d72-4b31-a354-bd0e40576fe3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a0b81dbb-ce0e-47ce-8abf-ceec1974efa3",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await i.version({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "c830ce4c-f038-427a-bdce-3f688c1faf46",
                  "parentUUID": "a0b81dbb-ce0e-47ce-8abf-ceec1974efa3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c830ce4c-f038-427a-bdce-3f688c1faf46"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f24e962c-690d-4f31-be37-f3ff740bada4",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await assert.rejects(async()=>{await i.check({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "4977b276-700f-43e5-9a1c-2835c9a4767a",
                  "parentUUID": "f24e962c-690d-4f31-be37-f3ff740bada4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4977b276-700f-43e5-9a1c-2835c9a4767a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1fb27ffd-f76c-4ab3-a7c7-ed01a519404e",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvscriptPath:\"test\"});await i.find({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "39a393ef-0729-4b4e-9672-8c691cb4594f",
                  "parentUUID": "1fb27ffd-f76c-4ab3-a7c7-ed01a519404e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39a393ef-0729-4b4e-9672-8c691cb4594f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f86d517f-7f10-42d3-a28a-acaf67405ea7",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({debug:true});const d=i.device({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "9f7fad20-4d90-4da3-a2e7-959a406f5fdf",
                  "parentUUID": "f86d517f-7f10-42d3-a28a-acaf67405ea7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f7fad20-4d90-4da3-a2e7-959a406f5fdf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol)",
                  "err": {},
                  "uuid": "614443bd-0913-4f84-aca7-49614085bc92",
                  "parentUUID": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType)",
                  "err": {},
                  "uuid": "bb294797-78ab-442b-83b2-3869815d63d9",
                  "parentUUID": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "462956b4-50fa-49fd-b6ba-75172d707ea9",
                  "parentUUID": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "68571290-7548-42ad-a61f-0db62cc5a116",
                  "parentUUID": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "b7162193-9631-4e0e-831a-e1f59e1c0399",
                  "parentUUID": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "18cffc2e-9d1e-445e-8516-a9f7bf2806a2",
                  "parentUUID": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys)",
                  "err": {},
                  "uuid": "5d96e8b6-0502-4dfe-bac2-cd15e255a760",
                  "parentUUID": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState)",
                  "err": {},
                  "uuid": "536e70e1-edf4-436d-8db1-a3d91dcd8efe",
                  "parentUUID": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState)",
                  "err": {},
                  "uuid": "d35f7b07-1f17-4189-9259-aba6c6b798ea",
                  "parentUUID": "2e8a1e0d-7eea-48bd-91c2-34ad0776e983",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "614443bd-0913-4f84-aca7-49614085bc92",
                "bb294797-78ab-442b-83b2-3869815d63d9",
                "462956b4-50fa-49fd-b6ba-75172d707ea9",
                "68571290-7548-42ad-a61f-0db62cc5a116",
                "b7162193-9631-4e0e-831a-e1f59e1c0399",
                "18cffc2e-9d1e-445e-8516-a9f7bf2806a2",
                "5d96e8b6-0502-4dfe-bac2-cd15e255a760",
                "536e70e1-edf4-436d-8db1-a3d91dcd8efe",
                "d35f7b07-1f17-4189-9259-aba6c6b798ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f64e35fc-073a-4c82-a81a-329a0c78c64c",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e72a96c4-2a32-4ae3-b4f4-74bbcdb0e633",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=addRequestId();assert.strictEqual(typeof id,\"string\");removeRequestId(id)",
                  "err": {},
                  "uuid": "cf68893f-aa16-4b31-81ef-d28409d97bbc",
                  "parentUUID": "e72a96c4-2a32-4ae3-b4f4-74bbcdb0e633",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId(\"FOO\")",
                  "err": {},
                  "uuid": "46424540-1b1c-462f-87ae-b2d54d089366",
                  "parentUUID": "e72a96c4-2a32-4ae3-b4f4-74bbcdb0e633",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf68893f-aa16-4b31-81ef-d28409d97bbc",
                "46424540-1b1c-462f-87ae-b2d54d089366"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0b51acaa-9f25-48c6-bf90-68c163a66b23",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "1b32bd5c-39fa-4694-b0fb-1eb5965a65ad",
                  "parentUUID": "0b51acaa-9f25-48c6-bf90-68c163a66b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "ca40f641-6313-41c0-a0c1-d45c819d0cce",
                  "parentUUID": "0b51acaa-9f25-48c6-bf90-68c163a66b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:__name(function(msg){assert.strictEqual(this,null);assert.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "9d2c5e94-fcac-4e4b-83c3-5ae226c059e8",
                  "parentUUID": "0b51acaa-9f25-48c6-bf90-68c163a66b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "016e61cc-14a2-458a-9dc2-feed56d955e7",
                  "parentUUID": "0b51acaa-9f25-48c6-bf90-68c163a66b23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:__name(function(msg){assert.strictEqual(this,null);assert.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\"),noColors:true})",
                  "err": {},
                  "uuid": "372218f8-3419-4327-a63f-7a3ebed5555d",
                  "parentUUID": "0b51acaa-9f25-48c6-bf90-68c163a66b23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b32bd5c-39fa-4694-b0fb-1eb5965a65ad",
                "ca40f641-6313-41c0-a0c1-d45c819d0cce",
                "9d2c5e94-fcac-4e4b-83c3-5ae226c059e8",
                "016e61cc-14a2-458a-9dc2-feed56d955e7",
                "372218f8-3419-4327-a63f-7a3ebed5555d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d371c54e-9dfe-4de9-981b-16112eabb984",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "7f0499ec-412c-4bd4-a6e3-b95b83d76e61",
                  "parentUUID": "d371c54e-9dfe-4de9-981b-16112eabb984",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "0cab8d8d-b837-4755-8c27-c7a6505266a1",
                  "parentUUID": "d371c54e-9dfe-4de9-981b-16112eabb984",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});assert.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "dbfad337-aa82-4323-8b19-4efed4bd0b19",
                  "parentUUID": "d371c54e-9dfe-4de9-981b-16112eabb984",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});assert.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "1ed4ea06-450c-40c9-939d-fdfbb359e9b8",
                  "parentUUID": "d371c54e-9dfe-4de9-981b-16112eabb984",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f0499ec-412c-4bd4-a6e3-b95b83d76e61",
                "0cab8d8d-b837-4755-8c27-c7a6505266a1",
                "dbfad337-aa82-4323-8b19-4efed4bd0b19",
                "1ed4ea06-450c-40c9-939d-fdfbb359e9b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aaf209d7-67f5-471e-a409-7b06a9df73b5",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters();assert.deepEqual(result,[])",
                  "err": {},
                  "uuid": "2e050edc-bb4e-4e00-a3c0-cb0678ef42fd",
                  "parentUUID": "aaf209d7-67f5-471e-a409-7b06a9df73b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({host:\"192.168.178.2\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "59dbee3b-e4db-4a90-860b-f9bf12ce5668",
                  "parentUUID": "aaf209d7-67f5-471e-a409-7b06a9df73b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({airplayCredentials:\"****\",companionCredentials:\"1234\",dmapCredentials:\"****\",hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",mrpCredentials:\"****\",protocol:NodePyATVProtocol.mrp,raopCredentials:\"::foo:\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "54824e66-28f7-4b2a-9189-b6189c16cb28",
                  "parentUUID": "aaf209d7-67f5-471e-a409-7b06a9df73b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e050edc-bb4e-4e00-a3c0-cb0678ef42fd",
                "59dbee3b-e4db-4a90-860b-f9bf12ce5668",
                "54824e66-28f7-4b2a-9189-b6189c16cb28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf5bfee5-6f20-4081-ba51-d5aa075d4616",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "91b61005-2851-4952-9a5c-3f0ca2303938",
                  "parentUUID": "bf5bfee5-6f20-4081-ba51-d5aa075d4616",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=parseState(null,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "9fb28f1f-e74c-4b06-bb4d-14a0b253318b",
                  "parentUUID": "bf5bfee5-6f20-4081-ba51-d5aa075d4616",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,content_identifier:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",episode_number:null,focus_state:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",itunes_store_identifier:null,media_type:\"video\",output_devices:null,position:27,power_state:null,repeat:\"off\",result:\"success\",season_number:null,series_name:null,shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097,volume:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "62b462ec-904a-4e33-af27-f52e0fb4d70e",
                  "parentUUID": "bf5bfee5-6f20-4081-ba51-d5aa075d4616",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};assert.throws(()=>{parseState(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "a2db750f-b9e7-49df-afac-6167042b8668",
                  "parentUUID": "bf5bfee5-6f20-4081-ba51-d5aa075d4616",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "65f66b1b-8ee2-42cb-8f8c-105f1d230d6d",
                  "parentUUID": "bf5bfee5-6f20-4081-ba51-d5aa075d4616",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:Infinity,app:0,app_id:891645381647289,artist:90,content_identifier:null,datetime:true,device_state:43,episode_number:null,focus_state:null,genre:Math.PI,hash:1337,itunes_store_identifier:null,media_type:false,output_devices:null,position:\"0:30.123\",power_state:null,repeat:true,result:\"success\",season_number:null,series_name:null,shuffle:false,title:void 0,total_time:\"23min\",volume:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "52f86997-48af-454c-9aed-25c1910cd2a9",
                  "parentUUID": "bf5bfee5-6f20-4081-ba51-d5aa075d4616",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={device_state:\"initiating\",media_type:\"3d-experience\",repeat:\"nothing\",shuffle:\"everything\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "cd40fd41-dcec-4ff5-8ec9-21acdb2882b5",
                  "parentUUID": "bf5bfee5-6f20-4081-ba51-d5aa075d4616",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91b61005-2851-4952-9a5c-3f0ca2303938",
                "9fb28f1f-e74c-4b06-bb4d-14a0b253318b",
                "62b462ec-904a-4e33-af27-f52e0fb4d70e",
                "a2db750f-b9e7-49df-afac-6167042b8668",
                "65f66b1b-8ee2-42cb-8f8c-105f1d230d6d",
                "52f86997-48af-454c-9aed-25c1910cd2a9",
                "cd40fd41-dcec-4ff5-8ec9-21acdb2882b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}