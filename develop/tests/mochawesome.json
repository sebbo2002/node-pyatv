{
  "stats": {
    "suites": 102,
    "tests": 174,
    "passes": 172,
    "pending": 2,
    "failures": 0,
    "start": "2025-09-25T05:35:06.806Z",
    "end": "2025-09-25T05:35:18.968Z",
    "duration": 12162,
    "testsRegistered": 174,
    "passPercent": 100,
    "pendingPercent": 1.1494252873563218,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "48d91404-6384-4d02-ba67-91c04dcd9161",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "11254187-d8b5-4b03-b89f-5cedb2e970ca",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "171ebdc0-73c8-4785-b61b-4fc27f2c2cb8",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "9b186e93-883f-49af-8ec4-cb46e9b51eda",
                  "parentUUID": "171ebdc0-73c8-4785-b61b-4fc27f2c2cb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b186e93-883f-49af-8ec4-cb46e9b51eda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e102fa5c-cb31-492b-987c-f20ed874510e",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "5c8399a4-bbde-4d6c-9035-d65e1f6a333a",
                  "parentUUID": "e102fa5c-cb31-492b-987c-f20ed874510e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c8399a4-bbde-4d6c-9035-d65e1f6a333a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d280785-7027-4f7a-97c7-1823177eece4",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "5bcecfda-9fc3-4c3e-ae32-b934737b9849",
                  "parentUUID": "4d280785-7027-4f7a-97c7-1823177eece4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bcecfda-9fc3-4c3e-ae32-b934737b9849"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2164481a-7db2-462e-bfaa-da1d298e8f21",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "173e0a33-87b2-4104-8f69-b4951bc901d3",
                  "parentUUID": "2164481a-7db2-462e-bfaa-da1d298e8f21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "173e0a33-87b2-4104-8f69-b4951bc901d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "078055bc-dbbf-4bc2-921e-b3d3f59a7d7a",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new import_device_event.default({device,key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "945223a2-3ca2-4045-a5a7-b6055b137bde",
                  "parentUUID": "078055bc-dbbf-4bc2-921e-b3d3f59a7d7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "945223a2-3ca2-4045-a5a7-b6055b137bde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "78145f5d-a0e6-479f-a8ca-fa1abb231605",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fe24cb6d-0634-4d36-b784-231451710cee",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "e827a243-ad23-4561-84a5-6a439a277ce2",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "5f912445-2f36-4542-a4ca-00070ac0705c",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);import_assert.default.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "0f608ac1-fdf0-42e7-bd31-f0e82e0e5589",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{import_assert.default.ok(error instanceof Error);import_assert.default.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "c784a7cf-e202-47c0-87bb-7c8a1f2d02e4",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);import_assert.default.strictEqual(spawnCounter,2);import_assert.default.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "a15ca756-a4de-468d-a908-c3ce52bb7f46",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);import_assert.default.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "70ad6b41-4f07-4e30-b7e6-7caddd2b179d",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "a1462d32-bcb7-46e8-8de9-adb38b1f1f41",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "e5dc9bb7-d970-4705-a621-5c9df89a41ea",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),focus_state:\"unfocused\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"focusState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"unfocused\");import_assert.default.strictEqual(event.newValue,import_types.NodePyATVFocusState.unfocused);import_assert.default.strictEqual(event.value,\"unfocused\");import_assert.default.strictEqual(event.value,import_types.NodePyATVFocusState.unfocused);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "73249e66-ee51-4458-88c8-ffb82e770011",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),output_devices:[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}],result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"outputDevices\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.deepStrictEqual(event.newValue,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.value,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "46dd9f1d-2049-4cf8-8e1e-911a1f0467af",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),result:\"success\",volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"volume\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,20);import_assert.default.strictEqual(event.value,20);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "6fb133f6-1781-42f9-8925-009b72c79bf5",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),foo:\"bar\",result:\"success\"});cp.end()})});device.on(\"update\",event=>{import_assert.default.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "0217418c-b7a9-45d8-8b06-8a75efe1047d",
                  "parentUUID": "fe24cb6d-0634-4d36-b784-231451710cee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e827a243-ad23-4561-84a5-6a439a277ce2",
                "5f912445-2f36-4542-a4ca-00070ac0705c",
                "0f608ac1-fdf0-42e7-bd31-f0e82e0e5589",
                "c784a7cf-e202-47c0-87bb-7c8a1f2d02e4",
                "a15ca756-a4de-468d-a908-c3ce52bb7f46",
                "70ad6b41-4f07-4e30-b7e6-7caddd2b179d",
                "a1462d32-bcb7-46e8-8de9-adb38b1f1f41",
                "e5dc9bb7-d970-4705-a621-5c9df89a41ea",
                "73249e66-ee51-4458-88c8-ffb82e770011",
                "46dd9f1d-2049-4cf8-8e1e-911a1f0467af",
                "6fb133f6-1781-42f9-8925-009b72c79bf5",
                "0217418c-b7a9-45d8-8b06-8a75efe1047d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eadc8410-4620-429b-a299-0af7f65ab145",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "a205824b-fd67-4f29-b841-bb687dfacae6",
                  "parentUUID": "eadc8410-4620-429b-a299-0af7f65ab145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "dfa76bd4-178d-4a6e-92e3-368e88688084",
                  "parentUUID": "eadc8410-4620-429b-a299-0af7f65ab145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "73539e0b-4003-4314-9125-1a978b6f7333",
                  "parentUUID": "eadc8410-4620-429b-a299-0af7f65ab145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0508afe8-6ff2-4b80-9502-e1942d2ff6b5",
                  "parentUUID": "eadc8410-4620-429b-a299-0af7f65ab145",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a205824b-fd67-4f29-b841-bb687dfacae6",
                "dfa76bd4-178d-4a6e-92e3-368e88688084",
                "73539e0b-4003-4314-9125-1a978b6f7333"
              ],
              "failures": [],
              "pending": [
                "0508afe8-6ff2-4b80-9502-e1942d2ff6b5"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "727fd75a-5506-47d5-a593-af340ba80b2e",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "e6546581-98fc-4993-b458-8e77aad55368",
                  "parentUUID": "727fd75a-5506-47d5-a593-af340ba80b2e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6546581-98fc-4993-b458-8e77aad55368"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5adf7df9-89b0-43fc-81d7-e5958400c849",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const event=new import_lib.NodePyATVDeviceEvent({device,key:\"dateTime\",new:\"bar\",old:\"foo\"});let executions=0;device.once(\"test\",e=>{executions++;import_assert.default.strictEqual(e,event);import_assert.default.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "d9de3631-6146-482d-8d11-6d16422c7090",
                  "parentUUID": "5adf7df9-89b0-43fc-81d7-e5958400c849",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9de3631-6146-482d-8d11-6d16422c7090"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d1bf0b42-7ac4-43ad-b4be-160c25d98501",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "7c7dcdac-e75f-474a-8e16-4944a8437e57",
                  "parentUUID": "d1bf0b42-7ac4-43ad-b4be-160c25d98501",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c7dcdac-e75f-474a-8e16-4944a8437e57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd062492-aee7-48c8-9191-3abd0dfaa528",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();import_assert.default.ok(typeof result,\"number\");import_assert.default.ok(result>=10)",
                  "err": {},
                  "uuid": "1aae807a-d3cd-4b6d-a455-227b798db2cf",
                  "parentUUID": "bd062492-aee7-48c8-9191-3abd0dfaa528",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1aae807a-d3cd-4b6d-a455-227b798db2cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "169dab61-9eda-4013-b2c4-f45bf4db5139",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "757399c1-d4fd-4a73-b426-28efc693304d",
                  "parentUUID": "169dab61-9eda-4013-b2c4-f45bf4db5139",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "757399c1-d4fd-4a73-b426-28efc693304d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "19bb944b-389d-4cc9-9617-09744a7703b6",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "c057f52d-b45f-4c65-ad67-73c7a276662c",
                  "parentUUID": "19bb944b-389d-4cc9-9617-09744a7703b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c057f52d-b45f-4c65-ad67-73c7a276662c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ed1189b3-0e80-4996-9357-02ad76b55cbb",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "6c50bf81-2307-4f12-a174-123a68e44cef",
                  "parentUUID": "ed1189b3-0e80-4996-9357-02ad76b55cbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c50bf81-2307-4f12-a174-123a68e44cef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89729a37-08bc-4503-9f7b-1a8d115d4f02",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "ef771972-4ae3-4826-8ef6-e20cb69b68a1",
                  "parentUUID": "89729a37-08bc-4503-9f7b-1a8d115d4f02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef771972-4ae3-4826-8ef6-e20cb69b68a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67587962-88fd-4969-864a-9b1fdbdc0bcd",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "d45fe65d-9a8d-45b3-9718-9e8019a962a3",
                  "parentUUID": "67587962-88fd-4969-864a-9b1fdbdc0bcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d45fe65d-9a8d-45b3-9718-9e8019a962a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2858dea1-5274-4906-bd36-abc042cfd128",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "0f25d48a-32b7-4e5b-adec-fd98ec357acf",
                  "parentUUID": "2858dea1-5274-4906-bd36-abc042cfd128",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f25d48a-32b7-4e5b-adec-fd98ec357acf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3851fb22-3026-44f7-87ac-2293f29e6d21",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "966c1f4e-035a-4664-835c-4aefa5e9220e",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "a348da8b-df19-4511-8354-bd6f7654872c",
                  "parentUUID": "966c1f4e-035a-4664-835c-4aefa5e9220e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a348da8b-df19-4511-8354-bd6f7654872c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5d42f632-fade-44dc-ade6-b99fd3bacf66",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "54111ce5-9dab-459c-ac1d-ece6b0aff6f0",
                  "parentUUID": "5d42f632-fade-44dc-ade6-b99fd3bacf66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54111ce5-9dab-459c-ac1d-ece6b0aff6f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff32740a-1aa7-475c-b87c-32566574adc3",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "ee725620-feb0-4d2b-aebe-dc07be8c2c1f",
                  "parentUUID": "ff32740a-1aa7-475c-b87c-32566574adc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee725620-feb0-4d2b-aebe-dc07be8c2c1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be337e83-3dfc-42c2-9ebd-b7c8f691902d",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"],host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "a46d4926-1def-4193-906c-a3cd67239d6f",
                  "parentUUID": "be337e83-3dfc-42c2-9ebd-b7c8f691902d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a46d4926-1def-4193-906c-a3cd67239d6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00ddb15c-46a1-4313-b90a-d5c21629cf82",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.strictEqual(device.protocol,import_types.NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "8ba072ac-b5a7-4368-90d5-1ea3e31a1cdf",
                  "parentUUID": "00ddb15c-46a1-4313-b90a-d5c21629cf82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ba072ac-b5a7-4368-90d5-1ea3e31a1cdf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9bc6e200-21cc-4024-bc08-1bf6f350f929",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "3c152567-f414-420c-bef8-a4e3fca760ea",
                  "parentUUID": "9bc6e200-21cc-4024-bc08-1bf6f350f929",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c152567-f414-420c-bef8-a4e3fca760ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5752ea30-6795-413f-85dd-17d42ea817c3",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "30416e85-9e29-496d-817f-b5c7b34df5ef",
                  "parentUUID": "5752ea30-6795-413f-85dd-17d42ea817c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "2f10e9ba-69ce-48e9-a2d1-5b9f15399263",
                  "parentUUID": "5752ea30-6795-413f-85dd-17d42ea817c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30416e85-9e29-496d-817f-b5c7b34df5ef",
                "2f10e9ba-69ce-48e9-a2d1-5b9f15399263"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6b9b552b-8dc8-4939-9889-6a38117e6527",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "7ff4bc1c-04b7-451b-b32d-b8dd7960c6b3",
                  "parentUUID": "6b9b552b-8dc8-4939-9889-6a38117e6527",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "1fb30a3d-1710-4a4b-9922-13aff8d621c3",
                  "parentUUID": "6b9b552b-8dc8-4939-9889-6a38117e6527",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ff4bc1c-04b7-451b-b32d-b8dd7960c6b3",
                "1fb30a3d-1710-4a4b-9922-13aff8d621c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6395fd01-1d4b-460d-8324-3116cb797cfc",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",os:\"TvOS\"});import_assert.default.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "063c9645-983e-4948-97a9-a643aca886a0",
                  "parentUUID": "6395fd01-1d4b-460d-8324-3116cb797cfc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "e96f3ddd-3f02-42b3-82fd-ccebec97f28c",
                  "parentUUID": "6395fd01-1d4b-460d-8324-3116cb797cfc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "063c9645-983e-4948-97a9-a643aca886a0",
                "e96f3ddd-3f02-42b3-82fd-ccebec97f28c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d199d0d1-f10d-4bfa-bb29-40b0e9e872ec",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",version:\"15.5.1\"});import_assert.default.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "a7762384-d401-444f-8bad-d03e7327920b",
                  "parentUUID": "d199d0d1-f10d-4bfa-bb29-40b0e9e872ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "7ad48532-14bf-4e60-b3f5-b0cc5cfa8995",
                  "parentUUID": "d199d0d1-f10d-4bfa-bb29-40b0e9e872ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7762384-d401-444f-8bad-d03e7327920b",
                "7ad48532-14bf-4e60-b3f5-b0cc5cfa8995"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cbfba1ad-f72a-4226-a023-6b79e26342eb",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:import_types.NodePyATVProtocol.mrp},{port:7e3,protocol:import_types.NodePyATVProtocol.airplay}]});import_assert.default.deepStrictEqual(device.services,[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}])",
                  "err": {},
                  "uuid": "bfa0d787-8c64-429e-95a3-7710010e9a87",
                  "parentUUID": "cbfba1ad-f72a-4226-a023-6b79e26342eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "81edb8a8-3bf6-4917-92c4-e56afa7eace4",
                  "parentUUID": "cbfba1ad-f72a-4226-a023-6b79e26342eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfa0d787-8c64-429e-95a3-7710010e9a87",
                "81edb8a8-3bf6-4917-92c4-e56afa7eace4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "398108bb-1b43-4c99-b211-673dc8641683",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "980ee5cd-0c23-4abf-8f1b-f1abec6024f9",
                  "parentUUID": "398108bb-1b43-4c99-b211-673dc8641683",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new import_device.default({debug:fn,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "94e606f1-219f-45ba-97e3-a188db869b9a",
                  "parentUUID": "398108bb-1b43-4c99-b211-673dc8641683",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "318201c0-27bc-496b-84f5-51727a0f91eb",
                  "parentUUID": "398108bb-1b43-4c99-b211-673dc8641683",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "980ee5cd-0c23-4abf-8f1b-f1abec6024f9",
                "94e606f1-219f-45ba-97e3-a188db869b9a",
                "318201c0-27bc-496b-84f5-51727a0f91eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a1f36b5-d002-4bd5-a910-8f0ee2dc55da",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0);device.debug=true;import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "60f30849-0735-436d-870e-1f2de14304da",
                  "parentUUID": "7a1f36b5-d002-4bd5-a910-8f0ee2dc55da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "d11c6a47-a612-4970-a7dd-17f5beb253b2",
                  "parentUUID": "7a1f36b5-d002-4bd5-a910-8f0ee2dc55da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "6f78e909-181d-4b96-8df2-9e0758c73e2b",
                  "parentUUID": "7a1f36b5-d002-4bd5-a910-8f0ee2dc55da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});const fn=__name(()=>{},\"fn\");import_assert.default.strictEqual(device.debug,void 0);device.debug=fn;import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "94561c71-f2b0-45b9-b9ad-56ab64abe336",
                  "parentUUID": "7a1f36b5-d002-4bd5-a910-8f0ee2dc55da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60f30849-0735-436d-870e-1f2de14304da",
                "d11c6a47-a612-4970-a7dd-17f5beb253b2",
                "6f78e909-181d-4b96-8df2-9e0758c73e2b",
                "94561c71-f2b0-45b9-b9ad-56ab64abe336"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c41dcaf-1293-4c9c-b9bf-e2da7b5810a0",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.deepEqual(device.toJSON(),{host:\"192.168.178.2\",id:\"*****\",mac:void 0,name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "72bd24e1-fcbc-4f6f-a5ae-7dbba389c3fb",
                  "parentUUID": "9c41dcaf-1293-4c9c-b9bf-e2da7b5810a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={host:\"192.168.178.2\",id:\"*****\",mac:\"469943881251875\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay};const deviceA=new import_device.default(config);const deviceB=new import_device.default(deviceA.toJSON());import_assert.default.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "4ac5db04-66fc-4ad0-87db-e07a3ba9d1dd",
                  "parentUUID": "9c41dcaf-1293-4c9c-b9bf-e2da7b5810a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72bd24e1-fcbc-4f6f-a5ae-7dbba389c3fb",
                "4ac5db04-66fc-4ad0-87db-e07a3ba9d1dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "188f39eb-d7e2-4d22-9ebc-d1c4497459ed",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "19397026-f47e-444a-9fc7-802b12026aa2",
                  "parentUUID": "188f39eb-d7e2-4d22-9ebc-d1c4497459ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19397026-f47e-444a-9fc7-802b12026aa2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "56a026b7-f3f3-46f4-bc5d-4455b99412ed",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3875ecd8-70cd-4943-b897-267dccb3e0f6",
                  "parentUUID": "56a026b7-f3f3-46f4-bc5d-4455b99412ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const result=await device.getState();import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "aff7fbe7-2935-48fe-b153-6d8f2ebd47e1",
                  "parentUUID": "56a026b7-f3f3-46f4-bc5d-4455b99412ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});import_assert.default.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "1bec2fb7-18af-4edc-8d3c-17438f268ce5",
                  "parentUUID": "56a026b7-f3f3-46f4-bc5d-4455b99412ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date().toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();const secondResult=await device.getState();import_assert.default.strictEqual(firstResult.dateTime,secondResult.dateTime);import_assert.default.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "5e8e430e-bc95-4023-8d07-1187f49e2016",
                  "parentUUID": "56a026b7-f3f3-46f4-bc5d-4455b99412ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date(new Date().getTime()-1e3).toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();import_assert.default.strictEqual(firstResult.position,27);const secondResult=await device.getState();import_assert.default.ok(secondResult.position);import_assert.default.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);import_assert.default.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "1f97a618-f612-4a06-b982-b98a6d8efa5a",
                  "parentUUID": "56a026b7-f3f3-46f4-bc5d-4455b99412ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aff7fbe7-2935-48fe-b153-6d8f2ebd47e1",
                "1bec2fb7-18af-4edc-8d3c-17438f268ce5",
                "5e8e430e-bc95-4023-8d07-1187f49e2016",
                "1f97a618-f612-4a06-b982-b98a6d8efa5a"
              ],
              "failures": [],
              "pending": [
                "3875ecd8-70cd-4943-b897-267dccb3e0f6"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8bff6bf6-83e9-4a42-9bc6-e57487863571",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({datetime:\"2020-11-07T22:38:43.608030+01:00\",result:\"success\",title:\"Solo: A Star Wars Story\"})})});import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");import_assert.default.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "d8d5ed67-2e6e-4a86-ad1b-f586aac75d10",
                  "parentUUID": "8bff6bf6-83e9-4a42-9bc6-e57487863571",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8d5ed67-2e6e-4a86-ad1b-f586aac75d10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a22874f4-48b5-43ec-aee4-1d2a31460dd7",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:new Date().toJSON(),result:\"success\"})})});const result=await device.getDateTime();import_assert.default.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "34eb0d03-d521-485e-87de-cf88b2f36d52",
                  "parentUUID": "a22874f4-48b5-43ec-aee4-1d2a31460dd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34eb0d03-d521-485e-87de-cf88b2f36d52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b6d4bfd-435e-4bf4-956b-9ce5960a1278",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({hash:\"12345\",result:\"success\"})})});const result=await device.getHash();import_assert.default.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "251b13ab-e9ed-4360-b234-941eeb6bdedf",
                  "parentUUID": "9b6d4bfd-435e-4bf4-956b-9ce5960a1278",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "251b13ab-e9ed-4360-b234-941eeb6bdedf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c8df07b-aa34-49bb-a252-48fbd2e60163",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({media_type:\"video\",result:\"success\"})})});const result=await device.getMediaType();import_assert.default.deepStrictEqual(result,import_types.NodePyATVMediaType.video);import_assert.default.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "faedef63-4c82-4539-8c63-3cb5dae80f8a",
                  "parentUUID": "7c8df07b-aa34-49bb-a252-48fbd2e60163",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "faedef63-4c82-4539-8c63-3cb5dae80f8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "01abc2a4-1f00-4cce-8017-9825323aae07",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({device_state:\"seeking\",result:\"success\"})})});const result=await device.getDeviceState();import_assert.default.deepStrictEqual(result,import_types.NodePyATVDeviceState.seeking);import_assert.default.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "473ec645-d9b5-4dcf-b56e-e71e44e35cad",
                  "parentUUID": "01abc2a4-1f00-4cce-8017-9825323aae07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "473ec645-d9b5-4dcf-b56e-e71e44e35cad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7b63d4b-f6a4-4f47-b660-b806a55c8d34",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();import_assert.default.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "0f3a80b0-9f22-4c58-bf05-2f6bef2dbabe",
                  "parentUUID": "f7b63d4b-f6a4-4f47-b660-b806a55c8d34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f3a80b0-9f22-4c58-bf05-2f6bef2dbabe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2cdc2cfd-a7fa-4ccb-b206-ccc876ad1491",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({artist:\"My Artist\",result:\"success\"})})});const result=await device.getArtist();import_assert.default.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "4426185e-2657-4b7a-a927-65a863aa1592",
                  "parentUUID": "2cdc2cfd-a7fa-4ccb-b206-ccc876ad1491",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4426185e-2657-4b7a-a927-65a863aa1592"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21825f96-fd3b-4c2c-9323-3e17c69e2654",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:\"My ALbum\",result:\"success\"})})});const result=await device.getAlbum();import_assert.default.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "b62c8752-cf7b-4048-b5ca-90f006cc678d",
                  "parentUUID": "21825f96-fd3b-4c2c-9323-3e17c69e2654",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b62c8752-cf7b-4048-b5ca-90f006cc678d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c6a6daed-2b10-4b8d-8233-c6f2619566d5",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({genre:\"My Genre\",result:\"success\"})})});const result=await device.getGenre();import_assert.default.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "c9313871-c553-4392-9ca6-364ef51b5176",
                  "parentUUID": "c6a6daed-2b10-4b8d-8233-c6f2619566d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9313871-c553-4392-9ca6-364ef51b5176"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1ec720d-ad62-43a0-9eae-21db8c490d0d",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();import_assert.default.strictEqual(result,45)",
                  "err": {},
                  "uuid": "164b543d-15e0-4666-a723-4e01747d0281",
                  "parentUUID": "e1ec720d-ad62-43a0-9eae-21db8c490d0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "164b543d-15e0-4666-a723-4e01747d0281"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df793ddf-bc56-4f18-b0b6-face379dc4b4",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({position:30,result:\"success\"})})});const result=await device.getPosition();import_assert.default.strictEqual(result,30)",
                  "err": {},
                  "uuid": "cd1ff007-130f-4c67-a683-2e707c159433",
                  "parentUUID": "df793ddf-bc56-4f18-b0b6-face379dc4b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd1ff007-130f-4c67-a683-2e707c159433"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf5a5b03-eec9-44c2-b9d6-0dd8366def0a",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();import_assert.default.deepStrictEqual(result,import_types.NodePyATVShuffleState.songs);import_assert.default.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "d6984093-bf3d-4f34-8eec-caaf23d2bf3b",
                  "parentUUID": "bf5a5b03-eec9-44c2-b9d6-0dd8366def0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6984093-bf3d-4f34-8eec-caaf23d2bf3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "04f3b83f-f385-4ffb-a47f-5319eed519ad",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({repeat:\"all\",result:\"success\"})})});const result=await device.getRepeat();import_assert.default.deepStrictEqual(result,import_types.NodePyATVRepeatState.all);import_assert.default.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "6a2e765e-3a53-4bff-ae5d-c157569621a6",
                  "parentUUID": "04f3b83f-f385-4ffb-a47f-5319eed519ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a2e765e-3a53-4bff-ae5d-c157569621a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "92eece20-4a73-47dc-91c6-82f060bc5e24",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app:\"My App\",result:\"success\"})})});const result=await device.getApp();import_assert.default.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "4b9629ef-992b-483a-963f-86d043486d01",
                  "parentUUID": "92eece20-4a73-47dc-91c6-82f060bc5e24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b9629ef-992b-483a-963f-86d043486d01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "56484f56-3c1d-4abf-bdd3-ad8ef7ae3171",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app_id:\"app.example.com\",result:\"success\"})})});const result=await device.getAppId();import_assert.default.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "89442496-c997-4ab2-b476-9e9d16fbfded",
                  "parentUUID": "56484f56-3c1d-4abf-bdd3-ad8ef7ae3171",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89442496-c997-4ab2-b476-9e9d16fbfded"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1b0eaa4f-9a42-4016-8a42-ff5adfab1ca4",
              "title": "getPowerState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPowerState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({power_state:\"on\",result:\"success\"})})});const result=await device.getPowerState();import_assert.default.strictEqual(result,import_types.NodePyATVPowerState.on)",
                  "err": {},
                  "uuid": "fb3b14e7-3da8-49a5-942f-bfcb06a95537",
                  "parentUUID": "1b0eaa4f-9a42-4016-8a42-ff5adfab1ca4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb3b14e7-3da8-49a5-942f-bfcb06a95537"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "353f4c5a-6e73-485d-89d7-3927531fd347",
              "title": "getVolume()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getVolume() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",volume:50})})});const result=await device.getVolume();import_assert.default.strictEqual(result,50)",
                  "err": {},
                  "uuid": "633518ed-5cde-4dd1-a4dc-90b91e9e5138",
                  "parentUUID": "353f4c5a-6e73-485d-89d7-3927531fd347",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "633518ed-5cde-4dd1-a4dc-90b91e9e5138"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31e27ad5-c584-4f2e-a827-1707694512fc",
              "title": "getFocusState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getFocusState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({focus_state:\"focused\",result:\"success\"})})});const result=await device.getFocusState();import_assert.default.strictEqual(result,import_types.NodePyATVFocusState.focused)",
                  "err": {},
                  "uuid": "a8da4a47-ecdc-4101-8ae4-a0ceb7223cee",
                  "parentUUID": "31e27ad5-c584-4f2e-a827-1707694512fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8da4a47-ecdc-4101-8ae4-a0ceb7223cee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "07fa6466-8b54-45ea-9efa-0ae616e1d24a",
              "title": "getOutputDevices()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getOutputDevices() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({output_devices:[{identifier:\"foo\",name:\"Apple TV\"}],result:\"success\"})})});const result=await device.getOutputDevices();import_assert.default.deepStrictEqual(result,[{identifier:\"foo\",name:\"Apple TV\"}])",
                  "err": {},
                  "uuid": "e09f004f-42db-41fa-92ee-c4ced331d677",
                  "parentUUID": "07fa6466-8b54-45ea-9efa-0ae616e1d24a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e09f004f-42db-41fa-92ee-c4ced331d677"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24746534-b449-4172-817a-dad127b6a748",
              "title": "getContentIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getContentIdentifier() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({content_identifier:\"1234\",result:\"success\"})})});const result=await device.getContentIdentifier();import_assert.default.strictEqual(result,\"1234\")",
                  "err": {},
                  "uuid": "e95f3f63-6607-48c1-a366-09a78481e328",
                  "parentUUID": "24746534-b449-4172-817a-dad127b6a748",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e95f3f63-6607-48c1-a366-09a78481e328"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e1a208f-f22c-4f7c-b4c0-08c7d0b78a69",
              "title": "getiTunesStoreIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getiTunesStoreIdentifier() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({itunes_store_identifier:1234,result:\"success\"})})});const result=await device.getiTunesStoreIdentifier();import_assert.default.strictEqual(result,1234)",
                  "err": {},
                  "uuid": "8a6648d0-ef6d-42ce-9dfe-b17c9cb7cb59",
                  "parentUUID": "7e1a208f-f22c-4f7c-b4c0-08c7d0b78a69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a6648d0-ef6d-42ce-9dfe-b17c9cb7cb59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d5389f1-b5bd-4178-a724-73e092012a15",
              "title": "getEpisodeNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getEpisodeNumber() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({episode_number:12,result:\"success\"})})});const result=await device.getEpisodeNumber();import_assert.default.strictEqual(result,12)",
                  "err": {},
                  "uuid": "646d9eb6-9e40-4417-b029-8cf599dfbc3e",
                  "parentUUID": "0d5389f1-b5bd-4178-a724-73e092012a15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "646d9eb6-9e40-4417-b029-8cf599dfbc3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0de3d3d-132b-4889-94d7-92c20e524814",
              "title": "getSeasonNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeasonNumber() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",season_number:2})})});const result=await device.getSeasonNumber();import_assert.default.strictEqual(result,2)",
                  "err": {},
                  "uuid": "6b27ed1c-b6dd-4774-96cb-2af4966faef5",
                  "parentUUID": "f0de3d3d-132b-4889-94d7-92c20e524814",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b27ed1c-b6dd-4774-96cb-2af4966faef5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d62b37c3-c313-46ea-a409-7696ae4853d3",
              "title": "getSeriesName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeriesName() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",series_name:\"The Testing Disaster\"})})});const result=await device.getSeriesName();import_assert.default.strictEqual(result,\"The Testing Disaster\")",
                  "err": {},
                  "uuid": "b3a46d3c-1730-42d5-a4bc-597eab429408",
                  "parentUUID": "d62b37c3-c313-46ea-a409-7696ae4853d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3a46d3c-1730-42d5-a4bc-597eab429408"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cee9c22f-2711-4623-9186-11a5c672af30",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();import_assert.default.strictEqual(result.length,25);import_assert.default.strictEqual(result[0].id,\"com.apple.Fitness\");import_assert.default.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "25002d2c-19f5-4f31-b6d4-e897aeab92f5",
                  "parentUUID": "cee9c22f-2711-4623-9186-11a5c672af30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25002d2c-19f5-4f31-b6d4-e897aeab92f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d78cf02-e7bf-45c2-9b06-47cdf512aae8",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(import_types.NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "142fbdd1-2b51-4c87-8edd-f280a6abd6e8",
                  "parentUUID": "1d78cf02-e7bf-45c2-9b06-47cdf512aae8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});await import_assert.default.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "bd99cc5c-868d-4257-9f2a-43b81fbba2fa",
                  "parentUUID": "1d78cf02-e7bf-45c2-9b06-47cdf512aae8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"failure\"}')})});await import_assert.default.rejects(async()=>{await device.pressKey(import_types.NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "37c2031f-da25-4cb4-bcc3-66999391c81e",
                  "parentUUID": "1d78cf02-e7bf-45c2-9b06-47cdf512aae8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "142fbdd1-2b51-4c87-8edd-f280a6abd6e8",
                "bd99cc5c-868d-4257-9f2a-43b81fbba2fa",
                "37c2031f-da25-4cb4-bcc3-66999391c81e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "17e36654-f428-440a-ac69-1ef971060d4f",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "96b6cde2-1cf6-4ff8-9bdc-b256c3427716",
                  "parentUUID": "17e36654-f428-440a-ac69-1ef971060d4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96b6cde2-1cf6-4ff8-9bdc-b256c3427716"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a4a5e60f-c952-40ea-a6e1-4c6ca66fadad",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1504f6a6-c500-470d-b52e-78a708acc521",
                  "parentUUID": "a4a5e60f-c952-40ea-a6e1-4c6ca66fadad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1504f6a6-c500-470d-b52e-78a708acc521"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "225f6c2f-dcbd-455a-9990-7b28dc4df2ba",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "55d93055-6f09-4471-8034-b80010ff1461",
                  "parentUUID": "225f6c2f-dcbd-455a-9990-7b28dc4df2ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55d93055-6f09-4471-8034-b80010ff1461"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "56b7e743-0997-41cf-a591-56864c328219",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "0d3c0663-aa3a-49fe-b0e6-9b8dbcfe4a51",
                  "parentUUID": "56b7e743-0997-41cf-a591-56864c328219",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d3c0663-aa3a-49fe-b0e6-9b8dbcfe4a51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a6b34c94-bb63-42e6-8e12-677364027d0f",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "149d98e5-7cd2-4bf8-8491-47358281725e",
                  "parentUUID": "a6b34c94-bb63-42e6-8e12-677364027d0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "149d98e5-7cd2-4bf8-8491-47358281725e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ebfa1ee7-0279-4c2d-bbd8-78a9229b81c1",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "23b8f32f-a2c0-47e6-bab5-df2f1903858f",
                  "parentUUID": "ebfa1ee7-0279-4c2d-bbd8-78a9229b81c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23b8f32f-a2c0-47e6-bab5-df2f1903858f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83b78a8e-d861-4336-a84d-ccd545e0216e",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f4cb5e0a-fa19-4b07-b678-eae1da570cbc",
                  "parentUUID": "83b78a8e-d861-4336-a84d-ccd545e0216e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4cb5e0a-fa19-4b07-b678-eae1da570cbc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5daf2a2-2af8-4d80-ab6d-6fa87bb5a2f2",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "4006075f-20e1-42b8-aa0a-33b192b444ab",
                  "parentUUID": "a5daf2a2-2af8-4d80-ab6d-6fa87bb5a2f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4006075f-20e1-42b8-aa0a-33b192b444ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "54cd2d2a-f169-4c24-956c-a77660f92567",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f69415d5-14c7-4fe1-8e87-892661f88eb5",
                  "parentUUID": "54cd2d2a-f169-4c24-956c-a77660f92567",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f69415d5-14c7-4fe1-8e87-892661f88eb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "edf0c37b-eba4-481d-9e51-555493d5d20e",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "8b257443-4566-4158-b6fa-39e8ebf5b684",
                  "parentUUID": "edf0c37b-eba4-481d-9e51-555493d5d20e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b257443-4566-4158-b6fa-39e8ebf5b684"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7668fc8-b3eb-4404-abc5-95a8354c0eb5",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b55df484-0ea4-450c-9a52-f82a0fe34377",
                  "parentUUID": "e7668fc8-b3eb-4404-abc5-95a8354c0eb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b55df484-0ea4-450c-9a52-f82a0fe34377"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0968d5cc-91fd-4b26-b144-d93ed10f05d9",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f1c6ec13-0ce3-42a4-9221-ab297f748cba",
                  "parentUUID": "0968d5cc-91fd-4b26-b144-d93ed10f05d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1c6ec13-0ce3-42a4-9221-ab297f748cba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb8ca9c8-123c-4ca7-832f-bbe603a726d9",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "a018719c-2a42-4dfa-bf7d-509cab2d59fb",
                  "parentUUID": "cb8ca9c8-123c-4ca7-832f-bbe603a726d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a018719c-2a42-4dfa-bf7d-509cab2d59fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2af61f9c-3773-4b38-8a3f-64b4f3208bba",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "e4538509-f391-4a69-924d-200cbf80ec02",
                  "parentUUID": "2af61f9c-3773-4b38-8a3f-64b4f3208bba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4538509-f391-4a69-924d-200cbf80ec02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aeb69180-aa67-4ad1-bdda-6d52b1f4ce34",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "ec2ee5d9-2873-4ef6-a8ca-2645ac9f3d30",
                  "parentUUID": "aeb69180-aa67-4ad1-bdda-6d52b1f4ce34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec2ee5d9-2873-4ef6-a8ca-2645ac9f3d30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c0e5397-1753-4dd5-a5ad-3ee74d4aed79",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c54b649a-bfe1-451d-ac88-eeb873d8e290",
                  "parentUUID": "1c0e5397-1753-4dd5-a5ad-3ee74d4aed79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c54b649a-bfe1-451d-ac88-eeb873d8e290"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8621cf92-d7b5-426d-b490-908d9aa6978e",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "bd3f8f27-a86c-46b2-a219-fcb2a475562d",
                  "parentUUID": "8621cf92-d7b5-426d-b490-908d9aa6978e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd3f8f27-a86c-46b2-a219-fcb2a475562d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee058d26-a6df-477a-8c40-2ef4872c3a03",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9c8bd56f-f87c-4afa-970d-0e2331cfbf86",
                  "parentUUID": "ee058d26-a6df-477a-8c40-2ef4872c3a03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c8bd56f-f87c-4afa-970d-0e2331cfbf86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f12727f6-f7b3-4b26-8bab-4d3f9d62c498",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3ec0fec1-144b-4092-bf71-1d9b2e8e30f1",
                  "parentUUID": "f12727f6-f7b3-4b26-8bab-4d3f9d62c498",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ec0fec1-144b-4092-bf71-1d9b2e8e30f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a45ec6e9-1639-4e96-8961-7e97002792d7",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3236ca3f-2bd9-458b-b560-c5c0ad8f9676",
                  "parentUUID": "a45ec6e9-1639-4e96-8961-7e97002792d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3236ca3f-2bd9-458b-b560-c5c0ad8f9676"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c3dadd8-6a34-4ec9-ae1d-e8daa82bd0cf",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "789dc9cc-1968-448a-9040-8200ea5a0838",
                  "parentUUID": "2c3dadd8-6a34-4ec9-ae1d-e8daa82bd0cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "789dc9cc-1968-448a-9040-8200ea5a0838"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb413d90-fbb6-47d9-a964-0de7f760a152",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9f1c5587-f863-49b5-b487-6f3b9420827c",
                  "parentUUID": "fb413d90-fbb6-47d9-a964-0de7f760a152",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f1c5587-f863-49b5-b487-6f3b9420827c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4835610-8fe3-457e-8593-c6bc7a518ad9",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "2da73132-29e0-48ac-864d-fc70d8a25bfe",
                  "parentUUID": "d4835610-8fe3-457e-8593-c6bc7a518ad9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2da73132-29e0-48ac-864d-fc70d8a25bfe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ade445d8-0822-4c4f-814e-acc5cd7c2390",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "87816a36-c995-4b7f-bc66-bbfd2cb629cf",
                  "parentUUID": "ade445d8-0822-4c4f-814e-acc5cd7c2390",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87816a36-c995-4b7f-bc66-bbfd2cb629cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1073e38c-0e69-49bc-b9d5-eec71787d169",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 669,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await import_lib.default.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}import_assert.default.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");import_assert.default.ok(result.pyatv.length>=5,\"result.pyatv has content\");import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "2fd73b26-4007-4938-80e1-e4d20c29b2c0",
                  "parentUUID": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});import_assert.default.ok(result.pyatv);import_assert.default.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "e59d3319-c12b-4224-8387-c4bc026633bb",
                  "parentUUID": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())});import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "7a1a7a47-b511-494f-bd49-93c01a83ab45",
                  "parentUUID": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({atvremotePath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "0ee62f5b-a84e-4874-b9c0-cf42082928a0",
                  "parentUUID": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "d847d04b-7e6e-489e-bacd-cb0346123403",
                  "parentUUID": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "41e18d3f-f822-4955-95b1-b3686e7c89f9",
                  "parentUUID": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.stderr(\"Hello World!\").code(123).end())});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "5218dc5b-4af4-468f-ae36-6742fa69b8da",
                  "parentUUID": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "da1437d7-02c9-4589-8f73-6680547472df",
                  "parentUUID": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "9de00d45-eeb1-44b0-b962-cf60e644f319",
                  "parentUUID": "5421ab1f-1a1f-4c8c-b06b-ee4083e75ce6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fd73b26-4007-4938-80e1-e4d20c29b2c0",
                "e59d3319-c12b-4224-8387-c4bc026633bb",
                "7a1a7a47-b511-494f-bd49-93c01a83ab45",
                "0ee62f5b-a84e-4874-b9c0-cf42082928a0",
                "d847d04b-7e6e-489e-bacd-cb0346123403",
                "41e18d3f-f822-4955-95b1-b3686e7c89f9",
                "5218dc5b-4af4-468f-ae36-6742fa69b8da",
                "da1437d7-02c9-4589-8f73-6680547472df",
                "9de00d45-eeb1-44b0-b962-cf60e644f319"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 683,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e167ef83-93a4-4481-82ed-75365be9b777",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5829,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await import_lib.default.check()",
                  "err": {},
                  "uuid": "0d12d386-2e68-4dfb-8b78-0233db10a7ce",
                  "parentUUID": "e167ef83-93a4-4481-82ed-75365be9b777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "f6612917-d944-4303-a42e-bcd6c1b8ee2f",
                  "parentUUID": "e167ef83-93a4-4481-82ed-75365be9b777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "4ae287fe-cf41-45d6-b625-57e3ffdff2ee",
                  "parentUUID": "e167ef83-93a4-4481-82ed-75365be9b777",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "00be671a-1feb-419f-9913-cfdfee61c348",
                  "parentUUID": "e167ef83-93a4-4481-82ed-75365be9b777",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d12d386-2e68-4dfb-8b78-0233db10a7ce",
                "f6612917-d944-4303-a42e-bcd6c1b8ee2f",
                "4ae287fe-cf41-45d6-b625-57e3ffdff2ee",
                "00be671a-1feb-419f-9913-cfdfee61c348"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5836,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f4147a3a-0521-413c-9533-980d402a5923",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5432,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await import_lib.default.find();import_assert.default.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "2404ca34-199f-48f3-bf15-eb4153f9ca8a",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.find({atvscriptPath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "0ed8a730-d9de-4286-8df3-e012b1d265f2",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "35758ca1-5fd7-472a-9eb9-3b2bd1c1b0f1",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "919122bb-9efb-4921-be05-252167fce480",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\",result:\"failure\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "664b7c21-2564-4653-b9c5-fdc06a3ea09d",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(JSON.stringify({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "92d5a40b-6ead-46cc-9e2a-3c8197cb7ae1",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "18eab7cb-8688-45c5-8d17-ac3efac42a7a",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "3d6ce09e-0b1e-4cf5-ace9-a778bcdfe321",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",identifier:\"xxx\",name:\"Vardagsrum\"}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,void 0);import_assert.default.strictEqual(devices[0].modelName,void 0);import_assert.default.strictEqual(devices[0].os,void 0);import_assert.default.strictEqual(devices[0].version,void 0);import_assert.default.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "fcfdfa76-7510-45d0-8331-1ea538f8710c",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",device_info:{model:\"Gen4K\",model_str:\"Apple TV 4K\",operating_system:\"TvOS\",version:\"15.5.1\"},identifier:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}]}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,\"Gen4K\");import_assert.default.strictEqual(devices[0].modelName,\"Apple TV 4K\");import_assert.default.strictEqual(devices[0].os,\"TvOS\");import_assert.default.strictEqual(devices[0].version,\"15.5.1\");import_assert.default.deepStrictEqual(devices[0].services,[{port:49152,protocol:import_lib.NodePyATVProtocol.mrp},{port:7e3,protocol:import_lib.NodePyATVProtocol.airplay}])",
                  "err": {},
                  "uuid": "779eb73b-b295-4b05-97a4-910b47003ddd",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});import_assert.default.strictEqual(devices.length,4);import_assert.default.strictEqual(devices[0].name,\"Living Room\");import_assert.default.strictEqual(devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(devices[1].name,\"Kitchen\");import_assert.default.strictEqual(devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(devices[2].name,\"Bedroom\");import_assert.default.strictEqual(devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(devices[3].name,\"Basement\");import_assert.default.strictEqual(devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "b39024a3-7961-4ec9-ac36-0752899752d7",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);import_assert.default.strictEqual(response.devices.length,4);import_assert.default.strictEqual(response.errors.length,2);import_assert.default.strictEqual(response.devices[0].name,\"Living Room\");import_assert.default.strictEqual(response.devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(response.devices[1].name,\"Kitchen\");import_assert.default.strictEqual(response.devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(response.devices[2].name,\"Bedroom\");import_assert.default.strictEqual(response.devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(response.devices[3].name,\"Basement\");import_assert.default.strictEqual(response.devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");import_assert.default.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");import_assert.default.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "238f4e88-1a82-448d-b33a-f9f8d0585e3e",
                  "parentUUID": "f4147a3a-0521-413c-9533-980d402a5923",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2404ca34-199f-48f3-bf15-eb4153f9ca8a",
                "0ed8a730-d9de-4286-8df3-e012b1d265f2",
                "35758ca1-5fd7-472a-9eb9-3b2bd1c1b0f1",
                "919122bb-9efb-4921-be05-252167fce480",
                "664b7c21-2564-4653-b9c5-fdc06a3ea09d",
                "92d5a40b-6ead-46cc-9e2a-3c8197cb7ae1",
                "18eab7cb-8688-45c5-8d17-ac3efac42a7a",
                "3d6ce09e-0b1e-4cf5-ace9-a778bcdfe321",
                "fcfdfa76-7510-45d0-8331-1ea538f8710c",
                "779eb73b-b295-4b05-97a4-910b47003ddd",
                "b39024a3-7961-4ec9-ac36-0752899752d7",
                "238f4e88-1a82-448d-b33a-f9f8d0585e3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5445,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29d30013-2576-4505-95c2-4097abbc333f",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=import_lib.default.device({host:\"192.168.178.6\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.6\");import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "aeb0bd73-8a4e-4ab8-8467-99d2359477a5",
                  "parentUUID": "29d30013-2576-4505-95c2-4097abbc333f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aeb0bd73-8a4e-4ab8-8467-99d2359477a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22508e7a-d5dd-42b7-a8d0-7f2f7677b216",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await i.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "9cb403dc-3d87-4bc0-8bcf-b2f3eb360dce",
                  "parentUUID": "22508e7a-d5dd-42b7-a8d0-7f2f7677b216",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cb403dc-3d87-4bc0-8bcf-b2f3eb360dce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82e6107b-90ff-4e99-95c8-6a29231a1ad8",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await import_assert.default.rejects(async()=>{await i.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "fa7e1dd6-067a-4ffa-a02f-9d1653ce8bdc",
                  "parentUUID": "82e6107b-90ff-4e99-95c8-6a29231a1ad8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa7e1dd6-067a-4ffa-a02f-9d1653ce8bdc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afccfce6-99f5-47ba-97e9-352a245045d8",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvscriptPath:\"test\"});await i.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "6816844b-75eb-40dc-9fb3-1c19fba3a31b",
                  "parentUUID": "afccfce6-99f5-47ba-97e9-352a245045d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6816844b-75eb-40dc-9fb3-1c19fba3a31b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "274350a8-1209-4fe7-9f97-84a6acb79809",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({debug:true});const d=i.device({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "50cebee9-ed09-4554-811f-9e2856f3adbc",
                  "parentUUID": "274350a8-1209-4fe7-9f97-84a6acb79809",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50cebee9-ed09-4554-811f-9e2856f3adbc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVProtocol)",
                  "err": {},
                  "uuid": "5f6b1ad1-30f5-404f-93b0-40ba525e89ea",
                  "parentUUID": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVMediaType)",
                  "err": {},
                  "uuid": "180079c8-33c5-4e3d-956e-44de0f3b46ef",
                  "parentUUID": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "ad9856a7-d0be-46bc-ae6a-e998fcb85129",
                  "parentUUID": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "29cd2c2d-0392-4f55-bce0-5e63c8db1ba7",
                  "parentUUID": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "5cc0dcda-30b3-4e7b-a125-8b54e8d82dc8",
                  "parentUUID": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "a95599a4-abdb-4f7f-979f-89dbb310febb",
                  "parentUUID": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVKeys)",
                  "err": {},
                  "uuid": "a1f13d45-0d42-49de-82b7-6353835860a8",
                  "parentUUID": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVListenerState)",
                  "err": {},
                  "uuid": "312d5fa6-b301-446e-a62c-dbb34278feee",
                  "parentUUID": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVPowerState)",
                  "err": {},
                  "uuid": "31a38433-9890-43df-be9c-d8271345e422",
                  "parentUUID": "b80c7c9f-6dec-4130-b3e0-634d9352f06c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f6b1ad1-30f5-404f-93b0-40ba525e89ea",
                "180079c8-33c5-4e3d-956e-44de0f3b46ef",
                "ad9856a7-d0be-46bc-ae6a-e998fcb85129",
                "29cd2c2d-0392-4f55-bce0-5e63c8db1ba7",
                "5cc0dcda-30b3-4e7b-a125-8b54e8d82dc8",
                "a95599a4-abdb-4f7f-979f-89dbb310febb",
                "a1f13d45-0d42-49de-82b7-6353835860a8",
                "312d5fa6-b301-446e-a62c-dbb34278feee",
                "31a38433-9890-43df-be9c-d8271345e422"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2cd0e33a-de08-42ae-a2d5-c2d824585cad",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0d5d2503-633d-4acd-a29f-83438573ff63",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=(0,import_tools.addRequestId)();import_assert.default.strictEqual(typeof id,\"string\");(0,import_tools.removeRequestId)(id)",
                  "err": {},
                  "uuid": "070ca0b1-a33d-464b-aac8-d5a4974fa05e",
                  "parentUUID": "0d5d2503-633d-4acd-a29f-83438573ff63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.removeRequestId)(\"FOO\")",
                  "err": {},
                  "uuid": "8ebc7104-ed4a-472a-9f17-bb82656563c9",
                  "parentUUID": "0d5d2503-633d-4acd-a29f-83438573ff63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "070ca0b1-a33d-464b-aac8-d5a4974fa05e",
                "8ebc7104-ed4a-472a-9f17-bb82656563c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e16aa1d-1122-45a9-90d9-db7948d3f6b0",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "c55a35b6-7af4-4404-84a7-d9c99b6ed35e",
                  "parentUUID": "0e16aa1d-1122-45a9-90d9-db7948d3f6b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "e9ebc5f0-58c1-4880-aeca-41e68833ff4a",
                  "parentUUID": "0e16aa1d-1122-45a9-90d9-db7948d3f6b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "e38b47e6-4b7b-49be-9026-78c1251de895",
                  "parentUUID": "0e16aa1d-1122-45a9-90d9-db7948d3f6b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "f2bea6d7-2e8f-4381-9f7d-569ea2844053",
                  "parentUUID": "0e16aa1d-1122-45a9-90d9-db7948d3f6b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\"),noColors:true})",
                  "err": {},
                  "uuid": "b94d500a-4906-4c89-b366-a07979694966",
                  "parentUUID": "0e16aa1d-1122-45a9-90d9-db7948d3f6b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c55a35b6-7af4-4404-84a7-d9c99b6ed35e",
                "e9ebc5f0-58c1-4880-aeca-41e68833ff4a",
                "e38b47e6-4b7b-49be-9026-78c1251de895",
                "f2bea6d7-2e8f-4381-9f7d-569ea2844053",
                "b94d500a-4906-4c89-b366-a07979694966"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f00407e8-3ef9-4fb8-9ab9-56c24db802e8",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "0b8430d1-c2cb-49c5-aa0b-68d9fee2c606",
                  "parentUUID": "f00407e8-3ef9-4fb8-9ab9-56c24db802e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "b4956afe-df02-43ab-9629-c9f549fd62ca",
                  "parentUUID": "f00407e8-3ef9-4fb8-9ab9-56c24db802e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "4ac0ef00-a18b-4dc8-b070-076963e439ad",
                  "parentUUID": "f00407e8-3ef9-4fb8-9ab9-56c24db802e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "bfcf6722-7583-4f9e-8be4-aaf1f16af827",
                  "parentUUID": "f00407e8-3ef9-4fb8-9ab9-56c24db802e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b8430d1-c2cb-49c5-aa0b-68d9fee2c606",
                "b4956afe-df02-43ab-9629-c9f549fd62ca",
                "4ac0ef00-a18b-4dc8-b070-076963e439ad",
                "bfcf6722-7583-4f9e-8be4-aaf1f16af827"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb2c07a6-a79b-4cc4-a0cd-59267514505f",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)();import_assert.default.deepEqual(result,[])",
                  "err": {},
                  "uuid": "5752cabd-4e90-4d50-8eb1-4e1ce1ec342f",
                  "parentUUID": "bb2c07a6-a79b-4cc4-a0cd-59267514505f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({host:\"192.168.178.2\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "4dcd5f80-f1fe-45c8-9668-b0d2fbe60f25",
                  "parentUUID": "bb2c07a6-a79b-4cc4-a0cd-59267514505f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({airplayCredentials:\"****\",companionCredentials:\"1234\",dmapCredentials:\"****\",hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",mrpCredentials:\"****\",protocol:import_types.NodePyATVProtocol.mrp,raopCredentials:\"::foo:\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "bac8ee7a-d4e9-4d91-a614-b95987ee0e7b",
                  "parentUUID": "bb2c07a6-a79b-4cc4-a0cd-59267514505f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5752cabd-4e90-4d50-8eb1-4e1ce1ec342f",
                "4dcd5f80-f1fe-45c8-9668-b0d2fbe60f25",
                "bac8ee7a-d4e9-4d91-a614-b95987ee0e7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94e9c936-38c4-4e7c-bded-57ace56e1809",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "c5acfa37-c7a2-44bc-8f6d-00ae2eec7e87",
                  "parentUUID": "94e9c936-38c4-4e7c-bded-57ace56e1809",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.parseState)(null,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "af6dd351-08d0-4c35-929c-f39b657a384c",
                  "parentUUID": "94e9c936-38c4-4e7c-bded-57ace56e1809",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,content_identifier:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",episode_number:null,focus_state:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",itunes_store_identifier:null,media_type:\"video\",output_devices:null,position:27,power_state:null,repeat:\"off\",result:\"success\",season_number:null,series_name:null,shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097,volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "11ae38e3-6d4e-4d47-93e2-d98e5e324176",
                  "parentUUID": "94e9c936-38c4-4e7c-bded-57ace56e1809",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};import_assert.default.throws(()=>{(0,import_tools.parseState)(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "66472421-9aa6-473f-b826-35aff61e1c2e",
                  "parentUUID": "94e9c936-38c4-4e7c-bded-57ace56e1809",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "1c1360ef-4dcd-4c80-9fbd-cb88d6548e07",
                  "parentUUID": "94e9c936-38c4-4e7c-bded-57ace56e1809",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:Infinity,app:0,app_id:891645381647289,artist:90,content_identifier:null,datetime:true,device_state:43,episode_number:null,focus_state:null,genre:Math.PI,hash:1337,itunes_store_identifier:null,media_type:false,output_devices:null,position:\"0:30.123\",power_state:null,repeat:true,result:\"success\",season_number:null,series_name:null,shuffle:false,title:void 0,total_time:\"23min\",volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "37478e9a-d358-461d-b611-288674bbcfc9",
                  "parentUUID": "94e9c936-38c4-4e7c-bded-57ace56e1809",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={device_state:\"initiating\",media_type:\"3d-experience\",repeat:\"nothing\",shuffle:\"everything\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "2780e9f7-55ca-45af-9bd3-6e10a89afd84",
                  "parentUUID": "94e9c936-38c4-4e7c-bded-57ace56e1809",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5acfa37-c7a2-44bc-8f6d-00ae2eec7e87",
                "af6dd351-08d0-4c35-929c-f39b657a384c",
                "11ae38e3-6d4e-4d47-93e2-d98e5e324176",
                "66472421-9aa6-473f-b826-35aff61e1c2e",
                "1c1360ef-4dcd-4c80-9fbd-cb88d6548e07",
                "37478e9a-d358-461d-b611-288674bbcfc9",
                "2780e9f7-55ca-45af-9bd3-6e10a89afd84"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}