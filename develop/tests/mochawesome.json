{
  "stats": {
    "suites": 93,
    "tests": 165,
    "passes": 163,
    "pending": 2,
    "failures": 0,
    "start": "2024-08-20T12:54:54.573Z",
    "end": "2024-08-20T12:55:06.722Z",
    "duration": 12149,
    "testsRegistered": 165,
    "passPercent": 100,
    "pendingPercent": 1.2121212121212122,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1c82e6af-fd7a-4b79-a139-0006aa328d7f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aef677ad-4210-47ef-a0c0-9de5b85e0b8e",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "034d5c68-6803-452e-b292-08f6981b6b36",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "eaf572b6-e766-41ac-b134-b196cb1d9916",
                  "parentUUID": "034d5c68-6803-452e-b292-08f6981b6b36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eaf572b6-e766-41ac-b134-b196cb1d9916"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8592b593-6d54-4b57-a55a-c42c865cb6cb",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "c71ce235-7eeb-42f8-a614-ef6306e77aa8",
                  "parentUUID": "8592b593-6d54-4b57-a55a-c42c865cb6cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c71ce235-7eeb-42f8-a614-ef6306e77aa8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a640676-e5dc-46aa-b28c-3c3923e3ba8c",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "c7452be0-1216-47bc-b840-47fc49906d4e",
                  "parentUUID": "6a640676-e5dc-46aa-b28c-3c3923e3ba8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7452be0-1216-47bc-b840-47fc49906d4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6e607e29-af06-4348-90be-48e5e8122281",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "653ea530-9cef-409c-b826-61534fb6bc4d",
                  "parentUUID": "6e607e29-af06-4348-90be-48e5e8122281",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "653ea530-9cef-409c-b826-61534fb6bc4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ccf3064c-0dfc-4933-959b-92dbe94caf89",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "adc1a754-cb50-47b8-8fa1-61b95a51bfe7",
                  "parentUUID": "ccf3064c-0dfc-4933-959b-92dbe94caf89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "adc1a754-cb50-47b8-8fa1-61b95a51bfe7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9de96d94-2757-4aca-847b-b21ee7d57c04",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "584f3fdd-d581-48c1-b662-1496e2456f3d",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:title', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "f7d8088a-5d4b-439f-a777-ff24add45337",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "9968ced5-cc35-4079-a83d-db370eba7c9c",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst sort = [];\nawait Promise.race([\n    new Promise(cb => {\n        device.once('update', () => {\n            sort.push('update');\n            cb(undefined);\n        });\n    }),\n    new Promise(cb => {\n        device.once('update:title', () => {\n            sort.push('update:title');\n            cb(undefined);\n        });\n    })\n]);\nassert.deepStrictEqual(sort, ['update:title', 'update']);",
                  "err": {},
                  "uuid": "247d9578-bf94-4d4d-911a-541b08a95cbd",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('error', error => {\n        assert.ok(error instanceof Error);\n        assert.ok(error.toString().includes('invalid credentials: 321'));\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "b9066895-e7f4-4606-b2a4-510fec4592b0",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter = 0;\nlet eventCounter = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        if (spawnCounter === 0) {\n            cp.onStdIn(() => cp.end());\n        }\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n        spawnCounter++;\n        if (spawnCounter >= 2) {\n            cp.end();\n        }\n    })\n});\nconst listener = () => {\n    eventCounter++;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\nawait device.getState();\ndevice.off('update', listener);\nassert.strictEqual(spawnCounter, 2);\nassert.strictEqual(eventCounter, 1);",
                  "err": {},
                  "uuid": "bf9b250d-ef58-4cd4-9a4e-fe7f9260fec9",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nlet callCounter = 0;\nconst error = new Error('This is an error. Be nice.');\ndevice.once('error', err => {\n    assert.strictEqual(err, error);\n    callCounter++;\n});\nconst listener = () => {\n    throw error;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\ndevice.off('update', listener);\nassert.strictEqual(callCounter, 1);",
                  "err": {},
                  "uuid": "97613870-5738-4a22-a092-08778ae4112f",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:powerState', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'powerState');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'off');\n        assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n        assert.strictEqual(event.value, 'off');\n        assert.strictEqual(event.value, NodePyATVPowerState.off);\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "366d3759-5ecc-47b5-80ce-486147785fa3",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'powerState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'off');\n    assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n    assert.strictEqual(event.value, 'off');\n    assert.strictEqual(event.value, NodePyATVPowerState.off);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "9cede858-76a2-47b4-acd7-705f7660d062",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            focus_state: 'unfocused'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'focusState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'unfocused');\n    assert.strictEqual(event.newValue, NodePyATVFocusState.unfocused);\n    assert.strictEqual(event.value, 'unfocused');\n    assert.strictEqual(event.value, NodePyATVFocusState.unfocused);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "b912403d-d177-4aa6-96bc-aa80b421dc3b",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            output_devices: [{\n                    name: 'Living room',\n                    identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n                }]\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'outputDevices');\n    assert.strictEqual(event.oldValue, null);\n    assert.deepStrictEqual(event.newValue, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.value, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "e228e124-e10c-4982-a11a-f523ba88c2f7",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            volume: 20.0\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'volume');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 20);\n    assert.strictEqual(event.value, 20);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "015b8bfd-4010-4adc-ad28-66cbf2fe4992",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            foo: 'bar'\n        });\n        cp.end();\n    })\n});\ndevice.on('update', event => {\n    assert.fail(`Got an update event for a new field: ${event}`);\n});\nawait new Promise(cb => setTimeout(cb, 10));\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "33804bd5-38f7-4e88-b947-df2ec43e3348",
                  "parentUUID": "584f3fdd-d581-48c1-b662-1496e2456f3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7d8088a-5d4b-439f-a777-ff24add45337",
                "9968ced5-cc35-4079-a83d-db370eba7c9c",
                "247d9578-bf94-4d4d-911a-541b08a95cbd",
                "b9066895-e7f4-4606-b2a4-510fec4592b0",
                "bf9b250d-ef58-4cd4-9a4e-fe7f9260fec9",
                "97613870-5738-4a22-a092-08778ae4112f",
                "366d3759-5ecc-47b5-80ce-486147785fa3",
                "9cede858-76a2-47b4-acd7-705f7660d062",
                "b912403d-d177-4aa6-96bc-aa80b421dc3b",
                "e228e124-e10c-4982-a11a-f523ba88c2f7",
                "015b8bfd-4010-4adc-ad28-66cbf2fe4992",
                "33804bd5-38f7-4e88-b947-df2ec43e3348"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e66c092-e320-465d-9d68-9b9d8f51c121",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error();\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.error(error).end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.strictEqual(err, error);\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "03e30660-ad33-42d0-8cb8-a61845f482f5",
                  "parentUUID": "5e66c092-e320-465d-9d68-9b9d8f51c121",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stderr('Hello World!').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "b3294c51-4200-4d6a-bd41-3cba623621fb",
                  "parentUUID": "5e66c092-e320-465d-9d68-9b9d8f51c121",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('#').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Unable to parse stdout json: SyntaxError'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "93a69563-dd06-4de6-9966-a55debf18d84",
                  "parentUUID": "5e66c092-e320-465d-9d68-9b9d8f51c121",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8949ffa3-2be2-402e-9b93-05f5f4375dc0",
                  "parentUUID": "5e66c092-e320-465d-9d68-9b9d8f51c121",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03e30660-ad33-42d0-8cb8-a61845f482f5",
                "b3294c51-4200-4d6a-bd41-3cba623621fb",
                "93a69563-dd06-4de6-9966-a55debf18d84"
              ],
              "failures": [],
              "pending": [
                "8949ffa3-2be2-402e-9b93-05f5f4375dc0"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0307132-61ec-4eb4-a1ee-f3afd9b640ed",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "0d35b755-664e-42f8-9d67-83ec238deabe",
                  "parentUUID": "b0307132-61ec-4eb4-a1ee-f3afd9b640ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d35b755-664e-42f8-9d67-83ec238deabe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35aca7e4-7f42-4d34-bd02-e819a3491976",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert.strictEqual(e, event);\n    assert.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "f379ffd4-3b00-47b0-a38d-5fd5fb5fa91e",
                  "parentUUID": "35aca7e4-7f42-4d34-bd02-e819a3491976",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f379ffd4-3b00-47b0-a38d-5fd5fb5fa91e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc6c64d3-067c-424b-8959-4492b33511ad",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "d7a9d732-f0f7-4028-88ec-513ce50576f4",
                  "parentUUID": "bc6c64d3-067c-424b-8959-4492b33511ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7a9d732-f0f7-4028-88ec-513ce50576f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ff5f4e7-814d-40c8-84ec-e806a2b28d71",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert.ok(typeof result, 'number');\nassert.ok(result >= 10);",
                  "err": {},
                  "uuid": "d3a982a5-ffa8-4dbc-8152-54dbc1cda041",
                  "parentUUID": "7ff5f4e7-814d-40c8-84ec-e806a2b28d71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3a982a5-ffa8-4dbc-8152-54dbc1cda041"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0881f3ff-598a-4077-926e-31da4465ab74",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "51b7e1d4-09ae-404a-9649-2f93d6087b7b",
                  "parentUUID": "0881f3ff-598a-4077-926e-31da4465ab74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51b7e1d4-09ae-404a-9649-2f93d6087b7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ec35ea75-4f24-461a-a780-0bddfe9714ba",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listeners('test').length, 1);\nassert.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "aceec3e9-51e1-4ea3-b920-63cc19bed3cf",
                  "parentUUID": "ec35ea75-4f24-461a-a780-0bddfe9714ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aceec3e9-51e1-4ea3-b920-63cc19bed3cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ccb7499b-2b8a-45bc-b8d0-e1e35b44a264",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "5b549ca1-2fc9-4df1-b560-d2716b197c8a",
                  "parentUUID": "ccb7499b-2b8a-45bc-b8d0-e1e35b44a264",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b549ca1-2fc9-4df1-b560-d2716b197c8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7fd4628f-e577-44b2-ad21-a78dd5608d60",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "4a465368-f858-4f04-9c9b-7443866c6ab5",
                  "parentUUID": "7fd4628f-e577-44b2-ad21-a78dd5608d60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a465368-f858-4f04-9c9b-7443866c6ab5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bdf08b52-963f-44f0-a120-47c315423e41",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.rawListeners('test').length, 1);\nassert.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "f876b6db-d86a-4138-8b2d-bbdf9fd394cf",
                  "parentUUID": "bdf08b52-963f-44f0-a120-47c315423e41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f876b6db-d86a-4138-8b2d-bbdf9fd394cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "910d19fd-2721-45de-ac45-f100a20ca562",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 1);\ndevice.removeListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 0);",
                  "err": {},
                  "uuid": "4a5f8e8f-9e85-4805-9b89-7f1d3e5a7603",
                  "parentUUID": "910d19fd-2721-45de-ac45-f100a20ca562",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a5f8e8f-9e85-4805-9b89-7f1d3e5a7603"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "45007550-2a04-422b-80c8-6c9eda20263c",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4ee8c722-ac0a-41d6-b769-8cced35152e3",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "8de5b560-14a0-4c4c-bb0e-6e051ab4e864",
                  "parentUUID": "4ee8c722-ac0a-41d6-b769-8cced35152e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8de5b560-14a0-4c4c-bb0e-6e051ab4e864"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e34a10da-42bb-43f0-b95a-c27938bcf2f2",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "e753a967-6f2e-42fb-8ec7-4dd8842d9b16",
                  "parentUUID": "e34a10da-42bb-43f0-b95a-c27938bcf2f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e753a967-6f2e-42fb-8ec7-4dd8842d9b16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "34b4c133-189b-4491-8cd1-e41744066a43",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "845a2a0d-fbf2-421f-bb22-14bec7e2561a",
                  "parentUUID": "34b4c133-189b-4491-8cd1-e41744066a43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "845a2a0d-fbf2-421f-bb22-14bec7e2561a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a83a4299-9c3f-4cef-828e-87dad9cf3691",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    allIDs: [\n        'some_id_1',\n        'some_id_2',\n        'some_id_3',\n    ]\n});\nassert.deepStrictEqual(device.allIDs, [\n    'some_id_1',\n    'some_id_2',\n    'some_id_3',\n]);",
                  "err": {},
                  "uuid": "e4fdbed3-9237-4d89-a2a9-bc5b50c7c217",
                  "parentUUID": "a83a4299-9c3f-4cef-828e-87dad9cf3691",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4fdbed3-9237-4d89-a2a9-bc5b50c7c217"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "873a6885-4bbd-4163-b5ff-0bd621faeb6f",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.strictEqual(device.protocol, NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "3ab938a5-25fa-4ec6-be56-336b76f29da6",
                  "parentUUID": "873a6885-4bbd-4163-b5ff-0bd621faeb6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ab938a5-25fa-4ec6-be56-336b76f29da6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eca4c485-cede-40aa-8416-8b1cd77599f3",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    mac: 'AA:BB:CC:DD:EE:FF'\n});\nassert.strictEqual(device.mac, 'AA:BB:CC:DD:EE:FF');",
                  "err": {},
                  "uuid": "7e910033-b2f9-4542-b436-5a489b0e64b6",
                  "parentUUID": "eca4c485-cede-40aa-8416-8b1cd77599f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e910033-b2f9-4542-b436-5a489b0e64b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c252bbc6-1694-408a-ac2d-6f201889ddb7",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    model: 'Gen4K'\n});\nassert.strictEqual(device.model, 'Gen4K');",
                  "err": {},
                  "uuid": "4a0bdc61-7c51-42b6-8b75-4b9f679a2301",
                  "parentUUID": "c252bbc6-1694-408a-ac2d-6f201889ddb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.model, undefined);",
                  "err": {},
                  "uuid": "0f97cd5e-d607-44e0-ab8c-aaf81da63d55",
                  "parentUUID": "c252bbc6-1694-408a-ac2d-6f201889ddb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a0bdc61-7c51-42b6-8b75-4b9f679a2301",
                "0f97cd5e-d607-44e0-ab8c-aaf81da63d55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "046f721b-8b2e-4eb9-a9d2-ff8c25ca8693",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    modelName: 'Apple TV 4K'\n});\nassert.strictEqual(device.modelName, 'Apple TV 4K');",
                  "err": {},
                  "uuid": "41269865-5a40-4a37-87a5-3192f8a356fa",
                  "parentUUID": "046f721b-8b2e-4eb9-a9d2-ff8c25ca8693",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.modelName, undefined);",
                  "err": {},
                  "uuid": "d15e220f-8d0f-4fca-aaa8-d1e421fce986",
                  "parentUUID": "046f721b-8b2e-4eb9-a9d2-ff8c25ca8693",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41269865-5a40-4a37-87a5-3192f8a356fa",
                "d15e220f-8d0f-4fca-aaa8-d1e421fce986"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5a400932-39d7-44c7-8c06-a0e9efa7bf15",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    os: 'TvOS'\n});\nassert.strictEqual(device.os, 'TvOS');",
                  "err": {},
                  "uuid": "020c4024-ee89-4c63-a4a6-2697d32866ec",
                  "parentUUID": "5a400932-39d7-44c7-8c06-a0e9efa7bf15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.os, undefined);",
                  "err": {},
                  "uuid": "abd38d90-9a82-45a5-b396-6450af429593",
                  "parentUUID": "5a400932-39d7-44c7-8c06-a0e9efa7bf15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "020c4024-ee89-4c63-a4a6-2697d32866ec",
                "abd38d90-9a82-45a5-b396-6450af429593"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8570219f-8bf1-46eb-8afe-e878971b420a",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    version: '15.5.1'\n});\nassert.strictEqual(device.version, '15.5.1');",
                  "err": {},
                  "uuid": "6718d15b-d3b3-4046-b551-b828b4523365",
                  "parentUUID": "8570219f-8bf1-46eb-8afe-e878971b420a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.version, undefined);",
                  "err": {},
                  "uuid": "9803fdbb-d993-440e-88d2-8cfd3ff33fe3",
                  "parentUUID": "8570219f-8bf1-46eb-8afe-e878971b420a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6718d15b-d3b3-4046-b551-b828b4523365",
                "9803fdbb-d993-440e-88d2-8cfd3ff33fe3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2042c0e9-de12-4a07-8f07-c64a716a8bec",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    services: [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]\n});\nassert.deepStrictEqual(device.services, [\n    {\n        protocol: 'mrp',\n        port: 49152\n    },\n    {\n        protocol: 'airplay',\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "2ce529e4-6cfa-4199-b6c1-eb1b0134c4c8",
                  "parentUUID": "2042c0e9-de12-4a07-8f07-c64a716a8bec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.services, undefined);",
                  "err": {},
                  "uuid": "8e870bc4-50da-47e6-88d4-c086dce073c5",
                  "parentUUID": "2042c0e9-de12-4a07-8f07-c64a716a8bec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ce529e4-6cfa-4199-b6c1-eb1b0134c4c8",
                "8e870bc4-50da-47e6-88d4-c086dce073c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7489bbff-ac5a-4920-942f-1d2a9691eb99",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "338707f2-5a41-412a-a17b-5b1c0b048307",
                  "parentUUID": "7489bbff-ac5a-4920-942f-1d2a9691eb99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn = () => { };\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "b5617dab-4829-458f-b3ce-1fb5783cdcba",
                  "parentUUID": "7489bbff-ac5a-4920-942f-1d2a9691eb99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "492d4585-60cc-4db7-8b9f-33ee088dff7c",
                  "parentUUID": "7489bbff-ac5a-4920-942f-1d2a9691eb99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "338707f2-5a41-412a-a17b-5b1c0b048307",
                "b5617dab-4829-458f-b3ce-1fb5783cdcba",
                "492d4585-60cc-4db7-8b9f-33ee088dff7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca39434c-6bc8-41c8-8ca8-4ada597ecdd7",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "d6f9d5fc-ce9a-40e2-93db-349ffe146db3",
                  "parentUUID": "ca39434c-6bc8-41c8-8ca8-4ada597ecdd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "4179794c-1037-4098-815d-0e9bf2cfd81b",
                  "parentUUID": "ca39434c-6bc8-41c8-8ca8-4ada597ecdd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "e1506c7c-5c73-4899-8c35-27ffb15086e2",
                  "parentUUID": "ca39434c-6bc8-41c8-8ca8-4ada597ecdd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nconst fn = () => {\n};\nassert.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "5ff155ad-d9d4-4d09-81d7-1232c8c55748",
                  "parentUUID": "ca39434c-6bc8-41c8-8ca8-4ada597ecdd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6f9d5fc-ce9a-40e2-93db-349ffe146db3",
                "4179794c-1037-4098-815d-0e9bf2cfd81b",
                "e1506c7c-5c73-4899-8c35-27ffb15086e2",
                "5ff155ad-d9d4-4d09-81d7-1232c8c55748"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1844342-70c4-44ae-912b-ae8d5515ba4e",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "8849974d-6144-4e6a-9d2f-7a2bfaed20bd",
                  "parentUUID": "e1844342-70c4-44ae-912b-ae8d5515ba4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n};\nconst deviceA = new NodePyATVDevice(config);\nconst deviceB = new NodePyATVDevice(deviceA.toJSON());\nassert.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "399b1129-bc9c-4654-b20d-723b399cfb19",
                  "parentUUID": "e1844342-70c4-44ae-912b-ae8d5515ba4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8849974d-6144-4e6a-9d2f-7a2bfaed20bd",
                "399b1129-bc9c-4654-b20d-723b399cfb19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eed5debb-dca4-4182-9085-5650221ca355",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "80298f19-81e4-40d9-8446-2d12d2204d88",
                  "parentUUID": "eed5debb-dca4-4182-9085-5650221ca355",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80298f19-81e4-40d9-8446-2d12d2204d88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4aefee9b-b188-46e8-aa90-6eb724b87818",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b2f802ff-b7ca-401d-be81-f7815bf18c56",
                  "parentUUID": "4aefee9b-b188-46e8-aa90-6eb724b87818",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst result = await device.getState();\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    focusState: null,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    volume: null,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "71f073f9-f20d-42eb-be9c-5f344274cac4",
                  "parentUUID": "4aefee9b-b188-46e8-aa90-6eb724b87818",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nassert.rejects(async () => {\n    await device.getState();\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "708e7486-f758-40d4-9e7d-0c4789e73f86",
                  "parentUUID": "4aefee9b-b188-46e8-aa90-6eb724b87818",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nconst secondResult = await device.getState();\nassert.strictEqual(firstResult.dateTime, secondResult.dateTime);\nassert.strictEqual(executions, 1);",
                  "err": {},
                  "uuid": "079899e6-9fd8-4bb8-a1f4-d3a00d460f73",
                  "parentUUID": "4aefee9b-b188-46e8-aa90-6eb724b87818",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date(new Date().getTime() - 1000).toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nassert.strictEqual(firstResult.position, 27);\nconst secondResult = await device.getState();\nassert.ok(secondResult.position);\nassert.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\nassert.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);",
                  "err": {},
                  "uuid": "1d1f9037-d87e-4545-b464-8bdbd236e523",
                  "parentUUID": "4aefee9b-b188-46e8-aa90-6eb724b87818",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71f073f9-f20d-42eb-be9c-5f344274cac4",
                "708e7486-f758-40d4-9e7d-0c4789e73f86",
                "079899e6-9fd8-4bb8-a1f4-d3a00d460f73",
                "1d1f9037-d87e-4545-b464-8bdbd236e523"
              ],
              "failures": [],
              "pending": [
                "b2f802ff-b7ca-401d-be81-f7815bf18c56"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f52d4cdb-8781-4f80-9e10-5bb77534a563",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            title: 'Solo: A Star Wars Story'\n        });\n    })\n});\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\ndevice.clearState();\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\nassert.strictEqual(executions, 2);",
                  "err": {},
                  "uuid": "b6f16a52-3e46-4f58-a216-da3b01eaa9f2",
                  "parentUUID": "f52d4cdb-8781-4f80-9e10-5bb77534a563",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6f16a52-3e46-4f58-a216-da3b01eaa9f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2214301b-8707-4486-a234-f7f11a3d9e96",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON()\n        });\n    })\n});\nconst result = await device.getDateTime();\nassert.ok(result instanceof Date);",
                  "err": {},
                  "uuid": "05521feb-8e58-488a-8fea-9478ccf212aa",
                  "parentUUID": "2214301b-8707-4486-a234-f7f11a3d9e96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05521feb-8e58-488a-8fea-9478ccf212aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "013aee9b-a92a-425c-933f-d820368e80fe",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            hash: '12345'\n        });\n    })\n});\nconst result = await device.getHash();\nassert.strictEqual(result, '12345');",
                  "err": {},
                  "uuid": "9b160c9a-8917-4e74-870f-e846399d4ddf",
                  "parentUUID": "013aee9b-a92a-425c-933f-d820368e80fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b160c9a-8917-4e74-870f-e846399d4ddf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "708e2d44-5e49-4f6f-9fdc-620c495fe210",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            media_type: 'video'\n        });\n    })\n});\nconst result = await device.getMediaType();\nassert.deepStrictEqual(result, NodePyATVMediaType.video);\nassert.deepStrictEqual(result, 'video');",
                  "err": {},
                  "uuid": "530ebc7e-6902-42de-ae31-3e65a1d50677",
                  "parentUUID": "708e2d44-5e49-4f6f-9fdc-620c495fe210",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "530ebc7e-6902-42de-ae31-3e65a1d50677"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45ebdd27-fe10-43d4-9b9a-526b6ee54d2c",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            device_state: 'seeking'\n        });\n    })\n});\nconst result = await device.getDeviceState();\nassert.deepStrictEqual(result, NodePyATVDeviceState.seeking);\nassert.deepStrictEqual(result, 'seeking');",
                  "err": {},
                  "uuid": "fd1ba7d2-1f14-4c60-9228-de0f1d6fa32d",
                  "parentUUID": "45ebdd27-fe10-43d4-9b9a-526b6ee54d2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd1ba7d2-1f14-4c60-9228-de0f1d6fa32d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45f95827-2791-4096-a4a4-129850ebf712",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst result = await device.getTitle();\nassert.strictEqual(result, 'My Movie');",
                  "err": {},
                  "uuid": "fb067189-644e-418c-8b4e-fca51f9e3da9",
                  "parentUUID": "45f95827-2791-4096-a4a4-129850ebf712",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb067189-644e-418c-8b4e-fca51f9e3da9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d596374c-9577-492e-a353-d68f628bc73a",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            artist: 'My Artist'\n        });\n    })\n});\nconst result = await device.getArtist();\nassert.strictEqual(result, 'My Artist');",
                  "err": {},
                  "uuid": "ff462a7b-5ef8-4fa8-96c0-f022fc8934ba",
                  "parentUUID": "d596374c-9577-492e-a353-d68f628bc73a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff462a7b-5ef8-4fa8-96c0-f022fc8934ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24fb924b-bac9-42f6-be18-ceafc3aef02a",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            album: 'My ALbum'\n        });\n    })\n});\nconst result = await device.getAlbum();\nassert.strictEqual(result, 'My ALbum');",
                  "err": {},
                  "uuid": "761b06ee-7c41-47e8-9d45-adb0efc7abbe",
                  "parentUUID": "24fb924b-bac9-42f6-be18-ceafc3aef02a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "761b06ee-7c41-47e8-9d45-adb0efc7abbe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1882e613-ceb1-4e2a-9ed3-61edcc24120f",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            genre: 'My Genre'\n        });\n    })\n});\nconst result = await device.getGenre();\nassert.strictEqual(result, 'My Genre');",
                  "err": {},
                  "uuid": "837585ba-3076-4a26-bf17-90a6445b1655",
                  "parentUUID": "1882e613-ceb1-4e2a-9ed3-61edcc24120f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "837585ba-3076-4a26-bf17-90a6445b1655"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dcbbc31c-1f31-4899-a11a-2629df563c72",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            total_time: 45\n        });\n    })\n});\nconst result = await device.getTotalTime();\nassert.strictEqual(result, 45);",
                  "err": {},
                  "uuid": "ec90c6ae-fc49-4cb6-8c60-aa4ab1f19ddc",
                  "parentUUID": "dcbbc31c-1f31-4899-a11a-2629df563c72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec90c6ae-fc49-4cb6-8c60-aa4ab1f19ddc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e83bcd27-8f77-4070-b1a7-e7e74678ec0f",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            position: 30\n        });\n    })\n});\nconst result = await device.getPosition();\nassert.strictEqual(result, 30);",
                  "err": {},
                  "uuid": "f63438fb-0102-4855-944d-a2dadd06511a",
                  "parentUUID": "e83bcd27-8f77-4070-b1a7-e7e74678ec0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f63438fb-0102-4855-944d-a2dadd06511a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "695bc1c3-9686-4c7c-ad17-b45fbca4e090",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            shuffle: 'songs'\n        });\n    })\n});\nconst result = await device.getShuffle();\nassert.deepStrictEqual(result, NodePyATVShuffleState.songs);\nassert.deepStrictEqual(result, 'songs');",
                  "err": {},
                  "uuid": "758c9acb-7288-459b-8270-bf4296846960",
                  "parentUUID": "695bc1c3-9686-4c7c-ad17-b45fbca4e090",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "758c9acb-7288-459b-8270-bf4296846960"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1ae00a7-bf02-42a7-85d4-c7e8b3484ef5",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            repeat: 'all'\n        });\n    })\n});\nconst result = await device.getRepeat();\nassert.deepStrictEqual(result, NodePyATVRepeatState.all);\nassert.deepStrictEqual(result, 'all');",
                  "err": {},
                  "uuid": "ef692795-68f0-426f-ab35-0a56980d8f33",
                  "parentUUID": "e1ae00a7-bf02-42a7-85d4-c7e8b3484ef5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef692795-68f0-426f-ab35-0a56980d8f33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ea91329-0e9f-4433-8632-8dc38c28a4d4",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app: 'My App'\n        });\n    })\n});\nconst result = await device.getApp();\nassert.strictEqual(result, 'My App');",
                  "err": {},
                  "uuid": "ff4812ff-0c58-423e-b1ea-80114176fc06",
                  "parentUUID": "4ea91329-0e9f-4433-8632-8dc38c28a4d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff4812ff-0c58-423e-b1ea-80114176fc06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8162a605-1bde-4263-b55c-f25db225f206",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app_id: 'app.example.com'\n        });\n    })\n});\nconst result = await device.getAppId();\nassert.strictEqual(result, 'app.example.com');",
                  "err": {},
                  "uuid": "46c944b6-56aa-4e33-861c-a820a3f56503",
                  "parentUUID": "8162a605-1bde-4263-b55c-f25db225f206",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46c944b6-56aa-4e33-861c-a820a3f56503"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23d7b307-8a94-4b61-a4fe-5ac842405203",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), ' +\n            'App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), ' +\n            'App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App Store ' +\n            '(com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), ' +\n            'App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ ' +\n            '(com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE ' +\n            '(tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek ' +\n            '(de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), ' +\n            'App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), ' +\n            'App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), ' +\n            'App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), ' +\n            'App: Musik (com.apple.TVMusic)');\n    })\n});\nconst result = await device.listApps();\nassert.strictEqual(result.length, 25);\nassert.strictEqual(result[0].id, 'com.apple.Fitness');\nassert.strictEqual(result[0].name, 'Fitness');",
                  "err": {},
                  "uuid": "2463dade-2b77-46cf-ae82-270319464eda",
                  "parentUUID": "23d7b307-8a94-4b61-a4fe-5ac842405203",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2463dade-2b77-46cf-ae82-270319464eda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e57caae-d076-4f98-8780-ef3849ae5a1e",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\nawait device.pressKey(NodePyATVKeys.home);",
                  "err": {},
                  "uuid": "18be5a77-2adb-418d-861a-a7da5f618923",
                  "parentUUID": "8e57caae-d076-4f98-8780-ef3849ae5a1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nawait assert.rejects(async () => {\n    // @ts-ignore\n    await device.pressKey('foo');\n}, /Unsupported key value foo/);",
                  "err": {},
                  "uuid": "ec4e1502-2499-436a-9eee-e2be27c2cbef",
                  "parentUUID": "8e57caae-d076-4f98-8780-ef3849ae5a1e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"failure\"}');\n    })\n});\nawait assert.rejects(async () => {\n    await device.pressKey(NodePyATVKeys.home);\n}, /Unable to parse pyatv response/);",
                  "err": {},
                  "uuid": "b772d0c9-8e63-49e5-95f6-d8652380415e",
                  "parentUUID": "8e57caae-d076-4f98-8780-ef3849ae5a1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18be5a77-2adb-418d-861a-a7da5f618923",
                "ec4e1502-2499-436a-9eee-e2be27c2cbef",
                "b772d0c9-8e63-49e5-95f6-d8652380415e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2ebfafc-90f0-4e0b-b0ae-6496d8bd05b6",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "bc12a417-c07e-4845-b883-349fb6b7f86c",
                  "parentUUID": "a2ebfafc-90f0-4e0b-b0ae-6496d8bd05b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc12a417-c07e-4845-b883-349fb6b7f86c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89d1b6ee-24ee-4554-aa43-734599a914f8",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "b537aba1-d354-4a8f-86d9-20ab317000f8",
                  "parentUUID": "89d1b6ee-24ee-4554-aa43-734599a914f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b537aba1-d354-4a8f-86d9-20ab317000f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8fb4ce8-91ca-415e-a958-b1b8b5f98c3a",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "b72ac707-c40d-4b4b-bba5-49e2486190b0",
                  "parentUUID": "a8fb4ce8-91ca-415e-a958-b1b8b5f98c3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b72ac707-c40d-4b4b-bba5-49e2486190b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "368e9aa0-eadb-4147-9bb1-717cc9ddb1a4",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "dd1b0f21-a0e5-46da-88b0-76376f0c6b1b",
                  "parentUUID": "368e9aa0-eadb-4147-9bb1-717cc9ddb1a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd1b0f21-a0e5-46da-88b0-76376f0c6b1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52e93cd1-954f-41cc-9068-eb9aaa34b2db",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "c43c1977-c4e5-4a5a-90b5-6b2a92e6ae6c",
                  "parentUUID": "52e93cd1-954f-41cc-9068-eb9aaa34b2db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c43c1977-c4e5-4a5a-90b5-6b2a92e6ae6c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11824651-b386-473e-825f-9f04a10fade6",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "106b82a1-e141-4219-a08c-c0ba3a6ed388",
                  "parentUUID": "11824651-b386-473e-825f-9f04a10fade6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "106b82a1-e141-4219-a08c-c0ba3a6ed388"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f814590e-7d15-4ff7-83e6-d568115f4e72",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "c2c3ca75-36e2-4802-9ed6-88363bc2e4d2",
                  "parentUUID": "f814590e-7d15-4ff7-83e6-d568115f4e72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2c3ca75-36e2-4802-9ed6-88363bc2e4d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "457138d2-56dc-4aa7-98de-53a5a17d91f0",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "0af51bd7-a868-432c-8f5a-e1b50ee03406",
                  "parentUUID": "457138d2-56dc-4aa7-98de-53a5a17d91f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0af51bd7-a868-432c-8f5a-e1b50ee03406"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9fa5a8c7-ca23-4f6e-b7ea-d0d9b0cad3f2",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "0f070e8c-09b8-4ddf-b67e-a26ebddf98f4",
                  "parentUUID": "9fa5a8c7-ca23-4f6e-b7ea-d0d9b0cad3f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f070e8c-09b8-4ddf-b67e-a26ebddf98f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4deb6b41-698c-4be0-a3ad-590cff3c15f1",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "8608092a-a888-470d-be7e-5806db1815a7",
                  "parentUUID": "4deb6b41-698c-4be0-a3ad-590cff3c15f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8608092a-a888-470d-be7e-5806db1815a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "04dd100b-f1e4-4d20-bc3b-f6c5e84f9c88",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "27ba4e54-d09a-4a8a-9956-fb14b8b79520",
                  "parentUUID": "04dd100b-f1e4-4d20-bc3b-f6c5e84f9c88",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27ba4e54-d09a-4a8a-9956-fb14b8b79520"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e00b76e-98ee-4caa-8a7c-bed9e43d916b",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "40f20390-7a3f-4de1-93a1-e2003d02ef2c",
                  "parentUUID": "8e00b76e-98ee-4caa-8a7c-bed9e43d916b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40f20390-7a3f-4de1-93a1-e2003d02ef2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8309b1c-e1c2-4a9a-b593-f685e9479ea5",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "277ee767-458a-4c14-b206-55a5a2366514",
                  "parentUUID": "c8309b1c-e1c2-4a9a-b593-f685e9479ea5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "277ee767-458a-4c14-b206-55a5a2366514"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d7fae665-c23c-4bf0-b2d9-212d49e95ced",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "ee1478f1-db3e-4c2c-9010-7cc217d26e2a",
                  "parentUUID": "d7fae665-c23c-4bf0-b2d9-212d49e95ced",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee1478f1-db3e-4c2c-9010-7cc217d26e2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36634a4c-0698-4067-9f6b-4df05e290481",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9cdc0427-e0ce-4249-aa16-f1b800dbb44b",
                  "parentUUID": "36634a4c-0698-4067-9f6b-4df05e290481",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cdc0427-e0ce-4249-aa16-f1b800dbb44b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cce3c571-9849-4c95-9b5b-dee635752aa5",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "d51f3263-f7fc-423f-8211-8adbd660d3f0",
                  "parentUUID": "cce3c571-9849-4c95-9b5b-dee635752aa5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d51f3263-f7fc-423f-8211-8adbd660d3f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "325e386b-f218-480b-80f8-4202ba870e5a",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "1b04243b-721f-441e-a4c6-bee6c9b839e2",
                  "parentUUID": "325e386b-f218-480b-80f8-4202ba870e5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b04243b-721f-441e-a4c6-bee6c9b839e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d32fa7a-cd51-4826-8968-2abbd64bddba",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "d1b88d8b-b267-4a7d-ba0c-3e29e7bc25ea",
                  "parentUUID": "3d32fa7a-cd51-4826-8968-2abbd64bddba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1b88d8b-b267-4a7d-ba0c-3e29e7bc25ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e982f8c-7b9c-411f-9b8f-289714ef15e1",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9bab6863-e620-4ec1-be33-0b18cfa643c6",
                  "parentUUID": "3e982f8c-7b9c-411f-9b8f-289714ef15e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bab6863-e620-4ec1-be33-0b18cfa643c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ddb7ebc-ff60-4c3b-ad23-9a58aaf43168",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "7015aa94-5989-45af-a449-fe278428a1b1",
                  "parentUUID": "4ddb7ebc-ff60-4c3b-ad23-9a58aaf43168",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7015aa94-5989-45af-a449-fe278428a1b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "734e6b43-d54f-435d-bd88-51cf202f92e7",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9138746f-f18f-4471-9b06-75ab69291db6",
                  "parentUUID": "734e6b43-d54f-435d-bd88-51cf202f92e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9138746f-f18f-4471-9b06-75ab69291db6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa5a4bca-1d27-4604-b2c8-927848ece61b",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "4c222424-c8fa-4d71-b54a-6d7a2ed46ce3",
                  "parentUUID": "fa5a4bca-1d27-4604-b2c8-927848ece61b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c222424-c8fa-4d71-b54a-6d7a2ed46ce3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9bfdeb4c-118d-443d-8431-1020d05ffca2",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "42b11f05-28b0-420a-a4a2-b837e7f5064c",
                  "parentUUID": "9bfdeb4c-118d-443d-8431-1020d05ffca2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42b11f05-28b0-420a-a4a2-b837e7f5064c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40568e01-2bb6-48f6-ab16-61bcd274ef9e",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('');\n    })\n});\nawait device.launchApp('com.apple.TVShows');",
                  "err": {},
                  "uuid": "3c7ef224-5131-4ca8-a410-5c094f8733e7",
                  "parentUUID": "40568e01-2bb6-48f6-ab16-61bcd274ef9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c7ef224-5131-4ca8-a410-5c094f8733e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eb86ce1c-b06e-4617-b5af-da56f861b5e3",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 677,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000);\nconst result = await NodePyATVInstance.version();\nif (result.pyatv === null) {\n    throw new Error('No version found for pyatv. Is it installed in test environment?');\n}\nassert.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\nassert.ok(result.pyatv.length >= 5, 'result.pyatv has content');\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "e34a342d-585c-40a5-a892-29ad688b9229",
                  "parentUUID": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.code(1);\n        cp.end('atvremote 0.7.4');\n    })\n});\nassert.ok(result.pyatv);\nassert.strictEqual(result.pyatv, '0.7.4');",
                  "err": {},
                  "uuid": "ebe5a82e-8226-451a-933d-674c16e8e2d3",
                  "parentUUID": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "ff154d1e-8d92-42ac-9781-73bb216d32fe",
                  "parentUUID": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    atvremotePath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "4d581ed5-3ab6-4eca-9b89-fc45d1ddf7e4",
                  "parentUUID": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "c49c85f3-e475-40f0-8032-5bfa9229ce32",
                  "parentUUID": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: () => {\n        // no debug log\n    },\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "d010695c-fe58-4fce-a75e-177c716f9919",
                  "parentUUID": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "7a24e3c7-61d8-440c-9131-61b4ca31b5b2",
                  "parentUUID": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.error(new Error('Hello world!')).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "f3cc1171-535d-471c-ac28-eaf36dd1cb3f",
                  "parentUUID": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('atvremote 42').code(1).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "df1e7553-0362-4e24-a5d6-4d97b795c723",
                  "parentUUID": "5b0b06a0-7888-434f-aa48-8023a3da53f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e34a342d-585c-40a5-a892-29ad688b9229",
                "ebe5a82e-8226-451a-933d-674c16e8e2d3",
                "ff154d1e-8d92-42ac-9781-73bb216d32fe",
                "4d581ed5-3ab6-4eca-9b89-fc45d1ddf7e4",
                "c49c85f3-e475-40f0-8032-5bfa9229ce32",
                "d010695c-fe58-4fce-a75e-177c716f9919",
                "7a24e3c7-61d8-440c-9131-61b4ca31b5b2",
                "f3cc1171-535d-471c-ac28-eaf36dd1cb3f",
                "df1e7553-0362-4e24-a5d6-4d97b795c723"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 690,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af231e6b-8fe0-4804-a453-511d817bfa41",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5858,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12000);\nawait NodePyATVInstance.check();",
                  "err": {},
                  "uuid": "34354a4a-e589-470f-8f53-facd73837058",
                  "parentUUID": "af231e6b-8fe0-4804-a453-511d817bfa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "edcd7a23-e2b2-4fd3-9d70-68c72c0b619d",
                  "parentUUID": "af231e6b-8fe0-4804-a453-511d817bfa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('atvremote 0.5.1').code(1).end();\n        })\n    });\n}, /Found pyatv, but unforunately it's too old. Please update pyatv./);",
                  "err": {},
                  "uuid": "e872d1ba-2337-4f6d-ba53-7c8863e0bc1d",
                  "parentUUID": "af231e6b-8fe0-4804-a453-511d817bfa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i = 0;\nawait assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            if (i === 0) {\n                cp.stdout('atvremote 0.7.0').code(1).end();\n                i++;\n            }\n            else {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            }\n        })\n    });\n}, /Unable to scan for devices/);",
                  "err": {},
                  "uuid": "b024286c-68df-4e58-8143-5054afc93ea6",
                  "parentUUID": "af231e6b-8fe0-4804-a453-511d817bfa41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34354a4a-e589-470f-8f53-facd73837058",
                "edcd7a23-e2b2-4fd3-9d70-68c72c0b619d",
                "e872d1ba-2337-4f6d-ba53-7c8863e0bc1d",
                "b024286c-68df-4e58-8143-5054afc93ea6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5865,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5397,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(10000);\nconst result = await NodePyATVInstance.find();\nassert.ok(Array.isArray(result));",
                  "err": {},
                  "uuid": "c7bbd56e-6765-47e7-8038-91a9cc67bb20",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({\n    atvscriptPath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "80104caf-1e79-4388-b33b-f133203e4339",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stderr('Hello World!').code(1).end();\n        })\n    });\n}, /Unable to execute request/);",
                  "err": {},
                  "uuid": "ed9c24b2-9e27-4741-bb28-8b3dda54a42e",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).code(1).end();\n        })\n    });\n}, /Hello world!/);",
                  "err": {},
                  "uuid": "31a3b91f-63d1-4a5b-a645-8907a0fb6708",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            // Example output from @maxileith\n            // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n            cp.stdout({\n                result: 'failure',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                error: 'Task exception was never retrieved',\n                exception: '[Errno 113] Connect call failed'\n            }).code(1).end();\n        })\n    });\n}, /Unable to find any devices, but received 1 error: /);",
                  "err": {},
                  "uuid": "1fdb21fc-15c6-4dbf-8cd2-5fce7af75587",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout(JSON.stringify({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).substr(1)).end();\n        })\n    });\n}, /Unable to parse result/);",
                  "err": {},
                  "uuid": "ebca1702-9f1d-40a3-aa87-564ac8be2c34",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'error'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "f9eda1fc-a031-4da0-b73f-b47f07582f3f",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "98d351bb-cfce-43a9-b24b-5bf26747513f",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx'\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, undefined);\nassert.strictEqual(devices[0].modelName, undefined);\nassert.strictEqual(devices[0].os, undefined);\nassert.strictEqual(devices[0].version, undefined);\nassert.deepStrictEqual(devices[0].services, undefined);",
                  "err": {},
                  "uuid": "7c574792-2e60-4c9d-b5a9-ae3c9d021e51",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx',\n                    device_info: {\n                        'model': 'Gen4K',\n                        'model_str': 'Apple TV 4K',\n                        'operating_system': 'TvOS',\n                        'version': '15.5.1'\n                    },\n                    services: [\n                        {\n                            protocol: 'mrp',\n                            port: 49152\n                        },\n                        {\n                            protocol: 'airplay',\n                            port: 7000\n                        }\n                    ]\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, 'Gen4K');\nassert.strictEqual(devices[0].modelName, 'Apple TV 4K');\nassert.strictEqual(devices[0].os, 'TvOS');\nassert.strictEqual(devices[0].version, '15.5.1');\nassert.deepStrictEqual(devices[0].services, [\n    {\n        protocol: NodePyATVProtocol.mrp,\n        port: 49152\n    },\n    {\n        protocol: NodePyATVProtocol.airplay,\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "2baae33c-4c60-4376-afee-e650bdbe51b4",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 4);\nassert.strictEqual(devices[0].name, 'Living Room');\nassert.strictEqual(devices[0].host, '10.0.0.30');\nassert.strictEqual(devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(devices[1].name, 'Kitchen');\nassert.strictEqual(devices[1].host, '10.0.0.79');\nassert.strictEqual(devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(devices[2].name, 'Bedroom');\nassert.strictEqual(devices[2].host, '10.0.0.20');\nassert.strictEqual(devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(devices[3].name, 'Basement');\nassert.strictEqual(devices[3].host, '10.0.0.156');\nassert.strictEqual(devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');",
                  "err": {},
                  "uuid": "ddb26ccf-3b8f-4d48-a2eb-b81bae57125f",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n}, true);\nassert.strictEqual(response.devices.length, 4);\nassert.strictEqual(response.errors.length, 2);\nassert.strictEqual(response.devices[0].name, 'Living Room');\nassert.strictEqual(response.devices[0].host, '10.0.0.30');\nassert.strictEqual(response.devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(response.devices[1].name, 'Kitchen');\nassert.strictEqual(response.devices[1].host, '10.0.0.79');\nassert.strictEqual(response.devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(response.devices[2].name, 'Bedroom');\nassert.strictEqual(response.devices[2].host, '10.0.0.20');\nassert.strictEqual(response.devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(response.devices[3].name, 'Basement');\nassert.strictEqual(response.devices[3].host, '10.0.0.156');\nassert.strictEqual(response.devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');\nassert.strictEqual(response.errors[0].exception, '[Errno 113] Connect call failed (\\'10.0.0.232\\', 32498)');\nassert.strictEqual(response.errors[1].exception, '[Errno 113] Connect call failed (\\'10.0.0.229\\', 32498)');",
                  "err": {},
                  "uuid": "af45510c-cd37-4b0d-9811-554a0407377e",
                  "parentUUID": "28254fcc-0982-43d3-93d9-7a9a9f8da0cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7bbd56e-6765-47e7-8038-91a9cc67bb20",
                "80104caf-1e79-4388-b33b-f133203e4339",
                "ed9c24b2-9e27-4741-bb28-8b3dda54a42e",
                "31a3b91f-63d1-4a5b-a645-8907a0fb6708",
                "1fdb21fc-15c6-4dbf-8cd2-5fce7af75587",
                "ebca1702-9f1d-40a3-aa87-564ac8be2c34",
                "f9eda1fc-a031-4da0-b73f-b47f07582f3f",
                "98d351bb-cfce-43a9-b24b-5bf26747513f",
                "7c574792-2e60-4c9d-b5a9-ae3c9d021e51",
                "2baae33c-4c60-4376-afee-e650bdbe51b4",
                "ddb26ccf-3b8f-4d48-a2eb-b81bae57125f",
                "af45510c-cd37-4b0d-9811-554a0407377e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5413,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5cd8986-904f-4bba-9606-dbb8231adc03",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = NodePyATVInstance.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert.strictEqual(device.host, '192.168.178.6');\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "8014cc64-356b-4799-bdf0-2d6ffa3ae6b3",
                  "parentUUID": "f5cd8986-904f-4bba-9606-dbb8231adc03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8014cc64-356b-4799-bdf0-2d6ffa3ae6b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "340b376c-7dcd-4f25-8284-c266683fa7b9",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait i.version({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "267525d8-64af-41ec-87c3-8c7a3a22c542",
                  "parentUUID": "340b376c-7dcd-4f25-8284-c266683fa7b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "267525d8-64af-41ec-87c3-8c7a3a22c542"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e24989f-28f1-449d-830a-0938f5bacc16",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait assert.rejects(async () => {\n    await i.check({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "326af385-8f39-4b85-a575-d7a829b406a0",
                  "parentUUID": "9e24989f-28f1-449d-830a-0938f5bacc16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "326af385-8f39-4b85-a575-d7a829b406a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f16e8d05-3cf3-4dda-ac65-3a8eb9570983",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvscriptPath: 'test' });\nawait i.find({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "03155b75-1401-4f4b-a4c0-d5c0582cf43c",
                  "parentUUID": "f16e8d05-3cf3-4dda-ac65-3a8eb9570983",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03155b75-1401-4f4b-a4c0-d5c0582cf43c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31571e63-6664-4915-a0ef-b8554b3b9238",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ debug: true });\nconst d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\nassert.deepStrictEqual(d.debug, true);",
                  "err": {},
                  "uuid": "d7a72d6c-a9a2-4e56-b7b4-81e1c582785c",
                  "parentUUID": "31571e63-6664-4915-a0ef-b8554b3b9238",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7a72d6c-a9a2-4e56-b7b4-81e1c582785c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol);",
                  "err": {},
                  "uuid": "0367616a-0536-4dff-8e2b-540b7fa5d53d",
                  "parentUUID": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType);",
                  "err": {},
                  "uuid": "c8b56839-096b-403a-aeb0-b860ac5402f1",
                  "parentUUID": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "2cec9e9f-f917-4f2c-a09e-2edc487777da",
                  "parentUUID": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "5c4dcd27-a351-4e8c-998f-62bd5cda8a5a",
                  "parentUUID": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "a8b8c117-250b-443c-b319-5ce9ec5f2b44",
                  "parentUUID": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "d1ade3b3-0f7f-41ff-899a-af889130a61e",
                  "parentUUID": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys);",
                  "err": {},
                  "uuid": "d0468b64-384f-466d-99fd-d719db9a46c9",
                  "parentUUID": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState);",
                  "err": {},
                  "uuid": "5a857bb6-a7e6-490a-8276-4b1abcd62b02",
                  "parentUUID": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState);",
                  "err": {},
                  "uuid": "94d248c0-3d47-4a1e-b56a-305fbb18c82f",
                  "parentUUID": "d4999eba-7ea8-45b4-a1dc-fd648b496746",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0367616a-0536-4dff-8e2b-540b7fa5d53d",
                "c8b56839-096b-403a-aeb0-b860ac5402f1",
                "2cec9e9f-f917-4f2c-a09e-2edc487777da",
                "5c4dcd27-a351-4e8c-998f-62bd5cda8a5a",
                "a8b8c117-250b-443c-b319-5ce9ec5f2b44",
                "d1ade3b3-0f7f-41ff-899a-af889130a61e",
                "d0468b64-384f-466d-99fd-d719db9a46c9",
                "5a857bb6-a7e6-490a-8276-4b1abcd62b02",
                "94d248c0-3d47-4a1e-b56a-305fbb18c82f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2c6d91eb-95da-421c-972d-e9380449b631",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0bc84f2c-40b1-4834-a846-126ee2021a67",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = addRequestId();\nassert.strictEqual(typeof id, 'string');\nremoveRequestId(id);",
                  "err": {},
                  "uuid": "6c797f6e-70a3-47c9-859a-7ea7908dec0a",
                  "parentUUID": "0bc84f2c-40b1-4834-a846-126ee2021a67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId('FOO');",
                  "err": {},
                  "uuid": "8eac4bfc-3f94-4e8a-8a11-83649c907f8f",
                  "parentUUID": "0bc84f2c-40b1-4834-a846-126ee2021a67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c797f6e-70a3-47c9-859a-7ea7908dec0a",
                "8eac4bfc-3f94-4e8a-8a11-83649c907f8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7d439dc-e9fb-4334-8ad1-08a8ba2e41d3",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "64c93dd1-3ee0-40a6-9857-2b9738e3312e",
                  "parentUUID": "e7d439dc-e9fb-4334-8ad1-08a8ba2e41d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "937ce541-4e6a-48ca-bba0-38e8ca367f06",
                  "parentUUID": "e7d439dc-e9fb-4334-8ad1-08a8ba2e41d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "4ac38ac7-c006-4a7c-9d2a-46caf6624594",
                  "parentUUID": "e7d439dc-e9fb-4334-8ad1-08a8ba2e41d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "aed0bba4-e298-4db2-bbad-60db7ddf07ea",
                  "parentUUID": "e7d439dc-e9fb-4334-8ad1-08a8ba2e41d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "33e8fd32-1c37-4481-b853-8575e944c9d4",
                  "parentUUID": "e7d439dc-e9fb-4334-8ad1-08a8ba2e41d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64c93dd1-3ee0-40a6-9857-2b9738e3312e",
                "937ce541-4e6a-48ca-bba0-38e8ca367f06",
                "4ac38ac7-c006-4a7c-9d2a-46caf6624594",
                "aed0bba4-e298-4db2-bbad-60db7ddf07ea",
                "33e8fd32-1c37-4481-b853-8575e944c9d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a37b762-0d55-451d-8369-78cec0899564",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "40dd2bac-4036-4289-b633-0ddb78109478",
                  "parentUUID": "4a37b762-0d55-451d-8369-78cec0899564",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "2a281ab3-a57e-4bf9-a4bb-b911a13e6cc6",
                  "parentUUID": "4a37b762-0d55-451d-8369-78cec0899564",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "e857a7ea-22f4-4fdc-aee2-35618e149188",
                  "parentUUID": "4a37b762-0d55-451d-8369-78cec0899564",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "a8414c05-76ac-475b-b9b3-66323c45a9c2",
                  "parentUUID": "4a37b762-0d55-451d-8369-78cec0899564",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40dd2bac-4036-4289-b633-0ddb78109478",
                "2a281ab3-a57e-4bf9-a4bb-b911a13e6cc6",
                "e857a7ea-22f4-4fdc-aee2-35618e149188",
                "a8414c05-76ac-475b-b9b3-66323c45a9c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "541e5288-c367-49c1-82b3-0c9034367667",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters();\nassert.deepEqual(result, []);",
                  "err": {},
                  "uuid": "9a5b9bcf-d23e-4364-a066-45697a84f3a8",
                  "parentUUID": "541e5288-c367-49c1-82b3-0c9034367667",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    host: '192.168.178.2'\n});\nassert.deepEqual(result, ['-s', '192.168.178.2']);",
                  "err": {},
                  "uuid": "71c773db-4192-46b1-8593-225ce2b48d2c",
                  "parentUUID": "541e5288-c367-49c1-82b3-0c9034367667",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    hosts: ['192.168.178.2', '192.168.178.3'],\n    id: '****',\n    protocol: NodePyATVProtocol.mrp,\n    dmapCredentials: '****',\n    mrpCredentials: '****',\n    airplayCredentials: '****',\n    companionCredentials: '1234',\n    raopCredentials: '::foo:'\n});\nassert.deepEqual(result, [\n    '-s', '192.168.178.2,192.168.178.3',\n    '-i', '****',\n    '--protocol', 'mrp',\n    '--dmap-credentials', '****',\n    '--mrp-credentials', '****',\n    '--airplay-credentials', '****',\n    '--companion-credentials', '1234',\n    '--raop-credentials', '::foo:'\n]);",
                  "err": {},
                  "uuid": "8ed4cc49-4eeb-4e7a-8f1e-7a2c856dd6ba",
                  "parentUUID": "541e5288-c367-49c1-82b3-0c9034367667",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a5b9bcf-d23e-4364-a066-45697a84f3a8",
                "71c773db-4192-46b1-8593-225ce2b48d2c",
                "8ed4cc49-4eeb-4e7a-8f1e-7a2c856dd6ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e264c34-f406-4da1-bc96-196e8f7d097c",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "031aa99c-2502-4218-879b-e60669ccc387",
                  "parentUUID": "7e264c34-f406-4da1-bc96-196e8f7d097c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = parseState(null, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "5a6ed525-d789-459a-a8b8-ec3b8ec457b0",
                  "parentUUID": "7e264c34-f406-4da1-bc96-196e8f7d097c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "ffc5c4f3-06b2-4909-9c46-d8a534134696",
                  "parentUUID": "7e264c34-f406-4da1-bc96-196e8f7d097c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert.throws(() => {\n    parseState(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "272c65b6-010e-4d6e-9a26-d6255b132730",
                  "parentUUID": "7e264c34-f406-4da1-bc96-196e8f7d097c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "274e1349-8e04-4ae2-9191-85a2fc32fcf8",
                  "parentUUID": "7e264c34-f406-4da1-bc96-196e8f7d097c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "b0933213-c568-4343-aca0-7e335d84fb60",
                  "parentUUID": "7e264c34-f406-4da1-bc96-196e8f7d097c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "1dd485e5-c7a7-4ffa-9ca0-aee101640783",
                  "parentUUID": "7e264c34-f406-4da1-bc96-196e8f7d097c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "031aa99c-2502-4218-879b-e60669ccc387",
                "5a6ed525-d789-459a-a8b8-ec3b8ec457b0",
                "ffc5c4f3-06b2-4909-9c46-d8a534134696",
                "272c65b6-010e-4d6e-9a26-d6255b132730",
                "274e1349-8e04-4ae2-9191-85a2fc32fcf8",
                "b0933213-c568-4343-aca0-7e335d84fb60",
                "1dd485e5-c7a7-4ffa-9ca0-aee101640783"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}