{
  "stats": {
    "suites": 82,
    "tests": 136,
    "passes": 134,
    "pending": 2,
    "failures": 0,
    "start": "2020-11-29T12:47:36.406Z",
    "end": "2020-11-29T12:47:48.113Z",
    "duration": 11707,
    "testsRegistered": 136,
    "passPercent": 100,
    "pendingPercent": 1.4705882352941175,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a68beaea-7f25-4cc7-8c61-163e25c43e36",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2995aa1d-80d2-407d-8f72-565f895e2150",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "40a991eb-c39c-4e66-b976-a16c92fa98a3",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "1692309e-152d-4229-a67b-58becfcd68bb",
                  "parentUUID": "40a991eb-c39c-4e66-b976-a16c92fa98a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1692309e-152d-4229-a67b-58becfcd68bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e6a6aa4d-4aa7-45ed-9d50-322126573b9b",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "34c4a8cd-6a05-4cf7-9289-6c872f9dcfa0",
                  "parentUUID": "e6a6aa4d-4aa7-45ed-9d50-322126573b9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34c4a8cd-6a05-4cf7-9289-6c872f9dcfa0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "791e3708-2546-4b25-b7b3-f75ee618362c",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "6390e6cb-d122-44c2-a057-d463e95ec18c",
                  "parentUUID": "791e3708-2546-4b25-b7b3-f75ee618362c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6390e6cb-d122-44c2-a057-d463e95ec18c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c38d58a-9d75-495f-914f-3816b2bd79fd",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "a4decf2f-1155-498c-8b00-6f86d07564e8",
                  "parentUUID": "4c38d58a-9d75-495f-914f-3816b2bd79fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4decf2f-1155-498c-8b00-6f86d07564e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c6326b2d-36fb-47b3-98b3-a894bd264112",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert_1.default.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "38962df3-c490-4dc1-b9f5-47cccddab649",
                  "parentUUID": "c6326b2d-36fb-47b3-98b3-a894bd264112",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38962df3-c490-4dc1-b9f5-47cccddab649"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a37b325-8600-40e9-9af3-ed7391899ec1",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8124c098-9774-4431-8313-3309ee608f1b",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:title', event => {\n            assert_1.default.ok(event instanceof device_event_1.default);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "a2bd007f-fa10-479b-8df8-dce1d13f4f15",
                  "parentUUID": "8124c098-9774-4431-8313-3309ee608f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update', event => {\n            assert_1.default.ok(event instanceof device_event_1.default);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "3c887b62-2c56-428e-babf-4061ac524e3b",
                  "parentUUID": "8124c098-9774-4431-8313-3309ee608f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const sort = [];\n    yield Promise.race([\n        new Promise(cb => {\n            device.once('update', () => {\n                sort.push('update');\n                cb(undefined);\n            });\n        }),\n        new Promise(cb => {\n            device.once('update:title', () => {\n                sort.push('update:title');\n                cb(undefined);\n            });\n        })\n    ]);\n    assert_1.default.deepStrictEqual(sort, ['update:title', 'update']);\n});",
                  "err": {},
                  "uuid": "1e1bc58e-cb9a-4c96-a6ab-d5285daac448",
                  "parentUUID": "8124c098-9774-4431-8313-3309ee608f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let spawnCounter = 0;\n    let eventCounter = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            if (spawnCounter === 0) {\n                cp.onStdIn(() => cp.end());\n            }\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n            spawnCounter++;\n            if (spawnCounter >= 2) {\n                cp.end();\n            }\n        })\n    });\n    const listener = () => {\n        eventCounter++;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    yield device.getState();\n    device.off('update', listener);\n    assert_1.default.strictEqual(spawnCounter, 2);\n    assert_1.default.strictEqual(eventCounter, 1);\n});",
                  "err": {},
                  "uuid": "dbca1261-0db3-4534-ae57-469e62c78f7a",
                  "parentUUID": "8124c098-9774-4431-8313-3309ee608f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    let callCounter = 0;\n    const error = new Error('This is an error. Be nice.');\n    device.once('error', err => {\n        assert_1.default.strictEqual(err, error);\n        callCounter++;\n    });\n    const listener = () => {\n        throw error;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    device.off('update', listener);\n    assert_1.default.strictEqual(callCounter, 1);\n});",
                  "err": {},
                  "uuid": "cd01d5e6-20e7-4548-bc7b-504bb1b9d9b8",
                  "parentUUID": "8124c098-9774-4431-8313-3309ee608f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:powerState', event => {\n            assert_1.default.ok(event instanceof device_event_1.default);\n            assert_1.default.strictEqual(event.key, 'powerState');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'off');\n            assert_1.default.strictEqual(event.newValue, types_1.NodePyATVPowerState.off);\n            assert_1.default.strictEqual(event.value, 'off');\n            assert_1.default.strictEqual(event.value, types_1.NodePyATVPowerState.off);\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "7cb2d9b9-03b5-41dd-912f-5b18391726e1",
                  "parentUUID": "8124c098-9774-4431-8313-3309ee608f1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2bd007f-fa10-479b-8df8-dce1d13f4f15",
                "3c887b62-2c56-428e-babf-4061ac524e3b",
                "1e1bc58e-cb9a-4c96-a6ab-d5285daac448",
                "dbca1261-0db3-4534-ae57-469e62c78f7a",
                "cd01d5e6-20e7-4548-bc7b-504bb1b9d9b8",
                "7cb2d9b9-03b5-41dd-912f-5b18391726e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b9142cf-9be3-46a7-8e56-8fac8f78bd2c",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const error = new Error();\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.error(error).end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.strictEqual(err, error);\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "d442b273-71da-4db3-8563-61ec5deb3ace",
                  "parentUUID": "3b9142cf-9be3-46a7-8e56-8fac8f78bd2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stderr('Hello World!').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "47d88d5f-5e8c-406c-a1b3-bf550619b6fe",
                  "parentUUID": "3b9142cf-9be3-46a7-8e56-8fac8f78bd2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stdout('#').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Unable to parse stdout json: SyntaxError: ' +\n                'Unexpected token # in JSON at position 0'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "ebe58a0d-072d-41cb-8d33-c7e419411637",
                  "parentUUID": "3b9142cf-9be3-46a7-8e56-8fac8f78bd2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b622a269-1129-48d5-b624-70eabfc6d10e",
                  "parentUUID": "3b9142cf-9be3-46a7-8e56-8fac8f78bd2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d442b273-71da-4db3-8563-61ec5deb3ace",
                "47d88d5f-5e8c-406c-a1b3-bf550619b6fe",
                "ebe58a0d-072d-41cb-8d33-c7e419411637"
              ],
              "failures": [],
              "pending": [
                "b622a269-1129-48d5-b624-70eabfc6d10e"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8426b029-4d42-4f15-bc24-177e606696bf",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "79c0e72c-c51c-4126-b616-e163b7f74126",
                  "parentUUID": "8426b029-4d42-4f15-bc24-177e606696bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79c0e72c-c51c-4126-b616-e163b7f74126"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d53176b7-8bad-4f41-9bc9-68ff52585f8e",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new device_event_1.default({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert_1.default.strictEqual(e, event);\n    assert_1.default.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "d19cf652-6ab1-49bc-87e6-d9c6484862c4",
                  "parentUUID": "d53176b7-8bad-4f41-9bc9-68ff52585f8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d19cf652-6ab1-49bc-87e6-d9c6484862c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79da08b9-0d22-4156-8a34-a4a4b3c4ceca",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "0b73da86-79ee-4750-925e-2682151380dc",
                  "parentUUID": "79da08b9-0d22-4156-8a34-a4a4b3c4ceca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b73da86-79ee-4750-925e-2682151380dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f2f36f88-6322-4621-b909-88540ce34613",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert_1.default.ok(typeof result, 'number');\nassert_1.default.ok(result >= 10);",
                  "err": {},
                  "uuid": "891dce72-46e7-436f-ae42-7b1471ad7a7b",
                  "parentUUID": "f2f36f88-6322-4621-b909-88540ce34613",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "891dce72-46e7-436f-ae42-7b1471ad7a7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dcb8af5a-062d-468a-9aa5-cc1d751edf09",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "4f732e4b-6cd4-4149-a1a7-b8c788f8b7ab",
                  "parentUUID": "dcb8af5a-062d-468a-9aa5-cc1d751edf09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f732e4b-6cd4-4149-a1a7-b8c788f8b7ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a97d2df-d1fb-425a-832f-b6ffa9d3ea3e",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "02e7e192-e89b-479a-a9e6-d8f69034c1c0",
                  "parentUUID": "7a97d2df-d1fb-425a-832f-b6ffa9d3ea3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02e7e192-e89b-479a-a9e6-d8f69034c1c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4bdc03a9-fafe-4426-a469-4eb76ddb85de",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "cb825aa3-066e-4df7-854e-4b7117fa82c6",
                  "parentUUID": "4bdc03a9-fafe-4426-a469-4eb76ddb85de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb825aa3-066e-4df7-854e-4b7117fa82c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cee27556-7d6b-4a3e-b41c-1b1fe3ce12b9",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "2425b174-e3d8-4c02-bcce-14045bc75c2f",
                  "parentUUID": "cee27556-7d6b-4a3e-b41c-1b1fe3ce12b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2425b174-e3d8-4c02-bcce-14045bc75c2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "936f4eda-8ebf-4ec2-a738-6354fc27ba66",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "9e2867cc-9fac-48c6-81df-8481d6108a49",
                  "parentUUID": "936f4eda-8ebf-4ec2-a738-6354fc27ba66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e2867cc-9fac-48c6-81df-8481d6108a49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2a566f61-7b67-4479-b05f-7ee82bdb9726",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 1);\n    device.removeListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 0);\n});",
                  "err": {},
                  "uuid": "4b21875c-5356-4bfd-8534-bf1a1b738b6f",
                  "parentUUID": "2a566f61-7b67-4479-b05f-7ee82bdb9726",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b21875c-5356-4bfd-8534-bf1a1b738b6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3cf6728b-a371-4399-8c93-8338e413e9ba",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "de2ec9d3-1824-446f-b4e1-90590de5189b",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "629406dd-41ef-4600-9085-a2b0b70b4f92",
                  "parentUUID": "de2ec9d3-1824-446f-b4e1-90590de5189b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "629406dd-41ef-4600-9085-a2b0b70b4f92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29aaa7b0-1c37-4a28-808a-1173b87ce02e",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "4a89a856-a8f5-4855-b53e-236352acfdaa",
                  "parentUUID": "29aaa7b0-1c37-4a28-808a-1173b87ce02e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a89a856-a8f5-4855-b53e-236352acfdaa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d984ecb-19ed-466c-abb7-0150f8349e4d",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert_1.default.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "047ad890-a456-4e7c-81b8-7c5f8a09fa65",
                  "parentUUID": "9d984ecb-19ed-466c-abb7-0150f8349e4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "047ad890-a456-4e7c-81b8-7c5f8a09fa65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89e22bc2-438e-4eb5-97b9-58d457a6c08b",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.strictEqual(device.protocol, types_1.NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "18d98931-cd79-468a-9ea8-81482e772fcb",
                  "parentUUID": "89e22bc2-438e-4eb5-97b9-58d457a6c08b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18d98931-cd79-468a-9ea8-81482e772fcb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36fe7f00-12aa-42d0-9924-5a838b349737",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "94df590d-e4e6-4c53-aac0-9271465a9e87",
                  "parentUUID": "36fe7f00-12aa-42d0-9924-5a838b349737",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nconst device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "8cf58e2c-6acf-498a-b634-9cefb3951292",
                  "parentUUID": "36fe7f00-12aa-42d0-9924-5a838b349737",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "5ec5c5b1-6ba1-4107-ae1c-dc3831989e1b",
                  "parentUUID": "36fe7f00-12aa-42d0-9924-5a838b349737",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94df590d-e4e6-4c53-aac0-9271465a9e87",
                "8cf58e2c-6acf-498a-b634-9cefb3951292",
                "5ec5c5b1-6ba1-4107-ae1c-dc3831989e1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7264a28d-3a0b-4d73-ac9f-5f0474ad4485",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "bdad3ea2-2cea-4b3d-a4c0-daa02741a4d8",
                  "parentUUID": "7264a28d-3a0b-4d73-ac9f-5f0474ad4485",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "fdb0cc52-4ef8-466d-9ada-e8644b893a13",
                  "parentUUID": "7264a28d-3a0b-4d73-ac9f-5f0474ad4485",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "5f6521aa-0ef8-4a7e-b693-ba356dbedec9",
                  "parentUUID": "7264a28d-3a0b-4d73-ac9f-5f0474ad4485",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "e6f32541-dbc3-447e-8db3-6fb14608d368",
                  "parentUUID": "7264a28d-3a0b-4d73-ac9f-5f0474ad4485",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdad3ea2-2cea-4b3d-a4c0-daa02741a4d8",
                "fdb0cc52-4ef8-466d-9ada-e8644b893a13",
                "5f6521aa-0ef8-4a7e-b693-ba356dbedec9",
                "e6f32541-dbc3-447e-8db3-6fb14608d368"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84931dcf-55a3-4004-95aa-9417e535a52a",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "71603d8a-31db-4cec-ba3e-29964e6ffa18",
                  "parentUUID": "84931dcf-55a3-4004-95aa-9417e535a52a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n};\nconst deviceA = new device_1.default(config);\nconst deviceB = new device_1.default(deviceA.toJSON());\nassert_1.default.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "cbfddd3f-8b9d-456a-87f9-18aa07e374a6",
                  "parentUUID": "84931dcf-55a3-4004-95aa-9417e535a52a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71603d8a-31db-4cec-ba3e-29964e6ffa18",
                "cbfddd3f-8b9d-456a-87f9-18aa07e374a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0b337e5-db69-4b58-8e0b-1b6cf3f6204c",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "bf6f5ec8-b159-4bc4-a576-92ad97d19435",
                  "parentUUID": "e0b337e5-db69-4b58-8e0b-1b6cf3f6204c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf6f5ec8-b159-4bc4-a576-92ad97d19435"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7d136e18-5392-42c9-9712-6d1e67b4a26a",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f8474624-3878-4c80-a501-037842caccf2",
                  "parentUUID": "7d136e18-5392-42c9-9712-6d1e67b4a26a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const result = yield device.getState();\n    assert_1.default.deepStrictEqual(result, {\n        dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n        hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n        mediaType: types_1.NodePyATVMediaType.video,\n        deviceState: types_1.NodePyATVDeviceState.playing,\n        title: 'Solo: A Star Wars Story',\n        artist: null,\n        album: null,\n        genre: null,\n        totalTime: 8097,\n        position: 27,\n        shuffle: types_1.NodePyATVShuffleState.off,\n        repeat: types_1.NodePyATVRepeatState.off,\n        app: 'Disney+',\n        appId: 'com.disney.disneyplus',\n        powerState: null\n    });\n});",
                  "err": {},
                  "uuid": "fb3dfe5a-8090-4d79-a4d5-b1d0becb82c3",
                  "parentUUID": "7d136e18-5392-42c9-9712-6d1e67b4a26a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    const secondResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.dateTime, secondResult.dateTime);\n    assert_1.default.strictEqual(executions, 1);\n});",
                  "err": {},
                  "uuid": "402b5dda-7a96-485c-8c81-5b0a3cd6c750",
                  "parentUUID": "7d136e18-5392-42c9-9712-6d1e67b4a26a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date(new Date().getTime() - 1000).toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.position, 27);\n    const secondResult = yield device.getState();\n    assert_1.default.ok(secondResult.position);\n    assert_1.default.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\n    assert_1.default.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);\n});",
                  "err": {},
                  "uuid": "521f495f-7b11-43c6-81b9-c40f4fb357e4",
                  "parentUUID": "7d136e18-5392-42c9-9712-6d1e67b4a26a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb3dfe5a-8090-4d79-a4d5-b1d0becb82c3",
                "402b5dda-7a96-485c-8c81-5b0a3cd6c750",
                "521f495f-7b11-43c6-81b9-c40f4fb357e4"
              ],
              "failures": [],
              "pending": [
                "f8474624-3878-4c80-a501-037842caccf2"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d8a0bb8-a562-4c8d-9440-5ff94505e945",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                title: 'Solo: A Star Wars Story'\n            });\n        })\n    });\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    device.clearState();\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    assert_1.default.strictEqual(executions, 2);\n});",
                  "err": {},
                  "uuid": "70534c4a-5a6e-4bd8-9531-014e4b782e88",
                  "parentUUID": "6d8a0bb8-a562-4c8d-9440-5ff94505e945",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70534c4a-5a6e-4bd8-9531-014e4b782e88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f3e5d32-1046-472c-87ec-8026d9cb5f92",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON()\n            });\n        })\n    });\n    const result = yield device.getDateTime();\n    assert_1.default.ok(result instanceof Date);\n});",
                  "err": {},
                  "uuid": "433418fd-4be5-4b82-8b8f-f32b4751c0d4",
                  "parentUUID": "0f3e5d32-1046-472c-87ec-8026d9cb5f92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "433418fd-4be5-4b82-8b8f-f32b4751c0d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6dba0f7d-2b6f-4906-8070-e0228dff3d65",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                hash: '12345'\n            });\n        })\n    });\n    const result = yield device.getHash();\n    assert_1.default.strictEqual(result, '12345');\n});",
                  "err": {},
                  "uuid": "086edeb9-5535-4841-a047-634d4d9de960",
                  "parentUUID": "6dba0f7d-2b6f-4906-8070-e0228dff3d65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "086edeb9-5535-4841-a047-634d4d9de960"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d53dc42b-c21e-4930-89bd-cd1a3708be11",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                media_type: 'video'\n            });\n        })\n    });\n    const result = yield device.getMediaType();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVMediaType.video);\n    assert_1.default.deepStrictEqual(result, 'video');\n});",
                  "err": {},
                  "uuid": "a9c714b6-b4b2-45f2-b3a6-d0f2c78200e0",
                  "parentUUID": "d53dc42b-c21e-4930-89bd-cd1a3708be11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9c714b6-b4b2-45f2-b3a6-d0f2c78200e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f81fbdd-1ee5-4a4f-bee1-bc2ae0f33ae2",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                device_state: 'seeking'\n            });\n        })\n    });\n    const result = yield device.getDeviceState();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVDeviceState.seeking);\n    assert_1.default.deepStrictEqual(result, 'seeking');\n});",
                  "err": {},
                  "uuid": "ab1a91f8-31e7-4e9a-8f78-68f265b31ba3",
                  "parentUUID": "4f81fbdd-1ee5-4a4f-bee1-bc2ae0f33ae2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab1a91f8-31e7-4e9a-8f78-68f265b31ba3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "897f9442-ab6b-40aa-8092-58cdaf8109b0",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const result = yield device.getTitle();\n    assert_1.default.strictEqual(result, 'My Movie');\n});",
                  "err": {},
                  "uuid": "3b70e815-d0dc-4597-8dec-db329823bcc7",
                  "parentUUID": "897f9442-ab6b-40aa-8092-58cdaf8109b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b70e815-d0dc-4597-8dec-db329823bcc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0daa1a3b-046d-43c6-bc67-e2ef1dab1607",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                artist: 'My Artist'\n            });\n        })\n    });\n    const result = yield device.getArtist();\n    assert_1.default.strictEqual(result, 'My Artist');\n});",
                  "err": {},
                  "uuid": "bee3f3d9-70e6-4f93-ae32-2ff88483800e",
                  "parentUUID": "0daa1a3b-046d-43c6-bc67-e2ef1dab1607",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bee3f3d9-70e6-4f93-ae32-2ff88483800e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "effed410-c4ba-4409-9c20-aa2db7bfd62c",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                album: 'My ALbum'\n            });\n        })\n    });\n    const result = yield device.getAlbum();\n    assert_1.default.strictEqual(result, 'My ALbum');\n});",
                  "err": {},
                  "uuid": "04540206-11ff-4d79-9287-fcbceb487374",
                  "parentUUID": "effed410-c4ba-4409-9c20-aa2db7bfd62c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04540206-11ff-4d79-9287-fcbceb487374"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c7218c1-98f4-4cd0-848a-ecc407213ea1",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                genre: 'My Genre'\n            });\n        })\n    });\n    const result = yield device.getGenre();\n    assert_1.default.strictEqual(result, 'My Genre');\n});",
                  "err": {},
                  "uuid": "7491d586-9768-44a6-a5b6-d1c0d98a52af",
                  "parentUUID": "8c7218c1-98f4-4cd0-848a-ecc407213ea1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7491d586-9768-44a6-a5b6-d1c0d98a52af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8e824fb-de5f-47b4-a85e-3c58cbc7282c",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                total_time: 45\n            });\n        })\n    });\n    const result = yield device.getTotalTime();\n    assert_1.default.strictEqual(result, 45);\n});",
                  "err": {},
                  "uuid": "ac50583d-de4b-45b0-8259-0c65715fec20",
                  "parentUUID": "f8e824fb-de5f-47b4-a85e-3c58cbc7282c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac50583d-de4b-45b0-8259-0c65715fec20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab9d2864-9ad1-4b62-b83c-e7db62648d85",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                position: 30\n            });\n        })\n    });\n    const result = yield device.getPosition();\n    assert_1.default.strictEqual(result, 30);\n});",
                  "err": {},
                  "uuid": "550f3066-6ea7-4f9d-a918-00cd13cba3d3",
                  "parentUUID": "ab9d2864-9ad1-4b62-b83c-e7db62648d85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "550f3066-6ea7-4f9d-a918-00cd13cba3d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "509f09a5-9b61-468b-8f22-daab8b0661cb",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                shuffle: 'songs'\n            });\n        })\n    });\n    const result = yield device.getShuffle();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVShuffleState.songs);\n    assert_1.default.deepStrictEqual(result, 'songs');\n});",
                  "err": {},
                  "uuid": "a1126b35-8e86-40cd-b972-3cf376099e5c",
                  "parentUUID": "509f09a5-9b61-468b-8f22-daab8b0661cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1126b35-8e86-40cd-b972-3cf376099e5c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10b7f1cd-09b1-4c92-89b8-b9c858b55683",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                repeat: 'all'\n            });\n        })\n    });\n    const result = yield device.getRepeat();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVRepeatState.all);\n    assert_1.default.deepStrictEqual(result, 'all');\n});",
                  "err": {},
                  "uuid": "36b1df1f-e7ee-4706-a2f4-d1498e490c8f",
                  "parentUUID": "10b7f1cd-09b1-4c92-89b8-b9c858b55683",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36b1df1f-e7ee-4706-a2f4-d1498e490c8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f5c21d3-36b6-4a09-8a19-fa10909786ab",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app: 'My App'\n            });\n        })\n    });\n    const result = yield device.getApp();\n    assert_1.default.strictEqual(result, 'My App');\n});",
                  "err": {},
                  "uuid": "2db78f39-8c64-4a24-ba15-f58c05ea847d",
                  "parentUUID": "2f5c21d3-36b6-4a09-8a19-fa10909786ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2db78f39-8c64-4a24-ba15-f58c05ea847d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7154f758-91dd-463a-b184-9561f7128ec5",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app_id: 'app.example.com'\n            });\n        })\n    });\n    const result = yield device.getAppId();\n    assert_1.default.strictEqual(result, 'app.example.com');\n});",
                  "err": {},
                  "uuid": "e07f16b3-9688-484f-b0ec-a54727fd8180",
                  "parentUUID": "7154f758-91dd-463a-b184-9561f7128ec5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e07f16b3-9688-484f-b0ec-a54727fd8180"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "41145dd9-5b9d-4e17-9a31-a0d1ad3de9e6",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    yield device.pressKey(types_1.NodePyATVKeys.home);\n});",
                  "err": {},
                  "uuid": "2d8a3466-ed4b-4328-a5a5-0f46535fee03",
                  "parentUUID": "41145dd9-5b9d-4e17-9a31-a0d1ad3de9e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2'\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        yield device.pressKey('foo');\n    }), /Unsupported key value foo/);\n});",
                  "err": {},
                  "uuid": "05d0887e-5273-43b0-8ef8-e6d2d72167c3",
                  "parentUUID": "41145dd9-5b9d-4e17-9a31-a0d1ad3de9e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"failure\"}');\n        })\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.pressKey(types_1.NodePyATVKeys.home);\n    }), /Unable to parse pyatv response/);\n});",
                  "err": {},
                  "uuid": "ea0fdd7c-c474-42d6-98d2-b55c0788e6da",
                  "parentUUID": "41145dd9-5b9d-4e17-9a31-a0d1ad3de9e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d8a3466-ed4b-4328-a5a5-0f46535fee03",
                "05d0887e-5273-43b0-8ef8-e6d2d72167c3",
                "ea0fdd7c-c474-42d6-98d2-b55c0788e6da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4458a5da-eaa0-45fb-a87f-17de403f7a4b",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "82c7b201-8f0f-425a-9f42-bb7f8c9a095d",
                  "parentUUID": "4458a5da-eaa0-45fb-a87f-17de403f7a4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82c7b201-8f0f-425a-9f42-bb7f8c9a095d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0cf9c197-8c26-4adc-a60d-fff88ca6c18e",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "f317b47c-8baf-4343-bfa6-f7d750968c4c",
                  "parentUUID": "0cf9c197-8c26-4adc-a60d-fff88ca6c18e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f317b47c-8baf-4343-bfa6-f7d750968c4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a079b9ca-50b4-43bc-a5da-8988610df2cc",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "0b613dd6-30cc-4e47-ae55-11dbcce0d60b",
                  "parentUUID": "a079b9ca-50b4-43bc-a5da-8988610df2cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b613dd6-30cc-4e47-ae55-11dbcce0d60b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8662abb1-9576-4e42-89ee-6f40b65b2a4f",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "923a115b-4b1d-4944-9650-a78c6039cf72",
                  "parentUUID": "8662abb1-9576-4e42-89ee-6f40b65b2a4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "923a115b-4b1d-4944-9650-a78c6039cf72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00acbac1-856d-4d7b-85b4-60e302405242",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "df034c50-402c-46cb-bcd9-afebe0091c30",
                  "parentUUID": "00acbac1-856d-4d7b-85b4-60e302405242",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df034c50-402c-46cb-bcd9-afebe0091c30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "044f340e-5738-4abf-b4e1-35f56bc45479",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "2df76b86-929a-4909-bf48-fd2c650983b0",
                  "parentUUID": "044f340e-5738-4abf-b4e1-35f56bc45479",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2df76b86-929a-4909-bf48-fd2c650983b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5fe5fae-28a1-4ede-95b4-107018d4db49",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "dd2c6990-b1db-42b5-b241-27a182e54bbb",
                  "parentUUID": "f5fe5fae-28a1-4ede-95b4-107018d4db49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd2c6990-b1db-42b5-b241-27a182e54bbb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22306f81-9a60-4193-ad20-8973c8b6d591",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "012a90e1-291b-42bd-baff-e7b4d9ef7d62",
                  "parentUUID": "22306f81-9a60-4193-ad20-8973c8b6d591",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "012a90e1-291b-42bd-baff-e7b4d9ef7d62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32824ee7-88fa-4d12-bab8-2be56ef48554",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "50a76743-e62e-468f-9774-4921ac9593eb",
                  "parentUUID": "32824ee7-88fa-4d12-bab8-2be56ef48554",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50a76743-e62e-468f-9774-4921ac9593eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "843530ec-4e44-42ae-bd26-e97b2f9d4d53",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "27db114a-3cc4-4daf-875d-29226da1e9db",
                  "parentUUID": "843530ec-4e44-42ae-bd26-e97b2f9d4d53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27db114a-3cc4-4daf-875d-29226da1e9db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c4483fc-7de8-4037-acea-1653d2671048",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "de7b53e2-de25-4614-ad55-abc7b2ec42dd",
                  "parentUUID": "9c4483fc-7de8-4037-acea-1653d2671048",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de7b53e2-de25-4614-ad55-abc7b2ec42dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6c3e176-15bf-4619-9d39-4c94a661e93d",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "e4bf0601-d774-41eb-b80c-504ae46ebfb1",
                  "parentUUID": "f6c3e176-15bf-4619-9d39-4c94a661e93d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4bf0601-d774-41eb-b80c-504ae46ebfb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a86ea232-cce1-438d-836d-8b7c86af8bbf",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "64df2207-308d-4f61-bb6a-96f7bc779f3d",
                  "parentUUID": "a86ea232-cce1-438d-836d-8b7c86af8bbf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64df2207-308d-4f61-bb6a-96f7bc779f3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29574622-ec2e-4c3a-9440-e8d0207e5233",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "240c521d-8a94-428b-8de3-43aa0fe6de9d",
                  "parentUUID": "29574622-ec2e-4c3a-9440-e8d0207e5233",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "240c521d-8a94-428b-8de3-43aa0fe6de9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d2f9e47-2b5d-461b-8b63-4f880fc0555a",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "d7f53c61-a5bb-47af-a7dc-b40c6773368d",
                  "parentUUID": "1d2f9e47-2b5d-461b-8b63-4f880fc0555a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7f53c61-a5bb-47af-a7dc-b40c6773368d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf9e4753-a5c4-4a8b-be9e-e336460472fb",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "93207d6e-44c2-4713-a86f-2873bbfd0bfa",
                  "parentUUID": "bf9e4753-a5c4-4a8b-be9e-e336460472fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93207d6e-44c2-4713-a86f-2873bbfd0bfa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4b19786-2dda-4a88-9cac-3766c238bb05",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "fbee730e-2d95-4106-90f1-c8797dca2933",
                  "parentUUID": "d4b19786-2dda-4a88-9cac-3766c238bb05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbee730e-2d95-4106-90f1-c8797dca2933"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fcfe4b7e-e7fe-455d-a2eb-a1cec407c89b",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "97771ae0-3a0e-4814-aa02-b9db05423bdb",
                  "parentUUID": "fcfe4b7e-e7fe-455d-a2eb-a1cec407c89b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97771ae0-3a0e-4814-aa02-b9db05423bdb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a717450-3de3-4e78-8e4a-5c2d41856330",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "34dd0caa-bb0e-478d-87ff-43933e07c2ba",
                  "parentUUID": "1a717450-3de3-4e78-8e4a-5c2d41856330",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34dd0caa-bb0e-478d-87ff-43933e07c2ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "59f44b93-4494-4209-85e4-947b951476fa",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "87f4c48f-3860-47bf-8cd1-d7144b0490fd",
                  "parentUUID": "59f44b93-4494-4209-85e4-947b951476fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87f4c48f-3860-47bf-8cd1-d7144b0490fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c332b942-553a-4cbd-8b43-3935cd81de80",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "e03644c7-904c-4243-adc5-ae72ddb9c1ca",
                  "parentUUID": "c332b942-553a-4cbd-8b43-3935cd81de80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e03644c7-904c-4243-adc5-ae72ddb9c1ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a69e3289-7f29-4b33-8be1-517f0d8923cc",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 514,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(4000);\n    const result = yield index_1.default.version();\n    if (result.pyatv === null) {\n        throw new Error('No version found for pyatv. Is it installed in test environment?');\n    }\n    assert_1.default.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\n    assert_1.default.ok(result.pyatv.length >= 5, 'result.pyatv has content');\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "edc6377e-c8c3-4976-804a-5658d95dfc40",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.code(1);\n            cp.end('atvremote 0.7.4');\n        })\n    });\n    assert_1.default.ok(result.pyatv);\n    assert_1.default.strictEqual(result.pyatv, '0.7.4');\n});",
                  "err": {},
                  "uuid": "148113f9-967c-4b4a-84e1-b22dfd0bbac3",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        noColors: true,\n        spawn: fake_spawn_1.createFakeSpawn(cp => cp.code(1).end())\n    });\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "9e4f155d-0156-4e08-89f7-a94e0d4e06a2",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        atvremotePath: '/foo/bar',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "4c67967c-8a55-4d27-b802-cb4a7b976ca4",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: true,\n        spawn: fake_spawn_1.createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "e840310b-bed3-4bb7-b99f-c1582390a704",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: () => { },\n        noColors: true,\n        spawn: fake_spawn_1.createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "8c2dd7fa-839f-4623-98b1-d97c26307070",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "20b9f0d0-f701-4a78-9f6d-dcafb4ed24c3",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "2760ca73-19e9-4815-b6f5-aaec15c839f6",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stdout('atvremote 42').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "42d088b2-e4d4-46fb-9df2-fe601ca67ed3",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on empty module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on empty module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = {};\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "055c0899-7d29-4ae5-a967-bdb6f7b1933b",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = { version: 42 };\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "f2ff8dd1-2b9a-4d51-9cc0-d674f340d352",
                  "parentUUID": "ec30da8b-9727-4420-a24a-c25c3e6f8fa4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edc6377e-c8c3-4976-804a-5658d95dfc40",
                "148113f9-967c-4b4a-84e1-b22dfd0bbac3",
                "9e4f155d-0156-4e08-89f7-a94e0d4e06a2",
                "4c67967c-8a55-4d27-b802-cb4a7b976ca4",
                "e840310b-bed3-4bb7-b99f-c1582390a704",
                "8c2dd7fa-839f-4623-98b1-d97c26307070",
                "20b9f0d0-f701-4a78-9f6d-dcafb4ed24c3",
                "2760ca73-19e9-4815-b6f5-aaec15c839f6",
                "42d088b2-e4d4-46fb-9df2-fe601ca67ed3",
                "055c0899-7d29-4ae5-a967-bdb6f7b1933b",
                "f2ff8dd1-2b9a-4d51-9cc0-d674f340d352"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 526,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74ea4aae-601d-48fc-a6cc-0252d0769b76",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5666,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(12000);\n    yield index_1.default.check();\n});",
                  "err": {},
                  "uuid": "1db29c35-31dd-4f25-a2f5-dc194a849764",
                  "parentUUID": "74ea4aae-601d-48fc-a6cc-0252d0769b76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "19e1125b-d7c7-40f8-8fce-39d146888a31",
                  "parentUUID": "74ea4aae-601d-48fc-a6cc-0252d0769b76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stdout('atvremote 0.5.1').code(1).end();\n            })\n        });\n    }), /Found pyatv, but unforunately it's too old. Please update pyatv./);\n});",
                  "err": {},
                  "uuid": "5ac0bfce-4f90-4e5a-ae88-31778c35f921",
                  "parentUUID": "74ea4aae-601d-48fc-a6cc-0252d0769b76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let i = 0;\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                if (i === 0) {\n                    cp.stdout('atvremote 0.7.0').code(1).end();\n                    i++;\n                }\n                else {\n                    cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n                }\n            })\n        });\n    }), /Unable to scan for devices/);\n});",
                  "err": {},
                  "uuid": "4a5a2c8e-0bef-4981-958a-3511e7bdc73f",
                  "parentUUID": "74ea4aae-601d-48fc-a6cc-0252d0769b76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1db29c35-31dd-4f25-a2f5-dc194a849764",
                "19e1125b-d7c7-40f8-8fce-39d146888a31",
                "5ac0bfce-4f90-4e5a-ae88-31778c35f921",
                "4a5a2c8e-0bef-4981-958a-3511e7bdc73f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5673,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95fa57ff-c559-499e-8ba3-7a7b07cf47f3",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5340,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(8000);\n    const result = yield index_1.default.find();\n    assert_1.default.ok(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "3c1be04e-a6a8-42b5-bcad-b6146c6edbc0",
                  "parentUUID": "95fa57ff-c559-499e-8ba3-7a7b07cf47f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.find({\n        atvscriptPath: '/foo/bar',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "37bed95f-f3af-4d87-a448-0599db5e1183",
                  "parentUUID": "95fa57ff-c559-499e-8ba3-7a7b07cf47f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stderr('Hello World!').code(1).end();\n            })\n        });\n    }), /Unable to execute request/);\n});",
                  "err": {},
                  "uuid": "ad7cafe4-1fb0-40b9-9cf1-d8418d25a0dc",
                  "parentUUID": "95fa57ff-c559-499e-8ba3-7a7b07cf47f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.error(new Error('Hello world!')).code(1).end();\n            })\n        });\n    }), /Hello world!/);\n});",
                  "err": {},
                  "uuid": "4877d59e-e985-4648-a6c7-8030838fd086",
                  "parentUUID": "95fa57ff-c559-499e-8ba3-7a7b07cf47f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stdout(JSON.stringify({\n                    'result': 'success',\n                    'datetime': '2020-11-06T20:47:30.840022+01:00',\n                    'devices': []\n                }).substr(1)).end();\n            })\n        });\n    }), /Unable to parse result/);\n});",
                  "err": {},
                  "uuid": "ed5cc798-d453-47e2-b798-2f10a6ea0e08",
                  "parentUUID": "95fa57ff-c559-499e-8ba3-7a7b07cf47f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'error'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "699a6ad0-b074-4486-a28e-59cb96afacb1",
                  "parentUUID": "95fa57ff-c559-499e-8ba3-7a7b07cf47f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'success'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "428668f0-a832-4933-96ae-08da69f5e824",
                  "parentUUID": "95fa57ff-c559-499e-8ba3-7a7b07cf47f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c1be04e-a6a8-42b5-bcad-b6146c6edbc0",
                "37bed95f-f3af-4d87-a448-0599db5e1183",
                "ad7cafe4-1fb0-40b9-9cf1-d8418d25a0dc",
                "4877d59e-e985-4648-a6c7-8030838fd086",
                "ed5cc798-d453-47e2-b798-2f10a6ea0e08",
                "699a6ad0-b074-4486-a28e-59cb96afacb1",
                "428668f0-a832-4933-96ae-08da69f5e824"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5348,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "edea7aa8-e7ac-458a-baf9-e8adcdb98b3e",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = index_1.default.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert_1.default.strictEqual(device.host, '192.168.178.6');\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "19d88c17-a367-4418-bf52-48af01d10016",
                  "parentUUID": "edea7aa8-e7ac-458a-baf9-e8adcdb98b3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19d88c17-a367-4418-bf52-48af01d10016"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "425d9b08-bb74-4729-b325-2170c1e3470e",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield i.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "bf13425d-9290-4325-9202-eda021cae891",
                  "parentUUID": "425d9b08-bb74-4729-b325-2170c1e3470e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf13425d-9290-4325-9202-eda021cae891"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "623c72a8-5b2f-4000-beac-99686039ba95",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield i.check({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                assert_1.default.strictEqual(cp.cmd(), 'test');\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "11528a57-5de4-43c2-a0ef-2cd714d84fdb",
                  "parentUUID": "623c72a8-5b2f-4000-beac-99686039ba95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11528a57-5de4-43c2-a0ef-2cd714d84fdb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "898351ad-5711-4e67-8990-78c65c0f806a",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvscriptPath: 'test' });\n    yield i.find({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "6acc0ec3-ddc1-48cc-9458-e392d43aaf8c",
                  "parentUUID": "898351ad-5711-4e67-8990-78c65c0f806a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6acc0ec3-ddc1-48cc-9458-e392d43aaf8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10965da3-fd37-4402-9a1f-2d31c4d02393",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ debug: true });\n    const d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\n    assert_1.default.deepStrictEqual(d.debug, true);\n});",
                  "err": {},
                  "uuid": "9af56677-e729-4fbf-bf2b-73b3182c20e8",
                  "parentUUID": "10965da3-fd37-4402-9a1f-2d31c4d02393",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9af56677-e729-4fbf-bf2b-73b3182c20e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a890f09-1a0e-4b5e-87da-873b3c3255b9",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVProtocol);",
                  "err": {},
                  "uuid": "f4e9ca11-0800-4261-9539-942d690cadbb",
                  "parentUUID": "4a890f09-1a0e-4b5e-87da-873b3c3255b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVMediaType);",
                  "err": {},
                  "uuid": "3da31191-011a-4dc4-af09-5f7a75f9b0a7",
                  "parentUUID": "4a890f09-1a0e-4b5e-87da-873b3c3255b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "02581d57-92ee-448b-a734-b50272ff54df",
                  "parentUUID": "4a890f09-1a0e-4b5e-87da-873b3c3255b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "02b814b0-b00b-4f4c-acc1-dd864a3e9775",
                  "parentUUID": "4a890f09-1a0e-4b5e-87da-873b3c3255b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "07f60f1f-71c3-47f5-867e-8acf48d6d3e9",
                  "parentUUID": "4a890f09-1a0e-4b5e-87da-873b3c3255b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "339935e6-8c8b-4bd7-b379-3d1b0b67e664",
                  "parentUUID": "4a890f09-1a0e-4b5e-87da-873b3c3255b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVKeys);",
                  "err": {},
                  "uuid": "21177838-69bc-47a3-a0d0-e03e224386d2",
                  "parentUUID": "4a890f09-1a0e-4b5e-87da-873b3c3255b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4e9ca11-0800-4261-9539-942d690cadbb",
                "3da31191-011a-4dc4-af09-5f7a75f9b0a7",
                "02581d57-92ee-448b-a734-b50272ff54df",
                "02b814b0-b00b-4f4c-acc1-dd864a3e9775",
                "07f60f1f-71c3-47f5-867e-8acf48d6d3e9",
                "339935e6-8c8b-4bd7-b379-3d1b0b67e664",
                "21177838-69bc-47a3-a0d0-e03e224386d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "61c3e61e-3252-4aed-b754-17e2e3bb1372",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "268e57cf-e916-4731-bd7c-1a3e82aea53b",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = tools_1.addRequestId();\nassert_1.default.strictEqual(typeof id, 'string');\ntools_1.removeRequestId(id);",
                  "err": {},
                  "uuid": "5893dffe-09f6-4c97-a1d8-a215547a4732",
                  "parentUUID": "268e57cf-e916-4731-bd7c-1a3e82aea53b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.removeRequestId('FOO');",
                  "err": {},
                  "uuid": "abb094fe-6603-4d7b-b065-0accd05438a6",
                  "parentUUID": "268e57cf-e916-4731-bd7c-1a3e82aea53b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5893dffe-09f6-4c97-a1d8-a215547a4732",
                "abb094fe-6603-4d7b-b065-0accd05438a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7218f93-9a6a-4b13-a680-6aaa91976b11",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "65d60708-c430-4a36-879a-61259e9831ec",
                  "parentUUID": "f7218f93-9a6a-4b13-a680-6aaa91976b11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "386db946-7086-4ca6-bfe0-5d734c245146",
                  "parentUUID": "f7218f93-9a6a-4b13-a680-6aaa91976b11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "388e1f04-9335-426c-8f51-dcaf4f0fcb8a",
                  "parentUUID": "f7218f93-9a6a-4b13-a680-6aaa91976b11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "2f78025a-d2c1-4db6-a015-32e2ca53366d",
                  "parentUUID": "f7218f93-9a6a-4b13-a680-6aaa91976b11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "d150a0b5-b8df-4a2a-b239-ac9e616a2dc6",
                  "parentUUID": "f7218f93-9a6a-4b13-a680-6aaa91976b11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65d60708-c430-4a36-879a-61259e9831ec",
                "386db946-7086-4ca6-bfe0-5d734c245146",
                "388e1f04-9335-426c-8f51-dcaf4f0fcb8a",
                "2f78025a-d2c1-4db6-a015-32e2ca53366d",
                "d150a0b5-b8df-4a2a-b239-ac9e616a2dc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1f3d1911-9415-40ba-8c94-4ac04cbc8ebc",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = tools_1.getExecutable(types_1.NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "eacffb41-e98c-4822-8bd5-d9dae5f96f6e",
                  "parentUUID": "1f3d1911-9415-40ba-8c94-4ac04cbc8ebc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = tools_1.getExecutable(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "ac3f0240-f05d-42ac-b4b8-4926db681fbc",
                  "parentUUID": "1f3d1911-9415-40ba-8c94-4ac04cbc8ebc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = tools_1.getExecutable(types_1.NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "887151ba-3020-4ab4-a66f-632941a9b05e",
                  "parentUUID": "1f3d1911-9415-40ba-8c94-4ac04cbc8ebc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = tools_1.getExecutable(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "85f07623-67a8-405d-aca2-5497c23b560b",
                  "parentUUID": "1f3d1911-9415-40ba-8c94-4ac04cbc8ebc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eacffb41-e98c-4822-8bd5-d9dae5f96f6e",
                "ac3f0240-f05d-42ac-b4b8-4926db681fbc",
                "887151ba-3020-4ab4-a66f-632941a9b05e",
                "85f07623-67a8-405d-aca2-5497c23b560b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5b0eed67-b6f9-4c7b-8345-badd34753968",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield tools_1.getParamters();\n    assert_1.default.deepEqual(result, []);\n});",
                  "err": {},
                  "uuid": "495232f6-7a85-485a-9e30-19dd5aa8171a",
                  "parentUUID": "5b0eed67-b6f9-4c7b-8345-badd34753968",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield tools_1.getParamters({\n        host: '192.168.178.2'\n    });\n    assert_1.default.deepEqual(result, ['-s', '192.168.178.2']);\n});",
                  "err": {},
                  "uuid": "91a07658-13c8-4593-bdbf-5630908c3e78",
                  "parentUUID": "5b0eed67-b6f9-4c7b-8345-badd34753968",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield tools_1.getParamters({\n        hosts: ['192.168.178.2', '192.168.178.3'],\n        id: '****',\n        protocol: types_1.NodePyATVProtocol.mrp,\n        dmapCredentials: '****',\n        mrpCredentials: '****',\n        airplayCredentials: '****'\n    });\n    assert_1.default.deepEqual(result, [\n        '-s', '192.168.178.2,192.168.178.3',\n        '-i', '****',\n        '--protocol', 'mrp',\n        '--dmap-credentials', '****',\n        '--mrp-credentials', '****',\n        '--airplay-credentials', '****'\n    ]);\n});",
                  "err": {},
                  "uuid": "2bcc15b5-d6b2-4987-9c30-078d8c6034a4",
                  "parentUUID": "5b0eed67-b6f9-4c7b-8345-badd34753968",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "495232f6-7a85-485a-9e30-19dd5aa8171a",
                "91a07658-13c8-4593-bdbf-5630908c3e78",
                "2bcc15b5-d6b2-4987-9c30-078d8c6034a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3aee5bcb-737c-4e93-8a27-3f0b4e46612a",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "46444c75-a02f-4f64-9552-56ecb9b78f2b",
                  "parentUUID": "3aee5bcb-737c-4e93-8a27-3f0b4e46612a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = tools_1.parseState(null, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "86d943be-28f2-4787-afe0-c05a45ee4834",
                  "parentUUID": "3aee5bcb-737c-4e93-8a27-3f0b4e46612a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    powerState: null\n};\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: types_1.NodePyATVMediaType.video,\n    deviceState: types_1.NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: types_1.NodePyATVShuffleState.off,\n    repeat: types_1.NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null\n});",
                  "err": {},
                  "uuid": "76b6042d-a8d7-4695-b3e7-744232a88e51",
                  "parentUUID": "3aee5bcb-737c-4e93-8a27-3f0b4e46612a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "ea1916a3-b853-4fc3-9c64-86c6985954e4",
                  "parentUUID": "3aee5bcb-737c-4e93-8a27-3f0b4e46612a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    powerState: null\n};\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "3af36748-c3f4-48c6-bdab-70e7027cdf72",
                  "parentUUID": "3aee5bcb-737c-4e93-8a27-3f0b4e46612a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "3d72a266-559a-4564-928c-db7b66cbdf97",
                  "parentUUID": "3aee5bcb-737c-4e93-8a27-3f0b4e46612a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46444c75-a02f-4f64-9552-56ecb9b78f2b",
                "86d943be-28f2-4787-afe0-c05a45ee4834",
                "76b6042d-a8d7-4695-b3e7-744232a88e51",
                "ea1916a3-b853-4fc3-9c64-86c6985954e4",
                "3af36748-c3f4-48c6-bdab-70e7027cdf72",
                "3d72a266-559a-4564-928c-db7b66cbdf97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}