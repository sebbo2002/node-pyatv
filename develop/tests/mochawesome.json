{
  "stats": {
    "suites": 93,
    "tests": 165,
    "passes": 163,
    "pending": 2,
    "failures": 0,
    "start": "2024-10-15T10:17:19.363Z",
    "end": "2024-10-15T10:17:31.232Z",
    "duration": 11869,
    "testsRegistered": 165,
    "passPercent": 100,
    "pendingPercent": 1.2121212121212122,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "229ded47-b220-4387-8880-798dfd7ed4af",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8740720b-b83e-497a-8de9-b1132775dd8f",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "657dc225-da3f-4362-b33c-ab08753e37c7",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "70980fe0-d41a-49db-92e6-ec56c8b4f0a4",
                  "parentUUID": "657dc225-da3f-4362-b33c-ab08753e37c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70980fe0-d41a-49db-92e6-ec56c8b4f0a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "66af0fc6-8698-4217-8ca2-ca14aef228a9",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "27f8e159-1fcb-47f5-9200-cc80ba2cead3",
                  "parentUUID": "66af0fc6-8698-4217-8ca2-ca14aef228a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27f8e159-1fcb-47f5-9200-cc80ba2cead3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e11be93-2606-47e5-b816-09b763fa115a",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "5857d3ba-ad76-458b-824a-79f6ad41b0f4",
                  "parentUUID": "5e11be93-2606-47e5-b816-09b763fa115a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5857d3ba-ad76-458b-824a-79f6ad41b0f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7877e502-4d9d-4645-9fd1-52f22810e595",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "2bd2cc2f-1704-4edb-a872-71cda7996d00",
                  "parentUUID": "7877e502-4d9d-4645-9fd1-52f22810e595",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2bd2cc2f-1704-4edb-a872-71cda7996d00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39d4904b-66a7-4987-a5b0-ee8de43291a8",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device});assert.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "80f3940c-f811-4d50-a2c1-1804e8e9d752",
                  "parentUUID": "39d4904b-66a7-4987-a5b0-ee8de43291a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80f3940c-f811-4d50-a2c1-1804e8e9d752"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a24b3b54-911a-489d-8638-49edca1eb9f9",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ef633705-d271-4fdb-ad6e-bca55daedb94",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "dccbb5a6-6835-4d28-b6ed-679a46fbf8f2",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "27ad1548-8ca3-4394-a7d1-21449b598db8",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);assert.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "f3eef5f0-90bf-4961-9100-600157f56690",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"failure\",datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{assert.ok(error instanceof Error);assert.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "891c54dc-ee8a-4d9b-9dcb-80925dc46460",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);assert.strictEqual(spawnCounter,2);assert.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "0bebfa31-6c3f-4c30-8667-0e8f1ba4c7a5",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{assert.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);assert.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "4cfa2f3e-e530-4fc7-838b-5bf95522f21d",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),power_state:\"off\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "89ee8333-b081-44f1-8bf4-80c49507f5b7",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),power_state:\"off\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "4a11f003-6923-4bb8-8055-5c2a67cbbf34",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),focus_state:\"unfocused\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"focusState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"unfocused\");assert.strictEqual(event.newValue,NodePyATVFocusState.unfocused);assert.strictEqual(event.value,\"unfocused\");assert.strictEqual(event.value,NodePyATVFocusState.unfocused);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "4021b1c5-6417-4d41-8c63-7fa44fd2adbb",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),output_devices:[{name:\"Living room\",identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"}]});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"outputDevices\");assert.strictEqual(event.oldValue,null);assert.deepStrictEqual(event.newValue,[{name:\"Living room\",identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"}]);assert.deepStrictEqual(event.value,[{name:\"Living room\",identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"}]);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "a440c687-d0de-42bf-8b72-33699e191603",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"volume\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,20);assert.strictEqual(event.value,20);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "cdcd2f47-4d85-4621-8f4c-b6716eba4c10",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),foo:\"bar\"});cp.end()})});device.on(\"update\",event=>{assert.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "4fb1d854-6020-4fe2-80a7-2212f19e887a",
                  "parentUUID": "ef633705-d271-4fdb-ad6e-bca55daedb94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dccbb5a6-6835-4d28-b6ed-679a46fbf8f2",
                "27ad1548-8ca3-4394-a7d1-21449b598db8",
                "f3eef5f0-90bf-4961-9100-600157f56690",
                "891c54dc-ee8a-4d9b-9dcb-80925dc46460",
                "0bebfa31-6c3f-4c30-8667-0e8f1ba4c7a5",
                "4cfa2f3e-e530-4fc7-838b-5bf95522f21d",
                "89ee8333-b081-44f1-8bf4-80c49507f5b7",
                "4a11f003-6923-4bb8-8055-5c2a67cbbf34",
                "4021b1c5-6417-4d41-8c63-7fa44fd2adbb",
                "a440c687-d0de-42bf-8b72-33699e191603",
                "cdcd2f47-4d85-4621-8f4c-b6716eba4c10",
                "4fb1d854-6020-4fe2-80a7-2212f19e887a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac5a572c-f1e5-4809-aa4b-ee7579c3ec61",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "78bb489e-3333-4a00-a561-3f6fb73bd68f",
                  "parentUUID": "ac5a572c-f1e5-4809-aa4b-ee7579c3ec61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "6919d8db-f4b3-40c4-b36e-e07392da14b4",
                  "parentUUID": "ac5a572c-f1e5-4809-aa4b-ee7579c3ec61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "d6b1072e-8673-4e97-89e1-9333b2cf95d5",
                  "parentUUID": "ac5a572c-f1e5-4809-aa4b-ee7579c3ec61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8a6f10de-7084-48fb-91f7-fa4c5c6ee958",
                  "parentUUID": "ac5a572c-f1e5-4809-aa4b-ee7579c3ec61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78bb489e-3333-4a00-a561-3f6fb73bd68f",
                "6919d8db-f4b3-40c4-b36e-e07392da14b4",
                "d6b1072e-8673-4e97-89e1-9333b2cf95d5"
              ],
              "failures": [],
              "pending": [
                "8a6f10de-7084-48fb-91f7-fa4c5c6ee958"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd10494d-049e-4dfe-8a11-f767d8681fca",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "a893ce8e-c608-456e-bcbe-ce8a7bf4b803",
                  "parentUUID": "cd10494d-049e-4dfe-8a11-f767d8681fca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a893ce8e-c608-456e-bcbe-ce8a7bf4b803"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b1340a94-4cd2-44de-b009-abbdeb50a447",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const event=new NodePyATVDeviceEvent({key:\"dateTime\",old:\"foo\",new:\"bar\",device});let executions=0;device.once(\"test\",e=>{executions++;assert.strictEqual(e,event);assert.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "bfff44ec-ab83-4d8d-9ed8-e06281ed89d3",
                  "parentUUID": "b1340a94-4cd2-44de-b009-abbdeb50a447",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfff44ec-ab83-4d8d-9ed8-e06281ed89d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c3fafc11-c7c3-49c7-86ac-cf0b42a46477",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);assert.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "d260dca8-744a-4725-b2f0-db6726de6b00",
                  "parentUUID": "c3fafc11-c7c3-49c7-86ac-cf0b42a46477",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d260dca8-744a-4725-b2f0-db6726de6b00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "efb37e2e-824c-48c0-a496-41b0d7901eb6",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();assert.ok(typeof result,\"number\");assert.ok(result>=10)",
                  "err": {},
                  "uuid": "ea9d74ea-bb45-418b-b447-a5386b213598",
                  "parentUUID": "efb37e2e-824c-48c0-a496-41b0d7901eb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea9d74ea-bb45-418b-b447-a5386b213598"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff8c0cf2-b5e7-4add-9c4b-3543fcba2fb1",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);assert.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "fe9dc1a8-d065-4e55-8cc9-d03b6bd14a01",
                  "parentUUID": "ff8c0cf2-b5e7-4add-9c4b-3543fcba2fb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe9dc1a8-d065-4e55-8cc9-d03b6bd14a01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "426a2975-c797-4233-b6c5-e2c031ec9fec",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.listeners(\"test\").length,1);assert.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "f92688f2-1a3d-4fb5-bd09-741977b1bbdd",
                  "parentUUID": "426a2975-c797-4233-b6c5-e2c031ec9fec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f92688f2-1a3d-4fb5-bd09-741977b1bbdd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "872e6c68-2016-45a6-a7c0-d33806d35799",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "ce8e5d74-ddb0-49ca-aebe-d35c3c1c507a",
                  "parentUUID": "872e6c68-2016-45a6-a7c0-d33806d35799",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce8e5d74-ddb0-49ca-aebe-d35c3c1c507a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "576fbc89-e536-4903-a520-d7e303b13e7b",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "cc638517-eccf-4145-800d-7cfdf15e5ea5",
                  "parentUUID": "576fbc89-e536-4903-a520-d7e303b13e7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc638517-eccf-4145-800d-7cfdf15e5ea5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "508c20e5-5f2f-422b-babb-0e7c11b986a1",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.rawListeners(\"test\").length,1);assert.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "ac738afb-c15a-49ca-9dd4-ae6b49f2a9a3",
                  "parentUUID": "508c20e5-5f2f-422b-babb-0e7c11b986a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac738afb-c15a-49ca-9dd4-ae6b49f2a9a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2972ffa-d0a9-4ce7-96aa-5fc23b8d4777",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "d2dd031e-3735-4aef-96d4-cc92d4c82b27",
                  "parentUUID": "a2972ffa-d0a9-4ce7-96aa-5fc23b8d4777",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2dd031e-3735-4aef-96d4-cc92d4c82b27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a4b01f87-7a0d-497b-9e3d-b974f1be6a78",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5484da37-abd3-466e-9aaa-eb4cb583b3ea",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "0180b321-da1a-46de-9c0b-200a936a4c14",
                  "parentUUID": "5484da37-abd3-466e-9aaa-eb4cb583b3ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0180b321-da1a-46de-9c0b-200a936a4c14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "faada792-87ec-42a6-8e11-cdfb1251b570",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "eca8285d-56b7-4a76-9e19-1136bd8aafc0",
                  "parentUUID": "faada792-87ec-42a6-8e11-cdfb1251b570",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eca8285d-56b7-4a76-9e19-1136bd8aafc0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "029671fd-035f-4197-88ad-d15f2f545e0b",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\"});assert.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "4562171c-458f-4420-9f04-468e07ababce",
                  "parentUUID": "029671fd-035f-4197-88ad-d15f2f545e0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4562171c-458f-4420-9f04-468e07ababce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82890527-bc2b-4ac8-a09e-596b7030b923",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"]});assert.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "069fa96f-faa3-418c-b3a6-e46e615a655d",
                  "parentUUID": "82890527-bc2b-4ac8-a09e-596b7030b923",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "069fa96f-faa3-418c-b3a6-e46e615a655d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2af3816-04c6-42b6-8dd7-b41e6a1a9266",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",protocol:NodePyATVProtocol.airplay});assert.strictEqual(device.protocol,NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "af3be912-ed38-4964-9bb0-18dd16b17deb",
                  "parentUUID": "d2af3816-04c6-42b6-8dd7-b41e6a1a9266",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af3be912-ed38-4964-9bb0-18dd16b17deb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "605d1090-afa6-42f8-8d52-21d798c87323",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\"});assert.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "7ceaded6-cf08-4f72-9a8e-9455eca59b09",
                  "parentUUID": "605d1090-afa6-42f8-8d52-21d798c87323",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ceaded6-cf08-4f72-9a8e-9455eca59b09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fd5444d-2b2d-40ab-b913-c98832975209",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\"});assert.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "b77d2e3f-af87-4cd8-8135-374d347ba9dd",
                  "parentUUID": "4fd5444d-2b2d-40ab-b913-c98832975209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "88c80cff-0e55-42a4-905e-e5f542a46ac9",
                  "parentUUID": "4fd5444d-2b2d-40ab-b913-c98832975209",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b77d2e3f-af87-4cd8-8135-374d347ba9dd",
                "88c80cff-0e55-42a4-905e-e5f542a46ac9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f360e4c9-024c-4852-bbaf-1f69255d87a6",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\"});assert.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "f9143397-6a11-4b3c-b0cc-bd5634b08aa4",
                  "parentUUID": "f360e4c9-024c-4852-bbaf-1f69255d87a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "10ab9a40-846c-46a8-b74f-1eb82430102a",
                  "parentUUID": "f360e4c9-024c-4852-bbaf-1f69255d87a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9143397-6a11-4b3c-b0cc-bd5634b08aa4",
                "10ab9a40-846c-46a8-b74f-1eb82430102a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "727e9605-ce9a-4b40-9003-2e576eebe450",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",os:\"TvOS\"});assert.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "989323e8-4a82-4324-be27-3e8001cb7e51",
                  "parentUUID": "727e9605-ce9a-4b40-9003-2e576eebe450",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "b8656f09-c04f-4f32-a5c8-89276749024e",
                  "parentUUID": "727e9605-ce9a-4b40-9003-2e576eebe450",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "989323e8-4a82-4324-be27-3e8001cb7e51",
                "b8656f09-c04f-4f32-a5c8-89276749024e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d02391f-7a67-4879-9385-c52f5a3f54e9",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",version:\"15.5.1\"});assert.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "67217dee-d1c9-4417-8ef5-76686ac9d056",
                  "parentUUID": "8d02391f-7a67-4879-9385-c52f5a3f54e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "3d4e7ebe-055f-457b-8967-b3d82a5a93b8",
                  "parentUUID": "8d02391f-7a67-4879-9385-c52f5a3f54e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67217dee-d1c9-4417-8ef5-76686ac9d056",
                "3d4e7ebe-055f-457b-8967-b3d82a5a93b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2d3b86c-4369-4f58-bea6-c9557396bdd0",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",services:[{protocol:NodePyATVProtocol.mrp,port:49152},{protocol:NodePyATVProtocol.airplay,port:7e3}]});assert.deepStrictEqual(device.services,[{protocol:\"mrp\",port:49152},{protocol:\"airplay\",port:7e3}])",
                  "err": {},
                  "uuid": "70c80e41-f756-4f38-9c6a-737a6b49bb29",
                  "parentUUID": "a2d3b86c-4369-4f58-bea6-c9557396bdd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "00f3856e-fc05-403a-a900-9b8a65396f55",
                  "parentUUID": "a2d3b86c-4369-4f58-bea6-c9557396bdd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70c80e41-f756-4f38-9c6a-737a6b49bb29",
                "00f3856e-fc05-403a-a900-9b8a65396f55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a38315e-49bd-450f-9af3-313f43658799",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:true});assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "10696f70-74f8-4a4c-981b-ef95e7fd84a2",
                  "parentUUID": "3a38315e-49bd-450f-9af3-313f43658799",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:fn});assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "8763cc67-1ddb-4db0-9e11-9b8895b53741",
                  "parentUUID": "3a38315e-49bd-450f-9af3-313f43658799",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "8b75da23-eccc-4028-bde4-57f0b8a94ae3",
                  "parentUUID": "3a38315e-49bd-450f-9af3-313f43658799",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10696f70-74f8-4a4c-981b-ef95e7fd84a2",
                "8763cc67-1ddb-4db0-9e11-9b8895b53741",
                "8b75da23-eccc-4028-bde4-57f0b8a94ae3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e213edd-3068-4cab-b6b9-95faf6e4d842",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.debug,void 0);device.debug=true;assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "a3b1cbc5-afd9-45dc-8b49-b4accf6e183a",
                  "parentUUID": "9e213edd-3068-4cab-b6b9-95faf6e4d842",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:true});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "092e6c8b-8be3-4e05-82b4-c73544768e5f",
                  "parentUUID": "9e213edd-3068-4cab-b6b9-95faf6e4d842",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:true});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "155e3c57-f13c-4936-8116-3ac983c7d249",
                  "parentUUID": "9e213edd-3068-4cab-b6b9-95faf6e4d842",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});const fn=__name(()=>{},\"fn\");assert.strictEqual(device.debug,void 0);device.debug=fn;assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "157d4748-009a-4b41-95c3-aaa07ed0e288",
                  "parentUUID": "9e213edd-3068-4cab-b6b9-95faf6e4d842",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3b1cbc5-afd9-45dc-8b49-b4accf6e183a",
                "092e6c8b-8be3-4e05-82b4-c73544768e5f",
                "155e3c57-f13c-4936-8116-3ac983c7d249",
                "157d4748-009a-4b41-95c3-aaa07ed0e288"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03fdf94f-bf93-4504-b4ac-5e7412a1f9b5",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",protocol:NodePyATVProtocol.airplay});assert.deepEqual(device.toJSON(),{name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",protocol:NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "781e140c-2490-49b7-8083-cd62a06b1533",
                  "parentUUID": "03fdf94f-bf93-4504-b4ac-5e7412a1f9b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",protocol:NodePyATVProtocol.airplay};const deviceA=new NodePyATVDevice(config);const deviceB=new NodePyATVDevice(deviceA.toJSON());assert.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "1f06624b-3f68-47fb-9bf3-41816b889c6d",
                  "parentUUID": "03fdf94f-bf93-4504-b4ac-5e7412a1f9b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "781e140c-2490-49b7-8083-cd62a06b1533",
                "1f06624b-3f68-47fb-9bf3-41816b889c6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9979d0ef-ea31-4923-ad9c-7732717c9d6e",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "17958739-d531-42ef-a601-a85e4fe2b51c",
                  "parentUUID": "9979d0ef-ea31-4923-ad9c-7732717c9d6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17958739-d531-42ef-a601-a85e4fe2b51c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a4e71f93-87bd-442f-8a47-9c8595ea49a8",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6dd7b260-5add-446a-879f-4afbfd26998f",
                  "parentUUID": "a4e71f93-87bd-442f-8a47-9c8595ea49a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",datetime:\"2020-11-07T22:38:43.608030+01:00\",hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\"})})});const result=await device.getState();assert.deepStrictEqual(result,{dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",mediaType:NodePyATVMediaType.video,deviceState:NodePyATVDeviceState.playing,focusState:null,title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,totalTime:8097,volume:null,position:27,shuffle:NodePyATVShuffleState.off,repeat:NodePyATVRepeatState.off,app:\"Disney+\",appId:\"com.disney.disneyplus\",powerState:null,outputDevices:null})",
                  "err": {},
                  "uuid": "2f3ea369-a09a-49d4-b0e2-1c918c60b219",
                  "parentUUID": "a4e71f93-87bd-442f-8a47-9c8595ea49a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"failure\",datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});assert.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "53bae29b-db42-463b-a09b-f2eac08fed9b",
                  "parentUUID": "a4e71f93-87bd-442f-8a47-9c8595ea49a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{executions++;cp.end({result:\"success\",datetime:new Date().toJSON(),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\"})})});const firstResult=await device.getState();const secondResult=await device.getState();assert.strictEqual(firstResult.dateTime,secondResult.dateTime);assert.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "2518ff17-0663-400f-900b-0d18a4c78080",
                  "parentUUID": "a4e71f93-87bd-442f-8a47-9c8595ea49a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",datetime:new Date(new Date().getTime()-1e3).toJSON(),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\"})})});const firstResult=await device.getState();assert.strictEqual(firstResult.position,27);const secondResult=await device.getState();assert.ok(secondResult.position);assert.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);assert.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "51d9ed35-4f04-4dc5-9146-3cc8086f01d1",
                  "parentUUID": "a4e71f93-87bd-442f-8a47-9c8595ea49a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2f3ea369-a09a-49d4-b0e2-1c918c60b219",
                "53bae29b-db42-463b-a09b-f2eac08fed9b",
                "2518ff17-0663-400f-900b-0d18a4c78080",
                "51d9ed35-4f04-4dc5-9146-3cc8086f01d1"
              ],
              "failures": [],
              "pending": [
                "6dd7b260-5add-446a-879f-4afbfd26998f"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "428a5337-9396-455c-a14e-d38510d5dd1a",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{executions++;cp.end({result:\"success\",datetime:\"2020-11-07T22:38:43.608030+01:00\",title:\"Solo: A Star Wars Story\"})})});assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");assert.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "5dc23284-d277-475d-8bc0-19fb2b7e5601",
                  "parentUUID": "428a5337-9396-455c-a14e-d38510d5dd1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5dc23284-d277-475d-8bc0-19fb2b7e5601"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37587c85-0e7f-4020-92a8-71300e6e5e5f",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",datetime:new Date().toJSON()})})});const result=await device.getDateTime();assert.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "211b9905-8aff-4a25-826f-524e59a52536",
                  "parentUUID": "37587c85-0e7f-4020-92a8-71300e6e5e5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "211b9905-8aff-4a25-826f-524e59a52536"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16f04c23-a21a-42f7-a117-33746e8e77e0",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",hash:\"12345\"})})});const result=await device.getHash();assert.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "c91e80dd-6833-4e38-b099-6671645e4ffc",
                  "parentUUID": "16f04c23-a21a-42f7-a117-33746e8e77e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c91e80dd-6833-4e38-b099-6671645e4ffc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "66e0f971-037d-4e80-83a3-bcefc1e38ac1",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",media_type:\"video\"})})});const result=await device.getMediaType();assert.deepStrictEqual(result,NodePyATVMediaType.video);assert.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "2a1b9a78-54b3-44e1-a5c4-c7a137b92eb5",
                  "parentUUID": "66e0f971-037d-4e80-83a3-bcefc1e38ac1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a1b9a78-54b3-44e1-a5c4-c7a137b92eb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a62eb10d-3da0-4d6d-b530-fbd6be7a5713",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",device_state:\"seeking\"})})});const result=await device.getDeviceState();assert.deepStrictEqual(result,NodePyATVDeviceState.seeking);assert.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "e511c985-10ed-4489-8543-5031e3014d75",
                  "parentUUID": "a62eb10d-3da0-4d6d-b530-fbd6be7a5713",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e511c985-10ed-4489-8543-5031e3014d75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a328a248-7735-439e-b2e7-5dde306e6514",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();assert.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "59d395ba-3a49-4ef2-a934-76f6114855b7",
                  "parentUUID": "a328a248-7735-439e-b2e7-5dde306e6514",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59d395ba-3a49-4ef2-a934-76f6114855b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1917768c-9fad-420c-a252-966896ce57ed",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",artist:\"My Artist\"})})});const result=await device.getArtist();assert.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "ab05a318-8e5e-4d12-bec5-5a8ce7d05f80",
                  "parentUUID": "1917768c-9fad-420c-a252-966896ce57ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab05a318-8e5e-4d12-bec5-5a8ce7d05f80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7d44b4aa-9273-451e-b5c2-a149cecc5528",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",album:\"My ALbum\"})})});const result=await device.getAlbum();assert.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "4663358e-7329-481e-96c5-501b947944c9",
                  "parentUUID": "7d44b4aa-9273-451e-b5c2-a149cecc5528",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4663358e-7329-481e-96c5-501b947944c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e5d3d96a-b28f-4330-8fe9-9590a7610743",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",genre:\"My Genre\"})})});const result=await device.getGenre();assert.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "7117385e-9268-408a-9824-2f859920b21a",
                  "parentUUID": "e5d3d96a-b28f-4330-8fe9-9590a7610743",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7117385e-9268-408a-9824-2f859920b21a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef24d981-51cc-4ef7-9551-987ce7a82ef2",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();assert.strictEqual(result,45)",
                  "err": {},
                  "uuid": "977ff3bb-5609-42b4-b3cf-d1ab1a2ed568",
                  "parentUUID": "ef24d981-51cc-4ef7-9551-987ce7a82ef2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "977ff3bb-5609-42b4-b3cf-d1ab1a2ed568"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7345f90-9ed4-4fc7-bd13-6c1b2779b8c0",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",position:30})})});const result=await device.getPosition();assert.strictEqual(result,30)",
                  "err": {},
                  "uuid": "b8dc7582-ae25-43c5-adcd-bb700e851724",
                  "parentUUID": "e7345f90-9ed4-4fc7-bd13-6c1b2779b8c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8dc7582-ae25-43c5-adcd-bb700e851724"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b94cd639-7ff4-441a-a35a-bc10fdc0512b",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();assert.deepStrictEqual(result,NodePyATVShuffleState.songs);assert.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "b28fcd62-6dbe-41aa-9afd-0d7ad647c403",
                  "parentUUID": "b94cd639-7ff4-441a-a35a-bc10fdc0512b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b28fcd62-6dbe-41aa-9afd-0d7ad647c403"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eb5171de-6f9e-465b-9a02-97f337f43601",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",repeat:\"all\"})})});const result=await device.getRepeat();assert.deepStrictEqual(result,NodePyATVRepeatState.all);assert.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "4e3255ef-c2fa-426c-be45-2b865b45d068",
                  "parentUUID": "eb5171de-6f9e-465b-9a02-97f337f43601",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e3255ef-c2fa-426c-be45-2b865b45d068"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13655c58-2a42-4264-b733-3597a439d0b2",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",app:\"My App\"})})});const result=await device.getApp();assert.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "7e4bea15-7179-4784-a4e7-e6fa7ff955b7",
                  "parentUUID": "13655c58-2a42-4264-b733-3597a439d0b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e4bea15-7179-4784-a4e7-e6fa7ff955b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ae51940-d1f9-422d-9697-d67fe5f17e98",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",app_id:\"app.example.com\"})})});const result=await device.getAppId();assert.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "e6883390-b141-44a0-9928-fd00ad717ce3",
                  "parentUUID": "5ae51940-d1f9-422d-9697-d67fe5f17e98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6883390-b141-44a0-9928-fd00ad717ce3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37e424ee-3b4f-4246-b986-6abc50e69d1c",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();assert.strictEqual(result.length,25);assert.strictEqual(result[0].id,\"com.apple.Fitness\");assert.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "30fce15a-a474-40cd-b132-a54a40ed74b5",
                  "parentUUID": "37e424ee-3b4f-4246-b986-6abc50e69d1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30fce15a-a474-40cd-b132-a54a40ed74b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "07295853-85ab-418a-8ae3-08c7e5091a60",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "87a9ff54-ee81-4d9f-9fe1-92d52ef52164",
                  "parentUUID": "07295853-85ab-418a-8ae3-08c7e5091a60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});await assert.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "77d5eee6-2d2b-4b2a-93da-14c1921c3336",
                  "parentUUID": "07295853-85ab-418a-8ae3-08c7e5091a60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"failure\"}')})});await assert.rejects(async()=>{await device.pressKey(NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "7c32a4cb-0d4b-45a1-97a9-7c4ccb934e94",
                  "parentUUID": "07295853-85ab-418a-8ae3-08c7e5091a60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87a9ff54-ee81-4d9f-9fe1-92d52ef52164",
                "77d5eee6-2d2b-4b2a-93da-14c1921c3336",
                "7c32a4cb-0d4b-45a1-97a9-7c4ccb934e94"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "809957a3-46c0-4cf0-b2ff-fa5b0618d689",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "ade79885-6782-4eea-b18f-cb3245cdbf97",
                  "parentUUID": "809957a3-46c0-4cf0-b2ff-fa5b0618d689",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ade79885-6782-4eea-b18f-cb3245cdbf97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84c42952-9705-46ab-907d-7bd4e220b4ea",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "2a288ca0-9704-4871-a490-b09bed716cb9",
                  "parentUUID": "84c42952-9705-46ab-907d-7bd4e220b4ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a288ca0-9704-4871-a490-b09bed716cb9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7070b004-2d51-4046-b913-7dd818fbb074",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f430e377-b8c2-4ca5-a8a3-4dd043341210",
                  "parentUUID": "7070b004-2d51-4046-b913-7dd818fbb074",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f430e377-b8c2-4ca5-a8a3-4dd043341210"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e5656af7-97d4-4a2c-8725-524cd856cf15",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "d1b165b2-77f6-4b2f-a0a6-aa5014aec2cc",
                  "parentUUID": "e5656af7-97d4-4a2c-8725-524cd856cf15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1b165b2-77f6-4b2f-a0a6-aa5014aec2cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ba38889-5ee0-46f4-924a-6f7be4b20ae3",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "896f4521-fca7-429f-a026-9d60efb04a9f",
                  "parentUUID": "9ba38889-5ee0-46f4-924a-6f7be4b20ae3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "896f4521-fca7-429f-a026-9d60efb04a9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c4c7dec-c69b-4d96-8193-f14ed62c7e4e",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b4aaabc2-9dcc-4065-a22b-2edc754058d8",
                  "parentUUID": "4c4c7dec-c69b-4d96-8193-f14ed62c7e4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4aaabc2-9dcc-4065-a22b-2edc754058d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d76bc157-1256-475a-b383-2d8400a1c7b4",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "d96bcaf6-d4df-4d14-8810-b61a737fd5a1",
                  "parentUUID": "d76bc157-1256-475a-b383-2d8400a1c7b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d96bcaf6-d4df-4d14-8810-b61a737fd5a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0807fc4e-d8fc-4072-b19b-b99983d745e4",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "6c77faea-89a4-4eeb-a8d3-8a5b190e5cda",
                  "parentUUID": "0807fc4e-d8fc-4072-b19b-b99983d745e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c77faea-89a4-4eeb-a8d3-8a5b190e5cda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2142bd8a-5e58-4833-b391-3aa1650bbe81",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "ae51b4a6-beff-4dfa-965e-c43eac73ef8f",
                  "parentUUID": "2142bd8a-5e58-4833-b391-3aa1650bbe81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae51b4a6-beff-4dfa-965e-c43eac73ef8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95b9b0d4-6371-4002-8355-66dcbc35bd8c",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9ae728f0-fd21-4856-8d08-799b909d1259",
                  "parentUUID": "95b9b0d4-6371-4002-8355-66dcbc35bd8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ae728f0-fd21-4856-8d08-799b909d1259"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb900125-32db-4877-8226-e88d78ea0bbf",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "bf4079f2-8305-4651-9598-fed5fa19599f",
                  "parentUUID": "bb900125-32db-4877-8226-e88d78ea0bbf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf4079f2-8305-4651-9598-fed5fa19599f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5a170c82-4831-41f6-a05a-d45d23fd1332",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1caa0066-1b3e-42c7-acf6-43074b8383e3",
                  "parentUUID": "5a170c82-4831-41f6-a05a-d45d23fd1332",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1caa0066-1b3e-42c7-acf6-43074b8383e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1752a825-a4c8-4d6d-bc35-47ad7cf01a6d",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3891acf8-16f3-4561-abe7-d879bb195f3b",
                  "parentUUID": "1752a825-a4c8-4d6d-bc35-47ad7cf01a6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3891acf8-16f3-4561-abe7-d879bb195f3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6323d834-ce9f-483d-9253-da8d3bf4f577",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "6a30185e-0404-495f-80ff-e1a1627cef3f",
                  "parentUUID": "6323d834-ce9f-483d-9253-da8d3bf4f577",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a30185e-0404-495f-80ff-e1a1627cef3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e93a98e2-78dc-400a-ab0e-56d74b9a7f43",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1efcaaf2-85a2-42a0-adb3-f6cc880ba5be",
                  "parentUUID": "e93a98e2-78dc-400a-ab0e-56d74b9a7f43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1efcaaf2-85a2-42a0-adb3-f6cc880ba5be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9906b2b-99fa-4f07-a18f-3733dc7eb726",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3a43a17e-c596-47eb-8665-017d6cd908c4",
                  "parentUUID": "a9906b2b-99fa-4f07-a18f-3733dc7eb726",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a43a17e-c596-47eb-8665-017d6cd908c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95696b6d-fc6b-4e00-b47d-beef2e6ed4d5",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3f63e466-5501-4a7d-b14c-34c40b75c94e",
                  "parentUUID": "95696b6d-fc6b-4e00-b47d-beef2e6ed4d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f63e466-5501-4a7d-b14c-34c40b75c94e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "55ba5206-4b19-4a6f-a541-8cd273b3d73c",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "ebe2c831-705e-4821-927b-72f0a8739430",
                  "parentUUID": "55ba5206-4b19-4a6f-a541-8cd273b3d73c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebe2c831-705e-4821-927b-72f0a8739430"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6dba47a9-9012-40c7-aa6f-94ec3a4ef6f0",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "03d90341-3c79-4c01-a478-30964b0dfc19",
                  "parentUUID": "6dba47a9-9012-40c7-aa6f-94ec3a4ef6f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03d90341-3c79-4c01-a478-30964b0dfc19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf2648d0-3477-40eb-914b-cdf7722e2334",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "734ec985-2825-4d70-94d9-e0a0bf6cb405",
                  "parentUUID": "cf2648d0-3477-40eb-914b-cdf7722e2334",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "734ec985-2825-4d70-94d9-e0a0bf6cb405"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe5ce63e-c72f-4e88-aeda-e441c1697318",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "6efa0692-6cc6-4c2d-b1f4-6a8bec00baa2",
                  "parentUUID": "fe5ce63e-c72f-4e88-aeda-e441c1697318",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6efa0692-6cc6-4c2d-b1f4-6a8bec00baa2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ed420c4-fa96-48c5-8ab6-2d902555eb4a",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "cebfa3c5-764d-444a-b312-b2356c41b531",
                  "parentUUID": "8ed420c4-fa96-48c5-8ab6-2d902555eb4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cebfa3c5-764d-444a-b312-b2356c41b531"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f95e23bd-0b03-408b-9343-8f296debecd8",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "77f0d047-5c77-4c9b-bc2d-e62e3abe9d94",
                  "parentUUID": "f95e23bd-0b03-408b-9343-8f296debecd8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77f0d047-5c77-4c9b-bc2d-e62e3abe9d94"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f0ac495-87e5-4821-8cf4-4e21fae19f0a",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "d728e14b-2adc-4394-973d-851addb7369b",
                  "parentUUID": "4f0ac495-87e5-4821-8cf4-4e21fae19f0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d728e14b-2adc-4394-973d-851addb7369b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "12649fcd-79a3-45ff-a8a9-10591825403e",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "77976382-9e8c-4142-8076-1e209699b5c8",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 461,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await NodePyATVInstance.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}assert.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");assert.ok(result.pyatv.length>=5,\"result.pyatv has content\");assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "69085a47-98b8-4686-a0ff-dd1f1798a269",
                  "parentUUID": "77976382-9e8c-4142-8076-1e209699b5c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});assert.ok(result.pyatv);assert.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "1d0f6b94-2511-4417-b70c-5d5340c6205c",
                  "parentUUID": "77976382-9e8c-4142-8076-1e209699b5c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())});assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "8ee14ff0-f673-402e-9fea-9392a1641d37",
                  "parentUUID": "77976382-9e8c-4142-8076-1e209699b5c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({atvremotePath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "feb46fac-6e81-41df-ad43-eb81d3d9b529",
                  "parentUUID": "77976382-9e8c-4142-8076-1e209699b5c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "b00518e7-e020-44fa-b310-57ffe395998c",
                  "parentUUID": "77976382-9e8c-4142-8076-1e209699b5c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "ac3d938c-af50-4c87-9c37-1c9fe94cef32",
                  "parentUUID": "77976382-9e8c-4142-8076-1e209699b5c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>cp.stderr(\"Hello World!\").code(123).end())});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "59e9cd74-6c0f-40ce-8388-235b24bbeb69",
                  "parentUUID": "77976382-9e8c-4142-8076-1e209699b5c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "4bdbee6b-bb57-45ed-9c2f-c788de396ec7",
                  "parentUUID": "77976382-9e8c-4142-8076-1e209699b5c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "e35a02e4-9f39-47be-a39c-df9c4193daa9",
                  "parentUUID": "77976382-9e8c-4142-8076-1e209699b5c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69085a47-98b8-4686-a0ff-dd1f1798a269",
                "1d0f6b94-2511-4417-b70c-5d5340c6205c",
                "8ee14ff0-f673-402e-9fea-9392a1641d37",
                "feb46fac-6e81-41df-ad43-eb81d3d9b529",
                "b00518e7-e020-44fa-b310-57ffe395998c",
                "ac3d938c-af50-4c87-9c37-1c9fe94cef32",
                "59e9cd74-6c0f-40ce-8388-235b24bbeb69",
                "4bdbee6b-bb57-45ed-9c2f-c788de396ec7",
                "e35a02e4-9f39-47be-a39c-df9c4193daa9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 475,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "46a69a22-5051-443a-9f2b-cca66912b7f6",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5796,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await NodePyATVInstance.check()",
                  "err": {},
                  "uuid": "98386950-e2d4-4a44-adbf-cf71a6b156c4",
                  "parentUUID": "46a69a22-5051-443a-9f2b-cca66912b7f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "7269974d-3276-4078-9993-dce21ec405c0",
                  "parentUUID": "46a69a22-5051-443a-9f2b-cca66912b7f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "44508268-1a6b-4a5b-b361-37ec7a65a9dd",
                  "parentUUID": "46a69a22-5051-443a-9f2b-cca66912b7f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "68c12aed-de15-49e5-918c-9078bd4a4d1c",
                  "parentUUID": "46a69a22-5051-443a-9f2b-cca66912b7f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98386950-e2d4-4a44-adbf-cf71a6b156c4",
                "7269974d-3276-4078-9993-dce21ec405c0",
                "44508268-1a6b-4a5b-b361-37ec7a65a9dd",
                "68c12aed-de15-49e5-918c-9078bd4a4d1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5803,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ec30d180-642e-4d23-a833-f36fd7467926",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5399,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await NodePyATVInstance.find();assert.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "a029bfb0-7fc8-45f3-bfe1-1c360d675e83",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({atvscriptPath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({\"result\":\"success\",\"datetime\":\"2020-11-06T20:47:30.840022+01:00\",\"devices\":[]}).end()})})",
                  "err": {},
                  "uuid": "5853ab0b-c33d-416d-aadc-708fb66fabd8",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "f519ff5f-14e1-4aa5-8fb3-1e5fc646b0b3",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "7624eddd-a1b3-4d76-9bcd-c2cc0204401e",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"failure\",datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "424426cc-1445-4bd9-8639-2242deb4a31a",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(JSON.stringify({\"result\":\"success\",\"datetime\":\"2020-11-06T20:47:30.840022+01:00\",\"devices\":[]}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "5b66efab-1e0d-45bf-bb8d-7c55385edfb0",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "1336e139-29af-4c54-bb25-509acc046f5c",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "2af0f237-967d-45bc-984f-5c9c6e5456b0",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\",datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{name:\"Vardagsrum\",address:\"10.0.10.81\",identifier:\"xxx\"}]}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,void 0);assert.strictEqual(devices[0].modelName,void 0);assert.strictEqual(devices[0].os,void 0);assert.strictEqual(devices[0].version,void 0);assert.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "30fe6bfe-7f4d-4878-adde-836cc9680065",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\",datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{name:\"Vardagsrum\",address:\"10.0.10.81\",identifier:\"xxx\",device_info:{\"model\":\"Gen4K\",\"model_str\":\"Apple TV 4K\",\"operating_system\":\"TvOS\",\"version\":\"15.5.1\"},services:[{protocol:\"mrp\",port:49152},{protocol:\"airplay\",port:7e3}]}]}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,\"Gen4K\");assert.strictEqual(devices[0].modelName,\"Apple TV 4K\");assert.strictEqual(devices[0].os,\"TvOS\");assert.strictEqual(devices[0].version,\"15.5.1\");assert.deepStrictEqual(devices[0].services,[{protocol:NodePyATVProtocol.mrp,port:49152},{protocol:NodePyATVProtocol.airplay,port:7e3}])",
                  "err": {},
                  "uuid": "c6026b7f-aa12-47ed-8507-dff9c091adba",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});assert.strictEqual(devices.length,4);assert.strictEqual(devices[0].name,\"Living Room\");assert.strictEqual(devices[0].host,\"10.0.0.30\");assert.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(devices[1].name,\"Kitchen\");assert.strictEqual(devices[1].host,\"10.0.0.79\");assert.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(devices[2].name,\"Bedroom\");assert.strictEqual(devices[2].host,\"10.0.0.20\");assert.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(devices[3].name,\"Basement\");assert.strictEqual(devices[3].host,\"10.0.0.156\");assert.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "c0596b0b-8b76-408a-b79a-93a4e810741b",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);assert.strictEqual(response.devices.length,4);assert.strictEqual(response.errors.length,2);assert.strictEqual(response.devices[0].name,\"Living Room\");assert.strictEqual(response.devices[0].host,\"10.0.0.30\");assert.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(response.devices[1].name,\"Kitchen\");assert.strictEqual(response.devices[1].host,\"10.0.0.79\");assert.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(response.devices[2].name,\"Bedroom\");assert.strictEqual(response.devices[2].host,\"10.0.0.20\");assert.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(response.devices[3].name,\"Basement\");assert.strictEqual(response.devices[3].host,\"10.0.0.156\");assert.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");assert.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");assert.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "8f4e5a08-61c7-4994-a923-d7bc7e2bffa3",
                  "parentUUID": "ec30d180-642e-4d23-a833-f36fd7467926",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a029bfb0-7fc8-45f3-bfe1-1c360d675e83",
                "5853ab0b-c33d-416d-aadc-708fb66fabd8",
                "f519ff5f-14e1-4aa5-8fb3-1e5fc646b0b3",
                "7624eddd-a1b3-4d76-9bcd-c2cc0204401e",
                "424426cc-1445-4bd9-8639-2242deb4a31a",
                "5b66efab-1e0d-45bf-bb8d-7c55385edfb0",
                "1336e139-29af-4c54-bb25-509acc046f5c",
                "2af0f237-967d-45bc-984f-5c9c6e5456b0",
                "30fe6bfe-7f4d-4878-adde-836cc9680065",
                "c6026b7f-aa12-47ed-8507-dff9c091adba",
                "c0596b0b-8b76-408a-b79a-93a4e810741b",
                "8f4e5a08-61c7-4994-a923-d7bc7e2bffa3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5416,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e0a3e31-bf1a-4f6e-adf2-e6d47915cd7d",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=NodePyATVInstance.device({host:\"192.168.178.6\",name:\"My Testdevice\"});assert.strictEqual(device.host,\"192.168.178.6\");assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "fb421835-d252-460a-823b-c38d2e84bae8",
                  "parentUUID": "7e0a3e31-bf1a-4f6e-adf2-e6d47915cd7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb421835-d252-460a-823b-c38d2e84bae8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7896d5f8-8bf8-4eed-8b9a-a6d1b4a98dc2",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await i.version({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "ac6e5d38-40d5-415b-b4e3-7d2d5014e17f",
                  "parentUUID": "7896d5f8-8bf8-4eed-8b9a-a6d1b4a98dc2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac6e5d38-40d5-415b-b4e3-7d2d5014e17f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a0b4f0a-5765-48cf-805d-35d07e39deea",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await assert.rejects(async()=>{await i.check({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "64eb9cb5-cef3-4ee9-8d82-269fabcf166a",
                  "parentUUID": "1a0b4f0a-5765-48cf-805d-35d07e39deea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64eb9cb5-cef3-4ee9-8d82-269fabcf166a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba2415eb-700d-4275-9b86-6045f798b85b",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvscriptPath:\"test\"});await i.find({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.stdout({\"result\":\"success\",\"datetime\":\"2020-11-06T20:47:30.840022+01:00\",\"devices\":[]}).end()})})",
                  "err": {},
                  "uuid": "c0f5ff68-fc06-4d48-90cc-ac37d56657a5",
                  "parentUUID": "ba2415eb-700d-4275-9b86-6045f798b85b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0f5ff68-fc06-4d48-90cc-ac37d56657a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65295721-2819-479e-81ff-cedac435a6b8",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({debug:true});const d=i.device({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "32941752-93e6-409f-a6f9-36f5ea6d5240",
                  "parentUUID": "65295721-2819-479e-81ff-cedac435a6b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32941752-93e6-409f-a6f9-36f5ea6d5240"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol)",
                  "err": {},
                  "uuid": "cb7ad10c-8071-4f16-b968-0fd755747f5b",
                  "parentUUID": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType)",
                  "err": {},
                  "uuid": "40d08e6a-0acf-45d2-86a3-0b3ee9f4dd05",
                  "parentUUID": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "0a37418c-6775-4858-8d74-a6407b060df1",
                  "parentUUID": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "0d8bc903-348f-4ba0-8cd3-982dd1d8cf65",
                  "parentUUID": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "2fc439d4-bb1b-48e6-81c7-892df180435e",
                  "parentUUID": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "1b68d2c7-b1c8-4c12-a890-506987fe67d3",
                  "parentUUID": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys)",
                  "err": {},
                  "uuid": "9cf5b898-5d49-409e-838e-9a906eb27a93",
                  "parentUUID": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState)",
                  "err": {},
                  "uuid": "3416a21c-dd1e-41bd-b17d-812abdc3b6a4",
                  "parentUUID": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState)",
                  "err": {},
                  "uuid": "aafaf864-0f72-43cc-a2e0-cd7a458cb4da",
                  "parentUUID": "02cfe854-2dc2-4c25-a512-7cc3c0c8509b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb7ad10c-8071-4f16-b968-0fd755747f5b",
                "40d08e6a-0acf-45d2-86a3-0b3ee9f4dd05",
                "0a37418c-6775-4858-8d74-a6407b060df1",
                "0d8bc903-348f-4ba0-8cd3-982dd1d8cf65",
                "2fc439d4-bb1b-48e6-81c7-892df180435e",
                "1b68d2c7-b1c8-4c12-a890-506987fe67d3",
                "9cf5b898-5d49-409e-838e-9a906eb27a93",
                "3416a21c-dd1e-41bd-b17d-812abdc3b6a4",
                "aafaf864-0f72-43cc-a2e0-cd7a458cb4da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dd9282af-1427-4403-a00d-0688ef8f556a",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f1ba92b7-0ede-410c-9c68-23700955f6dc",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=addRequestId();assert.strictEqual(typeof id,\"string\");removeRequestId(id)",
                  "err": {},
                  "uuid": "debbd13d-a207-4ab6-a2d2-3476d93e8794",
                  "parentUUID": "f1ba92b7-0ede-410c-9c68-23700955f6dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId(\"FOO\")",
                  "err": {},
                  "uuid": "db22954a-a224-47c3-a2eb-f73715f33ca1",
                  "parentUUID": "f1ba92b7-0ede-410c-9c68-23700955f6dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "debbd13d-a207-4ab6-a2d2-3476d93e8794",
                "db22954a-a224-47c3-a2eb-f73715f33ca1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96d91932-28d0-4195-99f7-cfe45e70d2a7",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "a08e70a0-c1c7-4fe3-9bec-d29ce32f202c",
                  "parentUUID": "96d91932-28d0-4195-99f7-cfe45e70d2a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "385a976f-e382-4959-9af2-2962a4d9b799",
                  "parentUUID": "96d91932-28d0-4195-99f7-cfe45e70d2a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:__name(function(msg){assert.strictEqual(this,null);assert.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "42769c77-1392-4599-80bc-5ade7c38f54d",
                  "parentUUID": "96d91932-28d0-4195-99f7-cfe45e70d2a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "b0f05748-3675-4217-a40d-464315185a3c",
                  "parentUUID": "96d91932-28d0-4195-99f7-cfe45e70d2a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{noColors:true,debug:__name(function(msg){assert.strictEqual(this,null);assert.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\")})",
                  "err": {},
                  "uuid": "3e13d4c0-5c3a-4bee-932f-aaa9658e89f2",
                  "parentUUID": "96d91932-28d0-4195-99f7-cfe45e70d2a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a08e70a0-c1c7-4fe3-9bec-d29ce32f202c",
                "385a976f-e382-4959-9af2-2962a4d9b799",
                "42769c77-1392-4599-80bc-5ade7c38f54d",
                "b0f05748-3675-4217-a40d-464315185a3c",
                "3e13d4c0-5c3a-4bee-932f-aaa9658e89f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d39bb467-6475-44cb-8f93-277134e5597e",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "9a28c7de-8c36-471e-8432-08e639dbecb0",
                  "parentUUID": "d39bb467-6475-44cb-8f93-277134e5597e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "0af46a05-3249-4db6-bfc2-9c1abe4a2ce2",
                  "parentUUID": "d39bb467-6475-44cb-8f93-277134e5597e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});assert.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "1c036cec-4220-4f5e-9fff-4f2dac30fcce",
                  "parentUUID": "d39bb467-6475-44cb-8f93-277134e5597e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});assert.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "bac3aa17-e3dc-4e29-88a3-ba913555d8d4",
                  "parentUUID": "d39bb467-6475-44cb-8f93-277134e5597e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a28c7de-8c36-471e-8432-08e639dbecb0",
                "0af46a05-3249-4db6-bfc2-9c1abe4a2ce2",
                "1c036cec-4220-4f5e-9fff-4f2dac30fcce",
                "bac3aa17-e3dc-4e29-88a3-ba913555d8d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce657128-c3d3-40c3-bc7f-e289dd0f69b4",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters();assert.deepEqual(result,[])",
                  "err": {},
                  "uuid": "b70bf68f-00e6-4aa9-86c4-2d712bd42172",
                  "parentUUID": "ce657128-c3d3-40c3-bc7f-e289dd0f69b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({host:\"192.168.178.2\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "6b1640aa-d288-4971-a8d7-9aecbd474eef",
                  "parentUUID": "ce657128-c3d3-40c3-bc7f-e289dd0f69b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",protocol:NodePyATVProtocol.mrp,dmapCredentials:\"****\",mrpCredentials:\"****\",airplayCredentials:\"****\",companionCredentials:\"1234\",raopCredentials:\"::foo:\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "fa341907-4bf9-4042-8779-ca0dad0bab86",
                  "parentUUID": "ce657128-c3d3-40c3-bc7f-e289dd0f69b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b70bf68f-00e6-4aa9-86c4-2d712bd42172",
                "6b1640aa-d288-4971-a8d7-9aecbd474eef",
                "fa341907-4bf9-4042-8779-ca0dad0bab86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "efde0c55-30b2-46a0-bba2-bace7b0b5c58",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "c0d06cab-64fe-484e-8c0e-829102b8a6c6",
                  "parentUUID": "efde0c55-30b2-46a0-bba2-bace7b0b5c58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=parseState(null,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "dfd1c99d-1805-4959-9cd1-f0cc92c34d88",
                  "parentUUID": "efde0c55-30b2-46a0-bba2-bace7b0b5c58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={result:\"success\",datetime:\"2020-11-07T22:38:43.608030+01:00\",hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\",power_state:null,focus_state:null,volume:null,output_devices:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",mediaType:NodePyATVMediaType.video,deviceState:NodePyATVDeviceState.playing,title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,totalTime:8097,position:27,shuffle:NodePyATVShuffleState.off,repeat:NodePyATVRepeatState.off,app:\"Disney+\",appId:\"com.disney.disneyplus\",powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "39d25c41-f2da-45e4-94c2-9c48c64e5b25",
                  "parentUUID": "efde0c55-30b2-46a0-bba2-bace7b0b5c58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={result:\"failure\",datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};assert.throws(()=>{parseState(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "17742450-09d2-42b5-b61e-e83bb10588f5",
                  "parentUUID": "efde0c55-30b2-46a0-bba2-bace7b0b5c58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "4d55f01a-5a6c-49a8-87c5-27b2857fefcf",
                  "parentUUID": "efde0c55-30b2-46a0-bba2-bace7b0b5c58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={result:\"success\",datetime:true,hash:1337,media_type:false,device_state:43,title:void 0,artist:90,album:Infinity,genre:Math.PI,total_time:\"23min\",position:\"0:30.123\",shuffle:false,repeat:true,app:0,app_id:891645381647289,power_state:null,focus_state:null,volume:null,output_devices:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "de58187b-6c99-4321-ae7f-2d97ddc787d6",
                  "parentUUID": "efde0c55-30b2-46a0-bba2-bace7b0b5c58",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={media_type:\"3d-experience\",device_state:\"initiating\",shuffle:\"everything\",repeat:\"nothing\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "d31e01c8-8c9d-4b18-ac60-f6c182ffcdb6",
                  "parentUUID": "efde0c55-30b2-46a0-bba2-bace7b0b5c58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0d06cab-64fe-484e-8c0e-829102b8a6c6",
                "dfd1c99d-1805-4959-9cd1-f0cc92c34d88",
                "39d25c41-f2da-45e4-94c2-9c48c64e5b25",
                "17742450-09d2-42b5-b61e-e83bb10588f5",
                "4d55f01a-5a6c-49a8-87c5-27b2857fefcf",
                "de58187b-6c99-4321-ae7f-2d97ddc787d6",
                "d31e01c8-8c9d-4b18-ac60-f6c182ffcdb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}