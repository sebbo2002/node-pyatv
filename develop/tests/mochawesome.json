{
  "stats": {
    "suites": 102,
    "tests": 174,
    "passes": 172,
    "pending": 2,
    "failures": 0,
    "start": "2025-05-13T21:34:17.769Z",
    "end": "2025-05-13T21:34:29.792Z",
    "duration": 12023,
    "testsRegistered": 174,
    "passPercent": 100,
    "pendingPercent": 1.1494252873563218,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d28d57fa-ce92-451b-bd2a-8951a8092ba9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f1590995-df83-465c-b369-9ba271742938",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e64be821-17a1-4ec6-9642-532ee19e7731",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "caaedaf4-4bd7-4725-bb3e-c9ef33373e50",
                  "parentUUID": "e64be821-17a1-4ec6-9642-532ee19e7731",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "caaedaf4-4bd7-4725-bb3e-c9ef33373e50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "038b2b9e-5d53-400f-af61-030ccb8493cb",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "580d065c-9566-4ad8-8789-314d1a70b294",
                  "parentUUID": "038b2b9e-5d53-400f-af61-030ccb8493cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "580d065c-9566-4ad8-8789-314d1a70b294"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f23bebd1-f43a-4991-b839-ed5700889323",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "aeeaa63c-246a-4712-84e3-500b1a71af1e",
                  "parentUUID": "f23bebd1-f43a-4991-b839-ed5700889323",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aeeaa63c-246a-4712-84e3-500b1a71af1e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa2efcd2-424f-4e4e-8b09-e8361b68976c",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "0094d11d-1825-4da4-8222-9498f443e7ba",
                  "parentUUID": "aa2efcd2-424f-4e4e-8b09-e8361b68976c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0094d11d-1825-4da4-8222-9498f443e7ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4ef2e2a-c767-4abb-8daf-ba1ae0322b59",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new NodePyATVDeviceEvent({device,key:\"genre\",new:\"Rock\",old:\"Jazz\"});assert.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "f6eabc13-0fc2-47ec-a36d-d6c8650f3e80",
                  "parentUUID": "c4ef2e2a-c767-4abb-8daf-ba1ae0322b59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6eabc13-0fc2-47ec-a36d-d6c8650f3e80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "274855a2-c5e0-4fd2-b23b-07393df264a6",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "94fccdf9-c989-49ec-9566-476362fe08ff",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "1647cbe0-75af-4857-a2d3-15506e3b2de6",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "ecaed42e-d81d-4184-a686-75d4fda96dfa",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);assert.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "beb1dbd3-8c0d-4d65-82a0-62dba6542790",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{assert.ok(error instanceof Error);assert.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "6541a0de-66ff-480f-bb0f-b74df6d723a2",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);assert.strictEqual(spawnCounter,2);assert.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "4141052f-e36c-4df8-9614-3d88cacbc8a3",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{assert.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);assert.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "b1414d83-d9f2-4bd8-ab1f-8ebaa435291c",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "68994b7e-6b73-49fe-9712-f483175cd40a",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "08dfeb29-18a3-4afe-88dd-a604ff78deec",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),focus_state:\"unfocused\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"focusState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"unfocused\");assert.strictEqual(event.newValue,NodePyATVFocusState.unfocused);assert.strictEqual(event.value,\"unfocused\");assert.strictEqual(event.value,NodePyATVFocusState.unfocused);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "16c8dc98-03be-49f2-a6d2-499997957843",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),output_devices:[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}],result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"outputDevices\");assert.strictEqual(event.oldValue,null);assert.deepStrictEqual(event.newValue,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);assert.deepStrictEqual(event.value,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "91d40669-4d6c-4d8b-8d62-3e74a64ddc21",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),result:\"success\",volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"volume\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,20);assert.strictEqual(event.value,20);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "430eff6a-0ded-4057-a42e-f3c037f717e4",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),foo:\"bar\",result:\"success\"});cp.end()})});device.on(\"update\",event=>{assert.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "4f194dbc-8cc6-4c40-9b2d-8464275b3d14",
                  "parentUUID": "94fccdf9-c989-49ec-9566-476362fe08ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1647cbe0-75af-4857-a2d3-15506e3b2de6",
                "ecaed42e-d81d-4184-a686-75d4fda96dfa",
                "beb1dbd3-8c0d-4d65-82a0-62dba6542790",
                "6541a0de-66ff-480f-bb0f-b74df6d723a2",
                "4141052f-e36c-4df8-9614-3d88cacbc8a3",
                "b1414d83-d9f2-4bd8-ab1f-8ebaa435291c",
                "68994b7e-6b73-49fe-9712-f483175cd40a",
                "08dfeb29-18a3-4afe-88dd-a604ff78deec",
                "16c8dc98-03be-49f2-a6d2-499997957843",
                "91d40669-4d6c-4d8b-8d62-3e74a64ddc21",
                "430eff6a-0ded-4057-a42e-f3c037f717e4",
                "4f194dbc-8cc6-4c40-9b2d-8464275b3d14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 66,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b50b259d-9ebf-44a3-8046-c55dfe0b3131",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "f979985c-6e76-48bd-9117-2ed219d82473",
                  "parentUUID": "b50b259d-9ebf-44a3-8046-c55dfe0b3131",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "bf8f7287-b82d-4e44-a6d5-a99a441c62df",
                  "parentUUID": "b50b259d-9ebf-44a3-8046-c55dfe0b3131",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "c09909ee-e1a8-45ff-9d68-dfd92aba7552",
                  "parentUUID": "b50b259d-9ebf-44a3-8046-c55dfe0b3131",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4a941518-3d15-4bc3-9c2b-d5b9531a30f2",
                  "parentUUID": "b50b259d-9ebf-44a3-8046-c55dfe0b3131",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f979985c-6e76-48bd-9117-2ed219d82473",
                "bf8f7287-b82d-4e44-a6d5-a99a441c62df",
                "c09909ee-e1a8-45ff-9d68-dfd92aba7552"
              ],
              "failures": [],
              "pending": [
                "4a941518-3d15-4bc3-9c2b-d5b9531a30f2"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d788e968-fbdf-4bef-9794-4d2e3d4da2d3",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "71eb258b-739e-4507-bd86-ead2f627630f",
                  "parentUUID": "d788e968-fbdf-4bef-9794-4d2e3d4da2d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71eb258b-739e-4507-bd86-ead2f627630f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47528c5c-e53b-4742-8572-b5460da668a1",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const event=new NodePyATVDeviceEvent({device,key:\"dateTime\",new:\"bar\",old:\"foo\"});let executions=0;device.once(\"test\",e=>{executions++;assert.strictEqual(e,event);assert.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "c57da342-f864-4f7f-a145-c9189e1f9058",
                  "parentUUID": "47528c5c-e53b-4742-8572-b5460da668a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c57da342-f864-4f7f-a145-c9189e1f9058"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1877c4c-bbdf-4564-a067-12b555172fa2",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);assert.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "49b24553-1fb5-44a9-847e-2701fd17f16e",
                  "parentUUID": "c1877c4c-bbdf-4564-a067-12b555172fa2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49b24553-1fb5-44a9-847e-2701fd17f16e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c881e7d-a4ff-4688-94ef-8566deacc90d",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();assert.ok(typeof result,\"number\");assert.ok(result>=10)",
                  "err": {},
                  "uuid": "9a88abee-93da-4d67-8020-9cba3f0b21d1",
                  "parentUUID": "6c881e7d-a4ff-4688-94ef-8566deacc90d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a88abee-93da-4d67-8020-9cba3f0b21d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d7cf65f2-318a-40f7-ab6a-041196e32c73",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);assert.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "064ad032-e959-4075-ae4c-aedeb9436429",
                  "parentUUID": "d7cf65f2-318a-40f7-ab6a-041196e32c73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "064ad032-e959-4075-ae4c-aedeb9436429"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40ac3032-7fdb-43bf-b611-57e2a39d72a4",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.listeners(\"test\").length,1);assert.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "bc64f7cd-1bca-4f73-bf07-00576cd12e29",
                  "parentUUID": "40ac3032-7fdb-43bf-b611-57e2a39d72a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc64f7cd-1bca-4f73-bf07-00576cd12e29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c19c3a7-6049-4af5-a0cf-59335a619c97",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "53715208-7e9f-4e2a-a4b3-3e608e5b67a2",
                  "parentUUID": "6c19c3a7-6049-4af5-a0cf-59335a619c97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53715208-7e9f-4e2a-a4b3-3e608e5b67a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d14564c6-fcbd-42c7-ba3d-89d1319bee8a",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "dddfef1f-2384-4fda-8418-2d70cb58f91e",
                  "parentUUID": "d14564c6-fcbd-42c7-ba3d-89d1319bee8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dddfef1f-2384-4fda-8418-2d70cb58f91e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74e55d29-14f3-469a-bf21-8b1ca8d06fda",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.rawListeners(\"test\").length,1);assert.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "59422454-824f-4528-9fb6-a894d48d8ad4",
                  "parentUUID": "74e55d29-14f3-469a-bf21-8b1ca8d06fda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59422454-824f-4528-9fb6-a894d48d8ad4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "386817c4-0d2d-423b-bd5b-972a329182a3",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "5c4d5e5f-a3e9-43e1-930c-cac47c70cbfe",
                  "parentUUID": "386817c4-0d2d-423b-bd5b-972a329182a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c4d5e5f-a3e9-43e1-930c-cac47c70cbfe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb3f616f-11e4-4496-9685-313d808d3413",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6acf20b4-5032-460f-9923-878768abf029",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "ad98aaf8-535b-42b0-a194-d3edba0ac635",
                  "parentUUID": "6acf20b4-5032-460f-9923-878768abf029",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad98aaf8-535b-42b0-a194-d3edba0ac635"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "694d652d-ce80-4d80-ac28-966d6f2393e9",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "0a0359f2-502b-479b-96d4-2c7b80e12c13",
                  "parentUUID": "694d652d-ce80-4d80-ac28-966d6f2393e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a0359f2-502b-479b-96d4-2c7b80e12c13"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08622b79-bd6d-44ca-b6c0-c88c73878793",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});assert.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "ef32374b-c946-49b2-a465-062ae6558f35",
                  "parentUUID": "08622b79-bd6d-44ca-b6c0-c88c73878793",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef32374b-c946-49b2-a465-062ae6558f35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e03d21c-b4a3-4942-89a0-3e585f57f442",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"],host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});assert.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "4f76ff3a-7992-44d6-b400-4fbc221fa525",
                  "parentUUID": "9e03d21c-b4a3-4942-89a0-3e585f57f442",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f76ff3a-7992-44d6-b400-4fbc221fa525"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b6d641f2-fa21-498b-9fe3-d37c04aed0f1",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",protocol:NodePyATVProtocol.airplay});assert.strictEqual(device.protocol,NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "27791cf3-b5b6-4377-a67a-8f1b8f3aa031",
                  "parentUUID": "b6d641f2-fa21-498b-9fe3-d37c04aed0f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27791cf3-b5b6-4377-a67a-8f1b8f3aa031"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6ce611c-a7e4-42ce-91fb-2ad2cc1010be",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\",name:\"My Testdevice\"});assert.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "8fac0fa0-a54b-4079-a90c-5c4034e2c8fd",
                  "parentUUID": "f6ce611c-a7e4-42ce-91fb-2ad2cc1010be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fac0fa0-a54b-4079-a90c-5c4034e2c8fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7351d8d2-57e4-42a9-ac2c-d8d04686f7e0",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\",name:\"Vardagsrum\"});assert.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "3d704838-4325-4c83-a816-701edb541c96",
                  "parentUUID": "7351d8d2-57e4-42a9-ac2c-d8d04686f7e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "dfdca5d1-7f82-4963-adbb-ffee3fb2aa10",
                  "parentUUID": "7351d8d2-57e4-42a9-ac2c-d8d04686f7e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d704838-4325-4c83-a816-701edb541c96",
                "dfdca5d1-7f82-4963-adbb-ffee3fb2aa10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43987746-4527-404f-b83a-cc84049e6390",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\",name:\"Vardagsrum\"});assert.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "b9bcaa4e-936a-414b-a504-0de705a5cab4",
                  "parentUUID": "43987746-4527-404f-b83a-cc84049e6390",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "3fa2c032-ac83-49d0-8383-02a0db38cd62",
                  "parentUUID": "43987746-4527-404f-b83a-cc84049e6390",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9bcaa4e-936a-414b-a504-0de705a5cab4",
                "3fa2c032-ac83-49d0-8383-02a0db38cd62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd44bd3c-07e7-443d-af8c-7a1db6974644",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",os:\"TvOS\"});assert.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "8f8585f1-af18-4024-8279-28c3b8e28293",
                  "parentUUID": "dd44bd3c-07e7-443d-af8c-7a1db6974644",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "bbe60252-1a6a-4e2e-8e5a-636eb8a54e67",
                  "parentUUID": "dd44bd3c-07e7-443d-af8c-7a1db6974644",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f8585f1-af18-4024-8279-28c3b8e28293",
                "bbe60252-1a6a-4e2e-8e5a-636eb8a54e67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ae11326-1d20-4648-b165-788e462e1d28",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",version:\"15.5.1\"});assert.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "b091a64e-fbfc-42fc-bed9-cc42d7b7ffc0",
                  "parentUUID": "1ae11326-1d20-4648-b165-788e462e1d28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "46e72f1e-3c02-4a7d-ac78-4de3f8961681",
                  "parentUUID": "1ae11326-1d20-4648-b165-788e462e1d28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b091a64e-fbfc-42fc-bed9-cc42d7b7ffc0",
                "46e72f1e-3c02-4a7d-ac78-4de3f8961681"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8ca5147-61b1-4c5a-82fc-50297e0cd947",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:NodePyATVProtocol.mrp},{port:7e3,protocol:NodePyATVProtocol.airplay}]});assert.deepStrictEqual(device.services,[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}])",
                  "err": {},
                  "uuid": "d0b58773-f62b-4d68-bc6f-1ec54faf948e",
                  "parentUUID": "f8ca5147-61b1-4c5a-82fc-50297e0cd947",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"10.0.10.81\",name:\"Vardagsrum\"});assert.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "e0203f9d-99fd-47f9-adb3-93c76d4bff6a",
                  "parentUUID": "f8ca5147-61b1-4c5a-82fc-50297e0cd947",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0b58773-f62b-4d68-bc6f-1ec54faf948e",
                "e0203f9d-99fd-47f9-adb3-93c76d4bff6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "917d988b-8455-4747-ae5e-8ed67094ce54",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "a60f9fde-1dbb-4dfc-a686-c8737bb98b20",
                  "parentUUID": "917d988b-8455-4747-ae5e-8ed67094ce54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new NodePyATVDevice({debug:fn,host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "9cbd5e9c-62a8-435c-9cf2-6d052bfd48d2",
                  "parentUUID": "917d988b-8455-4747-ae5e-8ed67094ce54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "dd5e74e4-0f9e-44e7-88a9-093a4bfc3416",
                  "parentUUID": "917d988b-8455-4747-ae5e-8ed67094ce54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a60f9fde-1dbb-4dfc-a686-c8737bb98b20",
                "9cbd5e9c-62a8-435c-9cf2-6d052bfd48d2",
                "dd5e74e4-0f9e-44e7-88a9-093a4bfc3416"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6cbff63-a50b-4dfe-9fb4-838e7f88b432",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,void 0);device.debug=true;assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "35465c28-8535-426e-898e-91514a12b114",
                  "parentUUID": "d6cbff63-a50b-4dfe-9fb4-838e7f88b432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "69226067-da65-4b2f-9713-f6af4440fc74",
                  "parentUUID": "d6cbff63-a50b-4dfe-9fb4-838e7f88b432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "47d1edbc-3d37-4003-a4f8-c12cd7196682",
                  "parentUUID": "d6cbff63-a50b-4dfe-9fb4-838e7f88b432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});const fn=__name(()=>{},\"fn\");assert.strictEqual(device.debug,void 0);device.debug=fn;assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "15a3d2c5-2a30-44f2-a924-c16d0bf632b5",
                  "parentUUID": "d6cbff63-a50b-4dfe-9fb4-838e7f88b432",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35465c28-8535-426e-898e-91514a12b114",
                "69226067-da65-4b2f-9713-f6af4440fc74",
                "47d1edbc-3d37-4003-a4f8-c12cd7196682",
                "15a3d2c5-2a30-44f2-a924-c16d0bf632b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e30efea-e43b-4725-835c-2eda09862e03",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\",protocol:NodePyATVProtocol.airplay});assert.deepEqual(device.toJSON(),{host:\"192.168.178.2\",id:\"*****\",mac:void 0,name:\"My Testdevice\",protocol:NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "11236a08-c8d9-4b92-aa7f-92599444e3ff",
                  "parentUUID": "3e30efea-e43b-4725-835c-2eda09862e03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={host:\"192.168.178.2\",id:\"*****\",mac:\"469943881251875\",name:\"My Testdevice\",protocol:NodePyATVProtocol.airplay};const deviceA=new NodePyATVDevice(config);const deviceB=new NodePyATVDevice(deviceA.toJSON());assert.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "2cfff17b-cbe1-4672-a8a7-da8583be3802",
                  "parentUUID": "3e30efea-e43b-4725-835c-2eda09862e03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11236a08-c8d9-4b92-aa7f-92599444e3ff",
                "2cfff17b-cbe1-4672-a8a7-da8583be3802"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f9247d6-a3f7-41e5-a870-2392fde9d122",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "77deb9e6-3839-4409-8346-840df0987620",
                  "parentUUID": "0f9247d6-a3f7-41e5-a870-2392fde9d122",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77deb9e6-3839-4409-8346-840df0987620"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0d1246a-8144-40ce-b694-da70cdbcc58f",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7d552062-8035-47e9-9af6-cdb790eba294",
                  "parentUUID": "b0d1246a-8144-40ce-b694-da70cdbcc58f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const result=await device.getState();assert.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "b153a0a0-1515-479d-93ce-1eaa34bcb136",
                  "parentUUID": "b0d1246a-8144-40ce-b694-da70cdbcc58f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});assert.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "2dff029e-a99a-4170-80cf-d5a1ba0e08af",
                  "parentUUID": "b0d1246a-8144-40ce-b694-da70cdbcc58f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{executions++;cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date().toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();const secondResult=await device.getState();assert.strictEqual(firstResult.dateTime,secondResult.dateTime);assert.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "dfeb783a-fae7-419a-8d85-b859f6c16935",
                  "parentUUID": "b0d1246a-8144-40ce-b694-da70cdbcc58f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date(new Date().getTime()-1e3).toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();assert.strictEqual(firstResult.position,27);const secondResult=await device.getState();assert.ok(secondResult.position);assert.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);assert.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "fbf661f9-f4d4-40ef-bf30-d32714e8a4f8",
                  "parentUUID": "b0d1246a-8144-40ce-b694-da70cdbcc58f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b153a0a0-1515-479d-93ce-1eaa34bcb136",
                "2dff029e-a99a-4170-80cf-d5a1ba0e08af",
                "dfeb783a-fae7-419a-8d85-b859f6c16935",
                "fbf661f9-f4d4-40ef-bf30-d32714e8a4f8"
              ],
              "failures": [],
              "pending": [
                "7d552062-8035-47e9-9af6-cdb790eba294"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b274484-00b2-47f0-ade7-d12e3ea082ca",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{executions++;cp.end({datetime:\"2020-11-07T22:38:43.608030+01:00\",result:\"success\",title:\"Solo: A Star Wars Story\"})})});assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");assert.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "6417c9bd-03c8-4c2d-913a-30f01c79a52c",
                  "parentUUID": "4b274484-00b2-47f0-ade7-d12e3ea082ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6417c9bd-03c8-4c2d-913a-30f01c79a52c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ed7ec383-4d1e-47da-acd4-d246d14465ab",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({datetime:new Date().toJSON(),result:\"success\"})})});const result=await device.getDateTime();assert.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "10db6ab7-7ff6-45d4-bbdb-5892e3e9f500",
                  "parentUUID": "ed7ec383-4d1e-47da-acd4-d246d14465ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10db6ab7-7ff6-45d4-bbdb-5892e3e9f500"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a4b5be1e-934b-42f8-8dd3-cfe615f489c7",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({hash:\"12345\",result:\"success\"})})});const result=await device.getHash();assert.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "98b9c08f-65de-420f-af46-9703c831d014",
                  "parentUUID": "a4b5be1e-934b-42f8-8dd3-cfe615f489c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98b9c08f-65de-420f-af46-9703c831d014"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d85ee46-b0d8-4199-b2c0-01a9b4cb6cdb",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({media_type:\"video\",result:\"success\"})})});const result=await device.getMediaType();assert.deepStrictEqual(result,NodePyATVMediaType.video);assert.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "ed88cee9-0c7c-4000-be63-6b73e0b5fe49",
                  "parentUUID": "3d85ee46-b0d8-4199-b2c0-01a9b4cb6cdb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed88cee9-0c7c-4000-be63-6b73e0b5fe49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df884196-a3a1-4e98-ba07-9d43f174b8d6",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({device_state:\"seeking\",result:\"success\"})})});const result=await device.getDeviceState();assert.deepStrictEqual(result,NodePyATVDeviceState.seeking);assert.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "20018f4b-ad38-4d0f-ba1e-2356332ad4c7",
                  "parentUUID": "df884196-a3a1-4e98-ba07-9d43f174b8d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20018f4b-ad38-4d0f-ba1e-2356332ad4c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f876f758-f1da-48ad-b53c-83febc13af4f",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();assert.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "2c707e5a-2569-4a8e-8dc7-a24e08bec7f3",
                  "parentUUID": "f876f758-f1da-48ad-b53c-83febc13af4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c707e5a-2569-4a8e-8dc7-a24e08bec7f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81ba659b-9305-4fda-aa44-1ac60b223903",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({artist:\"My Artist\",result:\"success\"})})});const result=await device.getArtist();assert.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "66eaed2b-577f-4032-ae19-7971a3426af1",
                  "parentUUID": "81ba659b-9305-4fda-aa44-1ac60b223903",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66eaed2b-577f-4032-ae19-7971a3426af1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "888b2ac5-4365-498e-932d-fad6cf790d38",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({album:\"My ALbum\",result:\"success\"})})});const result=await device.getAlbum();assert.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "0db53917-793b-465f-af35-78c5cddfc9f9",
                  "parentUUID": "888b2ac5-4365-498e-932d-fad6cf790d38",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0db53917-793b-465f-af35-78c5cddfc9f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b049453-0b18-4448-895f-3e8c1f02e035",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({genre:\"My Genre\",result:\"success\"})})});const result=await device.getGenre();assert.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "d44516e6-f18e-4fed-a49a-1eb686d3ae56",
                  "parentUUID": "8b049453-0b18-4448-895f-3e8c1f02e035",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d44516e6-f18e-4fed-a49a-1eb686d3ae56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b97bc55f-1a02-4b62-b8b5-c14d1569415e",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();assert.strictEqual(result,45)",
                  "err": {},
                  "uuid": "aa9870aa-cb9e-4c23-be18-c22b1d1f5eb9",
                  "parentUUID": "b97bc55f-1a02-4b62-b8b5-c14d1569415e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa9870aa-cb9e-4c23-be18-c22b1d1f5eb9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "46c94e15-e741-43b9-bf24-6a009dfd1581",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({position:30,result:\"success\"})})});const result=await device.getPosition();assert.strictEqual(result,30)",
                  "err": {},
                  "uuid": "83792b8c-0007-4cc0-90d8-b109db719078",
                  "parentUUID": "46c94e15-e741-43b9-bf24-6a009dfd1581",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83792b8c-0007-4cc0-90d8-b109db719078"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1bf0ad5d-03ac-41e1-babc-e83a4a43f90f",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();assert.deepStrictEqual(result,NodePyATVShuffleState.songs);assert.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "b9004c1a-4e07-40db-94ce-ebb301c811ad",
                  "parentUUID": "1bf0ad5d-03ac-41e1-babc-e83a4a43f90f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9004c1a-4e07-40db-94ce-ebb301c811ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf737d8f-9749-4832-8b39-d517edba23cd",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({repeat:\"all\",result:\"success\"})})});const result=await device.getRepeat();assert.deepStrictEqual(result,NodePyATVRepeatState.all);assert.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "1221c131-d058-4dc0-b9b0-cf8a89d356c2",
                  "parentUUID": "cf737d8f-9749-4832-8b39-d517edba23cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1221c131-d058-4dc0-b9b0-cf8a89d356c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b819b32d-c9c9-4ad0-aea9-ba4ed9499cb7",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({app:\"My App\",result:\"success\"})})});const result=await device.getApp();assert.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "b5ba63e4-4295-4128-8953-c0ddfa7718be",
                  "parentUUID": "b819b32d-c9c9-4ad0-aea9-ba4ed9499cb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5ba63e4-4295-4128-8953-c0ddfa7718be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a648878d-bf88-4e13-bc4c-3358b3369cc8",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({app_id:\"app.example.com\",result:\"success\"})})});const result=await device.getAppId();assert.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "b1db40c1-3428-4083-88de-b1ffd655386f",
                  "parentUUID": "a648878d-bf88-4e13-bc4c-3358b3369cc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1db40c1-3428-4083-88de-b1ffd655386f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "406f2181-bc89-4d63-83bb-1c38391d8313",
              "title": "getPowerState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPowerState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({power_state:\"on\",result:\"success\"})})});const result=await device.getPowerState();assert.strictEqual(result,NodePyATVPowerState.on)",
                  "err": {},
                  "uuid": "78d5a7d2-92a4-483f-b564-df9f2c7e7967",
                  "parentUUID": "406f2181-bc89-4d63-83bb-1c38391d8313",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78d5a7d2-92a4-483f-b564-df9f2c7e7967"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d628b28-f9fb-4b26-8c1d-1c3c0568073a",
              "title": "getVolume()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getVolume() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",volume:50})})});const result=await device.getVolume();assert.strictEqual(result,50)",
                  "err": {},
                  "uuid": "8163567d-5162-4e23-a2b3-f2c53fab8ad0",
                  "parentUUID": "1d628b28-f9fb-4b26-8c1d-1c3c0568073a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8163567d-5162-4e23-a2b3-f2c53fab8ad0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "42384ca7-8381-4805-bc52-2eb031164c01",
              "title": "getFocusState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getFocusState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({focus_state:\"focused\",result:\"success\"})})});const result=await device.getFocusState();assert.strictEqual(result,NodePyATVFocusState.focused)",
                  "err": {},
                  "uuid": "e6964c75-4d90-488e-98ad-abe5d8e1009b",
                  "parentUUID": "42384ca7-8381-4805-bc52-2eb031164c01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6964c75-4d90-488e-98ad-abe5d8e1009b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d27ce46-eaf7-4243-9c76-33f165d8bbdf",
              "title": "getOutputDevices()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getOutputDevices() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({output_devices:[{identifier:\"foo\",name:\"Apple TV\"}],result:\"success\"})})});const result=await device.getOutputDevices();assert.deepStrictEqual(result,[{identifier:\"foo\",name:\"Apple TV\"}])",
                  "err": {},
                  "uuid": "515f6481-8d94-4b39-b3e0-ca8c82d94a2c",
                  "parentUUID": "0d27ce46-eaf7-4243-9c76-33f165d8bbdf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "515f6481-8d94-4b39-b3e0-ca8c82d94a2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40c47cfe-fa78-4ccb-9af7-383df87df319",
              "title": "getContentIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getContentIdentifier() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({content_identifier:\"1234\",result:\"success\"})})});const result=await device.getContentIdentifier();assert.strictEqual(result,\"1234\")",
                  "err": {},
                  "uuid": "c8850cc3-abce-4e99-999b-835bddb1e2e8",
                  "parentUUID": "40c47cfe-fa78-4ccb-9af7-383df87df319",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8850cc3-abce-4e99-999b-835bddb1e2e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "159787de-d348-4b9c-b03b-69c764888c9d",
              "title": "getiTunesStoreIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getiTunesStoreIdentifier() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({itunes_store_identifier:1234,result:\"success\"})})});const result=await device.getiTunesStoreIdentifier();assert.strictEqual(result,1234)",
                  "err": {},
                  "uuid": "27175e14-0f9c-4ce3-bbdc-f9ed7d8fcf04",
                  "parentUUID": "159787de-d348-4b9c-b03b-69c764888c9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27175e14-0f9c-4ce3-bbdc-f9ed7d8fcf04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d91ad2f9-92a6-4a13-a572-a06e1b822355",
              "title": "getEpisodeNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getEpisodeNumber() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({episode_number:12,result:\"success\"})})});const result=await device.getEpisodeNumber();assert.strictEqual(result,12)",
                  "err": {},
                  "uuid": "0931b898-7a98-4e02-bac8-d49b937df8c4",
                  "parentUUID": "d91ad2f9-92a6-4a13-a572-a06e1b822355",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0931b898-7a98-4e02-bac8-d49b937df8c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b9ca5934-dafe-49a1-b358-6b544df8347f",
              "title": "getSeasonNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeasonNumber() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",season_number:2})})});const result=await device.getSeasonNumber();assert.strictEqual(result,2)",
                  "err": {},
                  "uuid": "f1464c90-7562-4c57-afa1-073799255650",
                  "parentUUID": "b9ca5934-dafe-49a1-b358-6b544df8347f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1464c90-7562-4c57-afa1-073799255650"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1f3694f9-8f70-4f58-85b7-5c753fec8bb4",
              "title": "getSeriesName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeriesName() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",series_name:\"The Testing Disaster\"})})});const result=await device.getSeriesName();assert.strictEqual(result,\"The Testing Disaster\")",
                  "err": {},
                  "uuid": "f188d078-81d6-416f-a16f-781346d70832",
                  "parentUUID": "1f3694f9-8f70-4f58-85b7-5c753fec8bb4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f188d078-81d6-416f-a16f-781346d70832"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c13be8f-9d35-4ca6-a33d-357b0a7911df",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();assert.strictEqual(result.length,25);assert.strictEqual(result[0].id,\"com.apple.Fitness\");assert.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "9a466376-1f04-4bda-a0fc-6523868eb499",
                  "parentUUID": "8c13be8f-9d35-4ca6-a33d-357b0a7911df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a466376-1f04-4bda-a0fc-6523868eb499"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0170f5f7-4865-44a1-833f-60af70dfbcdc",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "f67c9d28-e0bd-49cf-8abc-8c08a809b753",
                  "parentUUID": "0170f5f7-4865-44a1-833f-60af70dfbcdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\"});await assert.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "213b99ed-72ba-4901-8607-7ba71087ae8d",
                  "parentUUID": "0170f5f7-4865-44a1-833f-60af70dfbcdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"failure\"}')})});await assert.rejects(async()=>{await device.pressKey(NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "b7ff4cab-c0e4-4500-ad12-57ab1d52d163",
                  "parentUUID": "0170f5f7-4865-44a1-833f-60af70dfbcdc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f67c9d28-e0bd-49cf-8abc-8c08a809b753",
                "213b99ed-72ba-4901-8607-7ba71087ae8d",
                "b7ff4cab-c0e4-4500-ad12-57ab1d52d163"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "26784875-04a1-4fc8-ba9e-73b22add7865",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c5f1f6e1-bc35-43ac-b3ac-cc3dce1382b2",
                  "parentUUID": "26784875-04a1-4fc8-ba9e-73b22add7865",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5f1f6e1-bc35-43ac-b3ac-cc3dce1382b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22d6d73b-cd5c-4027-bee1-0bf83ac349ae",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "01b85212-5060-417a-8262-155409945a40",
                  "parentUUID": "22d6d73b-cd5c-4027-bee1-0bf83ac349ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01b85212-5060-417a-8262-155409945a40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "78912b7f-340f-42fa-aeab-21d5af39e6ce",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "cc80e01d-d6f4-4a96-a244-bd34cf16fecb",
                  "parentUUID": "78912b7f-340f-42fa-aeab-21d5af39e6ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc80e01d-d6f4-4a96-a244-bd34cf16fecb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd0388e8-9e2b-4c92-a16d-334c3f441fc1",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "6c4d56b0-000e-4115-b797-893693d013f6",
                  "parentUUID": "bd0388e8-9e2b-4c92-a16d-334c3f441fc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c4d56b0-000e-4115-b797-893693d013f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fb7a390-d93a-41f9-8ee8-acaf88768e09",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1a241390-bab6-45a7-8fc4-621247226643",
                  "parentUUID": "4fb7a390-d93a-41f9-8ee8-acaf88768e09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a241390-bab6-45a7-8fc4-621247226643"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2a1505c-040e-4ba6-99d5-d58e44437144",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "4e2a3f98-a68b-4f73-8df5-e2f44a47b97e",
                  "parentUUID": "a2a1505c-040e-4ba6-99d5-d58e44437144",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e2a3f98-a68b-4f73-8df5-e2f44a47b97e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ae88015-cd2d-422f-9c86-6f7dc5f10dd7",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "faeb6590-b6cf-4a9d-a30a-e108cb8b6437",
                  "parentUUID": "1ae88015-cd2d-422f-9c86-6f7dc5f10dd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "faeb6590-b6cf-4a9d-a30a-e108cb8b6437"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9aaf630-f5d6-4f35-a11a-906019d76814",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9b5ea138-ed46-49d0-ab25-664e198b3555",
                  "parentUUID": "d9aaf630-f5d6-4f35-a11a-906019d76814",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b5ea138-ed46-49d0-ab25-664e198b3555"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "122f95b1-013b-49c4-b428-c19d576730c5",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "75d4b369-0b25-422f-ba8b-ca03a0d50c93",
                  "parentUUID": "122f95b1-013b-49c4-b428-c19d576730c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75d4b369-0b25-422f-ba8b-ca03a0d50c93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e81d2091-aae1-437f-a39a-5a53cba82b0c",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c4277abc-b279-4162-8801-834e649ed5b2",
                  "parentUUID": "e81d2091-aae1-437f-a39a-5a53cba82b0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4277abc-b279-4162-8801-834e649ed5b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c653c7be-8c8c-49d6-b85d-8e353abfa7e1",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9f07d80b-1082-426f-81e7-9a602a1f2273",
                  "parentUUID": "c653c7be-8c8c-49d6-b85d-8e353abfa7e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f07d80b-1082-426f-81e7-9a602a1f2273"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "469cd34d-cbee-48da-8b86-76688b7ec4da",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "76b26e7d-797c-4c20-963c-d02d936969c5",
                  "parentUUID": "469cd34d-cbee-48da-8b86-76688b7ec4da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76b26e7d-797c-4c20-963c-d02d936969c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94b8d45f-4f11-499c-8da2-1d7e073149c9",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "21fda2cc-6602-4020-ae0d-980952617863",
                  "parentUUID": "94b8d45f-4f11-499c-8da2-1d7e073149c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21fda2cc-6602-4020-ae0d-980952617863"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b8634bd0-61f2-4782-a8d6-ccc83ba5a777",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3c5998b2-0592-4ad1-b473-f10df3bbd5a1",
                  "parentUUID": "b8634bd0-61f2-4782-a8d6-ccc83ba5a777",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c5998b2-0592-4ad1-b473-f10df3bbd5a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c02edf14-0e1e-4ade-94f2-47666704e4f2",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "121fb86a-ecac-400c-8576-a30e67fd4c8d",
                  "parentUUID": "c02edf14-0e1e-4ade-94f2-47666704e4f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "121fb86a-ecac-400c-8576-a30e67fd4c8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc847d6b-9320-4e70-b1f3-632995d51bb2",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "4ebf974c-6fcd-45ad-928b-289bd621ea1a",
                  "parentUUID": "dc847d6b-9320-4e70-b1f3-632995d51bb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ebf974c-6fcd-45ad-928b-289bd621ea1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4382ff29-0d24-4dcf-adfa-1a5ae33125bf",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "8f99bdc2-7ad6-4557-ac85-b327e523f3e3",
                  "parentUUID": "4382ff29-0d24-4dcf-adfa-1a5ae33125bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f99bdc2-7ad6-4557-ac85-b327e523f3e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd632ac9-a46f-426c-b45f-435789c46193",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "de89d0c0-0b0f-41e4-9215-56282d1f2f34",
                  "parentUUID": "dd632ac9-a46f-426c-b45f-435789c46193",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de89d0c0-0b0f-41e4-9215-56282d1f2f34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "617abbae-1af8-45d9-8b70-9fcec32a40c6",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1ed4dcef-3841-4d16-a8c2-dc0654d539d2",
                  "parentUUID": "617abbae-1af8-45d9-8b70-9fcec32a40c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ed4dcef-3841-4d16-a8c2-dc0654d539d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1603f3d-e2cc-4604-ab8b-fddb487b5085",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "7f83c06f-d50f-44dd-9138-6b7de58bede6",
                  "parentUUID": "c1603f3d-e2cc-4604-ab8b-fddb487b5085",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f83c06f-d50f-44dd-9138-6b7de58bede6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "550254e9-0f13-4d9c-8f2d-a702257637fa",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "01882098-333b-49ed-ba61-e70c500bec27",
                  "parentUUID": "550254e9-0f13-4d9c-8f2d-a702257637fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01882098-333b-49ed-ba61-e70c500bec27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd68507b-d681-4a8f-a582-69e7e6a706b6",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "df301edf-ffd2-4155-be38-aaf29dcb0413",
                  "parentUUID": "bd68507b-d681-4a8f-a582-69e7e6a706b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df301edf-ffd2-4155-be38-aaf29dcb0413"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a67daaa-bb23-41ab-bac8-6f21521b9657",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "a5243c23-13a0-4a0a-bb49-607266bcef5a",
                  "parentUUID": "0a67daaa-bb23-41ab-bac8-6f21521b9657",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5243c23-13a0-4a0a-bb49-607266bcef5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f027ba3-6c19-4f48-86a8-ac70f4d27e18",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:createFakeSpawn(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "a0bce222-be9f-4841-b16b-3e79b8bc09e0",
                  "parentUUID": "3f027ba3-6c19-4f48-86a8-ac70f4d27e18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0bce222-be9f-4841-b16b-3e79b8bc09e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1e6cba21-ef2a-4ee2-9d7a-6f29af2090c1",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d7f72508-083e-4323-8675-1ff0e05f5be6",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 498,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await NodePyATVInstance.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}assert.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");assert.ok(result.pyatv.length>=5,\"result.pyatv has content\");assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "89a197f8-a0a7-4fd2-83a7-0bad347a006c",
                  "parentUUID": "d7f72508-083e-4323-8675-1ff0e05f5be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});assert.ok(result.pyatv);assert.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "b22a42da-6de8-414c-8cb8-efe0ceb25552",
                  "parentUUID": "d7f72508-083e-4323-8675-1ff0e05f5be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())});assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "46f22261-1e49-454a-b43b-aff8867ac67d",
                  "parentUUID": "d7f72508-083e-4323-8675-1ff0e05f5be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({atvremotePath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "9e00b7bc-48a5-45f1-a5c4-9e145201ab3b",
                  "parentUUID": "d7f72508-083e-4323-8675-1ff0e05f5be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "4b9b4d9c-6943-4403-bbce-5d0740a524b0",
                  "parentUUID": "d7f72508-083e-4323-8675-1ff0e05f5be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "2819a252-68e3-412c-adca-b32fcc580d45",
                  "parentUUID": "d7f72508-083e-4323-8675-1ff0e05f5be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>cp.stderr(\"Hello World!\").code(123).end())});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "c0b307c0-989a-4710-90c1-7045b44a9a80",
                  "parentUUID": "d7f72508-083e-4323-8675-1ff0e05f5be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "43869161-8a3d-4341-8f35-6198a530cd0a",
                  "parentUUID": "d7f72508-083e-4323-8675-1ff0e05f5be6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "e1529a50-bd88-49b8-a355-59cbc0268409",
                  "parentUUID": "d7f72508-083e-4323-8675-1ff0e05f5be6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89a197f8-a0a7-4fd2-83a7-0bad347a006c",
                "b22a42da-6de8-414c-8cb8-efe0ceb25552",
                "46f22261-1e49-454a-b43b-aff8867ac67d",
                "9e00b7bc-48a5-45f1-a5c4-9e145201ab3b",
                "4b9b4d9c-6943-4403-bbce-5d0740a524b0",
                "2819a252-68e3-412c-adca-b32fcc580d45",
                "c0b307c0-989a-4710-90c1-7045b44a9a80",
                "43869161-8a3d-4341-8f35-6198a530cd0a",
                "e1529a50-bd88-49b8-a355-59cbc0268409"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 510,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a8a46ee-31f6-421f-a2dd-489d4fae97c4",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5860,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await NodePyATVInstance.check()",
                  "err": {},
                  "uuid": "8d0bc076-6cf1-435a-a485-a6561878b7e5",
                  "parentUUID": "6a8a46ee-31f6-421f-a2dd-489d4fae97c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "08d091ff-714d-418a-8f7f-175d221ce17f",
                  "parentUUID": "6a8a46ee-31f6-421f-a2dd-489d4fae97c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "0edbb95d-bdcc-4038-b2ad-5f51da247d44",
                  "parentUUID": "6a8a46ee-31f6-421f-a2dd-489d4fae97c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "2d2f577d-bb9f-455f-a7ef-ce0995c48bf8",
                  "parentUUID": "6a8a46ee-31f6-421f-a2dd-489d4fae97c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d0bc076-6cf1-435a-a485-a6561878b7e5",
                "08d091ff-714d-418a-8f7f-175d221ce17f",
                "0edbb95d-bdcc-4038-b2ad-5f51da247d44",
                "2d2f577d-bb9f-455f-a7ef-ce0995c48bf8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5866,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c41320f9-d07b-48c3-a37d-7f095283d28e",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5435,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await NodePyATVInstance.find();assert.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "e8cedd7d-9ed7-4918-bd0b-e184ba7fc508",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({atvscriptPath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "ba0ad313-6e02-448a-bc08-b82349faf98e",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "736175e2-3636-43e2-97fb-c5b414a7949f",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "62ded5d7-6431-45e9-9dd4-fe7e98f2c608",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\",result:\"failure\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "2aa7060d-01b1-485e-87fd-b61376f10132",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(JSON.stringify({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "5f8d6f17-5db3-46bd-bc00-0059e58e25dc",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "be9b6428-3a63-47cb-b05b-9f7002776603",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "b7933a57-111e-4ed3-9393-79a5497b588a",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",identifier:\"xxx\",name:\"Vardagsrum\"}],result:\"success\"}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,void 0);assert.strictEqual(devices[0].modelName,void 0);assert.strictEqual(devices[0].os,void 0);assert.strictEqual(devices[0].version,void 0);assert.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "aca61251-49e3-4ca3-abaf-16adbdf0f1b5",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",device_info:{model:\"Gen4K\",model_str:\"Apple TV 4K\",operating_system:\"TvOS\",version:\"15.5.1\"},identifier:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}]}],result:\"success\"}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,\"Gen4K\");assert.strictEqual(devices[0].modelName,\"Apple TV 4K\");assert.strictEqual(devices[0].os,\"TvOS\");assert.strictEqual(devices[0].version,\"15.5.1\");assert.deepStrictEqual(devices[0].services,[{port:49152,protocol:NodePyATVProtocol.mrp},{port:7e3,protocol:NodePyATVProtocol.airplay}])",
                  "err": {},
                  "uuid": "c5fb8c80-affe-481b-b654-d31ccd55db5c",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});assert.strictEqual(devices.length,4);assert.strictEqual(devices[0].name,\"Living Room\");assert.strictEqual(devices[0].host,\"10.0.0.30\");assert.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(devices[1].name,\"Kitchen\");assert.strictEqual(devices[1].host,\"10.0.0.79\");assert.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(devices[2].name,\"Bedroom\");assert.strictEqual(devices[2].host,\"10.0.0.20\");assert.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(devices[3].name,\"Basement\");assert.strictEqual(devices[3].host,\"10.0.0.156\");assert.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "0d670402-6c31-4b09-bf4b-5841568bbb9f",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);assert.strictEqual(response.devices.length,4);assert.strictEqual(response.errors.length,2);assert.strictEqual(response.devices[0].name,\"Living Room\");assert.strictEqual(response.devices[0].host,\"10.0.0.30\");assert.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(response.devices[1].name,\"Kitchen\");assert.strictEqual(response.devices[1].host,\"10.0.0.79\");assert.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(response.devices[2].name,\"Bedroom\");assert.strictEqual(response.devices[2].host,\"10.0.0.20\");assert.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(response.devices[3].name,\"Basement\");assert.strictEqual(response.devices[3].host,\"10.0.0.156\");assert.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");assert.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");assert.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "b29519c8-1725-4f0a-a3fa-c36152d07948",
                  "parentUUID": "c41320f9-d07b-48c3-a37d-7f095283d28e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8cedd7d-9ed7-4918-bd0b-e184ba7fc508",
                "ba0ad313-6e02-448a-bc08-b82349faf98e",
                "736175e2-3636-43e2-97fb-c5b414a7949f",
                "62ded5d7-6431-45e9-9dd4-fe7e98f2c608",
                "2aa7060d-01b1-485e-87fd-b61376f10132",
                "5f8d6f17-5db3-46bd-bc00-0059e58e25dc",
                "be9b6428-3a63-47cb-b05b-9f7002776603",
                "b7933a57-111e-4ed3-9393-79a5497b588a",
                "aca61251-49e3-4ca3-abaf-16adbdf0f1b5",
                "c5fb8c80-affe-481b-b654-d31ccd55db5c",
                "0d670402-6c31-4b09-bf4b-5841568bbb9f",
                "b29519c8-1725-4f0a-a3fa-c36152d07948"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5451,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f797125-443e-412f-a995-31c671dc231a",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=NodePyATVInstance.device({host:\"192.168.178.6\",name:\"My Testdevice\"});assert.strictEqual(device.host,\"192.168.178.6\");assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "9fced53d-876d-4125-9c42-2ee38729b6ca",
                  "parentUUID": "0f797125-443e-412f-a995-31c671dc231a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9fced53d-876d-4125-9c42-2ee38729b6ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d4b87f0-f7a3-4e14-940b-92afc322e5bc",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await i.version({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "0497b7f7-6d13-47b9-8309-5650fab322f6",
                  "parentUUID": "4d4b87f0-f7a3-4e14-940b-92afc322e5bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0497b7f7-6d13-47b9-8309-5650fab322f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "430539fe-a847-4fb0-b104-83d97ceee063",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await assert.rejects(async()=>{await i.check({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "0528a2f4-3ec3-4e5e-9280-0131438f8f14",
                  "parentUUID": "430539fe-a847-4fb0-b104-83d97ceee063",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0528a2f4-3ec3-4e5e-9280-0131438f8f14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "960ff040-2c4a-4d33-938c-1afe857dcec1",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvscriptPath:\"test\"});await i.find({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "c9ddf5de-9303-405d-8132-11ca0831f4ca",
                  "parentUUID": "960ff040-2c4a-4d33-938c-1afe857dcec1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9ddf5de-9303-405d-8132-11ca0831f4ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "933cd5d3-8956-4cc7-bd63-f2b0e0239235",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({debug:true});const d=i.device({host:\"192.168.178.2\",name:\"My Testdevice\"});assert.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "49b1f7ca-ab53-4a56-ae37-e25175955a79",
                  "parentUUID": "933cd5d3-8956-4cc7-bd63-f2b0e0239235",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49b1f7ca-ab53-4a56-ae37-e25175955a79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol)",
                  "err": {},
                  "uuid": "e4b0e62b-de51-4b94-8f20-0d86a8295638",
                  "parentUUID": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType)",
                  "err": {},
                  "uuid": "18c376c1-b529-4fbd-8d55-3594f3eff559",
                  "parentUUID": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "0fbed55d-4baa-4ba3-a6e3-018ef6a89d17",
                  "parentUUID": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "ea87a238-ca9c-44de-bc23-1f69a2566db3",
                  "parentUUID": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "ec158b0b-d888-4ee7-ab51-bc88ab793256",
                  "parentUUID": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "c99f9514-6c07-42ba-a658-23bde0255fc5",
                  "parentUUID": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys)",
                  "err": {},
                  "uuid": "c4a178a9-295d-4c48-b79d-238317ee7f33",
                  "parentUUID": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState)",
                  "err": {},
                  "uuid": "d0f27159-615a-4441-9192-2a1df8ceaa19",
                  "parentUUID": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState)",
                  "err": {},
                  "uuid": "ff74cdbe-f630-46ff-8983-e82ddd687309",
                  "parentUUID": "fb1dbc64-a37f-465d-b004-be09e39ea69f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4b0e62b-de51-4b94-8f20-0d86a8295638",
                "18c376c1-b529-4fbd-8d55-3594f3eff559",
                "0fbed55d-4baa-4ba3-a6e3-018ef6a89d17",
                "ea87a238-ca9c-44de-bc23-1f69a2566db3",
                "ec158b0b-d888-4ee7-ab51-bc88ab793256",
                "c99f9514-6c07-42ba-a658-23bde0255fc5",
                "c4a178a9-295d-4c48-b79d-238317ee7f33",
                "d0f27159-615a-4441-9192-2a1df8ceaa19",
                "ff74cdbe-f630-46ff-8983-e82ddd687309"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "09db5bb0-1cdd-4a0c-9422-e50e36cd491c",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bab805b0-f2f2-422e-ae87-4b5a39b03582",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=addRequestId();assert.strictEqual(typeof id,\"string\");removeRequestId(id)",
                  "err": {},
                  "uuid": "95618a6b-139e-433e-9acf-98fa3ca67c2b",
                  "parentUUID": "bab805b0-f2f2-422e-ae87-4b5a39b03582",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId(\"FOO\")",
                  "err": {},
                  "uuid": "33354631-0fac-410d-bb62-91299ac06440",
                  "parentUUID": "bab805b0-f2f2-422e-ae87-4b5a39b03582",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95618a6b-139e-433e-9acf-98fa3ca67c2b",
                "33354631-0fac-410d-bb62-91299ac06440"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00bcdfdf-046e-438f-be00-4110727d5396",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "8861c524-4707-4d33-8b60-5457b5ccbf02",
                  "parentUUID": "00bcdfdf-046e-438f-be00-4110727d5396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "a859c399-21a0-449b-9c44-acd5c36c530a",
                  "parentUUID": "00bcdfdf-046e-438f-be00-4110727d5396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:__name(function(msg){assert.strictEqual(this,null);assert.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "d9e3e7a4-d719-4edf-9fad-2a3f4ae525be",
                  "parentUUID": "00bcdfdf-046e-438f-be00-4110727d5396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "691a7021-fd47-4ce5-a507-d2cf7bbea76d",
                  "parentUUID": "00bcdfdf-046e-438f-be00-4110727d5396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:__name(function(msg){assert.strictEqual(this,null);assert.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\"),noColors:true})",
                  "err": {},
                  "uuid": "5883f9d4-35eb-48ba-b4a4-4c625ba3ec1f",
                  "parentUUID": "00bcdfdf-046e-438f-be00-4110727d5396",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8861c524-4707-4d33-8b60-5457b5ccbf02",
                "a859c399-21a0-449b-9c44-acd5c36c530a",
                "d9e3e7a4-d719-4edf-9fad-2a3f4ae525be",
                "691a7021-fd47-4ce5-a507-d2cf7bbea76d",
                "5883f9d4-35eb-48ba-b4a4-4c625ba3ec1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77cc8d36-7874-4184-a346-77544022f315",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "a23344ae-16e0-4f94-aeeb-e12572ff92b2",
                  "parentUUID": "77cc8d36-7874-4184-a346-77544022f315",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "955d0a08-490f-426a-90dc-9d542a64c6e0",
                  "parentUUID": "77cc8d36-7874-4184-a346-77544022f315",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});assert.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "08107017-ab5b-460b-bd54-b417d8e1a88a",
                  "parentUUID": "77cc8d36-7874-4184-a346-77544022f315",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});assert.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "9d3f2b52-b7d7-46ca-ae90-c152e4478c08",
                  "parentUUID": "77cc8d36-7874-4184-a346-77544022f315",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a23344ae-16e0-4f94-aeeb-e12572ff92b2",
                "955d0a08-490f-426a-90dc-9d542a64c6e0",
                "08107017-ab5b-460b-bd54-b417d8e1a88a",
                "9d3f2b52-b7d7-46ca-ae90-c152e4478c08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74238228-3329-48e6-b15f-799832a2e61b",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters();assert.deepEqual(result,[])",
                  "err": {},
                  "uuid": "ee9b370f-5f43-49a8-a890-dc73eec06f7e",
                  "parentUUID": "74238228-3329-48e6-b15f-799832a2e61b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({host:\"192.168.178.2\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "ccfdae0e-7423-4184-a8c3-d7f0d6eb9068",
                  "parentUUID": "74238228-3329-48e6-b15f-799832a2e61b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({airplayCredentials:\"****\",companionCredentials:\"1234\",dmapCredentials:\"****\",hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",mrpCredentials:\"****\",protocol:NodePyATVProtocol.mrp,raopCredentials:\"::foo:\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "7afc5faa-3944-4498-8ba4-4c024f03bb93",
                  "parentUUID": "74238228-3329-48e6-b15f-799832a2e61b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee9b370f-5f43-49a8-a890-dc73eec06f7e",
                "ccfdae0e-7423-4184-a8c3-d7f0d6eb9068",
                "7afc5faa-3944-4498-8ba4-4c024f03bb93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc12f67a-a555-4b57-94f5-931222b24142",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "458fc84f-0479-43b0-bf14-08dcaabf7c38",
                  "parentUUID": "fc12f67a-a555-4b57-94f5-931222b24142",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=parseState(null,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "53636111-434a-4578-9ea8-f9432b39f356",
                  "parentUUID": "fc12f67a-a555-4b57-94f5-931222b24142",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,content_identifier:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",episode_number:null,focus_state:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",itunes_store_identifier:null,media_type:\"video\",output_devices:null,position:27,power_state:null,repeat:\"off\",result:\"success\",season_number:null,series_name:null,shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097,volume:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "1a07c61e-9b02-4e14-b37a-ead66eb2fc25",
                  "parentUUID": "fc12f67a-a555-4b57-94f5-931222b24142",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};assert.throws(()=>{parseState(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "7276d8e2-02b8-4b11-9a61-f192ecd4e138",
                  "parentUUID": "fc12f67a-a555-4b57-94f5-931222b24142",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "5a25e717-f89a-4b6a-917e-75b026966317",
                  "parentUUID": "fc12f67a-a555-4b57-94f5-931222b24142",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:Infinity,app:0,app_id:891645381647289,artist:90,content_identifier:null,datetime:true,device_state:43,episode_number:null,focus_state:null,genre:Math.PI,hash:1337,itunes_store_identifier:null,media_type:false,output_devices:null,position:\"0:30.123\",power_state:null,repeat:true,result:\"success\",season_number:null,series_name:null,shuffle:false,title:void 0,total_time:\"23min\",volume:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "30139cbb-0a55-4ece-8320-9b1763644772",
                  "parentUUID": "fc12f67a-a555-4b57-94f5-931222b24142",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={device_state:\"initiating\",media_type:\"3d-experience\",repeat:\"nothing\",shuffle:\"everything\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "8630dcb6-8409-4d3b-8b91-c056ad3d11dc",
                  "parentUUID": "fc12f67a-a555-4b57-94f5-931222b24142",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "458fc84f-0479-43b0-bf14-08dcaabf7c38",
                "53636111-434a-4578-9ea8-f9432b39f356",
                "1a07c61e-9b02-4e14-b37a-ead66eb2fc25",
                "7276d8e2-02b8-4b11-9a61-f192ecd4e138",
                "5a25e717-f89a-4b6a-917e-75b026966317",
                "30139cbb-0a55-4ece-8320-9b1763644772",
                "8630dcb6-8409-4d3b-8b91-c056ad3d11dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}