{
  "stats": {
    "suites": 93,
    "tests": 165,
    "passes": 163,
    "pending": 2,
    "failures": 0,
    "start": "2024-07-30T18:35:45.373Z",
    "end": "2024-07-30T18:35:57.355Z",
    "duration": 11982,
    "testsRegistered": 165,
    "passPercent": 100,
    "pendingPercent": 1.2121212121212122,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "004c7909-29db-4de4-88bc-a667e7398520",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "be1377be-92b4-4501-a0c5-b8f0fedcd809",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "641384e7-6685-48c0-92b8-bd110417652d",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "43acfe98-a021-4aef-9b78-d781c2afbd0c",
                  "parentUUID": "641384e7-6685-48c0-92b8-bd110417652d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43acfe98-a021-4aef-9b78-d781c2afbd0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "921b0eb9-30dd-4967-9fdb-9822e7d30138",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "bdc32ff5-181a-4ca8-98b7-5082ac17da3b",
                  "parentUUID": "921b0eb9-30dd-4967-9fdb-9822e7d30138",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdc32ff5-181a-4ca8-98b7-5082ac17da3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76f6f248-d12d-4655-9e70-8405c501e50a",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "852432a8-d031-4132-9957-eb3cad41ff4c",
                  "parentUUID": "76f6f248-d12d-4655-9e70-8405c501e50a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "852432a8-d031-4132-9957-eb3cad41ff4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "68fe0cdb-802f-429d-a75d-7be24086dd3a",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "83b13745-cc73-46a3-b0e5-2dcefc8d06fa",
                  "parentUUID": "68fe0cdb-802f-429d-a75d-7be24086dd3a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83b13745-cc73-46a3-b0e5-2dcefc8d06fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47d0d0b3-e790-4dab-b5e4-66d68cc638c1",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "4fa3b58f-6e88-4338-bffa-8bb83408228e",
                  "parentUUID": "47d0d0b3-e790-4dab-b5e4-66d68cc638c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fa3b58f-6e88-4338-bffa-8bb83408228e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "921c3feb-60e4-4e1e-a4e3-75cbd769bcec",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "257adafa-c925-4db5-9a1a-ce6d09786388",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:title', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "5c675f9d-c25a-4e91-a52a-2c2ae1cd0c0c",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "6859350f-07db-40ee-aa33-447485f690d6",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst sort = [];\nawait Promise.race([\n    new Promise(cb => {\n        device.once('update', () => {\n            sort.push('update');\n            cb(undefined);\n        });\n    }),\n    new Promise(cb => {\n        device.once('update:title', () => {\n            sort.push('update:title');\n            cb(undefined);\n        });\n    })\n]);\nassert.deepStrictEqual(sort, ['update:title', 'update']);",
                  "err": {},
                  "uuid": "33dd1e65-fb3f-4fd5-89c8-3e09ba8fcc52",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('error', error => {\n        assert.ok(error instanceof Error);\n        assert.ok(error.toString().includes('invalid credentials: 321'));\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "5cc91d42-2040-44ae-8693-ea1e86e4d7cc",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter = 0;\nlet eventCounter = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        if (spawnCounter === 0) {\n            cp.onStdIn(() => cp.end());\n        }\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n        spawnCounter++;\n        if (spawnCounter >= 2) {\n            cp.end();\n        }\n    })\n});\nconst listener = () => {\n    eventCounter++;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\nawait device.getState();\ndevice.off('update', listener);\nassert.strictEqual(spawnCounter, 2);\nassert.strictEqual(eventCounter, 1);",
                  "err": {},
                  "uuid": "b9fa2252-f08f-4ae5-8585-fd119f767c3f",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nlet callCounter = 0;\nconst error = new Error('This is an error. Be nice.');\ndevice.once('error', err => {\n    assert.strictEqual(err, error);\n    callCounter++;\n});\nconst listener = () => {\n    throw error;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\ndevice.off('update', listener);\nassert.strictEqual(callCounter, 1);",
                  "err": {},
                  "uuid": "dd47c7be-3fd8-483d-9ea4-0b10337185f2",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:powerState', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'powerState');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'off');\n        assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n        assert.strictEqual(event.value, 'off');\n        assert.strictEqual(event.value, NodePyATVPowerState.off);\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "8bcbb21a-d49b-4266-bca3-fa013e84555c",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'powerState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'off');\n    assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n    assert.strictEqual(event.value, 'off');\n    assert.strictEqual(event.value, NodePyATVPowerState.off);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "b6ed6870-2869-46df-a414-25a9818b7073",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            focus_state: 'unfocused'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'focusState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'unfocused');\n    assert.strictEqual(event.newValue, NodePyATVFocusState.unfocused);\n    assert.strictEqual(event.value, 'unfocused');\n    assert.strictEqual(event.value, NodePyATVFocusState.unfocused);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "e22b4277-9073-44ba-8952-26df14b94027",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            output_devices: [{\n                    name: 'Living room',\n                    identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n                }]\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'outputDevices');\n    assert.strictEqual(event.oldValue, null);\n    assert.deepStrictEqual(event.newValue, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.value, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "7a24b7b7-a4c7-47b1-af02-ce3c4f00adc1",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            volume: 20.0\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'volume');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 20);\n    assert.strictEqual(event.value, 20);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "231e4594-71c8-410b-8006-43366d9e71cd",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            foo: 'bar'\n        });\n        cp.end();\n    })\n});\ndevice.on('update', event => {\n    assert.fail(`Got an update event for a new field: ${event}`);\n});\nawait new Promise(cb => setTimeout(cb, 10));\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "a6e20be5-1065-4b41-819f-521eed844408",
                  "parentUUID": "257adafa-c925-4db5-9a1a-ce6d09786388",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c675f9d-c25a-4e91-a52a-2c2ae1cd0c0c",
                "6859350f-07db-40ee-aa33-447485f690d6",
                "33dd1e65-fb3f-4fd5-89c8-3e09ba8fcc52",
                "5cc91d42-2040-44ae-8693-ea1e86e4d7cc",
                "b9fa2252-f08f-4ae5-8585-fd119f767c3f",
                "dd47c7be-3fd8-483d-9ea4-0b10337185f2",
                "8bcbb21a-d49b-4266-bca3-fa013e84555c",
                "b6ed6870-2869-46df-a414-25a9818b7073",
                "e22b4277-9073-44ba-8952-26df14b94027",
                "7a24b7b7-a4c7-47b1-af02-ce3c4f00adc1",
                "231e4594-71c8-410b-8006-43366d9e71cd",
                "a6e20be5-1065-4b41-819f-521eed844408"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "17db7dfd-a93e-4cfc-bf11-c17c6061ac9e",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error();\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.error(error).end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.strictEqual(err, error);\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "ac922a08-4042-42f2-9bdc-8db24f9217c9",
                  "parentUUID": "17db7dfd-a93e-4cfc-bf11-c17c6061ac9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stderr('Hello World!').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "87b9e5f8-1de7-491c-9361-f9d1625cb27b",
                  "parentUUID": "17db7dfd-a93e-4cfc-bf11-c17c6061ac9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('#').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Unable to parse stdout json: SyntaxError'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "2aed8f7c-39f8-4d83-8604-59ad925bf70a",
                  "parentUUID": "17db7dfd-a93e-4cfc-bf11-c17c6061ac9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "08cbd3df-1b46-4ab8-95be-656b1a5b65a0",
                  "parentUUID": "17db7dfd-a93e-4cfc-bf11-c17c6061ac9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac922a08-4042-42f2-9bdc-8db24f9217c9",
                "87b9e5f8-1de7-491c-9361-f9d1625cb27b",
                "2aed8f7c-39f8-4d83-8604-59ad925bf70a"
              ],
              "failures": [],
              "pending": [
                "08cbd3df-1b46-4ab8-95be-656b1a5b65a0"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e8d2ee91-f111-441e-9ab7-f9e6f791513e",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "4643f072-75a5-4827-92a9-4efee61c2c07",
                  "parentUUID": "e8d2ee91-f111-441e-9ab7-f9e6f791513e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4643f072-75a5-4827-92a9-4efee61c2c07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5842d2da-0e1e-4023-9a7b-8b0f6c413153",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert.strictEqual(e, event);\n    assert.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "383bbafd-3975-44d1-ae3f-fa79e93e2b7f",
                  "parentUUID": "5842d2da-0e1e-4023-9a7b-8b0f6c413153",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "383bbafd-3975-44d1-ae3f-fa79e93e2b7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31aa4d66-8ee9-4e22-a8a6-e5204d985567",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "e800fbef-26ce-4fa1-b9f2-99b95095908c",
                  "parentUUID": "31aa4d66-8ee9-4e22-a8a6-e5204d985567",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e800fbef-26ce-4fa1-b9f2-99b95095908c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50676804-2c38-4944-8cad-889ccbe2c971",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert.ok(typeof result, 'number');\nassert.ok(result >= 10);",
                  "err": {},
                  "uuid": "8c08e6f3-2f02-4d60-a93a-28ff0d3ffc32",
                  "parentUUID": "50676804-2c38-4944-8cad-889ccbe2c971",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c08e6f3-2f02-4d60-a93a-28ff0d3ffc32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af766178-c4bc-4d69-a7ae-7fefea03f110",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "c9ac02da-b8f6-4462-a076-98a6f46c4dec",
                  "parentUUID": "af766178-c4bc-4d69-a7ae-7fefea03f110",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9ac02da-b8f6-4462-a076-98a6f46c4dec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30a6e306-920d-4d7b-85d3-dc8a1e65bbcc",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listeners('test').length, 1);\nassert.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "56b320f8-fde1-4fca-835b-fe31ec95f5c6",
                  "parentUUID": "30a6e306-920d-4d7b-85d3-dc8a1e65bbcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56b320f8-fde1-4fca-835b-fe31ec95f5c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bda8ab13-289e-445e-a3c4-7905256605e6",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "45a9b743-f1d0-4b8a-baf8-3c406746b4b5",
                  "parentUUID": "bda8ab13-289e-445e-a3c4-7905256605e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45a9b743-f1d0-4b8a-baf8-3c406746b4b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c166b54b-85ae-44a5-a1b6-9c276632000c",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "042fbf14-72e8-4f4f-b8e7-9bb7a41ab1c7",
                  "parentUUID": "c166b54b-85ae-44a5-a1b6-9c276632000c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "042fbf14-72e8-4f4f-b8e7-9bb7a41ab1c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73505fa8-5028-49a2-be4f-ed18940ac907",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.rawListeners('test').length, 1);\nassert.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "6a40968c-a149-42a9-ba3f-f5c6adcee34a",
                  "parentUUID": "73505fa8-5028-49a2-be4f-ed18940ac907",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a40968c-a149-42a9-ba3f-f5c6adcee34a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14a2fe4b-736b-4a48-9e72-bd0b62dcb6ca",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 1);\ndevice.removeListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 0);",
                  "err": {},
                  "uuid": "157350ca-cc50-4a5c-ad77-081052c8a26a",
                  "parentUUID": "14a2fe4b-736b-4a48-9e72-bd0b62dcb6ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "157350ca-cc50-4a5c-ad77-081052c8a26a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b8348f3-998d-4886-a29b-9d5c07724e0e",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d5f6ff34-30c9-4174-9023-0dcfa7a7827a",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "795bc9e2-2a32-48e2-bacf-3a1b0758c6b2",
                  "parentUUID": "d5f6ff34-30c9-4174-9023-0dcfa7a7827a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "795bc9e2-2a32-48e2-bacf-3a1b0758c6b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94e0d42d-94ca-4c21-a6ad-f26f27a04223",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "ec8ce1a3-583a-4f46-9213-4947c14120f6",
                  "parentUUID": "94e0d42d-94ca-4c21-a6ad-f26f27a04223",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec8ce1a3-583a-4f46-9213-4947c14120f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d3172b08-7b15-492c-bb1f-314a9758109f",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "f686d04d-bb57-4334-ae12-63d48d918238",
                  "parentUUID": "d3172b08-7b15-492c-bb1f-314a9758109f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f686d04d-bb57-4334-ae12-63d48d918238"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4138059f-c6f4-4e69-8c44-f0d4670a7f97",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    allIDs: [\n        'some_id_1',\n        'some_id_2',\n        'some_id_3',\n    ]\n});\nassert.deepStrictEqual(device.allIDs, [\n    'some_id_1',\n    'some_id_2',\n    'some_id_3',\n]);",
                  "err": {},
                  "uuid": "9eaf965b-1c33-4f63-9930-4618cca9e703",
                  "parentUUID": "4138059f-c6f4-4e69-8c44-f0d4670a7f97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9eaf965b-1c33-4f63-9930-4618cca9e703"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cdd14b92-c7d8-46e0-aa03-cfdc06bf3cf7",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.strictEqual(device.protocol, NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "f964a4ce-defb-449c-9ada-60636219ba89",
                  "parentUUID": "cdd14b92-c7d8-46e0-aa03-cfdc06bf3cf7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f964a4ce-defb-449c-9ada-60636219ba89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e630b30-d2b9-43df-ab55-2219d732b630",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    mac: 'AA:BB:CC:DD:EE:FF'\n});\nassert.strictEqual(device.mac, 'AA:BB:CC:DD:EE:FF');",
                  "err": {},
                  "uuid": "0f027558-298a-4851-8b34-b1b79fd4bd72",
                  "parentUUID": "3e630b30-d2b9-43df-ab55-2219d732b630",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f027558-298a-4851-8b34-b1b79fd4bd72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98d5f37b-3c37-4d7c-bd0e-6e691d43a4ba",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    model: 'Gen4K'\n});\nassert.strictEqual(device.model, 'Gen4K');",
                  "err": {},
                  "uuid": "88737a0e-3b6a-4138-b1dd-6664e2feddf5",
                  "parentUUID": "98d5f37b-3c37-4d7c-bd0e-6e691d43a4ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.model, undefined);",
                  "err": {},
                  "uuid": "bab299b3-3ca5-48af-bb1b-7a157ec1ea33",
                  "parentUUID": "98d5f37b-3c37-4d7c-bd0e-6e691d43a4ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88737a0e-3b6a-4138-b1dd-6664e2feddf5",
                "bab299b3-3ca5-48af-bb1b-7a157ec1ea33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b852b38a-ce95-4a5d-bf5f-c35d1fa56175",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    modelName: 'Apple TV 4K'\n});\nassert.strictEqual(device.modelName, 'Apple TV 4K');",
                  "err": {},
                  "uuid": "b224be37-3b1e-4723-9328-ef6d9150f83b",
                  "parentUUID": "b852b38a-ce95-4a5d-bf5f-c35d1fa56175",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.modelName, undefined);",
                  "err": {},
                  "uuid": "8416bea9-87b0-4227-90b8-39f1b344ea9c",
                  "parentUUID": "b852b38a-ce95-4a5d-bf5f-c35d1fa56175",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b224be37-3b1e-4723-9328-ef6d9150f83b",
                "8416bea9-87b0-4227-90b8-39f1b344ea9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a9dd751-1660-4237-8587-b2cb01c9f686",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    os: 'TvOS'\n});\nassert.strictEqual(device.os, 'TvOS');",
                  "err": {},
                  "uuid": "084db255-deec-4ce6-8d9f-882806000277",
                  "parentUUID": "1a9dd751-1660-4237-8587-b2cb01c9f686",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.os, undefined);",
                  "err": {},
                  "uuid": "79af2c87-2e9e-42fb-b7e0-719d7af1580b",
                  "parentUUID": "1a9dd751-1660-4237-8587-b2cb01c9f686",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "084db255-deec-4ce6-8d9f-882806000277",
                "79af2c87-2e9e-42fb-b7e0-719d7af1580b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35ce2d88-31db-4138-975b-4e280770a8f1",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    version: '15.5.1'\n});\nassert.strictEqual(device.version, '15.5.1');",
                  "err": {},
                  "uuid": "403d5aaa-208e-4af7-8edd-bf0ec8975a35",
                  "parentUUID": "35ce2d88-31db-4138-975b-4e280770a8f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.version, undefined);",
                  "err": {},
                  "uuid": "cef19046-eb7e-49d3-a522-a332d79a15a0",
                  "parentUUID": "35ce2d88-31db-4138-975b-4e280770a8f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "403d5aaa-208e-4af7-8edd-bf0ec8975a35",
                "cef19046-eb7e-49d3-a522-a332d79a15a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd047918-b473-4fea-ad8b-b6d9674d87a9",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    services: [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]\n});\nassert.deepStrictEqual(device.services, [\n    {\n        protocol: 'mrp',\n        port: 49152\n    },\n    {\n        protocol: 'airplay',\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "0dac6c91-1476-476f-a825-38ee079acb4d",
                  "parentUUID": "cd047918-b473-4fea-ad8b-b6d9674d87a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.services, undefined);",
                  "err": {},
                  "uuid": "bb8c79d8-3f12-4d0f-a67c-35b47cd01ee1",
                  "parentUUID": "cd047918-b473-4fea-ad8b-b6d9674d87a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dac6c91-1476-476f-a825-38ee079acb4d",
                "bb8c79d8-3f12-4d0f-a67c-35b47cd01ee1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a85ab672-d344-4a7a-86a7-116de2c0e313",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "3226e948-b05e-4fd8-a996-920b45761231",
                  "parentUUID": "a85ab672-d344-4a7a-86a7-116de2c0e313",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn = () => { };\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "5f04c009-df8c-4fcf-9036-eed97ffbbd87",
                  "parentUUID": "a85ab672-d344-4a7a-86a7-116de2c0e313",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "6d467f57-9595-4e40-a51e-700031edae0f",
                  "parentUUID": "a85ab672-d344-4a7a-86a7-116de2c0e313",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3226e948-b05e-4fd8-a996-920b45761231",
                "5f04c009-df8c-4fcf-9036-eed97ffbbd87",
                "6d467f57-9595-4e40-a51e-700031edae0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "07db36dd-b273-4cd6-abd7-6a6ab05ee14a",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "bea38574-5f7c-48b6-9acb-b1c4a6d0f098",
                  "parentUUID": "07db36dd-b273-4cd6-abd7-6a6ab05ee14a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "94025bea-a759-4c68-8e64-4a6c1bb5d777",
                  "parentUUID": "07db36dd-b273-4cd6-abd7-6a6ab05ee14a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "9b25caae-15c2-42b5-bbe9-05df535e6e39",
                  "parentUUID": "07db36dd-b273-4cd6-abd7-6a6ab05ee14a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nconst fn = () => {\n};\nassert.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "b4e2e7d4-dc7a-41ab-8804-5fdbbb06b6f5",
                  "parentUUID": "07db36dd-b273-4cd6-abd7-6a6ab05ee14a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bea38574-5f7c-48b6-9acb-b1c4a6d0f098",
                "94025bea-a759-4c68-8e64-4a6c1bb5d777",
                "9b25caae-15c2-42b5-bbe9-05df535e6e39",
                "b4e2e7d4-dc7a-41ab-8804-5fdbbb06b6f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7b71531f-63ac-47fb-9e74-7830945600f6",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "c823eaa8-70a2-4577-8eb2-73565fc41fd7",
                  "parentUUID": "7b71531f-63ac-47fb-9e74-7830945600f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n};\nconst deviceA = new NodePyATVDevice(config);\nconst deviceB = new NodePyATVDevice(deviceA.toJSON());\nassert.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "fee7eb17-86b4-4662-8daa-21bdddcf013f",
                  "parentUUID": "7b71531f-63ac-47fb-9e74-7830945600f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c823eaa8-70a2-4577-8eb2-73565fc41fd7",
                "fee7eb17-86b4-4662-8daa-21bdddcf013f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d45a70c-859d-4f1b-8f3d-f497b2e773fe",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "418681a6-3b2d-47ec-b40f-ad783796103d",
                  "parentUUID": "2d45a70c-859d-4f1b-8f3d-f497b2e773fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "418681a6-3b2d-47ec-b40f-ad783796103d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1754a598-60c1-4c43-a766-23a54ebb41da",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "07e2d8f1-7c28-4cbe-b599-881722bef6b4",
                  "parentUUID": "1754a598-60c1-4c43-a766-23a54ebb41da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst result = await device.getState();\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    focusState: null,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    volume: null,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "8be4f9e6-4349-46b9-8221-9da771ade32a",
                  "parentUUID": "1754a598-60c1-4c43-a766-23a54ebb41da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nassert.rejects(async () => {\n    await device.getState();\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "2e0e5ae3-42c4-4b6a-8a58-15798046ed40",
                  "parentUUID": "1754a598-60c1-4c43-a766-23a54ebb41da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nconst secondResult = await device.getState();\nassert.strictEqual(firstResult.dateTime, secondResult.dateTime);\nassert.strictEqual(executions, 1);",
                  "err": {},
                  "uuid": "5c393c24-cc57-4554-bde0-fcfa251b127c",
                  "parentUUID": "1754a598-60c1-4c43-a766-23a54ebb41da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date(new Date().getTime() - 1000).toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nassert.strictEqual(firstResult.position, 27);\nconst secondResult = await device.getState();\nassert.ok(secondResult.position);\nassert.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\nassert.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);",
                  "err": {},
                  "uuid": "8fb341ce-fac8-442d-bc23-5d224292b311",
                  "parentUUID": "1754a598-60c1-4c43-a766-23a54ebb41da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8be4f9e6-4349-46b9-8221-9da771ade32a",
                "2e0e5ae3-42c4-4b6a-8a58-15798046ed40",
                "5c393c24-cc57-4554-bde0-fcfa251b127c",
                "8fb341ce-fac8-442d-bc23-5d224292b311"
              ],
              "failures": [],
              "pending": [
                "07e2d8f1-7c28-4cbe-b599-881722bef6b4"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f207b43-a2e2-4ac0-94a2-2f4548ced74f",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            title: 'Solo: A Star Wars Story'\n        });\n    })\n});\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\ndevice.clearState();\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\nassert.strictEqual(executions, 2);",
                  "err": {},
                  "uuid": "b87d6afd-f176-46f0-91a9-f9287d5ebc4c",
                  "parentUUID": "0f207b43-a2e2-4ac0-94a2-2f4548ced74f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b87d6afd-f176-46f0-91a9-f9287d5ebc4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35152f54-37dd-4789-9103-ab5f55e55b68",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON()\n        });\n    })\n});\nconst result = await device.getDateTime();\nassert.ok(result instanceof Date);",
                  "err": {},
                  "uuid": "2406253a-b114-45e1-af5e-1e8c29b48d2c",
                  "parentUUID": "35152f54-37dd-4789-9103-ab5f55e55b68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2406253a-b114-45e1-af5e-1e8c29b48d2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d16c591b-91b0-4978-9144-90d00122aefc",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            hash: '12345'\n        });\n    })\n});\nconst result = await device.getHash();\nassert.strictEqual(result, '12345');",
                  "err": {},
                  "uuid": "8823b52e-efc6-496f-b3e6-443b25be1dc6",
                  "parentUUID": "d16c591b-91b0-4978-9144-90d00122aefc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8823b52e-efc6-496f-b3e6-443b25be1dc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "80a2fed6-9560-4a1d-93a6-0438dd963a1b",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            media_type: 'video'\n        });\n    })\n});\nconst result = await device.getMediaType();\nassert.deepStrictEqual(result, NodePyATVMediaType.video);\nassert.deepStrictEqual(result, 'video');",
                  "err": {},
                  "uuid": "767fa154-6b23-4f13-b58b-c168bd4742c3",
                  "parentUUID": "80a2fed6-9560-4a1d-93a6-0438dd963a1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "767fa154-6b23-4f13-b58b-c168bd4742c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "60859848-0c90-4cd1-82b0-f2f051f85fc2",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            device_state: 'seeking'\n        });\n    })\n});\nconst result = await device.getDeviceState();\nassert.deepStrictEqual(result, NodePyATVDeviceState.seeking);\nassert.deepStrictEqual(result, 'seeking');",
                  "err": {},
                  "uuid": "1df2047e-7e4f-461f-8cc8-51b3f50e41a4",
                  "parentUUID": "60859848-0c90-4cd1-82b0-f2f051f85fc2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1df2047e-7e4f-461f-8cc8-51b3f50e41a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa067a16-3404-4bf8-a4fb-9cebf4dc928c",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst result = await device.getTitle();\nassert.strictEqual(result, 'My Movie');",
                  "err": {},
                  "uuid": "86c899cc-0f3a-4e8a-83db-5b109a69ec5e",
                  "parentUUID": "fa067a16-3404-4bf8-a4fb-9cebf4dc928c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86c899cc-0f3a-4e8a-83db-5b109a69ec5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81bcc375-dbb9-467f-94fd-026e09585932",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            artist: 'My Artist'\n        });\n    })\n});\nconst result = await device.getArtist();\nassert.strictEqual(result, 'My Artist');",
                  "err": {},
                  "uuid": "bf71de29-2f17-45b2-8a52-c8fa01e5889d",
                  "parentUUID": "81bcc375-dbb9-467f-94fd-026e09585932",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf71de29-2f17-45b2-8a52-c8fa01e5889d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c09217b-55d7-439f-a8d9-bda1b05a2d0f",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            album: 'My ALbum'\n        });\n    })\n});\nconst result = await device.getAlbum();\nassert.strictEqual(result, 'My ALbum');",
                  "err": {},
                  "uuid": "94bd56fd-4297-4c00-8954-8cd08e899490",
                  "parentUUID": "5c09217b-55d7-439f-a8d9-bda1b05a2d0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94bd56fd-4297-4c00-8954-8cd08e899490"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d1a36e72-2b14-4db1-ba34-0f1458f8f90f",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            genre: 'My Genre'\n        });\n    })\n});\nconst result = await device.getGenre();\nassert.strictEqual(result, 'My Genre');",
                  "err": {},
                  "uuid": "9e733a33-3823-4c1b-84dc-4c90ad079592",
                  "parentUUID": "d1a36e72-2b14-4db1-ba34-0f1458f8f90f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e733a33-3823-4c1b-84dc-4c90ad079592"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1cf11b5d-9ae5-4134-84cc-e57512a47bf3",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            total_time: 45\n        });\n    })\n});\nconst result = await device.getTotalTime();\nassert.strictEqual(result, 45);",
                  "err": {},
                  "uuid": "42c50f46-259c-459d-9860-d77924fb6d66",
                  "parentUUID": "1cf11b5d-9ae5-4134-84cc-e57512a47bf3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42c50f46-259c-459d-9860-d77924fb6d66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9cafd3dc-5ec2-477e-b76c-fa7e84d95176",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            position: 30\n        });\n    })\n});\nconst result = await device.getPosition();\nassert.strictEqual(result, 30);",
                  "err": {},
                  "uuid": "4aad5cd2-4fdc-4ffa-b49c-f79f4dfac01c",
                  "parentUUID": "9cafd3dc-5ec2-477e-b76c-fa7e84d95176",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4aad5cd2-4fdc-4ffa-b49c-f79f4dfac01c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea4bedc0-39fb-4b1a-a7a5-a0f3973fb4e1",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            shuffle: 'songs'\n        });\n    })\n});\nconst result = await device.getShuffle();\nassert.deepStrictEqual(result, NodePyATVShuffleState.songs);\nassert.deepStrictEqual(result, 'songs');",
                  "err": {},
                  "uuid": "ddf44aa2-9bde-45bd-9fe4-dee356cfec49",
                  "parentUUID": "ea4bedc0-39fb-4b1a-a7a5-a0f3973fb4e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ddf44aa2-9bde-45bd-9fe4-dee356cfec49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "369313ba-3191-4693-b832-d8c57ab29b4c",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            repeat: 'all'\n        });\n    })\n});\nconst result = await device.getRepeat();\nassert.deepStrictEqual(result, NodePyATVRepeatState.all);\nassert.deepStrictEqual(result, 'all');",
                  "err": {},
                  "uuid": "14c5f2ed-919b-4564-94a6-e1300acbfc90",
                  "parentUUID": "369313ba-3191-4693-b832-d8c57ab29b4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14c5f2ed-919b-4564-94a6-e1300acbfc90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef4e5c1f-e2b3-4689-b3e3-5cf3c1f4e207",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app: 'My App'\n        });\n    })\n});\nconst result = await device.getApp();\nassert.strictEqual(result, 'My App');",
                  "err": {},
                  "uuid": "1a158961-d4b4-45e9-91b1-7a24ca0e1cd7",
                  "parentUUID": "ef4e5c1f-e2b3-4689-b3e3-5cf3c1f4e207",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a158961-d4b4-45e9-91b1-7a24ca0e1cd7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d1013179-2f1b-4fe2-9216-47c3ca94bd2c",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app_id: 'app.example.com'\n        });\n    })\n});\nconst result = await device.getAppId();\nassert.strictEqual(result, 'app.example.com');",
                  "err": {},
                  "uuid": "7a2cb665-5012-4fdc-aae0-9c6ff02b95f5",
                  "parentUUID": "d1013179-2f1b-4fe2-9216-47c3ca94bd2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a2cb665-5012-4fdc-aae0-9c6ff02b95f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "41b65b10-88af-4351-8610-7ead58cf9732",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), ' +\n            'App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), ' +\n            'App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App Store ' +\n            '(com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), ' +\n            'App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ ' +\n            '(com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE ' +\n            '(tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek ' +\n            '(de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), ' +\n            'App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), ' +\n            'App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), ' +\n            'App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), ' +\n            'App: Musik (com.apple.TVMusic)');\n    })\n});\nconst result = await device.listApps();\nassert.strictEqual(result.length, 25);\nassert.strictEqual(result[0].id, 'com.apple.Fitness');\nassert.strictEqual(result[0].name, 'Fitness');",
                  "err": {},
                  "uuid": "84ff243a-f2ea-4457-b607-b044e404b224",
                  "parentUUID": "41b65b10-88af-4351-8610-7ead58cf9732",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84ff243a-f2ea-4457-b607-b044e404b224"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b18dd32-478b-40cf-a7f8-a4bd36317355",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\nawait device.pressKey(NodePyATVKeys.home);",
                  "err": {},
                  "uuid": "be4801b8-dbd1-4518-88d9-b5f63dd6eab1",
                  "parentUUID": "4b18dd32-478b-40cf-a7f8-a4bd36317355",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nawait assert.rejects(async () => {\n    // @ts-ignore\n    await device.pressKey('foo');\n}, /Unsupported key value foo/);",
                  "err": {},
                  "uuid": "af3847f8-3f72-4286-8607-fef57ff9c8f4",
                  "parentUUID": "4b18dd32-478b-40cf-a7f8-a4bd36317355",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"failure\"}');\n    })\n});\nawait assert.rejects(async () => {\n    await device.pressKey(NodePyATVKeys.home);\n}, /Unable to parse pyatv response/);",
                  "err": {},
                  "uuid": "5f066262-bb95-4f90-b32b-8eaa1ba3e5be",
                  "parentUUID": "4b18dd32-478b-40cf-a7f8-a4bd36317355",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be4801b8-dbd1-4518-88d9-b5f63dd6eab1",
                "af3847f8-3f72-4286-8607-fef57ff9c8f4",
                "5f066262-bb95-4f90-b32b-8eaa1ba3e5be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7507fb9f-c630-43a6-99d0-5e63b17bb204",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "0ff3a82e-91db-4684-8d62-e95ef5ea8e72",
                  "parentUUID": "7507fb9f-c630-43a6-99d0-5e63b17bb204",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ff3a82e-91db-4684-8d62-e95ef5ea8e72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5369ed4d-639c-439e-a674-c2a7c252205e",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "1a580c91-75f9-480a-b0e5-6a1d9de56be6",
                  "parentUUID": "5369ed4d-639c-439e-a674-c2a7c252205e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a580c91-75f9-480a-b0e5-6a1d9de56be6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f87229a5-f860-4662-b33f-dbf5c36409e1",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9d8473a3-5786-4554-acbd-aa65f4581d80",
                  "parentUUID": "f87229a5-f860-4662-b33f-dbf5c36409e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d8473a3-5786-4554-acbd-aa65f4581d80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a09a4bcb-5c0f-4d36-a762-7a5871ac1c3e",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9b6395ed-8dd3-4c6d-bd5d-d86deca33fb4",
                  "parentUUID": "a09a4bcb-5c0f-4d36-a762-7a5871ac1c3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b6395ed-8dd3-4c6d-bd5d-d86deca33fb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c4ccec7-10fa-4a02-9320-dc98f5cd286e",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "8ff7fc72-a292-4cf4-8da7-99dfa218508f",
                  "parentUUID": "1c4ccec7-10fa-4a02-9320-dc98f5cd286e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ff7fc72-a292-4cf4-8da7-99dfa218508f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f8e3ff4-922d-462e-9a89-b08df4a2211f",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "0c05ccd2-810c-4527-908d-a8399a8deec0",
                  "parentUUID": "0f8e3ff4-922d-462e-9a89-b08df4a2211f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c05ccd2-810c-4527-908d-a8399a8deec0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9169bf17-1e66-4707-99d0-bc060b8c0fdd",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "659142b0-0bd2-4fc3-a36b-59ab855b4db7",
                  "parentUUID": "9169bf17-1e66-4707-99d0-bc060b8c0fdd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "659142b0-0bd2-4fc3-a36b-59ab855b4db7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd731850-eec9-4e8a-8d9e-ddd50f0dedad",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "ecc3e0a8-cef3-4be3-9a7c-434a88f60b49",
                  "parentUUID": "cd731850-eec9-4e8a-8d9e-ddd50f0dedad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecc3e0a8-cef3-4be3-9a7c-434a88f60b49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8792d6f8-0780-43ed-95d4-be32a9c618a2",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "4b9fd2c8-839a-4407-a28c-877300241f60",
                  "parentUUID": "8792d6f8-0780-43ed-95d4-be32a9c618a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b9fd2c8-839a-4407-a28c-877300241f60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "078aaaca-b4d4-4001-8cc0-909686db393c",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "10036908-4497-4ff3-890d-f61aedb50fff",
                  "parentUUID": "078aaaca-b4d4-4001-8cc0-909686db393c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10036908-4497-4ff3-890d-f61aedb50fff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23599b99-ab6e-44af-ad2d-07ba85f9a3b6",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "4b76274f-45a7-4ff7-9803-9c762cc52b9b",
                  "parentUUID": "23599b99-ab6e-44af-ad2d-07ba85f9a3b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b76274f-45a7-4ff7-9803-9c762cc52b9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a48898e-ee48-4335-a52b-d9eb2fa1125f",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "7d85c682-513a-4fe9-9594-4762a81a90dd",
                  "parentUUID": "7a48898e-ee48-4335-a52b-d9eb2fa1125f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d85c682-513a-4fe9-9594-4762a81a90dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74571663-d08b-4afa-a392-2c49b4b4ea92",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "77c54788-f209-4321-9f75-089c85a86961",
                  "parentUUID": "74571663-d08b-4afa-a392-2c49b4b4ea92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77c54788-f209-4321-9f75-089c85a86961"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e40c87d6-6e3c-4606-95b6-c8310485a587",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "b96f90a6-83d6-487d-aa58-4afda21fcb35",
                  "parentUUID": "e40c87d6-6e3c-4606-95b6-c8310485a587",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b96f90a6-83d6-487d-aa58-4afda21fcb35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a87bbe7-fff3-44e1-8d84-21673e370243",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "4211507e-eadc-425d-ba37-6e155722a71d",
                  "parentUUID": "3a87bbe7-fff3-44e1-8d84-21673e370243",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4211507e-eadc-425d-ba37-6e155722a71d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e968dd93-bbec-4874-a0f3-bee68495d6cb",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "67a4f9b3-6215-4178-9e81-33137af03710",
                  "parentUUID": "e968dd93-bbec-4874-a0f3-bee68495d6cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67a4f9b3-6215-4178-9e81-33137af03710"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fad401e5-0a7b-4c28-857c-4cdfa52ad8ad",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "e56b2740-4e0c-4460-bdc6-11a465b8d9f6",
                  "parentUUID": "fad401e5-0a7b-4c28-857c-4cdfa52ad8ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e56b2740-4e0c-4460-bdc6-11a465b8d9f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79effe71-2391-415e-a5a9-9c3a7faf59c5",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "295412b9-68f9-413b-8e31-c83dc6f5c50e",
                  "parentUUID": "79effe71-2391-415e-a5a9-9c3a7faf59c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "295412b9-68f9-413b-8e31-c83dc6f5c50e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0760bbe0-060f-42e5-b96a-2b16450fba30",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "c0ab898b-989f-4a83-95e5-ec7e5f56a16c",
                  "parentUUID": "0760bbe0-060f-42e5-b96a-2b16450fba30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0ab898b-989f-4a83-95e5-ec7e5f56a16c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c0c8e404-3c7a-4c68-a01d-ce4d8d7cfd58",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "45dbad20-06c3-429d-9641-b4eb12f44c1a",
                  "parentUUID": "c0c8e404-3c7a-4c68-a01d-ce4d8d7cfd58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45dbad20-06c3-429d-9641-b4eb12f44c1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "db7824d4-fd3c-4c89-ba35-450b571458b2",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "4ba5487a-9e86-49b7-b5af-9132ae6ebc9d",
                  "parentUUID": "db7824d4-fd3c-4c89-ba35-450b571458b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ba5487a-9e86-49b7-b5af-9132ae6ebc9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae89e882-36f6-44d8-a3b1-ba784852d643",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "cc4c5414-b162-4ad7-9286-56be93dafd93",
                  "parentUUID": "ae89e882-36f6-44d8-a3b1-ba784852d643",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc4c5414-b162-4ad7-9286-56be93dafd93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ed633556-fd00-4f26-92d9-5a6677fad7d6",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "0f911fba-d0fc-4c3c-a926-6e5ae2664a36",
                  "parentUUID": "ed633556-fd00-4f26-92d9-5a6677fad7d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f911fba-d0fc-4c3c-a926-6e5ae2664a36"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1199a2c0-1669-4960-8db5-6f39e491f246",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('');\n    })\n});\nawait device.launchApp('com.apple.TVShows');",
                  "err": {},
                  "uuid": "75bc8498-2556-4225-bafd-c0816340a3f4",
                  "parentUUID": "1199a2c0-1669-4960-8db5-6f39e491f246",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75bc8498-2556-4225-bafd-c0816340a3f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "458daab2-8cc3-4e0d-a266-9ac02fc85616",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 490,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000);\nconst result = await NodePyATVInstance.version();\nif (result.pyatv === null) {\n    throw new Error('No version found for pyatv. Is it installed in test environment?');\n}\nassert.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\nassert.ok(result.pyatv.length >= 5, 'result.pyatv has content');\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "5990ee94-0784-4934-8f0e-514f88d93ca8",
                  "parentUUID": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.code(1);\n        cp.end('atvremote 0.7.4');\n    })\n});\nassert.ok(result.pyatv);\nassert.strictEqual(result.pyatv, '0.7.4');",
                  "err": {},
                  "uuid": "bb4bc806-fbd9-42a5-a289-e090f6b477d5",
                  "parentUUID": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "0cde2947-e7ec-4b74-8381-1dd12501bec9",
                  "parentUUID": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    atvremotePath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "7eb59dc1-870b-4c14-a891-53147dc8b055",
                  "parentUUID": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "ef7d6f96-6527-486c-8f3e-454146ab4736",
                  "parentUUID": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: () => {\n        // no debug log\n    },\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "cbe86a04-e7a2-4394-9d33-d75e43d6d962",
                  "parentUUID": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "7636e43f-d89e-47b9-9e92-538ac2926d12",
                  "parentUUID": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.error(new Error('Hello world!')).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "1e54dacd-4dd5-4818-af70-d0dfe3e0f9a8",
                  "parentUUID": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('atvremote 42').code(1).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "5888d70c-eb07-44b2-b55a-fe1a9345420f",
                  "parentUUID": "16c8b71d-dc3d-4f20-8846-18cbc4c48d1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5990ee94-0784-4934-8f0e-514f88d93ca8",
                "bb4bc806-fbd9-42a5-a289-e090f6b477d5",
                "0cde2947-e7ec-4b74-8381-1dd12501bec9",
                "7eb59dc1-870b-4c14-a891-53147dc8b055",
                "ef7d6f96-6527-486c-8f3e-454146ab4736",
                "cbe86a04-e7a2-4394-9d33-d75e43d6d962",
                "7636e43f-d89e-47b9-9e92-538ac2926d12",
                "1e54dacd-4dd5-4818-af70-d0dfe3e0f9a8",
                "5888d70c-eb07-44b2-b55a-fe1a9345420f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 502,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5cd44878-8621-42eb-b4f7-f186f642ec7c",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5851,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12000);\nawait NodePyATVInstance.check();",
                  "err": {},
                  "uuid": "1127eaae-0753-4ee5-bf17-c16bb27348d7",
                  "parentUUID": "5cd44878-8621-42eb-b4f7-f186f642ec7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "3bc6c9db-80bf-4d16-b74d-0145b67dc32f",
                  "parentUUID": "5cd44878-8621-42eb-b4f7-f186f642ec7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('atvremote 0.5.1').code(1).end();\n        })\n    });\n}, /Found pyatv, but unforunately it's too old. Please update pyatv./);",
                  "err": {},
                  "uuid": "0db5f98e-9729-4098-a241-053c7c9de61a",
                  "parentUUID": "5cd44878-8621-42eb-b4f7-f186f642ec7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i = 0;\nawait assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            if (i === 0) {\n                cp.stdout('atvremote 0.7.0').code(1).end();\n                i++;\n            }\n            else {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            }\n        })\n    });\n}, /Unable to scan for devices/);",
                  "err": {},
                  "uuid": "1b2db470-fb91-4f34-9e80-b0eabd797246",
                  "parentUUID": "5cd44878-8621-42eb-b4f7-f186f642ec7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1127eaae-0753-4ee5-bf17-c16bb27348d7",
                "3bc6c9db-80bf-4d16-b74d-0145b67dc32f",
                "0db5f98e-9729-4098-a241-053c7c9de61a",
                "1b2db470-fb91-4f34-9e80-b0eabd797246"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5858,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5428,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(10000);\nconst result = await NodePyATVInstance.find();\nassert.ok(Array.isArray(result));",
                  "err": {},
                  "uuid": "f1c1cac8-4b39-4d1d-8e0a-3d2ec5af1cc2",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({\n    atvscriptPath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "3a01326d-ba7b-4494-86de-308d713ff2de",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stderr('Hello World!').code(1).end();\n        })\n    });\n}, /Unable to execute request/);",
                  "err": {},
                  "uuid": "4afe7749-ff52-4262-9795-2ed98ed4d3a6",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).code(1).end();\n        })\n    });\n}, /Hello world!/);",
                  "err": {},
                  "uuid": "4fde255d-9129-448f-bd1a-746a89bfb44b",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            // Example output from @maxileith\n            // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n            cp.stdout({\n                result: 'failure',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                error: 'Task exception was never retrieved',\n                exception: '[Errno 113] Connect call failed'\n            }).code(1).end();\n        })\n    });\n}, /Unable to find any devices, but received 1 error: /);",
                  "err": {},
                  "uuid": "ae417bf8-f155-48cb-bae4-35265af2f54e",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout(JSON.stringify({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).substr(1)).end();\n        })\n    });\n}, /Unable to parse result/);",
                  "err": {},
                  "uuid": "b1c3f64c-c78e-4d8c-ab6f-c6b1717fb8bf",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'error'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "10b542cf-6437-4992-8570-2e60d1eae971",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "86611c0b-3f05-477d-ade1-d21c1490cfeb",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx'\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, undefined);\nassert.strictEqual(devices[0].modelName, undefined);\nassert.strictEqual(devices[0].os, undefined);\nassert.strictEqual(devices[0].version, undefined);\nassert.deepStrictEqual(devices[0].services, undefined);",
                  "err": {},
                  "uuid": "bdc9cfcc-014b-4756-bcff-612fc573e925",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx',\n                    device_info: {\n                        'model': 'Gen4K',\n                        'model_str': 'Apple TV 4K',\n                        'operating_system': 'TvOS',\n                        'version': '15.5.1'\n                    },\n                    services: [\n                        {\n                            protocol: 'mrp',\n                            port: 49152\n                        },\n                        {\n                            protocol: 'airplay',\n                            port: 7000\n                        }\n                    ]\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, 'Gen4K');\nassert.strictEqual(devices[0].modelName, 'Apple TV 4K');\nassert.strictEqual(devices[0].os, 'TvOS');\nassert.strictEqual(devices[0].version, '15.5.1');\nassert.deepStrictEqual(devices[0].services, [\n    {\n        protocol: NodePyATVProtocol.mrp,\n        port: 49152\n    },\n    {\n        protocol: NodePyATVProtocol.airplay,\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "6887e013-b7f4-4808-add2-c75ce4580623",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 4);\nassert.strictEqual(devices[0].name, 'Living Room');\nassert.strictEqual(devices[0].host, '10.0.0.30');\nassert.strictEqual(devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(devices[1].name, 'Kitchen');\nassert.strictEqual(devices[1].host, '10.0.0.79');\nassert.strictEqual(devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(devices[2].name, 'Bedroom');\nassert.strictEqual(devices[2].host, '10.0.0.20');\nassert.strictEqual(devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(devices[3].name, 'Basement');\nassert.strictEqual(devices[3].host, '10.0.0.156');\nassert.strictEqual(devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');",
                  "err": {},
                  "uuid": "1b802ebf-4a79-4de9-ae5c-9142e314a381",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n}, true);\nassert.strictEqual(response.devices.length, 4);\nassert.strictEqual(response.errors.length, 2);\nassert.strictEqual(response.devices[0].name, 'Living Room');\nassert.strictEqual(response.devices[0].host, '10.0.0.30');\nassert.strictEqual(response.devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(response.devices[1].name, 'Kitchen');\nassert.strictEqual(response.devices[1].host, '10.0.0.79');\nassert.strictEqual(response.devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(response.devices[2].name, 'Bedroom');\nassert.strictEqual(response.devices[2].host, '10.0.0.20');\nassert.strictEqual(response.devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(response.devices[3].name, 'Basement');\nassert.strictEqual(response.devices[3].host, '10.0.0.156');\nassert.strictEqual(response.devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');\nassert.strictEqual(response.errors[0].exception, '[Errno 113] Connect call failed (\\'10.0.0.232\\', 32498)');\nassert.strictEqual(response.errors[1].exception, '[Errno 113] Connect call failed (\\'10.0.0.229\\', 32498)');",
                  "err": {},
                  "uuid": "8aba824e-45e3-45ae-a3a2-045eaba21881",
                  "parentUUID": "3bb7a3cb-ad23-4acf-8d56-9571788f7b54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1c1cac8-4b39-4d1d-8e0a-3d2ec5af1cc2",
                "3a01326d-ba7b-4494-86de-308d713ff2de",
                "4afe7749-ff52-4262-9795-2ed98ed4d3a6",
                "4fde255d-9129-448f-bd1a-746a89bfb44b",
                "ae417bf8-f155-48cb-bae4-35265af2f54e",
                "b1c3f64c-c78e-4d8c-ab6f-c6b1717fb8bf",
                "10b542cf-6437-4992-8570-2e60d1eae971",
                "86611c0b-3f05-477d-ade1-d21c1490cfeb",
                "bdc9cfcc-014b-4756-bcff-612fc573e925",
                "6887e013-b7f4-4808-add2-c75ce4580623",
                "1b802ebf-4a79-4de9-ae5c-9142e314a381",
                "8aba824e-45e3-45ae-a3a2-045eaba21881"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5444,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e3d343a-3f06-43d7-a2d2-b2065899403c",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = NodePyATVInstance.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert.strictEqual(device.host, '192.168.178.6');\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "3f859600-2eb9-4b94-b8be-1438c71485e8",
                  "parentUUID": "7e3d343a-3f06-43d7-a2d2-b2065899403c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f859600-2eb9-4b94-b8be-1438c71485e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1554b077-9f3c-4eb7-89ac-52ce0807400d",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait i.version({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "de2513b9-edd9-403a-b186-cf428c68644d",
                  "parentUUID": "1554b077-9f3c-4eb7-89ac-52ce0807400d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de2513b9-edd9-403a-b186-cf428c68644d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6caa10a5-d84c-4927-bf04-22e111a2e8df",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait assert.rejects(async () => {\n    await i.check({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "4199bee1-97eb-48bb-acb0-b980931ba0ab",
                  "parentUUID": "6caa10a5-d84c-4927-bf04-22e111a2e8df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4199bee1-97eb-48bb-acb0-b980931ba0ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9fdd847-f598-4081-aaab-d4c64df84224",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvscriptPath: 'test' });\nawait i.find({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "4a74c502-33d8-4f56-b1da-5fd55937e8b4",
                  "parentUUID": "d9fdd847-f598-4081-aaab-d4c64df84224",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a74c502-33d8-4f56-b1da-5fd55937e8b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48b32cab-d9b3-4147-b0da-e487f42dcbcf",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ debug: true });\nconst d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\nassert.deepStrictEqual(d.debug, true);",
                  "err": {},
                  "uuid": "31a9d0ee-e70c-4fb1-b8a4-8538afb80f6f",
                  "parentUUID": "48b32cab-d9b3-4147-b0da-e487f42dcbcf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31a9d0ee-e70c-4fb1-b8a4-8538afb80f6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol);",
                  "err": {},
                  "uuid": "181272fc-a887-4870-adf1-e7d7557664d1",
                  "parentUUID": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType);",
                  "err": {},
                  "uuid": "e3a27592-b130-4cf5-b8d1-619c838a25a9",
                  "parentUUID": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "02ab2884-40b4-41d7-85c2-0ed33bb74064",
                  "parentUUID": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "43243a9d-1cb4-4d26-afd9-f1c347580244",
                  "parentUUID": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "ab9a46b4-33e4-4019-bf1e-7d47de09092c",
                  "parentUUID": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "2de0c6ed-5320-4cde-b25d-1369a0160047",
                  "parentUUID": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys);",
                  "err": {},
                  "uuid": "9b10a1ca-212d-48e8-ac6d-8dbd635dede9",
                  "parentUUID": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState);",
                  "err": {},
                  "uuid": "6a5b97dd-621a-4d75-a93d-091606d9de61",
                  "parentUUID": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState);",
                  "err": {},
                  "uuid": "8add4432-ac70-4085-aa9d-417a6089cbb4",
                  "parentUUID": "a39deda1-f2da-4bcf-b4db-368dc53765f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "181272fc-a887-4870-adf1-e7d7557664d1",
                "e3a27592-b130-4cf5-b8d1-619c838a25a9",
                "02ab2884-40b4-41d7-85c2-0ed33bb74064",
                "43243a9d-1cb4-4d26-afd9-f1c347580244",
                "ab9a46b4-33e4-4019-bf1e-7d47de09092c",
                "2de0c6ed-5320-4cde-b25d-1369a0160047",
                "9b10a1ca-212d-48e8-ac6d-8dbd635dede9",
                "6a5b97dd-621a-4d75-a93d-091606d9de61",
                "8add4432-ac70-4085-aa9d-417a6089cbb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b846b0f-aec0-4443-a2ff-75ae85c8d982",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c6024b56-69a5-4bc9-b5a6-2b86b739c954",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = addRequestId();\nassert.strictEqual(typeof id, 'string');\nremoveRequestId(id);",
                  "err": {},
                  "uuid": "e0d8ecdc-bb98-4fde-b672-d55e6f66392e",
                  "parentUUID": "c6024b56-69a5-4bc9-b5a6-2b86b739c954",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId('FOO');",
                  "err": {},
                  "uuid": "874a23e2-3d9f-4503-9834-646fcb93fe56",
                  "parentUUID": "c6024b56-69a5-4bc9-b5a6-2b86b739c954",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0d8ecdc-bb98-4fde-b672-d55e6f66392e",
                "874a23e2-3d9f-4503-9834-646fcb93fe56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8fe3ec59-fc8b-4d22-afce-7385eba6a8bf",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "ab6a942f-7eb1-4c7f-bf4e-0e58882954d8",
                  "parentUUID": "8fe3ec59-fc8b-4d22-afce-7385eba6a8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "dd9fede9-1b44-4514-a7a2-6f8fbeaae684",
                  "parentUUID": "8fe3ec59-fc8b-4d22-afce-7385eba6a8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "f3bf71fd-2038-4b94-a2c7-6b3e6870c4f0",
                  "parentUUID": "8fe3ec59-fc8b-4d22-afce-7385eba6a8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "9db1d6cb-9c37-4159-b365-a59b558251bb",
                  "parentUUID": "8fe3ec59-fc8b-4d22-afce-7385eba6a8bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "3fdf6b44-627c-4666-ae55-169e9c1f142a",
                  "parentUUID": "8fe3ec59-fc8b-4d22-afce-7385eba6a8bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab6a942f-7eb1-4c7f-bf4e-0e58882954d8",
                "dd9fede9-1b44-4514-a7a2-6f8fbeaae684",
                "f3bf71fd-2038-4b94-a2c7-6b3e6870c4f0",
                "9db1d6cb-9c37-4159-b365-a59b558251bb",
                "3fdf6b44-627c-4666-ae55-169e9c1f142a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6207a938-37a1-488b-9c3d-ba8b6d745310",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "bf38bb87-9d7b-40af-8871-c0b8394b5f6f",
                  "parentUUID": "6207a938-37a1-488b-9c3d-ba8b6d745310",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "c44db406-0119-49c2-b2f4-ccad85e9554e",
                  "parentUUID": "6207a938-37a1-488b-9c3d-ba8b6d745310",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "d6830ee6-c793-4745-be31-08dcc8cdb7c5",
                  "parentUUID": "6207a938-37a1-488b-9c3d-ba8b6d745310",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "0c27f15c-af45-4024-b5fa-e49b5200f5d1",
                  "parentUUID": "6207a938-37a1-488b-9c3d-ba8b6d745310",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf38bb87-9d7b-40af-8871-c0b8394b5f6f",
                "c44db406-0119-49c2-b2f4-ccad85e9554e",
                "d6830ee6-c793-4745-be31-08dcc8cdb7c5",
                "0c27f15c-af45-4024-b5fa-e49b5200f5d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93f07494-ee02-4ba9-ae13-944a5e7e7479",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters();\nassert.deepEqual(result, []);",
                  "err": {},
                  "uuid": "826e02c8-b3f2-4789-90cf-6ae591f40641",
                  "parentUUID": "93f07494-ee02-4ba9-ae13-944a5e7e7479",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    host: '192.168.178.2'\n});\nassert.deepEqual(result, ['-s', '192.168.178.2']);",
                  "err": {},
                  "uuid": "1e65eec1-0f35-4ba6-8ac5-a5eff046f23d",
                  "parentUUID": "93f07494-ee02-4ba9-ae13-944a5e7e7479",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    hosts: ['192.168.178.2', '192.168.178.3'],\n    id: '****',\n    protocol: NodePyATVProtocol.mrp,\n    dmapCredentials: '****',\n    mrpCredentials: '****',\n    airplayCredentials: '****',\n    companionCredentials: '1234',\n    raopCredentials: '::foo:'\n});\nassert.deepEqual(result, [\n    '-s', '192.168.178.2,192.168.178.3',\n    '-i', '****',\n    '--protocol', 'mrp',\n    '--dmap-credentials', '****',\n    '--mrp-credentials', '****',\n    '--airplay-credentials', '****',\n    '--companion-credentials', '1234',\n    '--raop-credentials', '::foo:'\n]);",
                  "err": {},
                  "uuid": "b558bc3a-c684-43a6-b282-0f47d51bebf8",
                  "parentUUID": "93f07494-ee02-4ba9-ae13-944a5e7e7479",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "826e02c8-b3f2-4789-90cf-6ae591f40641",
                "1e65eec1-0f35-4ba6-8ac5-a5eff046f23d",
                "b558bc3a-c684-43a6-b282-0f47d51bebf8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d7d732a0-5426-4699-a96f-f2e7fdf2d7ee",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "f977324e-24c6-448a-9db0-9f63ca4eaa3a",
                  "parentUUID": "d7d732a0-5426-4699-a96f-f2e7fdf2d7ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = parseState(null, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "accf0118-e358-442f-8f31-8944a8b1eaf7",
                  "parentUUID": "d7d732a0-5426-4699-a96f-f2e7fdf2d7ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "39099e38-3270-4b01-8dd6-dd8405888013",
                  "parentUUID": "d7d732a0-5426-4699-a96f-f2e7fdf2d7ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert.throws(() => {\n    parseState(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "bc0b1246-9df0-4148-9e83-f53761ba2af2",
                  "parentUUID": "d7d732a0-5426-4699-a96f-f2e7fdf2d7ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "ee027e24-d20e-4ca2-931e-a3637a5c0396",
                  "parentUUID": "d7d732a0-5426-4699-a96f-f2e7fdf2d7ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "88055c75-5e9b-4b6f-b8d1-235a89dbf4db",
                  "parentUUID": "d7d732a0-5426-4699-a96f-f2e7fdf2d7ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "c3736dd1-76db-4575-b022-e738026c4941",
                  "parentUUID": "d7d732a0-5426-4699-a96f-f2e7fdf2d7ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f977324e-24c6-448a-9db0-9f63ca4eaa3a",
                "accf0118-e358-442f-8f31-8944a8b1eaf7",
                "39099e38-3270-4b01-8dd6-dd8405888013",
                "bc0b1246-9df0-4148-9e83-f53761ba2af2",
                "ee027e24-d20e-4ca2-931e-a3637a5c0396",
                "88055c75-5e9b-4b6f-b8d1-235a89dbf4db",
                "c3736dd1-76db-4575-b022-e738026c4941"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}