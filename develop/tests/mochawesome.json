{
  "stats": {
    "suites": 102,
    "tests": 174,
    "passes": 172,
    "pending": 2,
    "failures": 0,
    "start": "2025-10-21T14:07:35.570Z",
    "end": "2025-10-21T14:07:47.803Z",
    "duration": 12233,
    "testsRegistered": 174,
    "passPercent": 100,
    "pendingPercent": 1.1494252873563218,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ca1eafbd-e61e-459b-81be-323349b3ecd6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ab67059b-b8d1-4d9e-86c6-519684a745d2",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7daf24ee-2792-485b-b782-3317ac166c50",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "211230a3-9c6c-4833-bc4f-ded86f69bbfa",
                  "parentUUID": "7daf24ee-2792-485b-b782-3317ac166c50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "211230a3-9c6c-4833-bc4f-ded86f69bbfa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6210e2b5-af7e-47e3-9e18-a8e87a2b9905",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "d081f108-32f7-4d7e-8c7e-b97ba1957e73",
                  "parentUUID": "6210e2b5-af7e-47e3-9e18-a8e87a2b9905",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d081f108-32f7-4d7e-8c7e-b97ba1957e73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18a87bd2-01f4-49ad-b9d5-56215ad0a662",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "615dede1-bdb0-4bce-90f0-157162c9fa49",
                  "parentUUID": "18a87bd2-01f4-49ad-b9d5-56215ad0a662",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "615dede1-bdb0-4bce-90f0-157162c9fa49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1e96686-2e36-4fcc-ba5c-3e21e8552edc",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "7acde13a-e7cc-42fd-bf29-2852615cae0c",
                  "parentUUID": "a1e96686-2e36-4fcc-ba5c-3e21e8552edc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7acde13a-e7cc-42fd-bf29-2852615cae0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9229a3f8-8214-48fb-ba57-19f13ae6294a",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new import_device_event.default({device,key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "d9a2dda3-fd4b-46e9-baa3-0ff4a8d169c3",
                  "parentUUID": "9229a3f8-8214-48fb-ba57-19f13ae6294a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9a2dda3-fd4b-46e9-baa3-0ff4a8d169c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a1cdcac5-aece-40f0-8bed-9340aae4f623",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0552e019-ebe4-423b-8429-2665f396e492",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "0d7cecfa-a408-490a-9242-6084f1071484",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "2f970e90-77bc-4057-ad1a-b8d81e27f68b",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);import_assert.default.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "93c8fca4-2cc4-40c2-8634-eb2dbe6ab58a",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{import_assert.default.ok(error instanceof Error);import_assert.default.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "8eb21fc5-d795-4921-9da9-78fcaf4fa49a",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);import_assert.default.strictEqual(spawnCounter,2);import_assert.default.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "5dfd6877-79bb-4034-b041-4e14626478e9",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);import_assert.default.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "7789c5b7-9ff6-4403-a177-3f4cdf3ac27d",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "cb789686-17f6-4637-80c9-558d2d1fcc6b",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "616a38c0-6ed0-4418-9d1b-f157d50a2e56",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),focus_state:\"unfocused\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"focusState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"unfocused\");import_assert.default.strictEqual(event.newValue,import_types.NodePyATVFocusState.unfocused);import_assert.default.strictEqual(event.value,\"unfocused\");import_assert.default.strictEqual(event.value,import_types.NodePyATVFocusState.unfocused);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "26968e19-998a-4a5b-b872-a3cc6e5d498a",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),output_devices:[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}],result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"outputDevices\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.deepStrictEqual(event.newValue,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.value,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "914d1afd-ea08-4b2f-8a25-ed22802180b3",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),result:\"success\",volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"volume\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,20);import_assert.default.strictEqual(event.value,20);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "abceae54-fc85-4b26-b6cd-c6871ac4a338",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),foo:\"bar\",result:\"success\"});cp.end()})});device.on(\"update\",event=>{import_assert.default.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "a6912939-f614-4351-9d2c-5d7209f498fa",
                  "parentUUID": "0552e019-ebe4-423b-8429-2665f396e492",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d7cecfa-a408-490a-9242-6084f1071484",
                "2f970e90-77bc-4057-ad1a-b8d81e27f68b",
                "93c8fca4-2cc4-40c2-8634-eb2dbe6ab58a",
                "8eb21fc5-d795-4921-9da9-78fcaf4fa49a",
                "5dfd6877-79bb-4034-b041-4e14626478e9",
                "7789c5b7-9ff6-4403-a177-3f4cdf3ac27d",
                "cb789686-17f6-4637-80c9-558d2d1fcc6b",
                "616a38c0-6ed0-4418-9d1b-f157d50a2e56",
                "26968e19-998a-4a5b-b872-a3cc6e5d498a",
                "914d1afd-ea08-4b2f-8a25-ed22802180b3",
                "abceae54-fc85-4b26-b6cd-c6871ac4a338",
                "a6912939-f614-4351-9d2c-5d7209f498fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 67,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d92e4b14-c024-448b-9c05-417ecf6e8d33",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "5785960c-135d-4de2-8279-cc0cc64f5f6b",
                  "parentUUID": "d92e4b14-c024-448b-9c05-417ecf6e8d33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "4cc84ae0-6c08-4238-9b39-9662931276d6",
                  "parentUUID": "d92e4b14-c024-448b-9c05-417ecf6e8d33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "4a9f4174-2d49-4eda-b930-b1878ecb0cc5",
                  "parentUUID": "d92e4b14-c024-448b-9c05-417ecf6e8d33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "993b9766-f01a-402f-8751-ef72e2149652",
                  "parentUUID": "d92e4b14-c024-448b-9c05-417ecf6e8d33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5785960c-135d-4de2-8279-cc0cc64f5f6b",
                "4cc84ae0-6c08-4238-9b39-9662931276d6",
                "4a9f4174-2d49-4eda-b930-b1878ecb0cc5"
              ],
              "failures": [],
              "pending": [
                "993b9766-f01a-402f-8751-ef72e2149652"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1fdd449-45eb-42ca-919b-34387223ada2",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "3eb75f4c-3517-4a1a-8265-9499493954c6",
                  "parentUUID": "e1fdd449-45eb-42ca-919b-34387223ada2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3eb75f4c-3517-4a1a-8265-9499493954c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16fdab25-dc1e-43bd-80e9-e0d3a5dafc26",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const event=new import_lib.NodePyATVDeviceEvent({device,key:\"dateTime\",new:\"bar\",old:\"foo\"});let executions=0;device.once(\"test\",e=>{executions++;import_assert.default.strictEqual(e,event);import_assert.default.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "254827e9-d063-4f1c-9e89-8726215eebfb",
                  "parentUUID": "16fdab25-dc1e-43bd-80e9-e0d3a5dafc26",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "254827e9-d063-4f1c-9e89-8726215eebfb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "296f54bf-f3f3-4e25-bbee-e0867d843889",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "93de6f66-7038-478f-842e-d3c33f838d82",
                  "parentUUID": "296f54bf-f3f3-4e25-bbee-e0867d843889",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93de6f66-7038-478f-842e-d3c33f838d82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c30ae0cd-ede8-41bc-af92-6ec7cd3a7ae5",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();import_assert.default.ok(typeof result,\"number\");import_assert.default.ok(result>=10)",
                  "err": {},
                  "uuid": "67de0c13-63a1-4f8a-b362-576b54f5e76b",
                  "parentUUID": "c30ae0cd-ede8-41bc-af92-6ec7cd3a7ae5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67de0c13-63a1-4f8a-b362-576b54f5e76b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa329628-f66f-4853-86ab-a4b22e14b230",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "39d2a4d7-e966-4f92-a956-cea58a5fffe6",
                  "parentUUID": "aa329628-f66f-4853-86ab-a4b22e14b230",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39d2a4d7-e966-4f92-a956-cea58a5fffe6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5febd026-6068-47c7-8009-6b6e04eca42a",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "ea6a792c-cde2-4476-b61e-434e1f4e612c",
                  "parentUUID": "5febd026-6068-47c7-8009-6b6e04eca42a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea6a792c-cde2-4476-b61e-434e1f4e612c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ca18b31-261d-4f3c-a579-7d662531428a",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "f02d3c61-786a-46d3-a9e8-9ad417daa378",
                  "parentUUID": "3ca18b31-261d-4f3c-a579-7d662531428a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f02d3c61-786a-46d3-a9e8-9ad417daa378"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df5ac862-1684-467b-9ada-3c49f5859013",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "75b18af6-734d-48cf-a08e-7b07c2e2b6a7",
                  "parentUUID": "df5ac862-1684-467b-9ada-3c49f5859013",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75b18af6-734d-48cf-a08e-7b07c2e2b6a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1efa10b7-7437-4db3-9e88-cf02e81551ac",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "1255b131-57bd-4e95-91f4-3d0a400066ab",
                  "parentUUID": "1efa10b7-7437-4db3-9e88-cf02e81551ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1255b131-57bd-4e95-91f4-3d0a400066ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ac80993-b701-44cc-909b-b2550ad7df68",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "9facfff5-3d41-40ff-86db-74bd11b201b4",
                  "parentUUID": "7ac80993-b701-44cc-909b-b2550ad7df68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9facfff5-3d41-40ff-86db-74bd11b201b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "72d59fa4-78c9-4e93-bf3c-4de0cedfb72c",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1eb63aff-1f8f-462f-8ec6-3c684e97a848",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "bd91c405-708c-4c05-b20c-f667a42f3f8f",
                  "parentUUID": "1eb63aff-1f8f-462f-8ec6-3c684e97a848",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd91c405-708c-4c05-b20c-f667a42f3f8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e100b31f-4a53-4a0b-bc7f-27da688a1718",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "14158139-c8b8-4157-a97e-adfdddf10206",
                  "parentUUID": "e100b31f-4a53-4a0b-bc7f-27da688a1718",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14158139-c8b8-4157-a97e-adfdddf10206"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a885a676-b2d0-4ef3-b725-e5a240443536",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "c4beffe6-f334-4ed4-b7cf-6c109c8accdc",
                  "parentUUID": "a885a676-b2d0-4ef3-b725-e5a240443536",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4beffe6-f334-4ed4-b7cf-6c109c8accdc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0b275732-bbba-4c92-81b7-cfa9f7550e4d",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"],host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "59e278cf-9cb4-4d1d-a9e2-05a0275102fc",
                  "parentUUID": "0b275732-bbba-4c92-81b7-cfa9f7550e4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59e278cf-9cb4-4d1d-a9e2-05a0275102fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a3e5fbc-cb12-4e14-82b3-ef5bc261569b",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.strictEqual(device.protocol,import_types.NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "9076f63c-e1d8-4142-b149-37bf0a82d163",
                  "parentUUID": "0a3e5fbc-cb12-4e14-82b3-ef5bc261569b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9076f63c-e1d8-4142-b149-37bf0a82d163"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0762adb2-7aec-4063-bba9-132d6ea21c57",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "c783fcc5-760a-4bc0-9cd6-745e4bb61eb2",
                  "parentUUID": "0762adb2-7aec-4063-bba9-132d6ea21c57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c783fcc5-760a-4bc0-9cd6-745e4bb61eb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f81e32bd-ebf1-4248-81ac-b5ba71b3e568",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "000898a8-b8ff-4bed-965e-2aba42801a87",
                  "parentUUID": "f81e32bd-ebf1-4248-81ac-b5ba71b3e568",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "1ae72925-518a-40f6-838c-eefdfb1d5888",
                  "parentUUID": "f81e32bd-ebf1-4248-81ac-b5ba71b3e568",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "000898a8-b8ff-4bed-965e-2aba42801a87",
                "1ae72925-518a-40f6-838c-eefdfb1d5888"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "079c43b1-618b-42ed-92ae-3f6104950970",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "379d8a6a-5ee8-43af-b22b-acd6b7212bd4",
                  "parentUUID": "079c43b1-618b-42ed-92ae-3f6104950970",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "f721e2a7-1936-4b63-8a21-f67286e344eb",
                  "parentUUID": "079c43b1-618b-42ed-92ae-3f6104950970",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "379d8a6a-5ee8-43af-b22b-acd6b7212bd4",
                "f721e2a7-1936-4b63-8a21-f67286e344eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58641042-05f3-438b-9f93-cbfa4ad98f00",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",os:\"TvOS\"});import_assert.default.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "7ce26253-fd14-467f-af70-f04a1e147e01",
                  "parentUUID": "58641042-05f3-438b-9f93-cbfa4ad98f00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "97b1d9b3-6dc1-484d-a7b4-117b444706f2",
                  "parentUUID": "58641042-05f3-438b-9f93-cbfa4ad98f00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ce26253-fd14-467f-af70-f04a1e147e01",
                "97b1d9b3-6dc1-484d-a7b4-117b444706f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d3f72aab-11fc-4e2d-b85d-d97d8c093165",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",version:\"15.5.1\"});import_assert.default.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "bb7bfa1e-8ad3-45d9-b183-94bec3245504",
                  "parentUUID": "d3f72aab-11fc-4e2d-b85d-d97d8c093165",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "d42f6ab0-b87b-4081-adfd-7979a2034c67",
                  "parentUUID": "d3f72aab-11fc-4e2d-b85d-d97d8c093165",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb7bfa1e-8ad3-45d9-b183-94bec3245504",
                "d42f6ab0-b87b-4081-adfd-7979a2034c67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e4a53da-6957-4d05-9203-5d62109455e8",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:import_types.NodePyATVProtocol.mrp},{port:7e3,protocol:import_types.NodePyATVProtocol.airplay}]});import_assert.default.deepStrictEqual(device.services,[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}])",
                  "err": {},
                  "uuid": "1f60cae0-0345-4c56-bed3-25970155ef14",
                  "parentUUID": "3e4a53da-6957-4d05-9203-5d62109455e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "35ca32f3-dee3-4f3c-8264-17c54cffa9a9",
                  "parentUUID": "3e4a53da-6957-4d05-9203-5d62109455e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f60cae0-0345-4c56-bed3-25970155ef14",
                "35ca32f3-dee3-4f3c-8264-17c54cffa9a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c7cbd471-a5bf-41f8-95ed-d4753af28dac",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "b5b9d07e-bb9d-4c64-a95a-ed5fbf9f3875",
                  "parentUUID": "c7cbd471-a5bf-41f8-95ed-d4753af28dac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new import_device.default({debug:fn,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "0ae7c79c-0ec7-4835-814f-cdbf17840d32",
                  "parentUUID": "c7cbd471-a5bf-41f8-95ed-d4753af28dac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "c4b600ca-c319-40cd-b05c-551849ea1fab",
                  "parentUUID": "c7cbd471-a5bf-41f8-95ed-d4753af28dac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5b9d07e-bb9d-4c64-a95a-ed5fbf9f3875",
                "0ae7c79c-0ec7-4835-814f-cdbf17840d32",
                "c4b600ca-c319-40cd-b05c-551849ea1fab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48a8c99b-ae90-44fc-b5e7-2341c97b4c53",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0);device.debug=true;import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "52d03186-a788-4bee-a6d8-1c219287a4d0",
                  "parentUUID": "48a8c99b-ae90-44fc-b5e7-2341c97b4c53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "1cf96bc5-5df2-4528-8a5e-2f1405349ee5",
                  "parentUUID": "48a8c99b-ae90-44fc-b5e7-2341c97b4c53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "2e0aeb1f-e833-45d6-90ba-4b00b5b4fec3",
                  "parentUUID": "48a8c99b-ae90-44fc-b5e7-2341c97b4c53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});const fn=__name(()=>{},\"fn\");import_assert.default.strictEqual(device.debug,void 0);device.debug=fn;import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "a1fd6799-4fd3-48e6-a918-84be85edfeba",
                  "parentUUID": "48a8c99b-ae90-44fc-b5e7-2341c97b4c53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52d03186-a788-4bee-a6d8-1c219287a4d0",
                "1cf96bc5-5df2-4528-8a5e-2f1405349ee5",
                "2e0aeb1f-e833-45d6-90ba-4b00b5b4fec3",
                "a1fd6799-4fd3-48e6-a918-84be85edfeba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5b242937-9740-4478-a175-21953c0efed2",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.deepEqual(device.toJSON(),{host:\"192.168.178.2\",id:\"*****\",mac:void 0,name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "2594abb0-36ae-43a0-8db2-c9c89927a960",
                  "parentUUID": "5b242937-9740-4478-a175-21953c0efed2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={host:\"192.168.178.2\",id:\"*****\",mac:\"469943881251875\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay};const deviceA=new import_device.default(config);const deviceB=new import_device.default(deviceA.toJSON());import_assert.default.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "be56a104-f750-4d70-b555-afae22121671",
                  "parentUUID": "5b242937-9740-4478-a175-21953c0efed2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2594abb0-36ae-43a0-8db2-c9c89927a960",
                "be56a104-f750-4d70-b555-afae22121671"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6975eb16-201b-4807-be16-149c87d3451b",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "63939e0d-e218-4a8a-a2eb-a76399118959",
                  "parentUUID": "6975eb16-201b-4807-be16-149c87d3451b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63939e0d-e218-4a8a-a2eb-a76399118959"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa0cc09f-03ec-4b4a-83e9-888d93e0cc85",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4301cd1d-b82f-4c86-aa58-9e3572eb477f",
                  "parentUUID": "aa0cc09f-03ec-4b4a-83e9-888d93e0cc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const result=await device.getState();import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "ef106b80-aacf-4972-bd20-eecd51e78cd7",
                  "parentUUID": "aa0cc09f-03ec-4b4a-83e9-888d93e0cc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});import_assert.default.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "788776b3-579a-4f7e-98b7-7c0fdf9a1bdb",
                  "parentUUID": "aa0cc09f-03ec-4b4a-83e9-888d93e0cc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date().toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();const secondResult=await device.getState();import_assert.default.strictEqual(firstResult.dateTime,secondResult.dateTime);import_assert.default.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "e3978f89-56ea-48cb-8372-884354663158",
                  "parentUUID": "aa0cc09f-03ec-4b4a-83e9-888d93e0cc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date(new Date().getTime()-1e3).toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();import_assert.default.strictEqual(firstResult.position,27);const secondResult=await device.getState();import_assert.default.ok(secondResult.position);import_assert.default.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);import_assert.default.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "1c9cb98c-1107-4057-b5df-69836dbe4d00",
                  "parentUUID": "aa0cc09f-03ec-4b4a-83e9-888d93e0cc85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef106b80-aacf-4972-bd20-eecd51e78cd7",
                "788776b3-579a-4f7e-98b7-7c0fdf9a1bdb",
                "e3978f89-56ea-48cb-8372-884354663158",
                "1c9cb98c-1107-4057-b5df-69836dbe4d00"
              ],
              "failures": [],
              "pending": [
                "4301cd1d-b82f-4c86-aa58-9e3572eb477f"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "04bdadfc-dfca-43b4-a14a-490bfe093dfb",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({datetime:\"2020-11-07T22:38:43.608030+01:00\",result:\"success\",title:\"Solo: A Star Wars Story\"})})});import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");import_assert.default.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "dec5d7af-da0f-4a5b-9a57-1317a6fe7fd0",
                  "parentUUID": "04bdadfc-dfca-43b4-a14a-490bfe093dfb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dec5d7af-da0f-4a5b-9a57-1317a6fe7fd0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0612f137-3f1d-4ee3-a6f3-26367bea4e87",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:new Date().toJSON(),result:\"success\"})})});const result=await device.getDateTime();import_assert.default.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "cf03cad0-ab54-44bc-b61e-3e2c9f7c6677",
                  "parentUUID": "0612f137-3f1d-4ee3-a6f3-26367bea4e87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf03cad0-ab54-44bc-b61e-3e2c9f7c6677"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2d88126-aab5-4e6c-bc2a-9dd81d86db82",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({hash:\"12345\",result:\"success\"})})});const result=await device.getHash();import_assert.default.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "fbc88e34-6791-4a11-bb05-63712a72329f",
                  "parentUUID": "b2d88126-aab5-4e6c-bc2a-9dd81d86db82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbc88e34-6791-4a11-bb05-63712a72329f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b9c6ccc2-60a3-494f-a503-37d3f69d5ac8",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({media_type:\"video\",result:\"success\"})})});const result=await device.getMediaType();import_assert.default.deepStrictEqual(result,import_types.NodePyATVMediaType.video);import_assert.default.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "a40c4a84-5c47-4c41-9d0f-df77ff566e80",
                  "parentUUID": "b9c6ccc2-60a3-494f-a503-37d3f69d5ac8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a40c4a84-5c47-4c41-9d0f-df77ff566e80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1766d629-9083-4542-90f6-a0c1c9b00078",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({device_state:\"seeking\",result:\"success\"})})});const result=await device.getDeviceState();import_assert.default.deepStrictEqual(result,import_types.NodePyATVDeviceState.seeking);import_assert.default.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "a1060fa4-6e18-4a81-b959-078af018e2c2",
                  "parentUUID": "1766d629-9083-4542-90f6-a0c1c9b00078",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1060fa4-6e18-4a81-b959-078af018e2c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73bb428b-3e74-4f97-8855-09c20c859540",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();import_assert.default.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "67cada0c-7944-44af-8588-8289ed3a4dc2",
                  "parentUUID": "73bb428b-3e74-4f97-8855-09c20c859540",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67cada0c-7944-44af-8588-8289ed3a4dc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6958aa91-498b-4b86-b93d-fab4c9324af1",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({artist:\"My Artist\",result:\"success\"})})});const result=await device.getArtist();import_assert.default.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "544ff7d4-6067-4e99-abb2-c82274ce33d5",
                  "parentUUID": "6958aa91-498b-4b86-b93d-fab4c9324af1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "544ff7d4-6067-4e99-abb2-c82274ce33d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "759aeb89-4036-4fb5-a4d9-5806d08ce0d3",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:\"My ALbum\",result:\"success\"})})});const result=await device.getAlbum();import_assert.default.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "84c10479-b90d-460c-b282-7a2240d3a92f",
                  "parentUUID": "759aeb89-4036-4fb5-a4d9-5806d08ce0d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84c10479-b90d-460c-b282-7a2240d3a92f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe09aff8-2b97-45df-aefc-887d2d694daa",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({genre:\"My Genre\",result:\"success\"})})});const result=await device.getGenre();import_assert.default.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "513534ea-9737-4078-8443-34406dd39e83",
                  "parentUUID": "fe09aff8-2b97-45df-aefc-887d2d694daa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "513534ea-9737-4078-8443-34406dd39e83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "100b8dcd-9df0-4412-8ebd-64fced4b75d2",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();import_assert.default.strictEqual(result,45)",
                  "err": {},
                  "uuid": "b7db3190-f292-44d8-8a13-4c237a83149e",
                  "parentUUID": "100b8dcd-9df0-4412-8ebd-64fced4b75d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7db3190-f292-44d8-8a13-4c237a83149e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "951df3c0-fa85-4c08-ae8a-13c89ad685ae",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({position:30,result:\"success\"})})});const result=await device.getPosition();import_assert.default.strictEqual(result,30)",
                  "err": {},
                  "uuid": "045921a3-7999-4dbe-9237-ea088ba6c192",
                  "parentUUID": "951df3c0-fa85-4c08-ae8a-13c89ad685ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "045921a3-7999-4dbe-9237-ea088ba6c192"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3aa286b3-e959-433c-bb76-dfddb536803a",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();import_assert.default.deepStrictEqual(result,import_types.NodePyATVShuffleState.songs);import_assert.default.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "c54fa04f-9ff5-40e5-8ec7-edeefa13e3e3",
                  "parentUUID": "3aa286b3-e959-433c-bb76-dfddb536803a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c54fa04f-9ff5-40e5-8ec7-edeefa13e3e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d33c3a0f-37f0-41b2-8770-d93b27389361",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({repeat:\"all\",result:\"success\"})})});const result=await device.getRepeat();import_assert.default.deepStrictEqual(result,import_types.NodePyATVRepeatState.all);import_assert.default.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "b9cbc71b-7f4f-489c-8c79-d5f2e9cdda5a",
                  "parentUUID": "d33c3a0f-37f0-41b2-8770-d93b27389361",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9cbc71b-7f4f-489c-8c79-d5f2e9cdda5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b6dc923-2b9a-4acd-9aba-4309b72b1b9c",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app:\"My App\",result:\"success\"})})});const result=await device.getApp();import_assert.default.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "b92e1061-fc39-4353-9dfd-54a9fdd6b2c7",
                  "parentUUID": "3b6dc923-2b9a-4acd-9aba-4309b72b1b9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b92e1061-fc39-4353-9dfd-54a9fdd6b2c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e637d510-28fc-4813-a560-083f3fc8b562",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app_id:\"app.example.com\",result:\"success\"})})});const result=await device.getAppId();import_assert.default.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "4a6e7945-317a-4738-a36f-2c0d2a9019a9",
                  "parentUUID": "e637d510-28fc-4813-a560-083f3fc8b562",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a6e7945-317a-4738-a36f-2c0d2a9019a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c18aa2cc-328e-4484-bae3-386ae0d3b840",
              "title": "getPowerState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPowerState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({power_state:\"on\",result:\"success\"})})});const result=await device.getPowerState();import_assert.default.strictEqual(result,import_types.NodePyATVPowerState.on)",
                  "err": {},
                  "uuid": "df3f88d3-a8da-4999-8108-9db117fc7ec3",
                  "parentUUID": "c18aa2cc-328e-4484-bae3-386ae0d3b840",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df3f88d3-a8da-4999-8108-9db117fc7ec3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "944000f7-814c-4558-9a7a-181c2241876e",
              "title": "getVolume()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getVolume() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",volume:50})})});const result=await device.getVolume();import_assert.default.strictEqual(result,50)",
                  "err": {},
                  "uuid": "854cd3ca-4252-43bd-bbe5-d82761f53851",
                  "parentUUID": "944000f7-814c-4558-9a7a-181c2241876e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "854cd3ca-4252-43bd-bbe5-d82761f53851"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b93d0290-6e23-4423-9117-279606b7d77b",
              "title": "getFocusState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getFocusState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({focus_state:\"focused\",result:\"success\"})})});const result=await device.getFocusState();import_assert.default.strictEqual(result,import_types.NodePyATVFocusState.focused)",
                  "err": {},
                  "uuid": "c702eabd-7366-4ac0-897c-39ec1de95f7a",
                  "parentUUID": "b93d0290-6e23-4423-9117-279606b7d77b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c702eabd-7366-4ac0-897c-39ec1de95f7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c378bfc-5ff8-4702-b9a2-47aac5d7b6b3",
              "title": "getOutputDevices()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getOutputDevices() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({output_devices:[{identifier:\"foo\",name:\"Apple TV\"}],result:\"success\"})})});const result=await device.getOutputDevices();import_assert.default.deepStrictEqual(result,[{identifier:\"foo\",name:\"Apple TV\"}])",
                  "err": {},
                  "uuid": "0b074db8-3cb7-429a-b485-35d9b3f9ee58",
                  "parentUUID": "1c378bfc-5ff8-4702-b9a2-47aac5d7b6b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b074db8-3cb7-429a-b485-35d9b3f9ee58"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31d38580-bd04-4cab-9f2b-4a58a56d31a3",
              "title": "getContentIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getContentIdentifier() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({content_identifier:\"1234\",result:\"success\"})})});const result=await device.getContentIdentifier();import_assert.default.strictEqual(result,\"1234\")",
                  "err": {},
                  "uuid": "2e879f73-a607-49ff-939a-5d43eeb8ed62",
                  "parentUUID": "31d38580-bd04-4cab-9f2b-4a58a56d31a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e879f73-a607-49ff-939a-5d43eeb8ed62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93fc3800-da2e-43bf-90be-ff003aa7cf8e",
              "title": "getiTunesStoreIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getiTunesStoreIdentifier() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({itunes_store_identifier:1234,result:\"success\"})})});const result=await device.getiTunesStoreIdentifier();import_assert.default.strictEqual(result,1234)",
                  "err": {},
                  "uuid": "8f9ce59b-4a14-4a2d-870c-7327e1958bde",
                  "parentUUID": "93fc3800-da2e-43bf-90be-ff003aa7cf8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f9ce59b-4a14-4a2d-870c-7327e1958bde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2bbc4862-f4db-4e58-9349-1b0bbef4b156",
              "title": "getEpisodeNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getEpisodeNumber() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({episode_number:12,result:\"success\"})})});const result=await device.getEpisodeNumber();import_assert.default.strictEqual(result,12)",
                  "err": {},
                  "uuid": "fa50c60c-51c7-4389-a1e1-fb61d2d9c8f7",
                  "parentUUID": "2bbc4862-f4db-4e58-9349-1b0bbef4b156",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa50c60c-51c7-4389-a1e1-fb61d2d9c8f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00f9d44c-255a-4a66-a85e-d6c054bfb478",
              "title": "getSeasonNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeasonNumber() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",season_number:2})})});const result=await device.getSeasonNumber();import_assert.default.strictEqual(result,2)",
                  "err": {},
                  "uuid": "eedac299-cf32-465c-8aa4-4fe8abde04e3",
                  "parentUUID": "00f9d44c-255a-4a66-a85e-d6c054bfb478",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eedac299-cf32-465c-8aa4-4fe8abde04e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48eb6b65-0b40-4fa9-8b1a-a7bd09614114",
              "title": "getSeriesName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeriesName() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",series_name:\"The Testing Disaster\"})})});const result=await device.getSeriesName();import_assert.default.strictEqual(result,\"The Testing Disaster\")",
                  "err": {},
                  "uuid": "83d2616d-d4b1-4029-a778-1ed899e73c4a",
                  "parentUUID": "48eb6b65-0b40-4fa9-8b1a-a7bd09614114",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83d2616d-d4b1-4029-a778-1ed899e73c4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1cb9a76a-9a71-481c-b758-a38bcb5f29c8",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();import_assert.default.strictEqual(result.length,25);import_assert.default.strictEqual(result[0].id,\"com.apple.Fitness\");import_assert.default.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "049e1199-6594-43fc-ac3c-0c5c26842404",
                  "parentUUID": "1cb9a76a-9a71-481c-b758-a38bcb5f29c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "049e1199-6594-43fc-ac3c-0c5c26842404"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d7a44017-31c7-40ff-b10b-c10454b23522",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(import_types.NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "6d945f82-7ccc-4714-8fc2-24662c2dda9b",
                  "parentUUID": "d7a44017-31c7-40ff-b10b-c10454b23522",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});await import_assert.default.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "904279be-801a-477e-9831-b9e405e97545",
                  "parentUUID": "d7a44017-31c7-40ff-b10b-c10454b23522",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"failure\"}')})});await import_assert.default.rejects(async()=>{await device.pressKey(import_types.NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "0d9e9854-d22d-4386-91c1-a52ae3c2ca32",
                  "parentUUID": "d7a44017-31c7-40ff-b10b-c10454b23522",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d945f82-7ccc-4714-8fc2-24662c2dda9b",
                "904279be-801a-477e-9831-b9e405e97545",
                "0d9e9854-d22d-4386-91c1-a52ae3c2ca32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "769b1188-532e-4167-8881-a02373687a5e",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "75621fe8-3410-4ddb-b9e1-01f408224374",
                  "parentUUID": "769b1188-532e-4167-8881-a02373687a5e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75621fe8-3410-4ddb-b9e1-01f408224374"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4e1bbc1-b8b9-4b2f-abd2-682a0be1bbab",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9b5aaad0-0d6a-4894-8441-f5d13287d358",
                  "parentUUID": "c4e1bbc1-b8b9-4b2f-abd2-682a0be1bbab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b5aaad0-0d6a-4894-8441-f5d13287d358"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f75297a-889d-4d63-a580-fe6fd1cba917",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c8e2b037-667a-4ba5-a06f-06219e9655ce",
                  "parentUUID": "4f75297a-889d-4d63-a580-fe6fd1cba917",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8e2b037-667a-4ba5-a06f-06219e9655ce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d51a629-2f20-4bb9-bcb6-b714b03dda0a",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "fe5100a3-e491-4d89-9fe8-9d9bd8ac8508",
                  "parentUUID": "2d51a629-2f20-4bb9-bcb6-b714b03dda0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe5100a3-e491-4d89-9fe8-9d9bd8ac8508"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe808f9c-577b-463f-9bbe-4de955b09dc3",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "02b3b683-fee6-4c81-8dbc-6adeeecb8c78",
                  "parentUUID": "fe808f9c-577b-463f-9bbe-4de955b09dc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02b3b683-fee6-4c81-8dbc-6adeeecb8c78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef7b963e-2db7-4897-a8da-fbbc4c520dfe",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1eacf0f3-5cdd-416c-babe-ce286e73c201",
                  "parentUUID": "ef7b963e-2db7-4897-a8da-fbbc4c520dfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1eacf0f3-5cdd-416c-babe-ce286e73c201"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "346f0fb8-6b7e-43d3-a917-5afee7aad373",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "fc8405ca-3336-46d9-aa35-f09a4ade7711",
                  "parentUUID": "346f0fb8-6b7e-43d3-a917-5afee7aad373",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc8405ca-3336-46d9-aa35-f09a4ade7711"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "357b1086-8df2-4ea7-ba1c-1ad90ff4df04",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "4fe805e7-e6d3-4393-87f9-a1ac8ba97d7e",
                  "parentUUID": "357b1086-8df2-4ea7-ba1c-1ad90ff4df04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fe805e7-e6d3-4393-87f9-a1ac8ba97d7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a280b6c3-b8f8-48bd-99d7-187f53042ace",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "37bda12d-f429-431b-b7d6-3143a275a0dc",
                  "parentUUID": "a280b6c3-b8f8-48bd-99d7-187f53042ace",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37bda12d-f429-431b-b7d6-3143a275a0dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "685509d0-a789-409c-a5a8-2ba06c5c30d8",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "6afc73ff-a93a-4322-908e-05c0a605e9e9",
                  "parentUUID": "685509d0-a789-409c-a5a8-2ba06c5c30d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6afc73ff-a93a-4322-908e-05c0a605e9e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ebd32eea-b1db-4d7c-b8e8-fc98a7ce2d4b",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "853a910d-eb76-49cd-ac24-23c63a44e30e",
                  "parentUUID": "ebd32eea-b1db-4d7c-b8e8-fc98a7ce2d4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "853a910d-eb76-49cd-ac24-23c63a44e30e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "818cdcf9-3a1c-41f1-961c-7ba877931af3",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "cda744f7-7ddc-4e2b-8ed1-56afe4c6a935",
                  "parentUUID": "818cdcf9-3a1c-41f1-961c-7ba877931af3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cda744f7-7ddc-4e2b-8ed1-56afe4c6a935"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb6e19a3-7910-406b-b199-393146c00d5b",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "2a8f4173-0ee1-4976-bc4c-3d5b7f4c4c38",
                  "parentUUID": "cb6e19a3-7910-406b-b199-393146c00d5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a8f4173-0ee1-4976-bc4c-3d5b7f4c4c38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cfd4bf0a-dce9-4a2a-87f5-e49ef1034e92",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "d68d3906-9004-4969-a2bf-2b6bf9fa8af2",
                  "parentUUID": "cfd4bf0a-dce9-4a2a-87f5-e49ef1034e92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d68d3906-9004-4969-a2bf-2b6bf9fa8af2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f821325b-1d37-45ed-8df7-126163d210c9",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "578d6bd8-a503-4000-9efc-8709e8a4a14e",
                  "parentUUID": "f821325b-1d37-45ed-8df7-126163d210c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "578d6bd8-a503-4000-9efc-8709e8a4a14e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e30edc3d-e96d-48c5-9f21-7504f0bab4ed",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c196da90-2bc0-428e-8ba6-377bbbd8adb1",
                  "parentUUID": "e30edc3d-e96d-48c5-9f21-7504f0bab4ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c196da90-2bc0-428e-8ba6-377bbbd8adb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d3d9b077-eda6-4f68-8076-09c16aa3648e",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "04a14dca-d986-4311-9e45-1ea4c3198e49",
                  "parentUUID": "d3d9b077-eda6-4f68-8076-09c16aa3648e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04a14dca-d986-4311-9e45-1ea4c3198e49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c032d344-c295-4626-ae77-db1ec4d933cf",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c359024b-0ee3-4231-a512-7b076de320b9",
                  "parentUUID": "c032d344-c295-4626-ae77-db1ec4d933cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c359024b-0ee3-4231-a512-7b076de320b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7fdaf476-9fef-4d07-ae93-9df25e778c91",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "4408e00e-519d-4b5e-8f6c-3e1dcab0af89",
                  "parentUUID": "7fdaf476-9fef-4d07-ae93-9df25e778c91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4408e00e-519d-4b5e-8f6c-3e1dcab0af89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ac0c737-451b-41db-9c62-50e1b65c1a8f",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "217acb39-c160-4735-b355-7eb0ede9337b",
                  "parentUUID": "5ac0c737-451b-41db-9c62-50e1b65c1a8f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "217acb39-c160-4735-b355-7eb0ede9337b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72275f93-4d9a-4616-b18e-a6f100763e53",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "298d26be-75df-4fbf-90ba-cd15082818cf",
                  "parentUUID": "72275f93-4d9a-4616-b18e-a6f100763e53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "298d26be-75df-4fbf-90ba-cd15082818cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ba437f8-f333-44c3-9050-43f7ae155bcc",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "0b32b792-3efb-409a-b586-84bdba90823d",
                  "parentUUID": "0ba437f8-f333-44c3-9050-43f7ae155bcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b32b792-3efb-409a-b586-84bdba90823d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72de5edd-580b-46d6-9c0d-d97370eb6eb2",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f147685f-0040-4d6e-aff3-5065190b2121",
                  "parentUUID": "72de5edd-580b-46d6-9c0d-d97370eb6eb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f147685f-0040-4d6e-aff3-5065190b2121"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4e3adc7d-5e63-4352-9981-2cb1485e7da4",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "c6848cdd-f96d-4dc6-9d89-5c8785635530",
                  "parentUUID": "4e3adc7d-5e63-4352-9981-2cb1485e7da4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6848cdd-f96d-4dc6-9d89-5c8785635530"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "76c7af15-d2bb-4137-aec2-03d93d0ad882",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bfaad360-0621-4ca4-8630-709c722bd215",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 673,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await import_lib.default.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}import_assert.default.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");import_assert.default.ok(result.pyatv.length>=5,\"result.pyatv has content\");import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "0fa4bbdc-bfd1-47bd-8db4-c3764440f6d4",
                  "parentUUID": "bfaad360-0621-4ca4-8630-709c722bd215",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});import_assert.default.ok(result.pyatv);import_assert.default.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "5709d5f5-1b97-4c3b-9374-414f0c922caf",
                  "parentUUID": "bfaad360-0621-4ca4-8630-709c722bd215",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())});import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "b44e47d6-263e-499c-8afe-a31fe3ea2a69",
                  "parentUUID": "bfaad360-0621-4ca4-8630-709c722bd215",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({atvremotePath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "db14f138-9454-48d0-b997-b894c75d0784",
                  "parentUUID": "bfaad360-0621-4ca4-8630-709c722bd215",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "d8d8fab8-5693-4c9b-9a77-5efe7fc6a218",
                  "parentUUID": "bfaad360-0621-4ca4-8630-709c722bd215",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "98cf0a61-6aeb-4452-ad21-4cf8ef564430",
                  "parentUUID": "bfaad360-0621-4ca4-8630-709c722bd215",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.stderr(\"Hello World!\").code(123).end())});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "3604b4de-4f24-4a17-84dd-b6ed0b36a180",
                  "parentUUID": "bfaad360-0621-4ca4-8630-709c722bd215",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "32c121f4-b7ac-4776-9c3a-18018c0bff04",
                  "parentUUID": "bfaad360-0621-4ca4-8630-709c722bd215",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "a9147d61-d442-471c-9fa7-1cc9afecf6ab",
                  "parentUUID": "bfaad360-0621-4ca4-8630-709c722bd215",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fa4bbdc-bfd1-47bd-8db4-c3764440f6d4",
                "5709d5f5-1b97-4c3b-9374-414f0c922caf",
                "b44e47d6-263e-499c-8afe-a31fe3ea2a69",
                "db14f138-9454-48d0-b997-b894c75d0784",
                "d8d8fab8-5693-4c9b-9a77-5efe7fc6a218",
                "98cf0a61-6aeb-4452-ad21-4cf8ef564430",
                "3604b4de-4f24-4a17-84dd-b6ed0b36a180",
                "32c121f4-b7ac-4776-9c3a-18018c0bff04",
                "a9147d61-d442-471c-9fa7-1cc9afecf6ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 685,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36319a35-fa6f-450c-894d-33074f1a6a57",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5887,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await import_lib.default.check()",
                  "err": {},
                  "uuid": "008a6540-b82c-4f12-9030-5a42b8519ded",
                  "parentUUID": "36319a35-fa6f-450c-894d-33074f1a6a57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "84306b81-3b8e-4760-9fb5-21baa81615f7",
                  "parentUUID": "36319a35-fa6f-450c-894d-33074f1a6a57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "de09257f-a3ef-45c2-b1c9-4cf9d93b73fc",
                  "parentUUID": "36319a35-fa6f-450c-894d-33074f1a6a57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "5f88b947-1b25-4496-8b04-943c82fc52ea",
                  "parentUUID": "36319a35-fa6f-450c-894d-33074f1a6a57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "008a6540-b82c-4f12-9030-5a42b8519ded",
                "84306b81-3b8e-4760-9fb5-21baa81615f7",
                "de09257f-a3ef-45c2-b1c9-4cf9d93b73fc",
                "5f88b947-1b25-4496-8b04-943c82fc52ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5892,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5436,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await import_lib.default.find();import_assert.default.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "81201909-d3fb-4ae6-94ec-e5b2a5dd4386",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.find({atvscriptPath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "c2d323a6-3a03-457f-ad88-71fa2ccd79ed",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "ae44e41f-76df-4bb3-8544-98f8287a2531",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "019ab7d5-cc0d-4127-9e71-9fe5399b1ae5",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\",result:\"failure\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "1d9baad2-90dd-4104-8187-02bb90f0b967",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(JSON.stringify({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "ba7d34ba-c7c9-467b-9c46-6d461b72056c",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "e511361d-a5ab-48ec-aa1e-bd23eef2044e",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "961af297-2553-4ff5-a46f-eaa980d7aa94",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",identifier:\"xxx\",name:\"Vardagsrum\"}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,void 0);import_assert.default.strictEqual(devices[0].modelName,void 0);import_assert.default.strictEqual(devices[0].os,void 0);import_assert.default.strictEqual(devices[0].version,void 0);import_assert.default.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "a3e867c2-27fa-4d57-8c22-7d65bc156e5a",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",device_info:{model:\"Gen4K\",model_str:\"Apple TV 4K\",operating_system:\"TvOS\",version:\"15.5.1\"},identifier:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}]}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,\"Gen4K\");import_assert.default.strictEqual(devices[0].modelName,\"Apple TV 4K\");import_assert.default.strictEqual(devices[0].os,\"TvOS\");import_assert.default.strictEqual(devices[0].version,\"15.5.1\");import_assert.default.deepStrictEqual(devices[0].services,[{port:49152,protocol:import_lib.NodePyATVProtocol.mrp},{port:7e3,protocol:import_lib.NodePyATVProtocol.airplay}])",
                  "err": {},
                  "uuid": "2576f5ad-97c2-405b-9e27-1f5e01518908",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});import_assert.default.strictEqual(devices.length,4);import_assert.default.strictEqual(devices[0].name,\"Living Room\");import_assert.default.strictEqual(devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(devices[1].name,\"Kitchen\");import_assert.default.strictEqual(devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(devices[2].name,\"Bedroom\");import_assert.default.strictEqual(devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(devices[3].name,\"Basement\");import_assert.default.strictEqual(devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "56d68529-9205-4f3c-96eb-82ec19d40d98",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);import_assert.default.strictEqual(response.devices.length,4);import_assert.default.strictEqual(response.errors.length,2);import_assert.default.strictEqual(response.devices[0].name,\"Living Room\");import_assert.default.strictEqual(response.devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(response.devices[1].name,\"Kitchen\");import_assert.default.strictEqual(response.devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(response.devices[2].name,\"Bedroom\");import_assert.default.strictEqual(response.devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(response.devices[3].name,\"Basement\");import_assert.default.strictEqual(response.devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");import_assert.default.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");import_assert.default.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "116ad3c3-7a4e-4e9b-88dd-f5b3adc84197",
                  "parentUUID": "bb056bdb-9da3-47f2-89f9-cd999d43f73b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81201909-d3fb-4ae6-94ec-e5b2a5dd4386",
                "c2d323a6-3a03-457f-ad88-71fa2ccd79ed",
                "ae44e41f-76df-4bb3-8544-98f8287a2531",
                "019ab7d5-cc0d-4127-9e71-9fe5399b1ae5",
                "1d9baad2-90dd-4104-8187-02bb90f0b967",
                "ba7d34ba-c7c9-467b-9c46-6d461b72056c",
                "e511361d-a5ab-48ec-aa1e-bd23eef2044e",
                "961af297-2553-4ff5-a46f-eaa980d7aa94",
                "a3e867c2-27fa-4d57-8c22-7d65bc156e5a",
                "2576f5ad-97c2-405b-9e27-1f5e01518908",
                "56d68529-9205-4f3c-96eb-82ec19d40d98",
                "116ad3c3-7a4e-4e9b-88dd-f5b3adc84197"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5453,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f27a026c-0bd1-4099-9aab-20855ef9522f",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=import_lib.default.device({host:\"192.168.178.6\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.6\");import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "cae3a2b2-220f-47ca-b52a-ca2bcb90121a",
                  "parentUUID": "f27a026c-0bd1-4099-9aab-20855ef9522f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cae3a2b2-220f-47ca-b52a-ca2bcb90121a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7baf6eb-d6c0-44ff-bd23-50ad375edb6c",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await i.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "07ba13bd-629f-4679-960d-b86035e7d71d",
                  "parentUUID": "e7baf6eb-d6c0-44ff-bd23-50ad375edb6c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07ba13bd-629f-4679-960d-b86035e7d71d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae29c74f-3219-4cff-a961-9d91357adccf",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await import_assert.default.rejects(async()=>{await i.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "7889d1a5-777f-48c6-a5d0-afee6543548a",
                  "parentUUID": "ae29c74f-3219-4cff-a961-9d91357adccf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7889d1a5-777f-48c6-a5d0-afee6543548a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7bed1e10-5554-47f0-80e0-9f7a0543c264",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvscriptPath:\"test\"});await i.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "bca491da-8da8-4ec5-9788-59a49ec95d14",
                  "parentUUID": "7bed1e10-5554-47f0-80e0-9f7a0543c264",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bca491da-8da8-4ec5-9788-59a49ec95d14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5ce8cb5-0b11-403e-a994-ea2c91de0c95",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({debug:true});const d=i.device({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "a02d449e-34d9-4c9a-831e-03f51ff8f75f",
                  "parentUUID": "f5ce8cb5-0b11-403e-a994-ea2c91de0c95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a02d449e-34d9-4c9a-831e-03f51ff8f75f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVProtocol)",
                  "err": {},
                  "uuid": "3972f96a-8990-4eb4-bc08-f6acab0389f7",
                  "parentUUID": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVMediaType)",
                  "err": {},
                  "uuid": "9bb92784-c411-4097-98f8-47cc98ebd0b1",
                  "parentUUID": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "a5bea672-7068-4252-a568-cc352b9aa7f7",
                  "parentUUID": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "ac6c7634-c79f-47e4-98d5-c11588b0fcc0",
                  "parentUUID": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "623c7321-87c7-4120-b5d7-082caf1ff89a",
                  "parentUUID": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "d616253f-8ab8-4f79-aab9-be4b8153c3b3",
                  "parentUUID": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVKeys)",
                  "err": {},
                  "uuid": "6a6ccbab-bd43-43b4-bed6-7caab3677db0",
                  "parentUUID": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVListenerState)",
                  "err": {},
                  "uuid": "55007437-0f16-421b-a1fa-0faa18a64fd7",
                  "parentUUID": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVPowerState)",
                  "err": {},
                  "uuid": "306921c0-1c92-4e8b-b0da-221f9278f98e",
                  "parentUUID": "b14138a7-7db3-42c6-9304-5222dc60ad3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3972f96a-8990-4eb4-bc08-f6acab0389f7",
                "9bb92784-c411-4097-98f8-47cc98ebd0b1",
                "a5bea672-7068-4252-a568-cc352b9aa7f7",
                "ac6c7634-c79f-47e4-98d5-c11588b0fcc0",
                "623c7321-87c7-4120-b5d7-082caf1ff89a",
                "d616253f-8ab8-4f79-aab9-be4b8153c3b3",
                "6a6ccbab-bd43-43b4-bed6-7caab3677db0",
                "55007437-0f16-421b-a1fa-0faa18a64fd7",
                "306921c0-1c92-4e8b-b0da-221f9278f98e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c59a38b7-5c9d-4d75-90fc-7383073b1169",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a0d1361a-959c-40ae-8297-6790d8e785ce",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=(0,import_tools.addRequestId)();import_assert.default.strictEqual(typeof id,\"string\");(0,import_tools.removeRequestId)(id)",
                  "err": {},
                  "uuid": "41629fe8-3431-427e-8f2e-33fc20389de5",
                  "parentUUID": "a0d1361a-959c-40ae-8297-6790d8e785ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.removeRequestId)(\"FOO\")",
                  "err": {},
                  "uuid": "996eac72-6b43-407f-9c09-dc6f7cb0642f",
                  "parentUUID": "a0d1361a-959c-40ae-8297-6790d8e785ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41629fe8-3431-427e-8f2e-33fc20389de5",
                "996eac72-6b43-407f-9c09-dc6f7cb0642f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "867f71ff-0aa8-436f-9de1-735a4d9b64d9",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "10a96a36-9845-4c02-8773-2879453dc0eb",
                  "parentUUID": "867f71ff-0aa8-436f-9de1-735a4d9b64d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "303188f1-fbf5-4d46-ab3f-61fe9cd7b611",
                  "parentUUID": "867f71ff-0aa8-436f-9de1-735a4d9b64d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "b948d0b8-7242-4b4c-a4e3-d6822fe93795",
                  "parentUUID": "867f71ff-0aa8-436f-9de1-735a4d9b64d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "8bab807d-081e-44d0-ac79-deff572b57f6",
                  "parentUUID": "867f71ff-0aa8-436f-9de1-735a4d9b64d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\"),noColors:true})",
                  "err": {},
                  "uuid": "2a71999b-806b-4282-991e-f0e0f53929eb",
                  "parentUUID": "867f71ff-0aa8-436f-9de1-735a4d9b64d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10a96a36-9845-4c02-8773-2879453dc0eb",
                "303188f1-fbf5-4d46-ab3f-61fe9cd7b611",
                "b948d0b8-7242-4b4c-a4e3-d6822fe93795",
                "8bab807d-081e-44d0-ac79-deff572b57f6",
                "2a71999b-806b-4282-991e-f0e0f53929eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d41fdf5-4d73-46d8-8345-9602f5181459",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "b5587b4d-6cd0-4678-b0b0-187741f9922e",
                  "parentUUID": "3d41fdf5-4d73-46d8-8345-9602f5181459",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "15a34f1b-adcc-43d2-b70c-431239772d7e",
                  "parentUUID": "3d41fdf5-4d73-46d8-8345-9602f5181459",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "2dfb814b-4d2a-423c-aade-fe8ba07fda6b",
                  "parentUUID": "3d41fdf5-4d73-46d8-8345-9602f5181459",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "a68434a8-ce11-4142-99ad-e8e5bb90555f",
                  "parentUUID": "3d41fdf5-4d73-46d8-8345-9602f5181459",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5587b4d-6cd0-4678-b0b0-187741f9922e",
                "15a34f1b-adcc-43d2-b70c-431239772d7e",
                "2dfb814b-4d2a-423c-aade-fe8ba07fda6b",
                "a68434a8-ce11-4142-99ad-e8e5bb90555f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "932c48f3-6d99-43d1-bd06-f6e26b4d2d5f",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)();import_assert.default.deepEqual(result,[])",
                  "err": {},
                  "uuid": "503bb81c-35ea-4004-88e0-03f9479a7c7c",
                  "parentUUID": "932c48f3-6d99-43d1-bd06-f6e26b4d2d5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({host:\"192.168.178.2\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "1a674d06-68d5-4c87-b128-3e0aa1a2cf91",
                  "parentUUID": "932c48f3-6d99-43d1-bd06-f6e26b4d2d5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({airplayCredentials:\"****\",companionCredentials:\"1234\",dmapCredentials:\"****\",hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",mrpCredentials:\"****\",protocol:import_types.NodePyATVProtocol.mrp,raopCredentials:\"::foo:\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "6764c97a-ba6b-4b3a-9d8e-7d76f4aae491",
                  "parentUUID": "932c48f3-6d99-43d1-bd06-f6e26b4d2d5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "503bb81c-35ea-4004-88e0-03f9479a7c7c",
                "1a674d06-68d5-4c87-b128-3e0aa1a2cf91",
                "6764c97a-ba6b-4b3a-9d8e-7d76f4aae491"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0ba71a5-3c56-4c5b-a2a0-dd9de1208e59",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "8b1e3574-7add-44da-b49e-849cce5bce53",
                  "parentUUID": "f0ba71a5-3c56-4c5b-a2a0-dd9de1208e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.parseState)(null,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "1309d44f-ab0e-4eec-9b50-0b5731c777a0",
                  "parentUUID": "f0ba71a5-3c56-4c5b-a2a0-dd9de1208e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,content_identifier:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",episode_number:null,focus_state:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",itunes_store_identifier:null,media_type:\"video\",output_devices:null,position:27,power_state:null,repeat:\"off\",result:\"success\",season_number:null,series_name:null,shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097,volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "e8815311-88b9-4c09-b540-f45bdcbdf833",
                  "parentUUID": "f0ba71a5-3c56-4c5b-a2a0-dd9de1208e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};import_assert.default.throws(()=>{(0,import_tools.parseState)(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "4431e355-c02d-4835-8cdf-015b66cff789",
                  "parentUUID": "f0ba71a5-3c56-4c5b-a2a0-dd9de1208e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "0b7d5ffb-0948-4138-824e-b924af5a5e39",
                  "parentUUID": "f0ba71a5-3c56-4c5b-a2a0-dd9de1208e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:Infinity,app:0,app_id:891645381647289,artist:90,content_identifier:null,datetime:true,device_state:43,episode_number:null,focus_state:null,genre:Math.PI,hash:1337,itunes_store_identifier:null,media_type:false,output_devices:null,position:\"0:30.123\",power_state:null,repeat:true,result:\"success\",season_number:null,series_name:null,shuffle:false,title:void 0,total_time:\"23min\",volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "ef5fbccc-c599-4c96-ac08-25ab3942cba9",
                  "parentUUID": "f0ba71a5-3c56-4c5b-a2a0-dd9de1208e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={device_state:\"initiating\",media_type:\"3d-experience\",repeat:\"nothing\",shuffle:\"everything\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "27225f1b-25e3-4b1a-a7b7-22a4a8385299",
                  "parentUUID": "f0ba71a5-3c56-4c5b-a2a0-dd9de1208e59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b1e3574-7add-44da-b49e-849cce5bce53",
                "1309d44f-ab0e-4eec-9b50-0b5731c777a0",
                "e8815311-88b9-4c09-b540-f45bdcbdf833",
                "4431e355-c02d-4835-8cdf-015b66cff789",
                "0b7d5ffb-0948-4138-824e-b924af5a5e39",
                "ef5fbccc-c599-4c96-ac08-25ab3942cba9",
                "27225f1b-25e3-4b1a-a7b7-22a4a8385299"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}