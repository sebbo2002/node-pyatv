{
  "stats": {
    "suites": 93,
    "tests": 165,
    "passes": 163,
    "pending": 2,
    "failures": 0,
    "start": "2024-07-11T17:03:50.658Z",
    "end": "2024-07-11T17:04:02.847Z",
    "duration": 12189,
    "testsRegistered": 165,
    "passPercent": 100,
    "pendingPercent": 1.2121212121212122,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b6582e46-917c-424e-b0a7-fa922b34a40b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d3c7f9b6-10e9-44a3-b8cc-aff4f5f4f85e",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "91f1cccc-c866-46d0-a17e-15b3d4f3ffb7",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "d8298a22-c9da-46a9-affd-64441eab6500",
                  "parentUUID": "91f1cccc-c866-46d0-a17e-15b3d4f3ffb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8298a22-c9da-46a9-affd-64441eab6500"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2574abb-3f3c-49c6-806c-29e86fd48eac",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "c813b4fd-8ab4-4a51-b1a4-bd0d9b49c988",
                  "parentUUID": "d2574abb-3f3c-49c6-806c-29e86fd48eac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c813b4fd-8ab4-4a51-b1a4-bd0d9b49c988"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de848a88-1bb3-4e0b-b3fa-c8c010a041f5",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "f727015d-8e64-49e9-b272-bd3aa1166c1e",
                  "parentUUID": "de848a88-1bb3-4e0b-b3fa-c8c010a041f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f727015d-8e64-49e9-b272-bd3aa1166c1e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "079ab281-d405-46a3-8272-eda80e1efe85",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "6a83cddd-2d2f-4695-a661-53df7491ed75",
                  "parentUUID": "079ab281-d405-46a3-8272-eda80e1efe85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a83cddd-2d2f-4695-a661-53df7491ed75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de6fdd87-b0c3-4e54-9442-c92ce1f59ace",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "804cd78d-f262-4b1d-8ec4-a0d081ef1a5c",
                  "parentUUID": "de6fdd87-b0c3-4e54-9442-c92ce1f59ace",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "804cd78d-f262-4b1d-8ec4-a0d081ef1a5c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "faefef5a-1db6-4432-9171-85e015786123",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:title', event => {\n            assert.ok(event instanceof NodePyATVDeviceEvent);\n            assert.strictEqual(event.key, 'title');\n            assert.strictEqual(event.oldValue, null);\n            assert.strictEqual(event.newValue, 'My Movie');\n            assert.strictEqual(event.value, 'My Movie');\n            assert.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "66b41e7c-f780-4289-8992-e142ec69c54e",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update', event => {\n            assert.ok(event instanceof NodePyATVDeviceEvent);\n            assert.strictEqual(event.key, 'title');\n            assert.strictEqual(event.oldValue, null);\n            assert.strictEqual(event.newValue, 'My Movie');\n            assert.strictEqual(event.value, 'My Movie');\n            assert.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "60380233-2d99-4a13-9d3c-4e241aa9011d",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const sort = [];\n    yield Promise.race([\n        new Promise(cb => {\n            device.once('update', () => {\n                sort.push('update');\n                cb(undefined);\n            });\n        }),\n        new Promise(cb => {\n            device.once('update:title', () => {\n                sort.push('update:title');\n                cb(undefined);\n            });\n        })\n    ]);\n    assert.deepStrictEqual(sort, ['update:title', 'update']);\n});",
                  "err": {},
                  "uuid": "c5c70005-09e4-4017-ab9e-5e461d1c70fe",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('error', error => {\n            assert.ok(error instanceof Error);\n            assert.ok(error.toString().includes('invalid credentials: 321'));\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "6546ef74-82ae-479f-9c6f-5cf2d12ac704",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let spawnCounter = 0;\n    let eventCounter = 0;\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            if (spawnCounter === 0) {\n                cp.onStdIn(() => cp.end());\n            }\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n            spawnCounter++;\n            if (spawnCounter >= 2) {\n                cp.end();\n            }\n        })\n    });\n    const listener = () => {\n        eventCounter++;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    yield device.getState();\n    device.off('update', listener);\n    assert.strictEqual(spawnCounter, 2);\n    assert.strictEqual(eventCounter, 1);\n});",
                  "err": {},
                  "uuid": "786a1515-42fa-4bea-8653-6da0e86730f8",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    let callCounter = 0;\n    const error = new Error('This is an error. Be nice.');\n    device.once('error', err => {\n        assert.strictEqual(err, error);\n        callCounter++;\n    });\n    const listener = () => {\n        throw error;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    device.off('update', listener);\n    assert.strictEqual(callCounter, 1);\n});",
                  "err": {},
                  "uuid": "2195fa52-5e08-4d00-97ff-10891ab92576",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:powerState', event => {\n            assert.ok(event instanceof NodePyATVDeviceEvent);\n            assert.strictEqual(event.key, 'powerState');\n            assert.strictEqual(event.oldValue, null);\n            assert.strictEqual(event.newValue, 'off');\n            assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n            assert.strictEqual(event.value, 'off');\n            assert.strictEqual(event.value, NodePyATVPowerState.off);\n            assert.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "c53dacae-ec55-4eab-bec3-7b4a5869e015",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n            cp.end();\n        })\n    });\n    let counter = 0;\n    device.on('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'powerState');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'off');\n        assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n        assert.strictEqual(event.value, 'off');\n        assert.strictEqual(event.value, NodePyATVPowerState.off);\n        assert.deepStrictEqual(event.device, device);\n        counter++;\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    assert.strictEqual(counter, 1);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "5143d451-1c03-4041-b8fa-06f4723b95db",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                focus_state: 'unfocused'\n            });\n            cp.end();\n        })\n    });\n    let counter = 0;\n    device.on('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'focusState');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'unfocused');\n        assert.strictEqual(event.newValue, NodePyATVFocusState.unfocused);\n        assert.strictEqual(event.value, 'unfocused');\n        assert.strictEqual(event.value, NodePyATVFocusState.unfocused);\n        assert.deepStrictEqual(event.device, device);\n        counter++;\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    assert.strictEqual(counter, 1);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "76e06fb0-b478-4f80-8b32-66d2945cfe86",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                output_devices: [{\n                        name: 'Living room',\n                        identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n                    }]\n            });\n            cp.end();\n        })\n    });\n    let counter = 0;\n    device.on('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'outputDevices');\n        assert.strictEqual(event.oldValue, null);\n        assert.deepStrictEqual(event.newValue, [{\n                name: 'Living room',\n                identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n            }]);\n        assert.deepStrictEqual(event.value, [{\n                name: 'Living room',\n                identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n            }]);\n        assert.deepStrictEqual(event.device, device);\n        counter++;\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    assert.strictEqual(counter, 1);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "3099b857-d3c1-45aa-abcb-7cf0229f3528",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                volume: 20.0\n            });\n            cp.end();\n        })\n    });\n    let counter = 0;\n    device.on('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'volume');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 20);\n        assert.strictEqual(event.value, 20);\n        assert.deepStrictEqual(event.device, device);\n        counter++;\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    assert.strictEqual(counter, 1);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "98238bd5-a100-4495-ab60-05f954ff5146",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                foo: 'bar'\n            });\n            cp.end();\n        })\n    });\n    device.on('update', event => {\n        assert.fail(`Got an update event for a new field: ${event}`);\n    });\n    yield new Promise(cb => setTimeout(cb, 10));\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "c4660778-b7bd-43ac-8fd1-d7d065ad2978",
                  "parentUUID": "01e9bb72-bd82-4896-9ba6-72389dde22c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66b41e7c-f780-4289-8992-e142ec69c54e",
                "60380233-2d99-4a13-9d3c-4e241aa9011d",
                "c5c70005-09e4-4017-ab9e-5e461d1c70fe",
                "6546ef74-82ae-479f-9c6f-5cf2d12ac704",
                "786a1515-42fa-4bea-8653-6da0e86730f8",
                "2195fa52-5e08-4d00-97ff-10891ab92576",
                "c53dacae-ec55-4eab-bec3-7b4a5869e015",
                "5143d451-1c03-4041-b8fa-06f4723b95db",
                "76e06fb0-b478-4f80-8b32-66d2945cfe86",
                "3099b857-d3c1-45aa-abcb-7cf0229f3528",
                "98238bd5-a100-4495-ab60-05f954ff5146",
                "c4660778-b7bd-43ac-8fd1-d7d065ad2978"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 65,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0b583ce-3a95-46af-8339-1224a9e09a36",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const error = new Error();\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.error(error).end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert.strictEqual(err, error);\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "fbd6c4c5-16e5-4f7a-a88d-a07f782f5a77",
                  "parentUUID": "f0b583ce-3a95-46af-8339-1224a9e09a36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.stderr('Hello World!').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert.ok(err instanceof Error);\n            assert.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "d3f1c946-312f-404a-8bae-d3f07377774e",
                  "parentUUID": "f0b583ce-3a95-46af-8339-1224a9e09a36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('#').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert.ok(err instanceof Error);\n            assert.ok(err.toString().includes('Unable to parse stdout json: SyntaxError'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "e4372a92-cd2a-44cf-8546-03cffb456c14",
                  "parentUUID": "f0b583ce-3a95-46af-8339-1224a9e09a36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ae24105b-0929-4b0d-b417-3a9d0217a2c3",
                  "parentUUID": "f0b583ce-3a95-46af-8339-1224a9e09a36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbd6c4c5-16e5-4f7a-a88d-a07f782f5a77",
                "d3f1c946-312f-404a-8bae-d3f07377774e",
                "e4372a92-cd2a-44cf-8546-03cffb456c14"
              ],
              "failures": [],
              "pending": [
                "ae24105b-0929-4b0d-b417-3a9d0217a2c3"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7bae4d2-028d-4e0a-9c49-785c3bfaca7e",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "9287bc04-65cd-48b9-be31-1f34e45a80cc",
                  "parentUUID": "e7bae4d2-028d-4e0a-9c49-785c3bfaca7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9287bc04-65cd-48b9-be31-1f34e45a80cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1252d0f3-d959-43ed-83ce-3af8cc44ac8b",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert.strictEqual(e, event);\n    assert.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "d495364f-0ca6-4820-9736-b303a366409d",
                  "parentUUID": "1252d0f3-d959-43ed-83ce-3af8cc44ac8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d495364f-0ca6-4820-9736-b303a366409d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "040ec1fc-40e6-46e8-a197-ca28039a7f92",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "893534a2-ca5b-436d-9060-f158d7b5f28c",
                  "parentUUID": "040ec1fc-40e6-46e8-a197-ca28039a7f92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "893534a2-ca5b-436d-9060-f158d7b5f28c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5a7f6e9d-8697-43b0-bb52-89850d2f9070",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert.ok(typeof result, 'number');\nassert.ok(result >= 10);",
                  "err": {},
                  "uuid": "5c6efc00-bece-4077-b418-888091c845e7",
                  "parentUUID": "5a7f6e9d-8697-43b0-bb52-89850d2f9070",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c6efc00-bece-4077-b418-888091c845e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22728792-e90a-4200-8c7b-dc4d2dcc2f3c",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "de8c2d56-6bb7-42e7-ba87-1ccbc9bc4458",
                  "parentUUID": "22728792-e90a-4200-8c7b-dc4d2dcc2f3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de8c2d56-6bb7-42e7-ba87-1ccbc9bc4458"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d593c16b-f69c-427d-a1b8-44d0bb39f847",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listeners('test').length, 1);\nassert.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "6cdc8aed-4a5a-4868-8de9-e958fbfe3f0b",
                  "parentUUID": "d593c16b-f69c-427d-a1b8-44d0bb39f847",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6cdc8aed-4a5a-4868-8de9-e958fbfe3f0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b5e553f8-1560-4c69-bb68-f35c20b1cef6",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "beec3777-a7ff-4b57-87a9-7949a7138adc",
                  "parentUUID": "b5e553f8-1560-4c69-bb68-f35c20b1cef6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "beec3777-a7ff-4b57-87a9-7949a7138adc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "efbe8a56-61b0-40f8-9f22-274866ce2856",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "b775e40f-3b9e-49ed-92e3-9df42f30f06e",
                  "parentUUID": "efbe8a56-61b0-40f8-9f22-274866ce2856",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b775e40f-3b9e-49ed-92e3-9df42f30f06e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c645517e-cb0b-4c75-8f66-5ac18ef6b439",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.rawListeners('test').length, 1);\nassert.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "7300081e-a466-4af4-83e9-a29283330077",
                  "parentUUID": "c645517e-cb0b-4c75-8f66-5ac18ef6b439",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7300081e-a466-4af4-83e9-a29283330077"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1afeb7dd-c942-49f0-ac87-b5f5809c90bc",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    assert.deepStrictEqual(device.listenerCount('update'), 1);\n    device.removeListener('update', listener);\n    assert.deepStrictEqual(device.listenerCount('update'), 0);\n});",
                  "err": {},
                  "uuid": "d654e5f1-9a50-4425-9a6d-d500e9e36cab",
                  "parentUUID": "1afeb7dd-c942-49f0-ac87-b5f5809c90bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d654e5f1-9a50-4425-9a6d-d500e9e36cab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b29c9a56-cf6d-413f-94f9-70ae637314b7",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8b458f47-4bce-409d-8cfa-7d75a0690b42",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "0c85a556-6a45-4479-aa49-d7e07bec4e50",
                  "parentUUID": "8b458f47-4bce-409d-8cfa-7d75a0690b42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c85a556-6a45-4479-aa49-d7e07bec4e50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae21893b-109b-4dbf-94ee-ba1057e651ad",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "683b658d-c1f8-44c6-b68d-e9d6859c8443",
                  "parentUUID": "ae21893b-109b-4dbf-94ee-ba1057e651ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "683b658d-c1f8-44c6-b68d-e9d6859c8443"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d74b2b75-eb1e-4ad2-b095-41b4ec96be3e",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "eb142dff-9139-4e4e-8618-23b0fe49764c",
                  "parentUUID": "d74b2b75-eb1e-4ad2-b095-41b4ec96be3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb142dff-9139-4e4e-8618-23b0fe49764c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5cec6f8a-2e34-4b8c-a995-eb0386441fa9",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    allIDs: [\n        'some_id_1',\n        'some_id_2',\n        'some_id_3',\n    ]\n});\nassert.deepStrictEqual(device.allIDs, [\n    'some_id_1',\n    'some_id_2',\n    'some_id_3',\n]);",
                  "err": {},
                  "uuid": "c210a4c2-303a-4fd6-acb1-4aa9bcbe5cae",
                  "parentUUID": "5cec6f8a-2e34-4b8c-a995-eb0386441fa9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c210a4c2-303a-4fd6-acb1-4aa9bcbe5cae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e0172d8-53a1-41ef-aea9-b26822fd49ba",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.strictEqual(device.protocol, NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "d6c778f7-7b30-45a4-8ad3-d95703fe598e",
                  "parentUUID": "7e0172d8-53a1-41ef-aea9-b26822fd49ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6c778f7-7b30-45a4-8ad3-d95703fe598e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e63b1802-547f-4b23-b224-2d2df9a04b29",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    mac: 'AA:BB:CC:DD:EE:FF'\n});\nassert.strictEqual(device.mac, 'AA:BB:CC:DD:EE:FF');",
                  "err": {},
                  "uuid": "3d2b6192-00be-4539-b648-57fbb697afab",
                  "parentUUID": "e63b1802-547f-4b23-b224-2d2df9a04b29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d2b6192-00be-4539-b648-57fbb697afab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f883920-2de3-41ce-b349-382f66738775",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    model: 'Gen4K'\n});\nassert.strictEqual(device.model, 'Gen4K');",
                  "err": {},
                  "uuid": "33b84d92-94f8-4d01-acf4-c051ba9ebfe3",
                  "parentUUID": "0f883920-2de3-41ce-b349-382f66738775",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.model, undefined);",
                  "err": {},
                  "uuid": "f6d78b72-bbb1-4d8b-9646-1a256b8bf68b",
                  "parentUUID": "0f883920-2de3-41ce-b349-382f66738775",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33b84d92-94f8-4d01-acf4-c051ba9ebfe3",
                "f6d78b72-bbb1-4d8b-9646-1a256b8bf68b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a24c729-92c3-4469-81ec-a245944e84d6",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    modelName: 'Apple TV 4K'\n});\nassert.strictEqual(device.modelName, 'Apple TV 4K');",
                  "err": {},
                  "uuid": "b8565424-41b9-4629-aa20-4fedd23a4597",
                  "parentUUID": "3a24c729-92c3-4469-81ec-a245944e84d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.modelName, undefined);",
                  "err": {},
                  "uuid": "4cf5d62e-8a0d-43c3-9daa-7298d016509b",
                  "parentUUID": "3a24c729-92c3-4469-81ec-a245944e84d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8565424-41b9-4629-aa20-4fedd23a4597",
                "4cf5d62e-8a0d-43c3-9daa-7298d016509b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f033845d-e221-4242-9239-7210800188b7",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    os: 'TvOS'\n});\nassert.strictEqual(device.os, 'TvOS');",
                  "err": {},
                  "uuid": "77aa89de-f32c-4f31-9db2-950c6fa026b9",
                  "parentUUID": "f033845d-e221-4242-9239-7210800188b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.os, undefined);",
                  "err": {},
                  "uuid": "9abc3e1c-d909-4571-b016-34f7d0255f8e",
                  "parentUUID": "f033845d-e221-4242-9239-7210800188b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77aa89de-f32c-4f31-9db2-950c6fa026b9",
                "9abc3e1c-d909-4571-b016-34f7d0255f8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea540294-3ce8-4941-bbbf-7754b7aff460",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    version: '15.5.1'\n});\nassert.strictEqual(device.version, '15.5.1');",
                  "err": {},
                  "uuid": "a9f2c7de-5c95-4df0-be9a-0914c411af7f",
                  "parentUUID": "ea540294-3ce8-4941-bbbf-7754b7aff460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.version, undefined);",
                  "err": {},
                  "uuid": "626c6fce-633a-4d24-ae2b-4821bc57831a",
                  "parentUUID": "ea540294-3ce8-4941-bbbf-7754b7aff460",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9f2c7de-5c95-4df0-be9a-0914c411af7f",
                "626c6fce-633a-4d24-ae2b-4821bc57831a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14fe5110-96b4-46be-ad34-c30e7c7703c3",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    services: [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]\n});\nassert.deepStrictEqual(device.services, [\n    {\n        protocol: 'mrp',\n        port: 49152\n    },\n    {\n        protocol: 'airplay',\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "23091a32-4c1e-4281-83d2-b084d3c425db",
                  "parentUUID": "14fe5110-96b4-46be-ad34-c30e7c7703c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.services, undefined);",
                  "err": {},
                  "uuid": "23d22776-65fc-40bc-8f30-c70b71c26bd1",
                  "parentUUID": "14fe5110-96b4-46be-ad34-c30e7c7703c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23091a32-4c1e-4281-83d2-b084d3c425db",
                "23d22776-65fc-40bc-8f30-c70b71c26bd1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2832e53-ee63-44fe-98eb-cee9d388bac0",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "ffa99ecf-0cd3-43ec-b0a2-ba0955848e95",
                  "parentUUID": "d2832e53-ee63-44fe-98eb-cee9d388bac0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "d9944d37-b6f6-4947-815f-747cce9ae3f7",
                  "parentUUID": "d2832e53-ee63-44fe-98eb-cee9d388bac0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "cc31f928-4273-4f85-bfb3-f41f428bb875",
                  "parentUUID": "d2832e53-ee63-44fe-98eb-cee9d388bac0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ffa99ecf-0cd3-43ec-b0a2-ba0955848e95",
                "d9944d37-b6f6-4947-815f-747cce9ae3f7",
                "cc31f928-4273-4f85-bfb3-f41f428bb875"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f59d61f-2c0c-407c-a555-ca7d7076cfb9",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "a6de2790-a1e9-4858-ac62-4e8a30324fd0",
                  "parentUUID": "8f59d61f-2c0c-407c-a555-ca7d7076cfb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "91551df6-9bc9-492b-8a8e-f99857c588a8",
                  "parentUUID": "8f59d61f-2c0c-407c-a555-ca7d7076cfb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "5c3206ca-7553-43c8-8110-661e88a75f52",
                  "parentUUID": "8f59d61f-2c0c-407c-a555-ca7d7076cfb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nassert.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "a63fd4a7-eb25-42dd-9a65-81dc7ae3093a",
                  "parentUUID": "8f59d61f-2c0c-407c-a555-ca7d7076cfb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6de2790-a1e9-4858-ac62-4e8a30324fd0",
                "91551df6-9bc9-492b-8a8e-f99857c588a8",
                "5c3206ca-7553-43c8-8110-661e88a75f52",
                "a63fd4a7-eb25-42dd-9a65-81dc7ae3093a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe6d0b0d-7265-4795-9edd-7753814b87e3",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "15de2b90-892d-4fcf-984e-acab0485f1e3",
                  "parentUUID": "fe6d0b0d-7265-4795-9edd-7753814b87e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n};\nconst deviceA = new NodePyATVDevice(config);\nconst deviceB = new NodePyATVDevice(deviceA.toJSON());\nassert.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "1f8c9cef-50d9-4ef6-8c88-a1a77c81dd1b",
                  "parentUUID": "fe6d0b0d-7265-4795-9edd-7753814b87e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15de2b90-892d-4fcf-984e-acab0485f1e3",
                "1f8c9cef-50d9-4ef6-8c88-a1a77c81dd1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4b36f34-f8e5-4c58-b19b-4275a588befd",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "7ef5058c-b327-4757-8be5-82277912f585",
                  "parentUUID": "e4b36f34-f8e5-4c58-b19b-4275a588befd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ef5058c-b327-4757-8be5-82277912f585"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65eebf78-de80-42b5-944b-dbd697653650",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "92d7255f-df86-457d-8344-9d48cb36ed5b",
                  "parentUUID": "65eebf78-de80-42b5-944b-dbd697653650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const result = yield device.getState();\n    assert.deepStrictEqual(result, {\n        dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n        hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n        mediaType: NodePyATVMediaType.video,\n        deviceState: NodePyATVDeviceState.playing,\n        focusState: null,\n        title: 'Solo: A Star Wars Story',\n        artist: null,\n        album: null,\n        genre: null,\n        totalTime: 8097,\n        volume: null,\n        position: 27,\n        shuffle: NodePyATVShuffleState.off,\n        repeat: NodePyATVRepeatState.off,\n        app: 'Disney+',\n        appId: 'com.disney.disneyplus',\n        powerState: null,\n        outputDevices: null\n    });\n});",
                  "err": {},
                  "uuid": "321155dc-72ee-449d-aea6-010ba53ac646",
                  "parentUUID": "65eebf78-de80-42b5-944b-dbd697653650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.getState();\n    }), /Got pyatv Error: invalid credentials: 321/);\n});",
                  "err": {},
                  "uuid": "26a45f30-1770-4084-82d4-84904144e8d3",
                  "parentUUID": "65eebf78-de80-42b5-944b-dbd697653650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    const secondResult = yield device.getState();\n    assert.strictEqual(firstResult.dateTime, secondResult.dateTime);\n    assert.strictEqual(executions, 1);\n});",
                  "err": {},
                  "uuid": "5545d964-87b4-4af3-aa8f-ce90c15f49df",
                  "parentUUID": "65eebf78-de80-42b5-944b-dbd697653650",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date(new Date().getTime() - 1000).toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    assert.strictEqual(firstResult.position, 27);\n    const secondResult = yield device.getState();\n    assert.ok(secondResult.position);\n    assert.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\n    assert.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);\n});",
                  "err": {},
                  "uuid": "a6b57d72-fa18-46be-bbf3-553a036beb7a",
                  "parentUUID": "65eebf78-de80-42b5-944b-dbd697653650",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "321155dc-72ee-449d-aea6-010ba53ac646",
                "26a45f30-1770-4084-82d4-84904144e8d3",
                "5545d964-87b4-4af3-aa8f-ce90c15f49df",
                "a6b57d72-fa18-46be-bbf3-553a036beb7a"
              ],
              "failures": [],
              "pending": [
                "92d7255f-df86-457d-8344-9d48cb36ed5b"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48e4e6ea-5fe5-4549-a92c-874695bf20e7",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                title: 'Solo: A Star Wars Story'\n            });\n        })\n    });\n    assert.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    device.clearState();\n    assert.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    assert.strictEqual(executions, 2);\n});",
                  "err": {},
                  "uuid": "306dd48c-3c15-45ee-b981-20e5a7630027",
                  "parentUUID": "48e4e6ea-5fe5-4549-a92c-874695bf20e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "306dd48c-3c15-45ee-b981-20e5a7630027"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d2a730c-8d8a-406d-ab1c-3a10548e3c4c",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON()\n            });\n        })\n    });\n    const result = yield device.getDateTime();\n    assert.ok(result instanceof Date);\n});",
                  "err": {},
                  "uuid": "187347a7-28c6-43b5-89d0-152aadcf978e",
                  "parentUUID": "0d2a730c-8d8a-406d-ab1c-3a10548e3c4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "187347a7-28c6-43b5-89d0-152aadcf978e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b402f3b-08d9-415c-aa3d-1b1c38d0881b",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                hash: '12345'\n            });\n        })\n    });\n    const result = yield device.getHash();\n    assert.strictEqual(result, '12345');\n});",
                  "err": {},
                  "uuid": "d69edf2a-cf65-4055-bc12-b0cd377711a7",
                  "parentUUID": "4b402f3b-08d9-415c-aa3d-1b1c38d0881b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d69edf2a-cf65-4055-bc12-b0cd377711a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "80b69ad4-dc0b-40f2-a6f9-1c7d42340e7c",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                media_type: 'video'\n            });\n        })\n    });\n    const result = yield device.getMediaType();\n    assert.deepStrictEqual(result, NodePyATVMediaType.video);\n    assert.deepStrictEqual(result, 'video');\n});",
                  "err": {},
                  "uuid": "bfe14509-483b-4e2d-b12f-5a188a84fd32",
                  "parentUUID": "80b69ad4-dc0b-40f2-a6f9-1c7d42340e7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfe14509-483b-4e2d-b12f-5a188a84fd32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd190980-5d91-4983-907f-bf1542226de8",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                device_state: 'seeking'\n            });\n        })\n    });\n    const result = yield device.getDeviceState();\n    assert.deepStrictEqual(result, NodePyATVDeviceState.seeking);\n    assert.deepStrictEqual(result, 'seeking');\n});",
                  "err": {},
                  "uuid": "12a9d9fa-5899-439d-9c16-c564a08fe9da",
                  "parentUUID": "dd190980-5d91-4983-907f-bf1542226de8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12a9d9fa-5899-439d-9c16-c564a08fe9da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "275c5e86-64e9-48b6-a355-bc08e9d3b0e1",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const result = yield device.getTitle();\n    assert.strictEqual(result, 'My Movie');\n});",
                  "err": {},
                  "uuid": "50e55c89-9169-4d75-bf4d-c39682690c62",
                  "parentUUID": "275c5e86-64e9-48b6-a355-bc08e9d3b0e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50e55c89-9169-4d75-bf4d-c39682690c62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "05e394e9-34ff-481a-9982-92cd60f6df27",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                artist: 'My Artist'\n            });\n        })\n    });\n    const result = yield device.getArtist();\n    assert.strictEqual(result, 'My Artist');\n});",
                  "err": {},
                  "uuid": "5d73d0c9-5e83-4ec1-bfa0-d92f56c0c0db",
                  "parentUUID": "05e394e9-34ff-481a-9982-92cd60f6df27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d73d0c9-5e83-4ec1-bfa0-d92f56c0c0db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5fc7b91-a8d0-4312-80f9-fbbcfe0ed077",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                album: 'My ALbum'\n            });\n        })\n    });\n    const result = yield device.getAlbum();\n    assert.strictEqual(result, 'My ALbum');\n});",
                  "err": {},
                  "uuid": "d546019c-e1a2-41d2-b6b3-761aa3c203b4",
                  "parentUUID": "f5fc7b91-a8d0-4312-80f9-fbbcfe0ed077",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d546019c-e1a2-41d2-b6b3-761aa3c203b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "07bd921b-ac02-4418-943a-efab2f3f86f0",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                genre: 'My Genre'\n            });\n        })\n    });\n    const result = yield device.getGenre();\n    assert.strictEqual(result, 'My Genre');\n});",
                  "err": {},
                  "uuid": "c983644a-c5cc-4cfb-9506-7aec77cd6e02",
                  "parentUUID": "07bd921b-ac02-4418-943a-efab2f3f86f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c983644a-c5cc-4cfb-9506-7aec77cd6e02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e71647a5-d4c4-422f-a3f1-61866412020f",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                total_time: 45\n            });\n        })\n    });\n    const result = yield device.getTotalTime();\n    assert.strictEqual(result, 45);\n});",
                  "err": {},
                  "uuid": "89a468df-6b09-4f2b-a390-02ba7db94ece",
                  "parentUUID": "e71647a5-d4c4-422f-a3f1-61866412020f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89a468df-6b09-4f2b-a390-02ba7db94ece"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8fd19447-eb33-4efd-9b44-8b95be28601c",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                position: 30\n            });\n        })\n    });\n    const result = yield device.getPosition();\n    assert.strictEqual(result, 30);\n});",
                  "err": {},
                  "uuid": "96b557de-28cc-4dab-8010-81d522697d10",
                  "parentUUID": "8fd19447-eb33-4efd-9b44-8b95be28601c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96b557de-28cc-4dab-8010-81d522697d10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bbdc00cd-9fdc-420b-920a-cb6d4e50e500",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                shuffle: 'songs'\n            });\n        })\n    });\n    const result = yield device.getShuffle();\n    assert.deepStrictEqual(result, NodePyATVShuffleState.songs);\n    assert.deepStrictEqual(result, 'songs');\n});",
                  "err": {},
                  "uuid": "6a9112a2-7c71-44e0-a8a3-b5cc9cd2005d",
                  "parentUUID": "bbdc00cd-9fdc-420b-920a-cb6d4e50e500",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a9112a2-7c71-44e0-a8a3-b5cc9cd2005d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1efcca22-da83-4ad9-9f07-6063fe68426d",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                repeat: 'all'\n            });\n        })\n    });\n    const result = yield device.getRepeat();\n    assert.deepStrictEqual(result, NodePyATVRepeatState.all);\n    assert.deepStrictEqual(result, 'all');\n});",
                  "err": {},
                  "uuid": "623ff7c5-a0cc-46bd-90c9-3e7a1cfd5eb9",
                  "parentUUID": "1efcca22-da83-4ad9-9f07-6063fe68426d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "623ff7c5-a0cc-46bd-90c9-3e7a1cfd5eb9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "12d2dd7d-e367-43e7-9494-e6c20eedca87",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app: 'My App'\n            });\n        })\n    });\n    const result = yield device.getApp();\n    assert.strictEqual(result, 'My App');\n});",
                  "err": {},
                  "uuid": "67eb910a-1938-4a3a-bf69-41ba952fc358",
                  "parentUUID": "12d2dd7d-e367-43e7-9494-e6c20eedca87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67eb910a-1938-4a3a-bf69-41ba952fc358"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "92a7e2e3-34dd-4f24-a1e0-55b983aff1af",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app_id: 'app.example.com'\n            });\n        })\n    });\n    const result = yield device.getAppId();\n    assert.strictEqual(result, 'app.example.com');\n});",
                  "err": {},
                  "uuid": "8598163c-8d8b-425a-b776-8e39f17f6369",
                  "parentUUID": "92a7e2e3-34dd-4f24-a1e0-55b983aff1af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8598163c-8d8b-425a-b776-8e39f17f6369"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "253eff65-dde2-4aad-ab29-6b24973c1109",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), ' +\n                'App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), ' +\n                'App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App Store ' +\n                '(com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), ' +\n                'App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ ' +\n                '(com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE ' +\n                '(tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek ' +\n                '(de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), ' +\n                'App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), ' +\n                'App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), ' +\n                'App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), ' +\n                'App: Musik (com.apple.TVMusic)');\n        })\n    });\n    const result = yield device.listApps();\n    assert.strictEqual(result.length, 25);\n    assert.strictEqual(result[0].id, 'com.apple.Fitness');\n    assert.strictEqual(result[0].name, 'Fitness');\n});",
                  "err": {},
                  "uuid": "3bb6b8f5-0877-4d24-bdbb-587e6a07f5ed",
                  "parentUUID": "253eff65-dde2-4aad-ab29-6b24973c1109",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bb6b8f5-0877-4d24-bdbb-587e6a07f5ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0db814bf-c5dd-457e-9c00-c1fbd83f0617",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    yield device.pressKey(NodePyATVKeys.home);\n});",
                  "err": {},
                  "uuid": "cfd9e16f-3e6c-4862-8f55-4b98d2f85593",
                  "parentUUID": "0db814bf-c5dd-457e-9c00-c1fbd83f0617",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2'\n    });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        yield device.pressKey('foo');\n    }), /Unsupported key value foo/);\n});",
                  "err": {},
                  "uuid": "8a89a921-091d-4e12-92d5-8a08abb39378",
                  "parentUUID": "0db814bf-c5dd-457e-9c00-c1fbd83f0617",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"failure\"}');\n        })\n    });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.pressKey(NodePyATVKeys.home);\n    }), /Unable to parse pyatv response/);\n});",
                  "err": {},
                  "uuid": "1a05fc54-6dd9-42d5-aac6-29b804c6759a",
                  "parentUUID": "0db814bf-c5dd-457e-9c00-c1fbd83f0617",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfd9e16f-3e6c-4862-8f55-4b98d2f85593",
                "8a89a921-091d-4e12-92d5-8a08abb39378",
                "1a05fc54-6dd9-42d5-aac6-29b804c6759a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb0485db-5a33-40a2-87b3-8e50b215f24e",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "2c025fcf-c70d-49a7-8f69-74fca00ab04a",
                  "parentUUID": "bb0485db-5a33-40a2-87b3-8e50b215f24e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c025fcf-c70d-49a7-8f69-74fca00ab04a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d65cae6-10f8-4fee-b006-61c40e6b4303",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "6308b783-daad-44fa-93a5-13f6c9223843",
                  "parentUUID": "0d65cae6-10f8-4fee-b006-61c40e6b4303",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6308b783-daad-44fa-93a5-13f6c9223843"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52a8189d-d10c-4d96-9a71-16368bba9ff5",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "9729adfd-c16e-40cc-b65a-dc9084054d82",
                  "parentUUID": "52a8189d-d10c-4d96-9a71-16368bba9ff5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9729adfd-c16e-40cc-b65a-dc9084054d82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "873f19f1-2302-455e-aede-5d60bd7590a1",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "5e921d66-b9ef-4b45-9653-23c2eda4ee5c",
                  "parentUUID": "873f19f1-2302-455e-aede-5d60bd7590a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e921d66-b9ef-4b45-9653-23c2eda4ee5c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9067b62a-bb72-44b0-aea9-af56681e4a7c",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "1f917660-a12e-43d8-93e8-398c7a33dd22",
                  "parentUUID": "9067b62a-bb72-44b0-aea9-af56681e4a7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f917660-a12e-43d8-93e8-398c7a33dd22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "db7cdf04-c045-4f43-8974-cc06c6d2d90f",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "047f6adf-6d53-459e-871b-fc03fe283105",
                  "parentUUID": "db7cdf04-c045-4f43-8974-cc06c6d2d90f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "047f6adf-6d53-459e-871b-fc03fe283105"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "667290f6-a8e8-476f-848b-5fcc967091e0",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "e0c2458e-46b5-41f8-8fa8-cabcd443a265",
                  "parentUUID": "667290f6-a8e8-476f-848b-5fcc967091e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0c2458e-46b5-41f8-8fa8-cabcd443a265"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff414c8f-6617-4a63-af63-e6555e5e521a",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "f4fe479c-2b48-48e7-8bad-32e08ec9deca",
                  "parentUUID": "ff414c8f-6617-4a63-af63-e6555e5e521a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4fe479c-2b48-48e7-8bad-32e08ec9deca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4496df25-6e0d-470f-933a-b6fd30213e1e",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "1b7fd402-b1fa-4dc7-ac63-15f3a193087a",
                  "parentUUID": "4496df25-6e0d-470f-933a-b6fd30213e1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b7fd402-b1fa-4dc7-ac63-15f3a193087a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd7cabd8-944d-4751-8254-65a738022286",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c1575f24-e636-4a5c-9458-e6da55d70316",
                  "parentUUID": "fd7cabd8-944d-4751-8254-65a738022286",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1575f24-e636-4a5c-9458-e6da55d70316"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4e23f23-c9e4-4b20-85aa-50e9b9c69194",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "39ad7ac4-9456-4f48-844a-5088ca58ff70",
                  "parentUUID": "d4e23f23-c9e4-4b20-85aa-50e9b9c69194",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39ad7ac4-9456-4f48-844a-5088ca58ff70"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89c652ee-2b15-42d7-9b13-f97e40e2ff43",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "0b3c2bf1-ed52-471a-9d32-78b37462c356",
                  "parentUUID": "89c652ee-2b15-42d7-9b13-f97e40e2ff43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b3c2bf1-ed52-471a-9d32-78b37462c356"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a0953d5d-03d5-42d8-9e29-4fcfe9adf14e",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "80f4ff9b-8ab4-4a56-8514-f62e696abf47",
                  "parentUUID": "a0953d5d-03d5-42d8-9e29-4fcfe9adf14e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80f4ff9b-8ab4-4a56-8514-f62e696abf47"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "362fd49c-fd9d-4dda-be03-c5d15097048e",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "b3c56545-fe65-471a-a166-05fe4330fb09",
                  "parentUUID": "362fd49c-fd9d-4dda-be03-c5d15097048e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3c56545-fe65-471a-a166-05fe4330fb09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7b3b50be-017b-4ae4-9a41-34b34e2b83d5",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "da0f5be2-215a-417e-82a2-a4e1606705d5",
                  "parentUUID": "7b3b50be-017b-4ae4-9a41-34b34e2b83d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da0f5be2-215a-417e-82a2-a4e1606705d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d926c9d5-0a7e-46d7-9da9-ece861beee3b",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "4703f5d6-6ef1-4d1c-8797-446a16270340",
                  "parentUUID": "d926c9d5-0a7e-46d7-9da9-ece861beee3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4703f5d6-6ef1-4d1c-8797-446a16270340"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d2c99ed-c21b-4944-a7a8-7eda4f025c12",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "1a876de3-5adc-4bcc-a76c-bc691ea67fac",
                  "parentUUID": "3d2c99ed-c21b-4944-a7a8-7eda4f025c12",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a876de3-5adc-4bcc-a76c-bc691ea67fac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e843122-ac94-4c44-a719-78dc27f7f2b0",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "29b6bfa0-a0a8-4c76-b326-4e51aea3e372",
                  "parentUUID": "1e843122-ac94-4c44-a719-78dc27f7f2b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29b6bfa0-a0a8-4c76-b326-4e51aea3e372"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc0d55ae-b3bd-4e8b-947f-7d7ea59cc873",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "18a04140-1ef2-40f2-82b0-c26eef2869f0",
                  "parentUUID": "bc0d55ae-b3bd-4e8b-947f-7d7ea59cc873",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18a04140-1ef2-40f2-82b0-c26eef2869f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5286ef2b-2112-4596-84a4-fc2dbc9d2a15",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "ba5a72f8-863e-4ffd-a685-d32d789100af",
                  "parentUUID": "5286ef2b-2112-4596-84a4-fc2dbc9d2a15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba5a72f8-863e-4ffd-a685-d32d789100af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9960cce9-c251-4c2f-9021-c173993d5543",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "3dc0caaa-be60-47d1-b488-e6b67c9c61d0",
                  "parentUUID": "9960cce9-c251-4c2f-9021-c173993d5543",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3dc0caaa-be60-47d1-b488-e6b67c9c61d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4a5fd1e-6784-4f99-99f8-92dd8ca221da",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "fbd925b4-e6b5-43bb-8450-3461733056f7",
                  "parentUUID": "d4a5fd1e-6784-4f99-99f8-92dd8ca221da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbd925b4-e6b5-43bb-8450-3461733056f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8fc4594d-3232-4dc4-a7e3-30c4dc2962bc",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c8cd0132-bb54-468d-bb72-d4cc3721b0d8",
                  "parentUUID": "8fc4594d-3232-4dc4-a7e3-30c4dc2962bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8cd0132-bb54-468d-bb72-d4cc3721b0d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad48b021-14c2-4410-915e-2a7aaad0f415",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('');\n        })\n    });\n    yield device.launchApp('com.apple.TVShows');\n});",
                  "err": {},
                  "uuid": "3e3f5128-1b6d-4efa-b673-ece5ec37284d",
                  "parentUUID": "ad48b021-14c2-4410-915e-2a7aaad0f415",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e3f5128-1b6d-4efa-b673-ece5ec37284d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "54856ef8-f15e-47de-a3c5-fc4c3c5a4563",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4716ab41-080e-4ece-8880-1616c64757e6",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 691,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(4000);\n    const result = yield NodePyATVInstance.version();\n    if (result.pyatv === null) {\n        throw new Error('No version found for pyatv. Is it installed in test environment?');\n    }\n    assert.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\n    assert.ok(result.pyatv.length >= 5, 'result.pyatv has content');\n    assert.strictEqual(result.module, version);\n});",
                  "err": {},
                  "uuid": "07880a88-4dcb-416c-b4f1-1c47821438b1",
                  "parentUUID": "4716ab41-080e-4ece-8880-1616c64757e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => {\n            cp.code(1);\n            cp.end('atvremote 0.7.4');\n        })\n    });\n    assert.ok(result.pyatv);\n    assert.strictEqual(result.pyatv, '0.7.4');\n});",
                  "err": {},
                  "uuid": "0f03623c-9191-4940-8b39-d81f87a78149",
                  "parentUUID": "4716ab41-080e-4ece-8880-1616c64757e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        noColors: true,\n        spawn: createFakeSpawn(cp => cp.code(1).end())\n    });\n    assert.strictEqual(result.module, version);\n});",
                  "err": {},
                  "uuid": "aae114fe-636c-4181-94d4-1b3c114d6099",
                  "parentUUID": "4716ab41-080e-4ece-8880-1616c64757e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.version({\n        atvremotePath: '/foo/bar',\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), '/foo/bar');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "5418946e-653a-4a1c-8279-4cfe20ac7634",
                  "parentUUID": "4716ab41-080e-4ece-8880-1616c64757e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.version({\n        debug: true,\n        spawn: createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "5f35d3e9-2f63-4f8b-a198-ef56afd3c4e7",
                  "parentUUID": "4716ab41-080e-4ece-8880-1616c64757e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.version({\n        debug: () => {\n            // no debug log\n        },\n        noColors: true,\n        spawn: createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "b3c64d6f-f9c5-453c-a092-5fa835e9ece8",
                  "parentUUID": "4716ab41-080e-4ece-8880-1616c64757e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n    });\n    assert.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "f24b1935-3b43-4356-b7a3-c58554da9c57",
                  "parentUUID": "4716ab41-080e-4ece-8880-1616c64757e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).end();\n        })\n    });\n    assert.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "3be04fd6-cbb1-4c3f-98c1-d06ec8f73836",
                  "parentUUID": "4716ab41-080e-4ece-8880-1616c64757e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('atvremote 42').code(1).end();\n        })\n    });\n    assert.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "98f951f0-37a0-43f2-832c-a304bb26d576",
                  "parentUUID": "4716ab41-080e-4ece-8880-1616c64757e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07880a88-4dcb-416c-b4f1-1c47821438b1",
                "0f03623c-9191-4940-8b39-d81f87a78149",
                "aae114fe-636c-4181-94d4-1b3c114d6099",
                "5418946e-653a-4a1c-8279-4cfe20ac7634",
                "5f35d3e9-2f63-4f8b-a198-ef56afd3c4e7",
                "b3c64d6f-f9c5-453c-a092-5fa835e9ece8",
                "f24b1935-3b43-4356-b7a3-c58554da9c57",
                "3be04fd6-cbb1-4c3f-98c1-d06ec8f73836",
                "98f951f0-37a0-43f2-832c-a304bb26d576"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 704,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa8f29f3-48a9-4304-adfa-cb1564dba3d5",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5853,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(12000);\n    yield NodePyATVInstance.check();\n});",
                  "err": {},
                  "uuid": "c0027fc9-00f4-44f7-96e1-05c2a7404c85",
                  "parentUUID": "fa8f29f3-48a9-4304-adfa-cb1564dba3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.check({\n            spawn: createFakeSpawn(cp => {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "adc82bd3-fff5-4850-b465-12f4c21c402f",
                  "parentUUID": "fa8f29f3-48a9-4304-adfa-cb1564dba3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.check({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout('atvremote 0.5.1').code(1).end();\n            })\n        });\n    }), /Found pyatv, but unforunately it's too old. Please update pyatv./);\n});",
                  "err": {},
                  "uuid": "e3a888a5-c81e-4fff-b313-11a4f04cd00a",
                  "parentUUID": "fa8f29f3-48a9-4304-adfa-cb1564dba3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let i = 0;\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.check({\n            spawn: createFakeSpawn(cp => {\n                if (i === 0) {\n                    cp.stdout('atvremote 0.7.0').code(1).end();\n                    i++;\n                }\n                else {\n                    cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n                }\n            })\n        });\n    }), /Unable to scan for devices/);\n});",
                  "err": {},
                  "uuid": "ff292426-3bfa-43a4-8d53-931855af2bad",
                  "parentUUID": "fa8f29f3-48a9-4304-adfa-cb1564dba3d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0027fc9-00f4-44f7-96e1-05c2a7404c85",
                "adc82bd3-fff5-4850-b465-12f4c21c402f",
                "e3a888a5-c81e-4fff-b313-11a4f04cd00a",
                "ff292426-3bfa-43a4-8d53-931855af2bad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5858,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5425,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(10000);\n    const result = yield NodePyATVInstance.find();\n    assert.ok(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "c538fab2-1134-42f3-af77-ed427d919649",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.find({\n        atvscriptPath: '/foo/bar',\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), '/foo/bar');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "7ceb15ac-0fc9-4eeb-af66-5ffc1d15148e",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stderr('Hello World!').code(1).end();\n            })\n        });\n    }), /Unable to execute request/);\n});",
                  "err": {},
                  "uuid": "fde600a6-b560-4710-a8a8-4ece45d4479b",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.error(new Error('Hello world!')).code(1).end();\n            })\n        });\n    }), /Hello world!/);\n});",
                  "err": {},
                  "uuid": "a34b764c-e3db-4a2b-89d5-16696342db7e",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                // Example output from @maxileith\n                // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n                cp.stdout({\n                    result: 'failure',\n                    datetime: '2020-11-06T20:47:30.840022+01:00',\n                    error: 'Task exception was never retrieved',\n                    exception: '[Errno 113] Connect call failed'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to find any devices, but received 1 error: /);\n});",
                  "err": {},
                  "uuid": "52c5ddf6-fa8b-4ec2-8e61-008fd6935db7",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout(JSON.stringify({\n                    'result': 'success',\n                    'datetime': '2020-11-06T20:47:30.840022+01:00',\n                    'devices': []\n                }).substr(1)).end();\n            })\n        });\n    }), /Unable to parse result/);\n});",
                  "err": {},
                  "uuid": "356c0477-b7ad-4897-850b-61707807b8af",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'error'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "13ec7415-aa7b-41f6-b167-040c4a41494c",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'success'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "b04830e5-ad10-42c7-a92d-f10ace4458aa",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                devices: [\n                    {\n                        name: 'Vardagsrum',\n                        address: '10.0.10.81',\n                        identifier: 'xxx'\n                    }\n                ]\n            }).code(1).end();\n        })\n    });\n    assert.strictEqual(devices.length, 1);\n    assert.strictEqual(devices[0].name, 'Vardagsrum');\n    assert.strictEqual(devices[0].host, '10.0.10.81');\n    assert.strictEqual(devices[0].id, 'xxx');\n    assert.strictEqual(devices[0].model, undefined);\n    assert.strictEqual(devices[0].modelName, undefined);\n    assert.strictEqual(devices[0].os, undefined);\n    assert.strictEqual(devices[0].version, undefined);\n    assert.deepStrictEqual(devices[0].services, undefined);\n});",
                  "err": {},
                  "uuid": "ae90bb10-c893-4920-90e6-66b0be272683",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                devices: [\n                    {\n                        name: 'Vardagsrum',\n                        address: '10.0.10.81',\n                        identifier: 'xxx',\n                        device_info: {\n                            'model': 'Gen4K',\n                            'model_str': 'Apple TV 4K',\n                            'operating_system': 'TvOS',\n                            'version': '15.5.1'\n                        },\n                        services: [\n                            {\n                                protocol: 'mrp',\n                                port: 49152\n                            },\n                            {\n                                protocol: 'airplay',\n                                port: 7000\n                            }\n                        ]\n                    }\n                ]\n            }).code(1).end();\n        })\n    });\n    assert.strictEqual(devices.length, 1);\n    assert.strictEqual(devices[0].name, 'Vardagsrum');\n    assert.strictEqual(devices[0].host, '10.0.10.81');\n    assert.strictEqual(devices[0].id, 'xxx');\n    assert.strictEqual(devices[0].model, 'Gen4K');\n    assert.strictEqual(devices[0].modelName, 'Apple TV 4K');\n    assert.strictEqual(devices[0].os, 'TvOS');\n    assert.strictEqual(devices[0].version, '15.5.1');\n    assert.deepStrictEqual(devices[0].services, [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]);\n});",
                  "err": {},
                  "uuid": "8bd9a37c-3e5a-4d1f-a6a1-23faffa1832b",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            // Example output from @maxileith\n            // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n            cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n        })\n    });\n    assert.strictEqual(devices.length, 4);\n    assert.strictEqual(devices[0].name, 'Living Room');\n    assert.strictEqual(devices[0].host, '10.0.0.30');\n    assert.strictEqual(devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\n    assert.strictEqual(devices[1].name, 'Kitchen');\n    assert.strictEqual(devices[1].host, '10.0.0.79');\n    assert.strictEqual(devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\n    assert.strictEqual(devices[2].name, 'Bedroom');\n    assert.strictEqual(devices[2].host, '10.0.0.20');\n    assert.strictEqual(devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\n    assert.strictEqual(devices[3].name, 'Basement');\n    assert.strictEqual(devices[3].host, '10.0.0.156');\n    assert.strictEqual(devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');\n});",
                  "err": {},
                  "uuid": "fbbed77f-ac1a-465d-a438-f5a0f4c9cde2",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const response = yield NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            // Example output from @maxileith\n            // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n            cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n        })\n    }, true);\n    assert.strictEqual(response.devices.length, 4);\n    assert.strictEqual(response.errors.length, 2);\n    assert.strictEqual(response.devices[0].name, 'Living Room');\n    assert.strictEqual(response.devices[0].host, '10.0.0.30');\n    assert.strictEqual(response.devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\n    assert.strictEqual(response.devices[1].name, 'Kitchen');\n    assert.strictEqual(response.devices[1].host, '10.0.0.79');\n    assert.strictEqual(response.devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\n    assert.strictEqual(response.devices[2].name, 'Bedroom');\n    assert.strictEqual(response.devices[2].host, '10.0.0.20');\n    assert.strictEqual(response.devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\n    assert.strictEqual(response.devices[3].name, 'Basement');\n    assert.strictEqual(response.devices[3].host, '10.0.0.156');\n    assert.strictEqual(response.devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');\n    assert.strictEqual(response.errors[0].exception, '[Errno 113] Connect call failed (\\'10.0.0.232\\', 32498)');\n    assert.strictEqual(response.errors[1].exception, '[Errno 113] Connect call failed (\\'10.0.0.229\\', 32498)');\n});",
                  "err": {},
                  "uuid": "a1903c48-6857-4ecd-b12d-551118d18a9b",
                  "parentUUID": "3b264f41-1b6f-463b-a8ba-1ec2f3342e24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c538fab2-1134-42f3-af77-ed427d919649",
                "7ceb15ac-0fc9-4eeb-af66-5ffc1d15148e",
                "fde600a6-b560-4710-a8a8-4ece45d4479b",
                "a34b764c-e3db-4a2b-89d5-16696342db7e",
                "52c5ddf6-fa8b-4ec2-8e61-008fd6935db7",
                "356c0477-b7ad-4897-850b-61707807b8af",
                "13ec7415-aa7b-41f6-b167-040c4a41494c",
                "b04830e5-ad10-42c7-a92d-f10ace4458aa",
                "ae90bb10-c893-4920-90e6-66b0be272683",
                "8bd9a37c-3e5a-4d1f-a6a1-23faffa1832b",
                "fbbed77f-ac1a-465d-a438-f5a0f4c9cde2",
                "a1903c48-6857-4ecd-b12d-551118d18a9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5439,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2283fed1-4c5a-4bc7-b92f-af88457aa312",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = NodePyATVInstance.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert.strictEqual(device.host, '192.168.178.6');\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "6904c765-d1f1-4bc1-bc84-8ca965e4bbf9",
                  "parentUUID": "2283fed1-4c5a-4bc7-b92f-af88457aa312",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6904c765-d1f1-4bc1-bc84-8ca965e4bbf9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "239baa6f-ad63-42a1-8095-8deb5a78e6f0",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ atvremotePath: 'test' });\n    yield i.version({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "eda4fc79-27fc-421f-9560-9d106666b7d7",
                  "parentUUID": "239baa6f-ad63-42a1-8095-8deb5a78e6f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eda4fc79-27fc-421f-9560-9d106666b7d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "226490cf-878d-4c63-a8c5-c4a803bc2a32",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ atvremotePath: 'test' });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield i.check({\n            spawn: createFakeSpawn(cp => {\n                assert.strictEqual(cp.cmd(), 'test');\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "e4563472-5106-4b4c-be8a-67c8bed02d56",
                  "parentUUID": "226490cf-878d-4c63-a8c5-c4a803bc2a32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4563472-5106-4b4c-be8a-67c8bed02d56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ddcb77ae-aeca-4926-a3af-363d379a2d6f",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ atvscriptPath: 'test' });\n    yield i.find({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "1ccc8454-2d96-4acb-b3ab-ce8df8e7ef4a",
                  "parentUUID": "ddcb77ae-aeca-4926-a3af-363d379a2d6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ccc8454-2d96-4acb-b3ab-ce8df8e7ef4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "caea920f-4dd3-41e9-b819-9f55aaafb102",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ debug: true });\n    const d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\n    assert.deepStrictEqual(d.debug, true);\n});",
                  "err": {},
                  "uuid": "66ef9169-975c-4064-bba3-fb37abce55c1",
                  "parentUUID": "caea920f-4dd3-41e9-b819-9f55aaafb102",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66ef9169-975c-4064-bba3-fb37abce55c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol);",
                  "err": {},
                  "uuid": "15f4bf37-e907-4f6f-a9eb-d956f1a5f03f",
                  "parentUUID": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType);",
                  "err": {},
                  "uuid": "56af1210-84ce-4012-9b95-6cdaf4bd1935",
                  "parentUUID": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "73072e82-f973-4c16-85e5-e8f605a88c19",
                  "parentUUID": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "e7a8da77-44ea-45c7-82a0-17f250decb62",
                  "parentUUID": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "484b8042-c643-461c-a3dd-d4ba3a0bf920",
                  "parentUUID": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "b40940a2-e301-446f-b5f7-bbf3159481eb",
                  "parentUUID": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys);",
                  "err": {},
                  "uuid": "2d087201-a4a4-46c9-a436-5be09045b5be",
                  "parentUUID": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState);",
                  "err": {},
                  "uuid": "ee2f8a14-8a46-4e95-8870-5345878e71a0",
                  "parentUUID": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState);",
                  "err": {},
                  "uuid": "020470cf-393d-434c-8935-6ee643ab1d85",
                  "parentUUID": "5d7f8346-b8ce-41fb-9abc-c264ea75d8d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15f4bf37-e907-4f6f-a9eb-d956f1a5f03f",
                "56af1210-84ce-4012-9b95-6cdaf4bd1935",
                "73072e82-f973-4c16-85e5-e8f605a88c19",
                "e7a8da77-44ea-45c7-82a0-17f250decb62",
                "484b8042-c643-461c-a3dd-d4ba3a0bf920",
                "b40940a2-e301-446f-b5f7-bbf3159481eb",
                "2d087201-a4a4-46c9-a436-5be09045b5be",
                "ee2f8a14-8a46-4e95-8870-5345878e71a0",
                "020470cf-393d-434c-8935-6ee643ab1d85"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "487345e5-8246-4be9-9251-b1666c5a12aa",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8ec8ff59-e257-46f1-941d-9ba56cc9cd25",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = addRequestId();\nassert.strictEqual(typeof id, 'string');\nremoveRequestId(id);",
                  "err": {},
                  "uuid": "54f879d7-b307-464e-a1ca-15ce89ee2ba7",
                  "parentUUID": "8ec8ff59-e257-46f1-941d-9ba56cc9cd25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId('FOO');",
                  "err": {},
                  "uuid": "b2859237-b5c3-434d-b660-8b4232be0b8f",
                  "parentUUID": "8ec8ff59-e257-46f1-941d-9ba56cc9cd25",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54f879d7-b307-464e-a1ca-15ce89ee2ba7",
                "b2859237-b5c3-434d-b660-8b4232be0b8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52b6a4d6-d500-4007-9277-e40bbc750f21",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "ff05ddb1-b166-4bb2-98ab-31e2c2efd443",
                  "parentUUID": "52b6a4d6-d500-4007-9277-e40bbc750f21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "d20965ae-b544-4730-9cb6-88a9595ce59f",
                  "parentUUID": "52b6a4d6-d500-4007-9277-e40bbc750f21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "8e74f3cc-a315-4d0e-a24d-9f3554802f45",
                  "parentUUID": "52b6a4d6-d500-4007-9277-e40bbc750f21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "bf87c4a3-0832-4195-938e-6f47071cccd7",
                  "parentUUID": "52b6a4d6-d500-4007-9277-e40bbc750f21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "493ac345-59a4-4541-a887-e5cf53dfde7c",
                  "parentUUID": "52b6a4d6-d500-4007-9277-e40bbc750f21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff05ddb1-b166-4bb2-98ab-31e2c2efd443",
                "d20965ae-b544-4730-9cb6-88a9595ce59f",
                "8e74f3cc-a315-4d0e-a24d-9f3554802f45",
                "bf87c4a3-0832-4195-938e-6f47071cccd7",
                "493ac345-59a4-4541-a887-e5cf53dfde7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0aa0c4b-59f6-4af9-8212-91f62fa072f1",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "2e5a89d1-9a39-4440-9c29-93c43a37e0a2",
                  "parentUUID": "d0aa0c4b-59f6-4af9-8212-91f62fa072f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "607089d3-16ed-4c82-801a-ef1f209559ee",
                  "parentUUID": "d0aa0c4b-59f6-4af9-8212-91f62fa072f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "cfe88112-83ce-4b0a-8309-69f6c056edff",
                  "parentUUID": "d0aa0c4b-59f6-4af9-8212-91f62fa072f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "bb5fafee-a655-484a-92f7-ed40d5e2dd2b",
                  "parentUUID": "d0aa0c4b-59f6-4af9-8212-91f62fa072f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e5a89d1-9a39-4440-9c29-93c43a37e0a2",
                "607089d3-16ed-4c82-801a-ef1f209559ee",
                "cfe88112-83ce-4b0a-8309-69f6c056edff",
                "bb5fafee-a655-484a-92f7-ed40d5e2dd2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67d920d0-857b-4eb6-9241-5ca6484a7b44",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield getParameters();\n    assert.deepEqual(result, []);\n});",
                  "err": {},
                  "uuid": "80a3797f-761f-43b8-95e9-e77dd67b549c",
                  "parentUUID": "67d920d0-857b-4eb6-9241-5ca6484a7b44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield getParameters({\n        host: '192.168.178.2'\n    });\n    assert.deepEqual(result, ['-s', '192.168.178.2']);\n});",
                  "err": {},
                  "uuid": "bcf0f3f9-69d1-46b3-9710-dee3d8ef68e2",
                  "parentUUID": "67d920d0-857b-4eb6-9241-5ca6484a7b44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield getParameters({\n        hosts: ['192.168.178.2', '192.168.178.3'],\n        id: '****',\n        protocol: NodePyATVProtocol.mrp,\n        dmapCredentials: '****',\n        mrpCredentials: '****',\n        airplayCredentials: '****',\n        companionCredentials: '1234',\n        raopCredentials: '::foo:'\n    });\n    assert.deepEqual(result, [\n        '-s', '192.168.178.2,192.168.178.3',\n        '-i', '****',\n        '--protocol', 'mrp',\n        '--dmap-credentials', '****',\n        '--mrp-credentials', '****',\n        '--airplay-credentials', '****',\n        '--companion-credentials', '1234',\n        '--raop-credentials', '::foo:'\n    ]);\n});",
                  "err": {},
                  "uuid": "60d89826-db92-4b2f-9f22-d21c4a982490",
                  "parentUUID": "67d920d0-857b-4eb6-9241-5ca6484a7b44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80a3797f-761f-43b8-95e9-e77dd67b549c",
                "bcf0f3f9-69d1-46b3-9710-dee3d8ef68e2",
                "60d89826-db92-4b2f-9f22-d21c4a982490"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b665440f-26b4-4adb-a114-6087838fd5ad",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "0deeb344-7266-43d1-a634-8bae630d4371",
                  "parentUUID": "b665440f-26b4-4adb-a114-6087838fd5ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = parseState(null, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "2a49efb5-f93f-4da4-8f4d-ea5398ff4933",
                  "parentUUID": "b665440f-26b4-4adb-a114-6087838fd5ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "e9eed72f-94db-4855-826e-031695ac979b",
                  "parentUUID": "b665440f-26b4-4adb-a114-6087838fd5ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert.throws(() => {\n    parseState(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "6e8fa08e-cebd-48ab-8617-fbe932b582d8",
                  "parentUUID": "b665440f-26b4-4adb-a114-6087838fd5ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "711ebd45-2a55-4690-ab5e-d2ca0c648e19",
                  "parentUUID": "b665440f-26b4-4adb-a114-6087838fd5ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "64d1f69c-3b75-437a-9d5d-bed6ddc9fba1",
                  "parentUUID": "b665440f-26b4-4adb-a114-6087838fd5ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "bb81cc9c-4b0c-4cb5-a99b-24d61682dae9",
                  "parentUUID": "b665440f-26b4-4adb-a114-6087838fd5ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0deeb344-7266-43d1-a634-8bae630d4371",
                "2a49efb5-f93f-4da4-8f4d-ea5398ff4933",
                "e9eed72f-94db-4855-826e-031695ac979b",
                "6e8fa08e-cebd-48ab-8617-fbe932b582d8",
                "711ebd45-2a55-4690-ab5e-d2ca0c648e19",
                "64d1f69c-3b75-437a-9d5d-bed6ddc9fba1",
                "bb81cc9c-4b0c-4cb5-a99b-24d61682dae9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}