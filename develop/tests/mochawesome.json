{
  "stats": {
    "suites": 93,
    "tests": 165,
    "passes": 163,
    "pending": 2,
    "failures": 0,
    "start": "2024-07-30T18:44:30.513Z",
    "end": "2024-07-30T18:44:42.345Z",
    "duration": 11832,
    "testsRegistered": 165,
    "passPercent": 100,
    "pendingPercent": 1.2121212121212122,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a2c2b8e5-4ae4-4cee-9d0a-b2750175d6f5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b20682ff-a22e-4947-bb1d-255cdf1fc5fc",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "128ff5b8-b2c6-4614-ae7f-0791f430d999",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "5138ae74-8c14-4b8d-9c65-7b459dcf617d",
                  "parentUUID": "128ff5b8-b2c6-4614-ae7f-0791f430d999",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5138ae74-8c14-4b8d-9c65-7b459dcf617d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "104f9edb-7538-4b6c-8899-8805b27e34bc",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "0d2e88da-0108-4d6b-83c2-8010649ef3bc",
                  "parentUUID": "104f9edb-7538-4b6c-8899-8805b27e34bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d2e88da-0108-4d6b-83c2-8010649ef3bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8201d47b-b4d2-43d2-8fa4-9f7120fed621",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "c03cd976-76af-4c6e-8890-fbd572925c20",
                  "parentUUID": "8201d47b-b4d2-43d2-8fa4-9f7120fed621",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c03cd976-76af-4c6e-8890-fbd572925c20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "effc70f3-e0ca-4327-834c-80268de85d13",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "2b41c585-9fe4-4915-ac7e-6a1a87c0c960",
                  "parentUUID": "effc70f3-e0ca-4327-834c-80268de85d13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b41c585-9fe4-4915-ac7e-6a1a87c0c960"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a2393fe-efa0-4c2c-a743-9acc4bcf5891",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "2a65374c-1947-4e2e-a53a-47971de385c7",
                  "parentUUID": "6a2393fe-efa0-4c2c-a743-9acc4bcf5891",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a65374c-1947-4e2e-a53a-47971de385c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "172128cf-0fdc-4bf1-886c-60bf2ea1a12a",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:title', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "2af23866-eae0-40bc-ba6f-82454c35630d",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "cbc53e90-c408-41f5-afde-806aacd9efe1",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst sort = [];\nawait Promise.race([\n    new Promise(cb => {\n        device.once('update', () => {\n            sort.push('update');\n            cb(undefined);\n        });\n    }),\n    new Promise(cb => {\n        device.once('update:title', () => {\n            sort.push('update:title');\n            cb(undefined);\n        });\n    })\n]);\nassert.deepStrictEqual(sort, ['update:title', 'update']);",
                  "err": {},
                  "uuid": "72e55ae5-2050-4505-9c1a-9c437af245e2",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('error', error => {\n        assert.ok(error instanceof Error);\n        assert.ok(error.toString().includes('invalid credentials: 321'));\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "2bf98b9b-1850-44dd-aa5b-f2e7382736f0",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter = 0;\nlet eventCounter = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        if (spawnCounter === 0) {\n            cp.onStdIn(() => cp.end());\n        }\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n        spawnCounter++;\n        if (spawnCounter >= 2) {\n            cp.end();\n        }\n    })\n});\nconst listener = () => {\n    eventCounter++;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\nawait device.getState();\ndevice.off('update', listener);\nassert.strictEqual(spawnCounter, 2);\nassert.strictEqual(eventCounter, 1);",
                  "err": {},
                  "uuid": "4a273522-085a-4c03-b577-3dd440e0e556",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nlet callCounter = 0;\nconst error = new Error('This is an error. Be nice.');\ndevice.once('error', err => {\n    assert.strictEqual(err, error);\n    callCounter++;\n});\nconst listener = () => {\n    throw error;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\ndevice.off('update', listener);\nassert.strictEqual(callCounter, 1);",
                  "err": {},
                  "uuid": "2e85a97b-d938-473b-b3c3-619a4e7485a2",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:powerState', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'powerState');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'off');\n        assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n        assert.strictEqual(event.value, 'off');\n        assert.strictEqual(event.value, NodePyATVPowerState.off);\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "d791ff27-5556-452c-89e6-192ed4fae5f5",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'powerState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'off');\n    assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n    assert.strictEqual(event.value, 'off');\n    assert.strictEqual(event.value, NodePyATVPowerState.off);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "421fc3f7-3722-4047-813e-e7c840e5e4b0",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            focus_state: 'unfocused'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'focusState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'unfocused');\n    assert.strictEqual(event.newValue, NodePyATVFocusState.unfocused);\n    assert.strictEqual(event.value, 'unfocused');\n    assert.strictEqual(event.value, NodePyATVFocusState.unfocused);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "26b46b6f-6414-435e-b42a-58ae95be9ea0",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            output_devices: [{\n                    name: 'Living room',\n                    identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n                }]\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'outputDevices');\n    assert.strictEqual(event.oldValue, null);\n    assert.deepStrictEqual(event.newValue, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.value, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "bf653861-dc9b-4fb0-81ff-251b1aa57efa",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            volume: 20.0\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'volume');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 20);\n    assert.strictEqual(event.value, 20);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "ac4e6982-0d78-4387-b91e-4add7158d327",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            foo: 'bar'\n        });\n        cp.end();\n    })\n});\ndevice.on('update', event => {\n    assert.fail(`Got an update event for a new field: ${event}`);\n});\nawait new Promise(cb => setTimeout(cb, 10));\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "6a645ca7-c1b1-4ca1-a686-91eed342ac54",
                  "parentUUID": "49c82a8a-e121-4fe1-bf23-50e6dd2aa53f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2af23866-eae0-40bc-ba6f-82454c35630d",
                "cbc53e90-c408-41f5-afde-806aacd9efe1",
                "72e55ae5-2050-4505-9c1a-9c437af245e2",
                "2bf98b9b-1850-44dd-aa5b-f2e7382736f0",
                "4a273522-085a-4c03-b577-3dd440e0e556",
                "2e85a97b-d938-473b-b3c3-619a4e7485a2",
                "d791ff27-5556-452c-89e6-192ed4fae5f5",
                "421fc3f7-3722-4047-813e-e7c840e5e4b0",
                "26b46b6f-6414-435e-b42a-58ae95be9ea0",
                "bf653861-dc9b-4fb0-81ff-251b1aa57efa",
                "ac4e6982-0d78-4387-b91e-4add7158d327",
                "6a645ca7-c1b1-4ca1-a686-91eed342ac54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 67,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51f4fb70-e721-421d-a784-bc550ca768fc",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error();\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.error(error).end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.strictEqual(err, error);\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "80edf702-66b1-494e-bc4e-6acb779f0e72",
                  "parentUUID": "51f4fb70-e721-421d-a784-bc550ca768fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stderr('Hello World!').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "5b2843b9-c5f3-4f20-95ce-98fd91bd1912",
                  "parentUUID": "51f4fb70-e721-421d-a784-bc550ca768fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('#').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Unable to parse stdout json: SyntaxError'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "17731cef-993e-4c21-bede-d226b038cee4",
                  "parentUUID": "51f4fb70-e721-421d-a784-bc550ca768fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "bd1f4a22-d90e-4562-92f5-49ecdda483e3",
                  "parentUUID": "51f4fb70-e721-421d-a784-bc550ca768fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80edf702-66b1-494e-bc4e-6acb779f0e72",
                "5b2843b9-c5f3-4f20-95ce-98fd91bd1912",
                "17731cef-993e-4c21-bede-d226b038cee4"
              ],
              "failures": [],
              "pending": [
                "bd1f4a22-d90e-4562-92f5-49ecdda483e3"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cbbcf735-e940-4886-b4cc-4ec114a824d9",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "c261bf8d-3502-4283-8413-7c6cf2c644b8",
                  "parentUUID": "cbbcf735-e940-4886-b4cc-4ec114a824d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c261bf8d-3502-4283-8413-7c6cf2c644b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "526320fe-a037-4bb1-9013-0b8bc06e5bfe",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert.strictEqual(e, event);\n    assert.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "494de19b-2a81-402b-b38f-1675df811371",
                  "parentUUID": "526320fe-a037-4bb1-9013-0b8bc06e5bfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "494de19b-2a81-402b-b38f-1675df811371"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6a16802-b2af-442a-aa08-b8fb8f5f566e",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "d3dfa4e9-c2d4-47e3-b0ff-b53aa9b1c9a1",
                  "parentUUID": "f6a16802-b2af-442a-aa08-b8fb8f5f566e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3dfa4e9-c2d4-47e3-b0ff-b53aa9b1c9a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c5432269-094e-4607-8a66-26b176ab8441",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert.ok(typeof result, 'number');\nassert.ok(result >= 10);",
                  "err": {},
                  "uuid": "f80fce7f-f385-4c5d-b827-4e9fed1aff68",
                  "parentUUID": "c5432269-094e-4607-8a66-26b176ab8441",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f80fce7f-f385-4c5d-b827-4e9fed1aff68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5019e54-9e08-4fec-88ec-20ffe939e69b",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "10a7cb8a-f380-4895-b323-8067464fe373",
                  "parentUUID": "d5019e54-9e08-4fec-88ec-20ffe939e69b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10a7cb8a-f380-4895-b323-8067464fe373"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e6746ce-714f-40c5-a3e6-67bbbeae8afc",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listeners('test').length, 1);\nassert.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "8c2f6317-da08-4115-b90c-1cf80beee1f9",
                  "parentUUID": "3e6746ce-714f-40c5-a3e6-67bbbeae8afc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c2f6317-da08-4115-b90c-1cf80beee1f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d8aad8fd-0e5a-4481-89d3-e8512e9e4bad",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "999820da-de54-4987-9674-52ea702ff1ed",
                  "parentUUID": "d8aad8fd-0e5a-4481-89d3-e8512e9e4bad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "999820da-de54-4987-9674-52ea702ff1ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "49b44eac-7f97-4998-9fe8-7fb6bae59dc7",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "831348e7-bc02-4570-afa2-3d21fb70981d",
                  "parentUUID": "49b44eac-7f97-4998-9fe8-7fb6bae59dc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "831348e7-bc02-4570-afa2-3d21fb70981d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6e58911-deeb-4d36-9917-f8f9798b2b9c",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.rawListeners('test').length, 1);\nassert.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "6230caed-0240-41d0-8c96-471ac30a6a4e",
                  "parentUUID": "d6e58911-deeb-4d36-9917-f8f9798b2b9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6230caed-0240-41d0-8c96-471ac30a6a4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c7ad0757-c764-4ff5-a2f4-1322ae6fa65a",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 1);\ndevice.removeListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 0);",
                  "err": {},
                  "uuid": "8042da12-e519-4aaf-962b-9b31f567f340",
                  "parentUUID": "c7ad0757-c764-4ff5-a2f4-1322ae6fa65a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8042da12-e519-4aaf-962b-9b31f567f340"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a80c050d-29a5-462d-bb65-3cefc6a76bb8",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bbbc876d-6b2b-46b5-a787-bc30ccfdb035",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "d2d888b1-1aad-4090-9468-d765e5bbdea8",
                  "parentUUID": "bbbc876d-6b2b-46b5-a787-bc30ccfdb035",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2d888b1-1aad-4090-9468-d765e5bbdea8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "336f6cdd-089f-4ac3-8270-9fffd19651ed",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "c7f98d65-44ca-4d3d-af0e-240ebf8103ab",
                  "parentUUID": "336f6cdd-089f-4ac3-8270-9fffd19651ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7f98d65-44ca-4d3d-af0e-240ebf8103ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0793153-f7b5-42e6-84bc-33a03c98e7e3",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "7fbf9224-45fb-42db-b4ec-fb1c61aeb9d5",
                  "parentUUID": "f0793153-f7b5-42e6-84bc-33a03c98e7e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fbf9224-45fb-42db-b4ec-fb1c61aeb9d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "802da916-6c8d-4a36-b9c8-d87b811b80a6",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    allIDs: [\n        'some_id_1',\n        'some_id_2',\n        'some_id_3',\n    ]\n});\nassert.deepStrictEqual(device.allIDs, [\n    'some_id_1',\n    'some_id_2',\n    'some_id_3',\n]);",
                  "err": {},
                  "uuid": "32c30d07-36e6-488e-8206-a78671596e76",
                  "parentUUID": "802da916-6c8d-4a36-b9c8-d87b811b80a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32c30d07-36e6-488e-8206-a78671596e76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd9e0ef4-358b-4b89-8ad4-83aba73a4b4f",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.strictEqual(device.protocol, NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "93b39ee9-8675-4f6d-b8f5-1c1df91a3d89",
                  "parentUUID": "bd9e0ef4-358b-4b89-8ad4-83aba73a4b4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93b39ee9-8675-4f6d-b8f5-1c1df91a3d89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "44d09f8d-45df-4edd-a9a4-11e06796b7df",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    mac: 'AA:BB:CC:DD:EE:FF'\n});\nassert.strictEqual(device.mac, 'AA:BB:CC:DD:EE:FF');",
                  "err": {},
                  "uuid": "f82fb260-4bdc-4dd8-883e-a6392ce12dec",
                  "parentUUID": "44d09f8d-45df-4edd-a9a4-11e06796b7df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f82fb260-4bdc-4dd8-883e-a6392ce12dec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "46bc2c5e-eaa4-4f57-ac36-57763b136001",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    model: 'Gen4K'\n});\nassert.strictEqual(device.model, 'Gen4K');",
                  "err": {},
                  "uuid": "b8dac4cc-1e30-400b-abab-f0772f5c18a0",
                  "parentUUID": "46bc2c5e-eaa4-4f57-ac36-57763b136001",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.model, undefined);",
                  "err": {},
                  "uuid": "a02ce899-e314-4e0b-958c-0add5e52474c",
                  "parentUUID": "46bc2c5e-eaa4-4f57-ac36-57763b136001",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8dac4cc-1e30-400b-abab-f0772f5c18a0",
                "a02ce899-e314-4e0b-958c-0add5e52474c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fda47293-2437-4f4b-a882-f18769baf796",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    modelName: 'Apple TV 4K'\n});\nassert.strictEqual(device.modelName, 'Apple TV 4K');",
                  "err": {},
                  "uuid": "70a34125-46d1-4dc8-9d21-ead756e98d2c",
                  "parentUUID": "fda47293-2437-4f4b-a882-f18769baf796",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.modelName, undefined);",
                  "err": {},
                  "uuid": "ad4ecec3-e427-46d3-8b59-55af16b0e6be",
                  "parentUUID": "fda47293-2437-4f4b-a882-f18769baf796",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70a34125-46d1-4dc8-9d21-ead756e98d2c",
                "ad4ecec3-e427-46d3-8b59-55af16b0e6be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc6d9f55-c1b3-46e3-baa2-026976a6b133",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    os: 'TvOS'\n});\nassert.strictEqual(device.os, 'TvOS');",
                  "err": {},
                  "uuid": "4ab20f6a-e03e-42ff-9a4e-91fe0bdf6831",
                  "parentUUID": "cc6d9f55-c1b3-46e3-baa2-026976a6b133",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.os, undefined);",
                  "err": {},
                  "uuid": "454e2ba7-7fcb-475a-a56c-3e2991120d32",
                  "parentUUID": "cc6d9f55-c1b3-46e3-baa2-026976a6b133",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ab20f6a-e03e-42ff-9a4e-91fe0bdf6831",
                "454e2ba7-7fcb-475a-a56c-3e2991120d32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f26f05f5-3b41-4794-9f5d-ebd68a05d7f0",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    version: '15.5.1'\n});\nassert.strictEqual(device.version, '15.5.1');",
                  "err": {},
                  "uuid": "aab4f526-7ffc-43d5-911b-b980d25368f8",
                  "parentUUID": "f26f05f5-3b41-4794-9f5d-ebd68a05d7f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.version, undefined);",
                  "err": {},
                  "uuid": "7923d129-c4fa-4307-8471-2c5f844047c6",
                  "parentUUID": "f26f05f5-3b41-4794-9f5d-ebd68a05d7f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aab4f526-7ffc-43d5-911b-b980d25368f8",
                "7923d129-c4fa-4307-8471-2c5f844047c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f01e4443-e365-40da-a3e0-6b73a3a91563",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    services: [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]\n});\nassert.deepStrictEqual(device.services, [\n    {\n        protocol: 'mrp',\n        port: 49152\n    },\n    {\n        protocol: 'airplay',\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "2b1d44e5-1468-4753-aa2b-bbe732e4d8f1",
                  "parentUUID": "f01e4443-e365-40da-a3e0-6b73a3a91563",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.services, undefined);",
                  "err": {},
                  "uuid": "e1a1d494-3e72-4c05-a857-047fedaeabb1",
                  "parentUUID": "f01e4443-e365-40da-a3e0-6b73a3a91563",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b1d44e5-1468-4753-aa2b-bbe732e4d8f1",
                "e1a1d494-3e72-4c05-a857-047fedaeabb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "25b2258b-aa32-4a84-a190-5d5101f8d6e4",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "65ab5ed3-5739-4250-ac5d-8116596ebc21",
                  "parentUUID": "25b2258b-aa32-4a84-a190-5d5101f8d6e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn = () => { };\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "18c0a1ea-d24e-4ac2-b886-206a54f4d876",
                  "parentUUID": "25b2258b-aa32-4a84-a190-5d5101f8d6e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "1a56a2ca-65b5-4cf6-8046-c2d67f690c0b",
                  "parentUUID": "25b2258b-aa32-4a84-a190-5d5101f8d6e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65ab5ed3-5739-4250-ac5d-8116596ebc21",
                "18c0a1ea-d24e-4ac2-b886-206a54f4d876",
                "1a56a2ca-65b5-4cf6-8046-c2d67f690c0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3c1c007-59ec-48f3-a1c0-884dc08c5a30",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "896e473b-2bba-4bf6-a775-93cf1f2560e8",
                  "parentUUID": "f3c1c007-59ec-48f3-a1c0-884dc08c5a30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "6f276e48-547e-4bd3-b733-c42b82b95868",
                  "parentUUID": "f3c1c007-59ec-48f3-a1c0-884dc08c5a30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "5e3ba5f6-c2d7-4857-acb2-9a0fa33fff60",
                  "parentUUID": "f3c1c007-59ec-48f3-a1c0-884dc08c5a30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nconst fn = () => {\n};\nassert.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "fd049f13-3a86-4a9b-bb39-6336e6c70ac7",
                  "parentUUID": "f3c1c007-59ec-48f3-a1c0-884dc08c5a30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "896e473b-2bba-4bf6-a775-93cf1f2560e8",
                "6f276e48-547e-4bd3-b733-c42b82b95868",
                "5e3ba5f6-c2d7-4857-acb2-9a0fa33fff60",
                "fd049f13-3a86-4a9b-bb39-6336e6c70ac7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c190f826-bda9-42c0-9227-9cdf3f4a97b8",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "6b3a21e4-b6f9-4fa4-a298-fdbbccdeb793",
                  "parentUUID": "c190f826-bda9-42c0-9227-9cdf3f4a97b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n};\nconst deviceA = new NodePyATVDevice(config);\nconst deviceB = new NodePyATVDevice(deviceA.toJSON());\nassert.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "73d31144-75b9-435c-8fa6-7a9c16111761",
                  "parentUUID": "c190f826-bda9-42c0-9227-9cdf3f4a97b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b3a21e4-b6f9-4fa4-a298-fdbbccdeb793",
                "73d31144-75b9-435c-8fa6-7a9c16111761"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6bc72712-baf6-4546-a08e-80755bfa7f0d",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "f6df6a13-e06b-4093-9079-4ba756fb5f72",
                  "parentUUID": "6bc72712-baf6-4546-a08e-80755bfa7f0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6df6a13-e06b-4093-9079-4ba756fb5f72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27b97306-036c-4a81-8e2d-63d19e5b9fe4",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6ef0e3a3-a27b-40d9-ba57-c6e8a5a07236",
                  "parentUUID": "27b97306-036c-4a81-8e2d-63d19e5b9fe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst result = await device.getState();\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    focusState: null,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    volume: null,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "845c5536-8226-4096-8918-e2917b3624ec",
                  "parentUUID": "27b97306-036c-4a81-8e2d-63d19e5b9fe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nassert.rejects(async () => {\n    await device.getState();\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "a76e6412-733f-45a1-baf3-7b63f2c64f7d",
                  "parentUUID": "27b97306-036c-4a81-8e2d-63d19e5b9fe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nconst secondResult = await device.getState();\nassert.strictEqual(firstResult.dateTime, secondResult.dateTime);\nassert.strictEqual(executions, 1);",
                  "err": {},
                  "uuid": "66ab4885-52b2-4b08-a40d-85ad457eebe2",
                  "parentUUID": "27b97306-036c-4a81-8e2d-63d19e5b9fe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date(new Date().getTime() - 1000).toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nassert.strictEqual(firstResult.position, 27);\nconst secondResult = await device.getState();\nassert.ok(secondResult.position);\nassert.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\nassert.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);",
                  "err": {},
                  "uuid": "2bdfc91a-0f89-479f-aa8d-c69ae26ebcf7",
                  "parentUUID": "27b97306-036c-4a81-8e2d-63d19e5b9fe4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "845c5536-8226-4096-8918-e2917b3624ec",
                "a76e6412-733f-45a1-baf3-7b63f2c64f7d",
                "66ab4885-52b2-4b08-a40d-85ad457eebe2",
                "2bdfc91a-0f89-479f-aa8d-c69ae26ebcf7"
              ],
              "failures": [],
              "pending": [
                "6ef0e3a3-a27b-40d9-ba57-c6e8a5a07236"
              ],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ba61e17-fa29-4690-b1ca-2a34203c863f",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            title: 'Solo: A Star Wars Story'\n        });\n    })\n});\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\ndevice.clearState();\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\nassert.strictEqual(executions, 2);",
                  "err": {},
                  "uuid": "860d3bf6-8d2f-4dd3-81a2-e717613a0bdf",
                  "parentUUID": "6ba61e17-fa29-4690-b1ca-2a34203c863f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "860d3bf6-8d2f-4dd3-81a2-e717613a0bdf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "535478fe-f238-43f1-b88e-cd97fb3ae9ee",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON()\n        });\n    })\n});\nconst result = await device.getDateTime();\nassert.ok(result instanceof Date);",
                  "err": {},
                  "uuid": "8a5675bc-a496-4395-a5da-950171f2c52d",
                  "parentUUID": "535478fe-f238-43f1-b88e-cd97fb3ae9ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a5675bc-a496-4395-a5da-950171f2c52d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce6a07ca-0bde-4928-b1f0-c1d890809aad",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            hash: '12345'\n        });\n    })\n});\nconst result = await device.getHash();\nassert.strictEqual(result, '12345');",
                  "err": {},
                  "uuid": "bb611a19-c909-4c72-9a71-92094704fcd9",
                  "parentUUID": "ce6a07ca-0bde-4928-b1f0-c1d890809aad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb611a19-c909-4c72-9a71-92094704fcd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "413aa713-72d6-4f7d-94d5-9be563da055b",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            media_type: 'video'\n        });\n    })\n});\nconst result = await device.getMediaType();\nassert.deepStrictEqual(result, NodePyATVMediaType.video);\nassert.deepStrictEqual(result, 'video');",
                  "err": {},
                  "uuid": "029756f0-052c-4d71-b5fe-670b14f366d6",
                  "parentUUID": "413aa713-72d6-4f7d-94d5-9be563da055b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "029756f0-052c-4d71-b5fe-670b14f366d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65447ef5-0455-4730-895d-8bf0741d4e99",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            device_state: 'seeking'\n        });\n    })\n});\nconst result = await device.getDeviceState();\nassert.deepStrictEqual(result, NodePyATVDeviceState.seeking);\nassert.deepStrictEqual(result, 'seeking');",
                  "err": {},
                  "uuid": "50c777de-89a6-41e6-a6c3-1e167b2d9f49",
                  "parentUUID": "65447ef5-0455-4730-895d-8bf0741d4e99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50c777de-89a6-41e6-a6c3-1e167b2d9f49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae81737c-a697-4873-a367-c00d37a8517e",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst result = await device.getTitle();\nassert.strictEqual(result, 'My Movie');",
                  "err": {},
                  "uuid": "89d87ec5-4e46-41c9-be10-3b14e549fb0b",
                  "parentUUID": "ae81737c-a697-4873-a367-c00d37a8517e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89d87ec5-4e46-41c9-be10-3b14e549fb0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ef4cb2f-ac83-4ee2-ad14-39596e89f7ae",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            artist: 'My Artist'\n        });\n    })\n});\nconst result = await device.getArtist();\nassert.strictEqual(result, 'My Artist');",
                  "err": {},
                  "uuid": "52672375-dd91-48ff-aafe-21a27bca3c01",
                  "parentUUID": "5ef4cb2f-ac83-4ee2-ad14-39596e89f7ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52672375-dd91-48ff-aafe-21a27bca3c01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cffcc61a-2b3d-4faa-be04-cc6ef435edc7",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            album: 'My ALbum'\n        });\n    })\n});\nconst result = await device.getAlbum();\nassert.strictEqual(result, 'My ALbum');",
                  "err": {},
                  "uuid": "326fa5ee-7d75-461f-b618-de530e5c2806",
                  "parentUUID": "cffcc61a-2b3d-4faa-be04-cc6ef435edc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "326fa5ee-7d75-461f-b618-de530e5c2806"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d00ef365-51fe-431a-8a29-d7a3719eda76",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            genre: 'My Genre'\n        });\n    })\n});\nconst result = await device.getGenre();\nassert.strictEqual(result, 'My Genre');",
                  "err": {},
                  "uuid": "23a3b7f1-1d93-483e-967f-5e6550ebf8ab",
                  "parentUUID": "d00ef365-51fe-431a-8a29-d7a3719eda76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23a3b7f1-1d93-483e-967f-5e6550ebf8ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b9cf9fb-77ab-4bf4-b5c0-74039ff0534d",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            total_time: 45\n        });\n    })\n});\nconst result = await device.getTotalTime();\nassert.strictEqual(result, 45);",
                  "err": {},
                  "uuid": "f94d3dcb-466b-4973-b9dd-37791f776c28",
                  "parentUUID": "2b9cf9fb-77ab-4bf4-b5c0-74039ff0534d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f94d3dcb-466b-4973-b9dd-37791f776c28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a286eb82-8b58-451b-bf1f-6a9ad9a140a4",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            position: 30\n        });\n    })\n});\nconst result = await device.getPosition();\nassert.strictEqual(result, 30);",
                  "err": {},
                  "uuid": "e4f7e3f0-1b5d-43a1-af1f-c2b3c1896476",
                  "parentUUID": "a286eb82-8b58-451b-bf1f-6a9ad9a140a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4f7e3f0-1b5d-43a1-af1f-c2b3c1896476"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b5ca291-7a75-41c5-9c96-05ab8a89b10c",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            shuffle: 'songs'\n        });\n    })\n});\nconst result = await device.getShuffle();\nassert.deepStrictEqual(result, NodePyATVShuffleState.songs);\nassert.deepStrictEqual(result, 'songs');",
                  "err": {},
                  "uuid": "55f4e735-3e19-4428-b912-aa068e7e10fa",
                  "parentUUID": "9b5ca291-7a75-41c5-9c96-05ab8a89b10c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55f4e735-3e19-4428-b912-aa068e7e10fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96cfd9d2-847c-435d-9e17-222b3b8d5e0d",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            repeat: 'all'\n        });\n    })\n});\nconst result = await device.getRepeat();\nassert.deepStrictEqual(result, NodePyATVRepeatState.all);\nassert.deepStrictEqual(result, 'all');",
                  "err": {},
                  "uuid": "d3a5e562-9746-4156-8d00-d9d1de409c8e",
                  "parentUUID": "96cfd9d2-847c-435d-9e17-222b3b8d5e0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3a5e562-9746-4156-8d00-d9d1de409c8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ec50aaae-138a-4e13-9888-f32c9797b0a6",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app: 'My App'\n        });\n    })\n});\nconst result = await device.getApp();\nassert.strictEqual(result, 'My App');",
                  "err": {},
                  "uuid": "b7ee3eca-8b23-4616-b581-e57428ddf834",
                  "parentUUID": "ec50aaae-138a-4e13-9888-f32c9797b0a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7ee3eca-8b23-4616-b581-e57428ddf834"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7cf09f7c-3bd5-4069-8bf8-7bb6971be4c1",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app_id: 'app.example.com'\n        });\n    })\n});\nconst result = await device.getAppId();\nassert.strictEqual(result, 'app.example.com');",
                  "err": {},
                  "uuid": "c1749aa3-5623-4577-a700-9e99f3e854ba",
                  "parentUUID": "7cf09f7c-3bd5-4069-8bf8-7bb6971be4c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1749aa3-5623-4577-a700-9e99f3e854ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27a72f99-4a4d-4c58-8b7d-3036bc599905",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), ' +\n            'App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), ' +\n            'App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App Store ' +\n            '(com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), ' +\n            'App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ ' +\n            '(com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE ' +\n            '(tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek ' +\n            '(de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), ' +\n            'App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), ' +\n            'App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), ' +\n            'App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), ' +\n            'App: Musik (com.apple.TVMusic)');\n    })\n});\nconst result = await device.listApps();\nassert.strictEqual(result.length, 25);\nassert.strictEqual(result[0].id, 'com.apple.Fitness');\nassert.strictEqual(result[0].name, 'Fitness');",
                  "err": {},
                  "uuid": "6336f18b-f3c5-4c9f-8249-b837077134aa",
                  "parentUUID": "27a72f99-4a4d-4c58-8b7d-3036bc599905",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6336f18b-f3c5-4c9f-8249-b837077134aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5489b25b-e230-4544-a533-879eac641dcb",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\nawait device.pressKey(NodePyATVKeys.home);",
                  "err": {},
                  "uuid": "df9906fd-4f9a-4797-8c77-d96bf72c7707",
                  "parentUUID": "5489b25b-e230-4544-a533-879eac641dcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nawait assert.rejects(async () => {\n    // @ts-ignore\n    await device.pressKey('foo');\n}, /Unsupported key value foo/);",
                  "err": {},
                  "uuid": "e86a71d3-93dd-499e-b243-4205e3825395",
                  "parentUUID": "5489b25b-e230-4544-a533-879eac641dcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"failure\"}');\n    })\n});\nawait assert.rejects(async () => {\n    await device.pressKey(NodePyATVKeys.home);\n}, /Unable to parse pyatv response/);",
                  "err": {},
                  "uuid": "3fd972d1-1eb6-4191-957b-9dea08cd8d16",
                  "parentUUID": "5489b25b-e230-4544-a533-879eac641dcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df9906fd-4f9a-4797-8c77-d96bf72c7707",
                "e86a71d3-93dd-499e-b243-4205e3825395",
                "3fd972d1-1eb6-4191-957b-9dea08cd8d16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "05a4b484-8838-42b7-920d-3278e2c25fd2",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "7c5948d2-812a-4b74-9b46-1d68d515f4a8",
                  "parentUUID": "05a4b484-8838-42b7-920d-3278e2c25fd2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c5948d2-812a-4b74-9b46-1d68d515f4a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df2a672b-dcee-4c99-aed8-c991a44ace4b",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "3bcafe66-909e-42f9-9894-8ecc10106ed0",
                  "parentUUID": "df2a672b-dcee-4c99-aed8-c991a44ace4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bcafe66-909e-42f9-9894-8ecc10106ed0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1813e96-19e2-4fd2-807c-85dfd4aac4cc",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "ed2f369b-e18e-4ad7-8353-ace2c6e6141b",
                  "parentUUID": "a1813e96-19e2-4fd2-807c-85dfd4aac4cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed2f369b-e18e-4ad7-8353-ace2c6e6141b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6eee3007-4e47-4396-8b8b-62c680dc0771",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "cdc4366c-bd76-4d39-b1d8-5aa47f1932cc",
                  "parentUUID": "6eee3007-4e47-4396-8b8b-62c680dc0771",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cdc4366c-bd76-4d39-b1d8-5aa47f1932cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ffbda6dd-9914-40aa-bc39-eff3dd44e1de",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "520a55fd-eaa3-44a8-8d45-d2f9e90e5511",
                  "parentUUID": "ffbda6dd-9914-40aa-bc39-eff3dd44e1de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "520a55fd-eaa3-44a8-8d45-d2f9e90e5511"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f7d5072-0589-4072-9406-8226905b1064",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "a228f33a-37e9-4d10-ab20-eee6ee09d199",
                  "parentUUID": "8f7d5072-0589-4072-9406-8226905b1064",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a228f33a-37e9-4d10-ab20-eee6ee09d199"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14996613-8eb8-4e3a-97db-d211bf5d346c",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "45844bc3-8d7b-4ee2-8551-a50788e2075a",
                  "parentUUID": "14996613-8eb8-4e3a-97db-d211bf5d346c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45844bc3-8d7b-4ee2-8551-a50788e2075a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b96f686b-ee97-421f-821f-811a0a20c0b3",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "6f576a09-8dd7-4aaa-a356-8118a3052dd2",
                  "parentUUID": "b96f686b-ee97-421f-821f-811a0a20c0b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f576a09-8dd7-4aaa-a356-8118a3052dd2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e46597e9-cf5c-4969-a048-6ca3ad7b0aca",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9f7986cf-502a-4966-9504-79882d1d80c6",
                  "parentUUID": "e46597e9-cf5c-4969-a048-6ca3ad7b0aca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f7986cf-502a-4966-9504-79882d1d80c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b91fa78-10fe-4361-9709-200a571a49c0",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "ccfedcb8-0a97-4bc9-9f70-f76bd2745544",
                  "parentUUID": "4b91fa78-10fe-4361-9709-200a571a49c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccfedcb8-0a97-4bc9-9f70-f76bd2745544"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57384bc8-5996-49e0-b3ea-acb52263e04e",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "c1164768-a32c-4401-a136-6f9f14a13c32",
                  "parentUUID": "57384bc8-5996-49e0-b3ea-acb52263e04e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1164768-a32c-4401-a136-6f9f14a13c32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58bd9963-7170-4ca9-9774-a4c43ef6c995",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "c398e61f-19fc-4065-bd2e-f68f24a45c29",
                  "parentUUID": "58bd9963-7170-4ca9-9774-a4c43ef6c995",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c398e61f-19fc-4065-bd2e-f68f24a45c29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "987a4d15-d5cb-4379-ba8c-33d27cc9e9e3",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "93117240-6dce-43b6-9515-28d60e90f288",
                  "parentUUID": "987a4d15-d5cb-4379-ba8c-33d27cc9e9e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93117240-6dce-43b6-9515-28d60e90f288"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c968c1a9-dd49-4ef9-aecb-41975131e4c6",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "71129ec0-d6eb-4167-b550-3e7c6367559d",
                  "parentUUID": "c968c1a9-dd49-4ef9-aecb-41975131e4c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71129ec0-d6eb-4167-b550-3e7c6367559d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4109379e-81cf-47ce-9672-43a00f531afb",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "4225039c-5c5a-4451-a1f2-d9a1cd2497a7",
                  "parentUUID": "4109379e-81cf-47ce-9672-43a00f531afb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4225039c-5c5a-4451-a1f2-d9a1cd2497a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7a10c2e-825f-49ec-a99d-86bee1151b4b",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "95c7c9e7-747e-4a34-ad35-e86a43685208",
                  "parentUUID": "b7a10c2e-825f-49ec-a99d-86bee1151b4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95c7c9e7-747e-4a34-ad35-e86a43685208"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff17de33-8f10-4aa6-b9d0-44d1a1471ab7",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "7bedb6b0-2488-4bb7-817b-1e1dfd56c78f",
                  "parentUUID": "ff17de33-8f10-4aa6-b9d0-44d1a1471ab7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bedb6b0-2488-4bb7-817b-1e1dfd56c78f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c13ba984-9c95-4340-92ad-3102824460e8",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "f4358cde-99a5-43f9-960d-e37827c81854",
                  "parentUUID": "c13ba984-9c95-4340-92ad-3102824460e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4358cde-99a5-43f9-960d-e37827c81854"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ebbd5dc0-ce30-46b8-bfd6-2b8ad735ce1f",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "a65409e9-57bf-48fe-8627-4884a1988762",
                  "parentUUID": "ebbd5dc0-ce30-46b8-bfd6-2b8ad735ce1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a65409e9-57bf-48fe-8627-4884a1988762"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5852e026-82e8-40cc-9b6b-f5c5352fa6bb",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "43d65b2b-ff38-49a7-ab18-4ccdf781da7b",
                  "parentUUID": "5852e026-82e8-40cc-9b6b-f5c5352fa6bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43d65b2b-ff38-49a7-ab18-4ccdf781da7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7e38f40-7413-4b7b-9b9b-29e935b20181",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "72ada000-a63a-4312-bd0e-fc7c5fd27cfe",
                  "parentUUID": "a7e38f40-7413-4b7b-9b9b-29e935b20181",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72ada000-a63a-4312-bd0e-fc7c5fd27cfe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8678c2a1-1fb4-44cd-a195-8155dd106949",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "d0f4f7f0-e476-43b9-808d-f243f48c49b4",
                  "parentUUID": "8678c2a1-1fb4-44cd-a195-8155dd106949",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0f4f7f0-e476-43b9-808d-f243f48c49b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4545429f-ecf3-4b91-8bc0-def7b6ade185",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "5bef96ac-f2be-48d3-b176-96a744931da8",
                  "parentUUID": "4545429f-ecf3-4b91-8bc0-def7b6ade185",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bef96ac-f2be-48d3-b176-96a744931da8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c1d7b05-1605-4cfe-8b8c-8e814c7a2f1f",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('');\n    })\n});\nawait device.launchApp('com.apple.TVShows');",
                  "err": {},
                  "uuid": "945e750f-7678-4f65-a67b-d25c4681c3ca",
                  "parentUUID": "4c1d7b05-1605-4cfe-8b8c-8e814c7a2f1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "945e750f-7678-4f65-a67b-d25c4681c3ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "de993684-4d64-4560-9e80-15e349d23ca6",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 451,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000);\nconst result = await NodePyATVInstance.version();\nif (result.pyatv === null) {\n    throw new Error('No version found for pyatv. Is it installed in test environment?');\n}\nassert.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\nassert.ok(result.pyatv.length >= 5, 'result.pyatv has content');\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "04725376-31d8-472a-a613-94a9843c7b21",
                  "parentUUID": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.code(1);\n        cp.end('atvremote 0.7.4');\n    })\n});\nassert.ok(result.pyatv);\nassert.strictEqual(result.pyatv, '0.7.4');",
                  "err": {},
                  "uuid": "9286768f-18e4-4cc3-8b8c-70170823d7d9",
                  "parentUUID": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "b785be50-4cbd-4db2-affa-2c1a72dbd229",
                  "parentUUID": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    atvremotePath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "16c3116c-5ed9-404e-8a5a-ca7915226504",
                  "parentUUID": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "d0bfa4f7-3bbf-44b5-ab5b-35e2340c0b72",
                  "parentUUID": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: () => {\n        // no debug log\n    },\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "2c3d6733-3e53-4c1b-a64d-c8d562858574",
                  "parentUUID": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "4c30d82c-f04c-4a47-811a-56bc5e88d721",
                  "parentUUID": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.error(new Error('Hello world!')).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "1a3455cb-fc5e-4960-87b1-9686e9739c83",
                  "parentUUID": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('atvremote 42').code(1).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "ee3058f6-afbc-4981-9379-056140b9db4e",
                  "parentUUID": "9c4c6e51-5c84-4a7a-9c27-b9122826c0ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04725376-31d8-472a-a613-94a9843c7b21",
                "9286768f-18e4-4cc3-8b8c-70170823d7d9",
                "b785be50-4cbd-4db2-affa-2c1a72dbd229",
                "16c3116c-5ed9-404e-8a5a-ca7915226504",
                "d0bfa4f7-3bbf-44b5-ab5b-35e2340c0b72",
                "2c3d6733-3e53-4c1b-a64d-c8d562858574",
                "4c30d82c-f04c-4a47-811a-56bc5e88d721",
                "1a3455cb-fc5e-4960-87b1-9686e9739c83",
                "ee3058f6-afbc-4981-9379-056140b9db4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 463,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2c50d56-98af-4952-9777-248cb4a3fe01",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5776,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12000);\nawait NodePyATVInstance.check();",
                  "err": {},
                  "uuid": "cd484704-528c-4aea-a493-15621770d482",
                  "parentUUID": "b2c50d56-98af-4952-9777-248cb4a3fe01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "46b53a68-c6c8-4d45-b36c-35f4dc24a21b",
                  "parentUUID": "b2c50d56-98af-4952-9777-248cb4a3fe01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('atvremote 0.5.1').code(1).end();\n        })\n    });\n}, /Found pyatv, but unforunately it's too old. Please update pyatv./);",
                  "err": {},
                  "uuid": "c50b21e4-009c-44ee-a4f9-d066eb5813a9",
                  "parentUUID": "b2c50d56-98af-4952-9777-248cb4a3fe01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i = 0;\nawait assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            if (i === 0) {\n                cp.stdout('atvremote 0.7.0').code(1).end();\n                i++;\n            }\n            else {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            }\n        })\n    });\n}, /Unable to scan for devices/);",
                  "err": {},
                  "uuid": "b8df1a9b-f2b0-4e97-bbba-f13d36dc23df",
                  "parentUUID": "b2c50d56-98af-4952-9777-248cb4a3fe01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd484704-528c-4aea-a493-15621770d482",
                "46b53a68-c6c8-4d45-b36c-35f4dc24a21b",
                "c50b21e4-009c-44ee-a4f9-d066eb5813a9",
                "b8df1a9b-f2b0-4e97-bbba-f13d36dc23df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5782,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5388,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(10000);\nconst result = await NodePyATVInstance.find();\nassert.ok(Array.isArray(result));",
                  "err": {},
                  "uuid": "789fa144-cada-465e-a142-0b5cf12e52ec",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({\n    atvscriptPath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "b9397a17-c83f-415f-83ed-64a4b11cbc1b",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stderr('Hello World!').code(1).end();\n        })\n    });\n}, /Unable to execute request/);",
                  "err": {},
                  "uuid": "aa3ca687-c1ec-4985-b7cb-cb2fe6188d8e",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).code(1).end();\n        })\n    });\n}, /Hello world!/);",
                  "err": {},
                  "uuid": "cc1af1dd-a1b9-4f42-909f-dee4d8422978",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            // Example output from @maxileith\n            // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n            cp.stdout({\n                result: 'failure',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                error: 'Task exception was never retrieved',\n                exception: '[Errno 113] Connect call failed'\n            }).code(1).end();\n        })\n    });\n}, /Unable to find any devices, but received 1 error: /);",
                  "err": {},
                  "uuid": "514e945a-ae04-4712-ac12-aa6ea012624f",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout(JSON.stringify({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).substr(1)).end();\n        })\n    });\n}, /Unable to parse result/);",
                  "err": {},
                  "uuid": "1bcb4015-618e-4a62-af15-4ba9ef3d3126",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'error'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "bd15133e-cce7-4364-b7c3-812abe4aba86",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "e67107a4-d3f3-4602-8c2a-403b2961e739",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx'\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, undefined);\nassert.strictEqual(devices[0].modelName, undefined);\nassert.strictEqual(devices[0].os, undefined);\nassert.strictEqual(devices[0].version, undefined);\nassert.deepStrictEqual(devices[0].services, undefined);",
                  "err": {},
                  "uuid": "0a9ee736-79d3-4e64-93b4-f2aba4625d0c",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx',\n                    device_info: {\n                        'model': 'Gen4K',\n                        'model_str': 'Apple TV 4K',\n                        'operating_system': 'TvOS',\n                        'version': '15.5.1'\n                    },\n                    services: [\n                        {\n                            protocol: 'mrp',\n                            port: 49152\n                        },\n                        {\n                            protocol: 'airplay',\n                            port: 7000\n                        }\n                    ]\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, 'Gen4K');\nassert.strictEqual(devices[0].modelName, 'Apple TV 4K');\nassert.strictEqual(devices[0].os, 'TvOS');\nassert.strictEqual(devices[0].version, '15.5.1');\nassert.deepStrictEqual(devices[0].services, [\n    {\n        protocol: NodePyATVProtocol.mrp,\n        port: 49152\n    },\n    {\n        protocol: NodePyATVProtocol.airplay,\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "ab1db5bd-6af0-47fd-8fc0-f13e59679f52",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 4);\nassert.strictEqual(devices[0].name, 'Living Room');\nassert.strictEqual(devices[0].host, '10.0.0.30');\nassert.strictEqual(devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(devices[1].name, 'Kitchen');\nassert.strictEqual(devices[1].host, '10.0.0.79');\nassert.strictEqual(devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(devices[2].name, 'Bedroom');\nassert.strictEqual(devices[2].host, '10.0.0.20');\nassert.strictEqual(devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(devices[3].name, 'Basement');\nassert.strictEqual(devices[3].host, '10.0.0.156');\nassert.strictEqual(devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');",
                  "err": {},
                  "uuid": "6ef0ab25-7695-4d83-82b4-32b2045cbc6c",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n}, true);\nassert.strictEqual(response.devices.length, 4);\nassert.strictEqual(response.errors.length, 2);\nassert.strictEqual(response.devices[0].name, 'Living Room');\nassert.strictEqual(response.devices[0].host, '10.0.0.30');\nassert.strictEqual(response.devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(response.devices[1].name, 'Kitchen');\nassert.strictEqual(response.devices[1].host, '10.0.0.79');\nassert.strictEqual(response.devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(response.devices[2].name, 'Bedroom');\nassert.strictEqual(response.devices[2].host, '10.0.0.20');\nassert.strictEqual(response.devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(response.devices[3].name, 'Basement');\nassert.strictEqual(response.devices[3].host, '10.0.0.156');\nassert.strictEqual(response.devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');\nassert.strictEqual(response.errors[0].exception, '[Errno 113] Connect call failed (\\'10.0.0.232\\', 32498)');\nassert.strictEqual(response.errors[1].exception, '[Errno 113] Connect call failed (\\'10.0.0.229\\', 32498)');",
                  "err": {},
                  "uuid": "33a859bb-d192-4995-b251-38db236dfb7d",
                  "parentUUID": "2bc2ea3c-3739-4a5b-85a2-794127ea3739",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "789fa144-cada-465e-a142-0b5cf12e52ec",
                "b9397a17-c83f-415f-83ed-64a4b11cbc1b",
                "aa3ca687-c1ec-4985-b7cb-cb2fe6188d8e",
                "cc1af1dd-a1b9-4f42-909f-dee4d8422978",
                "514e945a-ae04-4712-ac12-aa6ea012624f",
                "1bcb4015-618e-4a62-af15-4ba9ef3d3126",
                "bd15133e-cce7-4364-b7c3-812abe4aba86",
                "e67107a4-d3f3-4602-8c2a-403b2961e739",
                "0a9ee736-79d3-4e64-93b4-f2aba4625d0c",
                "ab1db5bd-6af0-47fd-8fc0-f13e59679f52",
                "6ef0ab25-7695-4d83-82b4-32b2045cbc6c",
                "33a859bb-d192-4995-b251-38db236dfb7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5404,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e098488f-8e62-495c-a7b0-278778e0d01a",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = NodePyATVInstance.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert.strictEqual(device.host, '192.168.178.6');\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "5188ac68-4400-421e-9620-a3c1464d85d7",
                  "parentUUID": "e098488f-8e62-495c-a7b0-278778e0d01a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5188ac68-4400-421e-9620-a3c1464d85d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9fdab4c1-7871-423f-b876-a5f844225644",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait i.version({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "a7a60170-6c08-41f0-b65f-69c691f3314b",
                  "parentUUID": "9fdab4c1-7871-423f-b876-a5f844225644",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7a60170-6c08-41f0-b65f-69c691f3314b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "102ffca1-3706-4833-aae3-24e06613cf7d",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait assert.rejects(async () => {\n    await i.check({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "4fc80fbd-eb08-49f4-87a6-54609424ddcf",
                  "parentUUID": "102ffca1-3706-4833-aae3-24e06613cf7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fc80fbd-eb08-49f4-87a6-54609424ddcf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33c77627-9065-4a03-a35d-034bb56312bc",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvscriptPath: 'test' });\nawait i.find({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "ab64b157-7e61-4574-a486-1eb6a863dd25",
                  "parentUUID": "33c77627-9065-4a03-a35d-034bb56312bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab64b157-7e61-4574-a486-1eb6a863dd25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d5da857-60aa-4712-a6b0-5a8c30c09c18",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ debug: true });\nconst d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\nassert.deepStrictEqual(d.debug, true);",
                  "err": {},
                  "uuid": "80a51b41-c14d-4eae-ab4a-9773770bdc49",
                  "parentUUID": "2d5da857-60aa-4712-a6b0-5a8c30c09c18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80a51b41-c14d-4eae-ab4a-9773770bdc49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol);",
                  "err": {},
                  "uuid": "a082cffc-cb62-4be8-9c31-cb68c21a3e2b",
                  "parentUUID": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType);",
                  "err": {},
                  "uuid": "1a0676be-4a49-4838-8ef3-fc6fa073b18b",
                  "parentUUID": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "18b7fe69-24f6-4286-a817-3562397d8828",
                  "parentUUID": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "da3dfe51-b6a1-419a-a638-18a20bf5cf95",
                  "parentUUID": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "9d9b135a-e67c-4609-8480-b9844696e0ea",
                  "parentUUID": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "33b4b84c-f025-4eaa-8780-32e85825a004",
                  "parentUUID": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys);",
                  "err": {},
                  "uuid": "4663768f-14ee-47af-82bf-9cb74cda08e0",
                  "parentUUID": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState);",
                  "err": {},
                  "uuid": "89bbb940-fb18-4b75-b3eb-8c265755b812",
                  "parentUUID": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState);",
                  "err": {},
                  "uuid": "87b7ee15-a928-4422-9d19-e85bed058000",
                  "parentUUID": "86d2ee1d-2a28-4ece-8aaa-820de9851e1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a082cffc-cb62-4be8-9c31-cb68c21a3e2b",
                "1a0676be-4a49-4838-8ef3-fc6fa073b18b",
                "18b7fe69-24f6-4286-a817-3562397d8828",
                "da3dfe51-b6a1-419a-a638-18a20bf5cf95",
                "9d9b135a-e67c-4609-8480-b9844696e0ea",
                "33b4b84c-f025-4eaa-8780-32e85825a004",
                "4663768f-14ee-47af-82bf-9cb74cda08e0",
                "89bbb940-fb18-4b75-b3eb-8c265755b812",
                "87b7ee15-a928-4422-9d19-e85bed058000"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "52b4301b-4f2b-49b1-91e0-9e1203e1f2f9",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "191637c3-2f19-4c31-86f8-e22d68bd998e",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = addRequestId();\nassert.strictEqual(typeof id, 'string');\nremoveRequestId(id);",
                  "err": {},
                  "uuid": "4c252be6-30f3-4b51-9e83-11c45c04192a",
                  "parentUUID": "191637c3-2f19-4c31-86f8-e22d68bd998e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId('FOO');",
                  "err": {},
                  "uuid": "31275c88-37f3-475d-b022-57bdcf9de8c3",
                  "parentUUID": "191637c3-2f19-4c31-86f8-e22d68bd998e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c252be6-30f3-4b51-9e83-11c45c04192a",
                "31275c88-37f3-475d-b022-57bdcf9de8c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b35c811f-1ef9-47d6-abad-f6068d5ff7bd",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "ac89d684-9d62-4a1a-8d35-e543c87060fc",
                  "parentUUID": "b35c811f-1ef9-47d6-abad-f6068d5ff7bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "22f5a5c0-1d8c-41d9-8d52-c9d96377dbe7",
                  "parentUUID": "b35c811f-1ef9-47d6-abad-f6068d5ff7bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "8f6cdb3d-ebe2-4633-b98b-3a028522f388",
                  "parentUUID": "b35c811f-1ef9-47d6-abad-f6068d5ff7bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "13028a91-85be-48ab-84be-4ae5373a1288",
                  "parentUUID": "b35c811f-1ef9-47d6-abad-f6068d5ff7bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "781e503c-67af-4e52-8cce-437144090efa",
                  "parentUUID": "b35c811f-1ef9-47d6-abad-f6068d5ff7bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac89d684-9d62-4a1a-8d35-e543c87060fc",
                "22f5a5c0-1d8c-41d9-8d52-c9d96377dbe7",
                "8f6cdb3d-ebe2-4633-b98b-3a028522f388",
                "13028a91-85be-48ab-84be-4ae5373a1288",
                "781e503c-67af-4e52-8cce-437144090efa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76aa2b86-e912-45d4-b8d9-2010240fa04f",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "3b9b5fad-1822-4e66-be2c-e850f3bddaad",
                  "parentUUID": "76aa2b86-e912-45d4-b8d9-2010240fa04f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "4c9ef860-a4cc-4514-a65b-486e433397f5",
                  "parentUUID": "76aa2b86-e912-45d4-b8d9-2010240fa04f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "14f8c071-40c4-4344-b7be-d026ed1c8340",
                  "parentUUID": "76aa2b86-e912-45d4-b8d9-2010240fa04f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "965da211-057e-49fb-9be7-7f274d412573",
                  "parentUUID": "76aa2b86-e912-45d4-b8d9-2010240fa04f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b9b5fad-1822-4e66-be2c-e850f3bddaad",
                "4c9ef860-a4cc-4514-a65b-486e433397f5",
                "14f8c071-40c4-4344-b7be-d026ed1c8340",
                "965da211-057e-49fb-9be7-7f274d412573"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "098f1af8-09f8-4bec-a5df-e25fe041cb49",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters();\nassert.deepEqual(result, []);",
                  "err": {},
                  "uuid": "02869ef0-8c34-4fa7-9d84-b67072958d4d",
                  "parentUUID": "098f1af8-09f8-4bec-a5df-e25fe041cb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    host: '192.168.178.2'\n});\nassert.deepEqual(result, ['-s', '192.168.178.2']);",
                  "err": {},
                  "uuid": "fe4e2fb2-dc44-42c3-80dd-5b2a08e34b3c",
                  "parentUUID": "098f1af8-09f8-4bec-a5df-e25fe041cb49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    hosts: ['192.168.178.2', '192.168.178.3'],\n    id: '****',\n    protocol: NodePyATVProtocol.mrp,\n    dmapCredentials: '****',\n    mrpCredentials: '****',\n    airplayCredentials: '****',\n    companionCredentials: '1234',\n    raopCredentials: '::foo:'\n});\nassert.deepEqual(result, [\n    '-s', '192.168.178.2,192.168.178.3',\n    '-i', '****',\n    '--protocol', 'mrp',\n    '--dmap-credentials', '****',\n    '--mrp-credentials', '****',\n    '--airplay-credentials', '****',\n    '--companion-credentials', '1234',\n    '--raop-credentials', '::foo:'\n]);",
                  "err": {},
                  "uuid": "6e791a49-b540-4c39-8985-83033a405190",
                  "parentUUID": "098f1af8-09f8-4bec-a5df-e25fe041cb49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02869ef0-8c34-4fa7-9d84-b67072958d4d",
                "fe4e2fb2-dc44-42c3-80dd-5b2a08e34b3c",
                "6e791a49-b540-4c39-8985-83033a405190"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "546afe92-7810-4f55-baf7-62f05579345c",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "f0763a8d-078d-448c-9724-74b314c4a1bb",
                  "parentUUID": "546afe92-7810-4f55-baf7-62f05579345c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = parseState(null, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "a54e91bd-a173-41f7-8d27-aa3f7963d258",
                  "parentUUID": "546afe92-7810-4f55-baf7-62f05579345c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "c8657fe0-629b-4bb3-bc1f-f38c8361247a",
                  "parentUUID": "546afe92-7810-4f55-baf7-62f05579345c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert.throws(() => {\n    parseState(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "99232f40-b359-4359-a6dc-d51db33324de",
                  "parentUUID": "546afe92-7810-4f55-baf7-62f05579345c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "b468e9a3-b076-4c07-ad03-69ec93677c2b",
                  "parentUUID": "546afe92-7810-4f55-baf7-62f05579345c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "c72f4c5a-4278-4c17-bd49-5ecb3482c211",
                  "parentUUID": "546afe92-7810-4f55-baf7-62f05579345c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "2c02dfa0-b58c-4770-bcaf-5ec9db074180",
                  "parentUUID": "546afe92-7810-4f55-baf7-62f05579345c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0763a8d-078d-448c-9724-74b314c4a1bb",
                "a54e91bd-a173-41f7-8d27-aa3f7963d258",
                "c8657fe0-629b-4bb3-bc1f-f38c8361247a",
                "99232f40-b359-4359-a6dc-d51db33324de",
                "b468e9a3-b076-4c07-ad03-69ec93677c2b",
                "c72f4c5a-4278-4c17-bd49-5ecb3482c211",
                "2c02dfa0-b58c-4770-bcaf-5ec9db074180"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}