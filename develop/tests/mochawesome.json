{
  "stats": {
    "suites": 93,
    "tests": 165,
    "passes": 163,
    "pending": 2,
    "failures": 0,
    "start": "2024-10-08T10:18:02.518Z",
    "end": "2024-10-08T10:18:14.581Z",
    "duration": 12063,
    "testsRegistered": 165,
    "passPercent": 100,
    "pendingPercent": 1.2121212121212122,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cdda48d8-3796-4e60-821b-713a3a620bda",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "acdcddf4-54a3-4c82-9f26-953f968e0a19",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a8cf54ad-2583-4d0a-a63b-0318c2cdd5f8",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "5cdd0c6d-39fd-4843-bd93-b24d5d57b934",
                  "parentUUID": "a8cf54ad-2583-4d0a-a63b-0318c2cdd5f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5cdd0c6d-39fd-4843-bd93-b24d5d57b934"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81c398a7-25c7-47c4-8abf-f5a345eddc29",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "70273c4b-e72f-4828-9b70-25a2a00514dd",
                  "parentUUID": "81c398a7-25c7-47c4-8abf-f5a345eddc29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70273c4b-e72f-4828-9b70-25a2a00514dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aaa3ba9f-7493-4f16-b30d-38e756958a2c",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "0907ac70-accf-423a-b830-bb11f5eb1444",
                  "parentUUID": "aaa3ba9f-7493-4f16-b30d-38e756958a2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0907ac70-accf-423a-b830-bb11f5eb1444"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2caf72bc-3071-4a88-827d-725858e7d10a",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "6fab73fe-8153-49ae-913f-d46433c469b7",
                  "parentUUID": "2caf72bc-3071-4a88-827d-725858e7d10a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6fab73fe-8153-49ae-913f-d46433c469b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45a41078-91c5-40c5-9557-5c44f9219969",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device});assert.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "613bb8a1-4285-4f19-92e8-dc27bebbde41",
                  "parentUUID": "45a41078-91c5-40c5-9557-5c44f9219969",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "613bb8a1-4285-4f19-92e8-dc27bebbde41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "380b2fa4-b328-44fc-8a8c-36e6cde0f9d1",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "14fc316b-5309-4df2-b988-6e8157f394fc",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "8e4b05f6-adad-4e3a-abf0-3df39fa399db",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "bd5b744e-5c2e-4e58-92a9-65468a01e4ef",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);assert.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "601f74df-6741-4a8a-bd96-b2ab6e1b007a",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"failure\",datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{assert.ok(error instanceof Error);assert.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "1177602f-7bd0-412c-8c56-fc2c80e10796",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);assert.strictEqual(spawnCounter,2);assert.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "c2d1f132-d7c2-4b4f-bcd8-744985b83e28",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{assert.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);assert.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "e28dbe9c-009b-4f55-87af-95951b2594e9",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),power_state:\"off\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "c4ed9902-1225-45c1-8136-29ec77dc3c8d",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),power_state:\"off\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "c393edd5-200e-4a92-8dad-1f88a5a7ba42",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),focus_state:\"unfocused\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"focusState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"unfocused\");assert.strictEqual(event.newValue,NodePyATVFocusState.unfocused);assert.strictEqual(event.value,\"unfocused\");assert.strictEqual(event.value,NodePyATVFocusState.unfocused);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "f6d5f088-a346-44f0-bb5c-3755ec558f3c",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),output_devices:[{name:\"Living room\",identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"}]});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"outputDevices\");assert.strictEqual(event.oldValue,null);assert.deepStrictEqual(event.newValue,[{name:\"Living room\",identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"}]);assert.deepStrictEqual(event.value,[{name:\"Living room\",identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"}]);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "431254e6-f0dc-4078-a156-b2f1475a0bc6",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"volume\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,20);assert.strictEqual(event.value,20);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "77d27bb1-49e5-4d47-8c8e-87f75f35cf21",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),foo:\"bar\"});cp.end()})});device.on(\"update\",event=>{assert.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "03504c0a-72ee-491b-b038-87b389465f77",
                  "parentUUID": "14fc316b-5309-4df2-b988-6e8157f394fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e4b05f6-adad-4e3a-abf0-3df39fa399db",
                "bd5b744e-5c2e-4e58-92a9-65468a01e4ef",
                "601f74df-6741-4a8a-bd96-b2ab6e1b007a",
                "1177602f-7bd0-412c-8c56-fc2c80e10796",
                "c2d1f132-d7c2-4b4f-bcd8-744985b83e28",
                "e28dbe9c-009b-4f55-87af-95951b2594e9",
                "c4ed9902-1225-45c1-8136-29ec77dc3c8d",
                "c393edd5-200e-4a92-8dad-1f88a5a7ba42",
                "f6d5f088-a346-44f0-bb5c-3755ec558f3c",
                "431254e6-f0dc-4078-a156-b2f1475a0bc6",
                "77d27bb1-49e5-4d47-8c8e-87f75f35cf21",
                "03504c0a-72ee-491b-b038-87b389465f77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e749eb23-300e-423a-8a8a-6236e77ca1f4",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "fe7fa881-b9ca-4a74-9c03-99e8128be28e",
                  "parentUUID": "e749eb23-300e-423a-8a8a-6236e77ca1f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "f2eaac30-0aab-4317-b463-fb0bd6ceb46b",
                  "parentUUID": "e749eb23-300e-423a-8a8a-6236e77ca1f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "aa109a55-3269-43a0-90c5-7aa2ba3a0250",
                  "parentUUID": "e749eb23-300e-423a-8a8a-6236e77ca1f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "726ad959-04a8-4850-a2e9-2d3d5b839955",
                  "parentUUID": "e749eb23-300e-423a-8a8a-6236e77ca1f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe7fa881-b9ca-4a74-9c03-99e8128be28e",
                "f2eaac30-0aab-4317-b463-fb0bd6ceb46b",
                "aa109a55-3269-43a0-90c5-7aa2ba3a0250"
              ],
              "failures": [],
              "pending": [
                "726ad959-04a8-4850-a2e9-2d3d5b839955"
              ],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7332915-58bd-40f9-a9a7-d0fdd3e817c6",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "d8e53e87-c307-4d76-aa7e-3155fc72c374",
                  "parentUUID": "f7332915-58bd-40f9-a9a7-d0fdd3e817c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8e53e87-c307-4d76-aa7e-3155fc72c374"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ebdb0c13-7211-4649-a7fb-9e1a68a2c3ef",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const event=new NodePyATVDeviceEvent({key:\"dateTime\",old:\"foo\",new:\"bar\",device});let executions=0;device.once(\"test\",e=>{executions++;assert.strictEqual(e,event);assert.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "3053049a-9451-4abc-ba3e-97ea0ac5f28c",
                  "parentUUID": "ebdb0c13-7211-4649-a7fb-9e1a68a2c3ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3053049a-9451-4abc-ba3e-97ea0ac5f28c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "617ac35a-5053-4218-be18-3b6573bb4a98",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);assert.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "82b1dd9a-aea0-4e5e-8f3b-a83d2c8b6a02",
                  "parentUUID": "617ac35a-5053-4218-be18-3b6573bb4a98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82b1dd9a-aea0-4e5e-8f3b-a83d2c8b6a02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "838aa53c-69c9-4eea-a50a-4dc2b5c29e1b",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();assert.ok(typeof result,\"number\");assert.ok(result>=10)",
                  "err": {},
                  "uuid": "a1ce222e-f10c-4315-a770-645bf851d39f",
                  "parentUUID": "838aa53c-69c9-4eea-a50a-4dc2b5c29e1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1ce222e-f10c-4315-a770-645bf851d39f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3bcf8ec5-bc17-4894-b61e-04c0e12859d7",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);assert.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "439c6ba7-4b0d-46e8-960d-cbc6a3fcd219",
                  "parentUUID": "3bcf8ec5-bc17-4894-b61e-04c0e12859d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "439c6ba7-4b0d-46e8-960d-cbc6a3fcd219"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71306866-797a-47ab-be9d-e2bb6df946e7",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.listeners(\"test\").length,1);assert.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "5317f5ab-6f3b-4f6d-9a73-ca0304895668",
                  "parentUUID": "71306866-797a-47ab-be9d-e2bb6df946e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5317f5ab-6f3b-4f6d-9a73-ca0304895668"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "97761b5b-c383-4604-a124-abd03548aa5f",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "f2af9722-0594-4377-9220-f33021a7252c",
                  "parentUUID": "97761b5b-c383-4604-a124-abd03548aa5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2af9722-0594-4377-9220-f33021a7252c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb84a11e-c92d-4f43-8538-a85fb49e4d3d",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "3179237a-d68b-458e-8488-e187079b9cc3",
                  "parentUUID": "fb84a11e-c92d-4f43-8538-a85fb49e4d3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3179237a-d68b-458e-8488-e187079b9cc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd4b6736-1a30-4070-ae54-be46f9267d6d",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.rawListeners(\"test\").length,1);assert.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "a1e78ef7-378a-41f7-8d95-7c5d9a64deee",
                  "parentUUID": "cd4b6736-1a30-4070-ae54-be46f9267d6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1e78ef7-378a-41f7-8d95-7c5d9a64deee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa856fbb-b8ad-4daa-a73d-010b9ebe34a5",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "23e969be-4cc0-48a9-9341-016a3935f129",
                  "parentUUID": "fa856fbb-b8ad-4daa-a73d-010b9ebe34a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23e969be-4cc0-48a9-9341-016a3935f129"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0106d83d-232f-484c-b14d-4751e9bc57e3",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "85adb848-4059-49b5-9d89-87531cbb1d95",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "187b15fe-f2f8-4bae-b5d8-1eafd99ee929",
                  "parentUUID": "85adb848-4059-49b5-9d89-87531cbb1d95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "187b15fe-f2f8-4bae-b5d8-1eafd99ee929"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6cb606ad-a093-471f-9889-c2621267d435",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "d8147776-bdad-4c8d-a393-2910a04ed28e",
                  "parentUUID": "6cb606ad-a093-471f-9889-c2621267d435",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8147776-bdad-4c8d-a393-2910a04ed28e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2efe8c51-8bfe-4a0c-a112-4cc12e3220e2",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\"});assert.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "79fef527-cb9c-48c0-a049-51876da7f84e",
                  "parentUUID": "2efe8c51-8bfe-4a0c-a112-4cc12e3220e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79fef527-cb9c-48c0-a049-51876da7f84e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7cba0c0c-7a28-4918-a96b-8959e1eb25f6",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"]});assert.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "ab5f28a2-0715-4a03-86db-e098336bfaca",
                  "parentUUID": "7cba0c0c-7a28-4918-a96b-8959e1eb25f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab5f28a2-0715-4a03-86db-e098336bfaca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64a16b1d-2364-4dda-966e-79c39f43cd1d",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",protocol:NodePyATVProtocol.airplay});assert.strictEqual(device.protocol,NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "577d3f1d-d3c2-4ebf-b253-3d90b523d8a1",
                  "parentUUID": "64a16b1d-2364-4dda-966e-79c39f43cd1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "577d3f1d-d3c2-4ebf-b253-3d90b523d8a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43942c2a-17eb-45ff-ae9a-9e0c8fb9294d",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\"});assert.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "43f0834b-c314-42de-bf94-6b2ed6c76f32",
                  "parentUUID": "43942c2a-17eb-45ff-ae9a-9e0c8fb9294d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43f0834b-c314-42de-bf94-6b2ed6c76f32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4817fb4a-a603-452b-b457-1da0ef347916",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\"});assert.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "cc7a1961-283e-4f4b-9e79-bb8fc521ce0c",
                  "parentUUID": "4817fb4a-a603-452b-b457-1da0ef347916",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "436e4184-1052-499c-828f-22d317baa657",
                  "parentUUID": "4817fb4a-a603-452b-b457-1da0ef347916",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc7a1961-283e-4f4b-9e79-bb8fc521ce0c",
                "436e4184-1052-499c-828f-22d317baa657"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "979f4748-1447-4042-b4fa-3d1a6a5c6655",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\"});assert.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "596c28aa-785f-4f80-b14c-b9d8ae6ac026",
                  "parentUUID": "979f4748-1447-4042-b4fa-3d1a6a5c6655",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "13f8698c-1273-47c0-b063-39a63c747ae6",
                  "parentUUID": "979f4748-1447-4042-b4fa-3d1a6a5c6655",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "596c28aa-785f-4f80-b14c-b9d8ae6ac026",
                "13f8698c-1273-47c0-b063-39a63c747ae6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "022cc8c3-02ee-4f60-9d7d-abbdd2ca7035",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",os:\"TvOS\"});assert.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "90216125-8adf-45e2-afc6-bf292c80bccd",
                  "parentUUID": "022cc8c3-02ee-4f60-9d7d-abbdd2ca7035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "80e98805-7359-44c7-a8ca-7a3765191c5a",
                  "parentUUID": "022cc8c3-02ee-4f60-9d7d-abbdd2ca7035",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90216125-8adf-45e2-afc6-bf292c80bccd",
                "80e98805-7359-44c7-a8ca-7a3765191c5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "68dc4795-2281-4a40-af30-1f0c16901aa8",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",version:\"15.5.1\"});assert.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "1a6e55bc-86c5-4715-9c16-201bae68ee0c",
                  "parentUUID": "68dc4795-2281-4a40-af30-1f0c16901aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "85bfaf7e-105a-4f4b-8b82-a40c79614742",
                  "parentUUID": "68dc4795-2281-4a40-af30-1f0c16901aa8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a6e55bc-86c5-4715-9c16-201bae68ee0c",
                "85bfaf7e-105a-4f4b-8b82-a40c79614742"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6a0280d-3e03-4df6-96aa-c2086ec90a65",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",services:[{protocol:NodePyATVProtocol.mrp,port:49152},{protocol:NodePyATVProtocol.airplay,port:7e3}]});assert.deepStrictEqual(device.services,[{protocol:\"mrp\",port:49152},{protocol:\"airplay\",port:7e3}])",
                  "err": {},
                  "uuid": "c8fd47a1-e0d6-4ec8-9eec-7ceb0eef6bc1",
                  "parentUUID": "f6a0280d-3e03-4df6-96aa-c2086ec90a65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "d9f39c0c-ed41-4ce7-b326-f358bcc4b54b",
                  "parentUUID": "f6a0280d-3e03-4df6-96aa-c2086ec90a65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8fd47a1-e0d6-4ec8-9eec-7ceb0eef6bc1",
                "d9f39c0c-ed41-4ce7-b326-f358bcc4b54b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd223a5f-41d7-4f03-b5aa-ad5da3f7f9e9",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:true});assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "f062d3f1-0855-4d37-a662-3b9a062c94fe",
                  "parentUUID": "fd223a5f-41d7-4f03-b5aa-ad5da3f7f9e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:fn});assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "9e83936b-6ecb-4f42-805b-278d25133864",
                  "parentUUID": "fd223a5f-41d7-4f03-b5aa-ad5da3f7f9e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "3efdfc91-142c-472f-8bce-28c64bd126fb",
                  "parentUUID": "fd223a5f-41d7-4f03-b5aa-ad5da3f7f9e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f062d3f1-0855-4d37-a662-3b9a062c94fe",
                "9e83936b-6ecb-4f42-805b-278d25133864",
                "3efdfc91-142c-472f-8bce-28c64bd126fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df21856d-66f9-4964-9fb0-276f4919019c",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.debug,void 0);device.debug=true;assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "f684fcf5-4375-4f70-a989-45ce3fca24ac",
                  "parentUUID": "df21856d-66f9-4964-9fb0-276f4919019c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:true});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "395169b5-d12f-4c89-bcf8-4778a67c8515",
                  "parentUUID": "df21856d-66f9-4964-9fb0-276f4919019c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:true});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "c12de8fc-f584-4f19-b308-1b8c71e7c259",
                  "parentUUID": "df21856d-66f9-4964-9fb0-276f4919019c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});const fn=__name(()=>{},\"fn\");assert.strictEqual(device.debug,void 0);device.debug=fn;assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "6ebd9680-3102-4446-91a8-065623be2989",
                  "parentUUID": "df21856d-66f9-4964-9fb0-276f4919019c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f684fcf5-4375-4f70-a989-45ce3fca24ac",
                "395169b5-d12f-4c89-bcf8-4778a67c8515",
                "c12de8fc-f584-4f19-b308-1b8c71e7c259",
                "6ebd9680-3102-4446-91a8-065623be2989"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6aad1c54-0df6-46a4-b39e-86cb4cb6f8f2",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",protocol:NodePyATVProtocol.airplay});assert.deepEqual(device.toJSON(),{name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",protocol:NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "91718295-3be6-4a9b-9cbe-ef6e5ac767ee",
                  "parentUUID": "6aad1c54-0df6-46a4-b39e-86cb4cb6f8f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",protocol:NodePyATVProtocol.airplay};const deviceA=new NodePyATVDevice(config);const deviceB=new NodePyATVDevice(deviceA.toJSON());assert.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "b30bd45f-b9dd-4ac6-9a81-e46ea1e13099",
                  "parentUUID": "6aad1c54-0df6-46a4-b39e-86cb4cb6f8f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91718295-3be6-4a9b-9cbe-ef6e5ac767ee",
                "b30bd45f-b9dd-4ac6-9a81-e46ea1e13099"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d416da8-f1d7-4297-a2f3-e49d0c801838",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "ace3c209-ea0c-4958-abfd-b359986f0d53",
                  "parentUUID": "8d416da8-f1d7-4297-a2f3-e49d0c801838",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ace3c209-ea0c-4958-abfd-b359986f0d53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b2ccc54-084d-4e96-a5fd-d98fb9cc2e27",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "84cd4eac-c288-49c2-8c11-564c443d9563",
                  "parentUUID": "9b2ccc54-084d-4e96-a5fd-d98fb9cc2e27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",datetime:\"2020-11-07T22:38:43.608030+01:00\",hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\"})})});const result=await device.getState();assert.deepStrictEqual(result,{dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",mediaType:NodePyATVMediaType.video,deviceState:NodePyATVDeviceState.playing,focusState:null,title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,totalTime:8097,volume:null,position:27,shuffle:NodePyATVShuffleState.off,repeat:NodePyATVRepeatState.off,app:\"Disney+\",appId:\"com.disney.disneyplus\",powerState:null,outputDevices:null})",
                  "err": {},
                  "uuid": "693c1ba3-7221-449f-9971-baddb1849929",
                  "parentUUID": "9b2ccc54-084d-4e96-a5fd-d98fb9cc2e27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"failure\",datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});assert.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "0ddfc9c4-ae77-4795-8ee3-97ec24fa5ae4",
                  "parentUUID": "9b2ccc54-084d-4e96-a5fd-d98fb9cc2e27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{executions++;cp.end({result:\"success\",datetime:new Date().toJSON(),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\"})})});const firstResult=await device.getState();const secondResult=await device.getState();assert.strictEqual(firstResult.dateTime,secondResult.dateTime);assert.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "068f7e71-c9f2-4a64-9531-76c6fb0f4526",
                  "parentUUID": "9b2ccc54-084d-4e96-a5fd-d98fb9cc2e27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",datetime:new Date(new Date().getTime()-1e3).toJSON(),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\"})})});const firstResult=await device.getState();assert.strictEqual(firstResult.position,27);const secondResult=await device.getState();assert.ok(secondResult.position);assert.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);assert.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "49a82b4d-8f6e-4897-b1c0-c31468f8878b",
                  "parentUUID": "9b2ccc54-084d-4e96-a5fd-d98fb9cc2e27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "693c1ba3-7221-449f-9971-baddb1849929",
                "0ddfc9c4-ae77-4795-8ee3-97ec24fa5ae4",
                "068f7e71-c9f2-4a64-9531-76c6fb0f4526",
                "49a82b4d-8f6e-4897-b1c0-c31468f8878b"
              ],
              "failures": [],
              "pending": [
                "84cd4eac-c288-49c2-8c11-564c443d9563"
              ],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b41a132-f0d5-42b1-901e-1e8ea5974fb2",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{executions++;cp.end({result:\"success\",datetime:\"2020-11-07T22:38:43.608030+01:00\",title:\"Solo: A Star Wars Story\"})})});assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");assert.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "e3b94bc0-970e-4ada-8097-b256b6dee887",
                  "parentUUID": "3b41a132-f0d5-42b1-901e-1e8ea5974fb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3b94bc0-970e-4ada-8097-b256b6dee887"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2001376b-f241-4797-90c9-584a795288a6",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",datetime:new Date().toJSON()})})});const result=await device.getDateTime();assert.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "9e115043-ea51-42a1-80e9-014f8c14c9b6",
                  "parentUUID": "2001376b-f241-4797-90c9-584a795288a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e115043-ea51-42a1-80e9-014f8c14c9b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aba05252-1ced-4007-88a9-3d8d95d784c3",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",hash:\"12345\"})})});const result=await device.getHash();assert.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "a0a156a9-24e5-47fb-bbf1-18e3c83d359d",
                  "parentUUID": "aba05252-1ced-4007-88a9-3d8d95d784c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0a156a9-24e5-47fb-bbf1-18e3c83d359d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4bcf1a55-0fd7-4378-b36e-75483833422d",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",media_type:\"video\"})})});const result=await device.getMediaType();assert.deepStrictEqual(result,NodePyATVMediaType.video);assert.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "3468839d-01ae-4eb8-ae66-f2d1dbfea837",
                  "parentUUID": "4bcf1a55-0fd7-4378-b36e-75483833422d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3468839d-01ae-4eb8-ae66-f2d1dbfea837"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e63c2b3b-2bdc-45b9-9715-919e3e1d8de8",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",device_state:\"seeking\"})})});const result=await device.getDeviceState();assert.deepStrictEqual(result,NodePyATVDeviceState.seeking);assert.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "1c23009f-b632-4da1-b153-fb1855e159a9",
                  "parentUUID": "e63c2b3b-2bdc-45b9-9715-919e3e1d8de8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c23009f-b632-4da1-b153-fb1855e159a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d881e614-8215-4e4c-9923-f08c5af1b2e7",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();assert.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "54a24c66-2e8c-4c57-bf90-1317c0dfe121",
                  "parentUUID": "d881e614-8215-4e4c-9923-f08c5af1b2e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54a24c66-2e8c-4c57-bf90-1317c0dfe121"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ef77689-da05-4b11-b140-7215617fa37e",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",artist:\"My Artist\"})})});const result=await device.getArtist();assert.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "ba21d7d5-329a-4525-82b5-b963e2f89025",
                  "parentUUID": "7ef77689-da05-4b11-b140-7215617fa37e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba21d7d5-329a-4525-82b5-b963e2f89025"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "615082e8-5173-4f06-8512-4583f902e898",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",album:\"My ALbum\"})})});const result=await device.getAlbum();assert.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "723cf168-5e42-4f1b-8a7a-4b2cbab25188",
                  "parentUUID": "615082e8-5173-4f06-8512-4583f902e898",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "723cf168-5e42-4f1b-8a7a-4b2cbab25188"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "809209b8-ef80-4c72-afd5-db0d3a27399d",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",genre:\"My Genre\"})})});const result=await device.getGenre();assert.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "c09d38a1-a734-4c07-aeb5-b18db1e3e9f7",
                  "parentUUID": "809209b8-ef80-4c72-afd5-db0d3a27399d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c09d38a1-a734-4c07-aeb5-b18db1e3e9f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afdf1988-9e66-423f-9570-dd4f819c9dcb",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();assert.strictEqual(result,45)",
                  "err": {},
                  "uuid": "d186846d-7ece-4358-8594-b59db2162126",
                  "parentUUID": "afdf1988-9e66-423f-9570-dd4f819c9dcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d186846d-7ece-4358-8594-b59db2162126"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ccf73d9-4806-4b99-ac4c-d353ebcd0f3f",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",position:30})})});const result=await device.getPosition();assert.strictEqual(result,30)",
                  "err": {},
                  "uuid": "cc7cd0ac-6039-4173-8b93-7b1096c9f8a0",
                  "parentUUID": "7ccf73d9-4806-4b99-ac4c-d353ebcd0f3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc7cd0ac-6039-4173-8b93-7b1096c9f8a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93c44628-64c4-4a7b-ae48-1a62fd3f0a7f",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();assert.deepStrictEqual(result,NodePyATVShuffleState.songs);assert.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "43340c0e-1c3c-4d85-a258-95cd2133316c",
                  "parentUUID": "93c44628-64c4-4a7b-ae48-1a62fd3f0a7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43340c0e-1c3c-4d85-a258-95cd2133316c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d26695f-55e4-4fc7-bf00-a80d8e8aa6fb",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",repeat:\"all\"})})});const result=await device.getRepeat();assert.deepStrictEqual(result,NodePyATVRepeatState.all);assert.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "d94e13e8-dba1-451f-8f7d-95e0f774f30f",
                  "parentUUID": "6d26695f-55e4-4fc7-bf00-a80d8e8aa6fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d94e13e8-dba1-451f-8f7d-95e0f774f30f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f70f477c-dc82-4b13-9b68-f9e7248e172c",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",app:\"My App\"})})});const result=await device.getApp();assert.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "3eb77ac5-5fff-48b7-9de7-03407a273414",
                  "parentUUID": "f70f477c-dc82-4b13-9b68-f9e7248e172c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3eb77ac5-5fff-48b7-9de7-03407a273414"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "987ed33b-057a-4e0d-9522-0d36b6f8f52a",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",app_id:\"app.example.com\"})})});const result=await device.getAppId();assert.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "8e44a801-6796-480b-868d-7d973eab97de",
                  "parentUUID": "987ed33b-057a-4e0d-9522-0d36b6f8f52a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e44a801-6796-480b-868d-7d973eab97de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63dac2f0-b5ed-4dfb-9f3a-51225f71d951",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();assert.strictEqual(result.length,25);assert.strictEqual(result[0].id,\"com.apple.Fitness\");assert.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "815674e7-9291-45f3-aea2-50cea08b51f0",
                  "parentUUID": "63dac2f0-b5ed-4dfb-9f3a-51225f71d951",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "815674e7-9291-45f3-aea2-50cea08b51f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02c244de-9a41-42e6-b8dd-935dc4466486",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "d31ef1df-40d8-4be0-b376-fe91cdc9313c",
                  "parentUUID": "02c244de-9a41-42e6-b8dd-935dc4466486",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});await assert.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "14e3f441-98b6-4456-8a4c-a3b6ff657a85",
                  "parentUUID": "02c244de-9a41-42e6-b8dd-935dc4466486",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"failure\"}')})});await assert.rejects(async()=>{await device.pressKey(NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "cf5ae5ab-cc78-4a32-a516-2c44cd17df11",
                  "parentUUID": "02c244de-9a41-42e6-b8dd-935dc4466486",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d31ef1df-40d8-4be0-b376-fe91cdc9313c",
                "14e3f441-98b6-4456-8a4c-a3b6ff657a85",
                "cf5ae5ab-cc78-4a32-a516-2c44cd17df11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ffb86c5b-5ed0-45b7-b71a-76096720729b",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "6b328b2f-e183-4056-9a55-2d76298d3c23",
                  "parentUUID": "ffb86c5b-5ed0-45b7-b71a-76096720729b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b328b2f-e183-4056-9a55-2d76298d3c23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee76bc89-9318-46a2-a2da-896369b17a20",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "a55c2e95-ec13-468e-88fe-4547829c7d36",
                  "parentUUID": "ee76bc89-9318-46a2-a2da-896369b17a20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a55c2e95-ec13-468e-88fe-4547829c7d36"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b832ee5-351f-4244-94fe-42d57794860e",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "914ef2b1-05d6-40a8-8483-9115fd78c5b3",
                  "parentUUID": "9b832ee5-351f-4244-94fe-42d57794860e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "914ef2b1-05d6-40a8-8483-9115fd78c5b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9f1442d9-189f-4db0-9445-fc825cfd61ad",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "e79ecc18-562a-4db6-80fa-2769050952d1",
                  "parentUUID": "9f1442d9-189f-4db0-9445-fc825cfd61ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e79ecc18-562a-4db6-80fa-2769050952d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "effbaee1-5439-4fe0-968d-63b33c314155",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "cae84022-a9bf-4d72-8413-c8ce7fdf8461",
                  "parentUUID": "effbaee1-5439-4fe0-968d-63b33c314155",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cae84022-a9bf-4d72-8413-c8ce7fdf8461"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c94dd33a-3e44-45dc-a910-2768a27d6558",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c1bbb729-a403-4449-b868-e705ab6dee4c",
                  "parentUUID": "c94dd33a-3e44-45dc-a910-2768a27d6558",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1bbb729-a403-4449-b868-e705ab6dee4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13890057-145a-46dd-ae96-6dc9957e09cd",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "d1f583af-a187-4009-be7c-e6f53e83d19b",
                  "parentUUID": "13890057-145a-46dd-ae96-6dc9957e09cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1f583af-a187-4009-be7c-e6f53e83d19b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13b44512-4e15-47b3-820a-d3d3f75a95eb",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9638ebd5-77f9-4bb3-b0b6-793fd6675d21",
                  "parentUUID": "13b44512-4e15-47b3-820a-d3d3f75a95eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9638ebd5-77f9-4bb3-b0b6-793fd6675d21"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d1a14e0a-6a9c-4532-a6ee-a3df70f05ed8",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "a5c293aa-e0e2-4b55-bcf6-63554b947e03",
                  "parentUUID": "d1a14e0a-6a9c-4532-a6ee-a3df70f05ed8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5c293aa-e0e2-4b55-bcf6-63554b947e03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03a88a22-9a9e-4a45-b4b7-f546152db05d",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f34a05e4-2c02-4dfd-b99d-724dc9597d46",
                  "parentUUID": "03a88a22-9a9e-4a45-b4b7-f546152db05d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f34a05e4-2c02-4dfd-b99d-724dc9597d46"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4dba0d27-0e4b-4d7c-a7d5-9cbaba35cfaf",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "ab94d70a-2b6d-4725-a8ca-1de50e068658",
                  "parentUUID": "4dba0d27-0e4b-4d7c-a7d5-9cbaba35cfaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab94d70a-2b6d-4725-a8ca-1de50e068658"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0191a74-0af6-4fc1-8d87-c819dd4a6381",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "fed4465e-0e65-4cdc-93a7-a1059d86ff21",
                  "parentUUID": "f0191a74-0af6-4fc1-8d87-c819dd4a6381",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fed4465e-0e65-4cdc-93a7-a1059d86ff21"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0b05d8c-a5a1-4182-a2e4-b35426478fa9",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3464a304-cab1-40df-a3e5-d9f895d94c78",
                  "parentUUID": "e0b05d8c-a5a1-4182-a2e4-b35426478fa9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3464a304-cab1-40df-a3e5-d9f895d94c78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c1e0ec6-b820-4812-a49d-45d42cea42f4",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "faa9193d-b5d3-44e6-817f-dacf971cad77",
                  "parentUUID": "1c1e0ec6-b820-4812-a49d-45d42cea42f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "faa9193d-b5d3-44e6-817f-dacf971cad77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f495f6f1-510f-4a65-bd77-ec06414daf48",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "dc4123f8-885c-4fb5-8b5a-2c8195507a6f",
                  "parentUUID": "f495f6f1-510f-4a65-bd77-ec06414daf48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc4123f8-885c-4fb5-8b5a-2c8195507a6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd61967c-526b-4466-a422-ad550608a467",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "45897ab4-ddcd-4bbc-82f7-b724ab2494b2",
                  "parentUUID": "cd61967c-526b-4466-a422-ad550608a467",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45897ab4-ddcd-4bbc-82f7-b724ab2494b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77febcf0-e235-42ec-b26a-49308243bbfb",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "a22907ce-f419-4e4a-91b9-3df74739c852",
                  "parentUUID": "77febcf0-e235-42ec-b26a-49308243bbfb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a22907ce-f419-4e4a-91b9-3df74739c852"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "abbe3098-2524-471b-b951-18d6ab25e044",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "93a497c2-d653-4f9e-88cf-3433a312f807",
                  "parentUUID": "abbe3098-2524-471b-b951-18d6ab25e044",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93a497c2-d653-4f9e-88cf-3433a312f807"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3970cf0-eaa2-427b-bbb3-3bbcc7e78566",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "fff015fa-9983-4a81-8d20-a69ea1477842",
                  "parentUUID": "b3970cf0-eaa2-427b-bbb3-3bbcc7e78566",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fff015fa-9983-4a81-8d20-a69ea1477842"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b14b8dac-cfd2-4d8e-9880-248350180625",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "54ec527b-4343-4a47-9336-56d9775a97b0",
                  "parentUUID": "b14b8dac-cfd2-4d8e-9880-248350180625",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54ec527b-4343-4a47-9336-56d9775a97b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c4d1c15-d9fa-4392-871b-31666d64d38a",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "e6e84ccc-1f07-4e39-abe4-591e16ac77f7",
                  "parentUUID": "5c4d1c15-d9fa-4392-871b-31666d64d38a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6e84ccc-1f07-4e39-abe4-591e16ac77f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0a9dc93-ff83-4856-8caa-e9547066f109",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c9eef87d-6920-4062-8a99-48800c0d0af1",
                  "parentUUID": "e0a9dc93-ff83-4856-8caa-e9547066f109",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9eef87d-6920-4062-8a99-48800c0d0af1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39de964e-bc26-4c99-9161-24bc287bbc73",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f90bb7c1-777c-4000-bcb1-4078a8edfaa3",
                  "parentUUID": "39de964e-bc26-4c99-9161-24bc287bbc73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f90bb7c1-777c-4000-bcb1-4078a8edfaa3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67ad806d-f442-4d3b-86ba-6cf607084b02",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "28053a0f-8f8c-4ed5-9367-c367a3dd4b36",
                  "parentUUID": "67ad806d-f442-4d3b-86ba-6cf607084b02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28053a0f-8f8c-4ed5-9367-c367a3dd4b36"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cf7d7a39-f3e5-4dde-9117-f57c5e3314be",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 530,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await NodePyATVInstance.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}assert.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");assert.ok(result.pyatv.length>=5,\"result.pyatv has content\");assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "f68f1d9d-a598-4255-a731-a67734c4c7bc",
                  "parentUUID": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});assert.ok(result.pyatv);assert.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "9a3f3001-2c6a-46fc-b5b7-fb3da88f7901",
                  "parentUUID": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())});assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "f3a1552f-2907-4260-b94a-065012c267a2",
                  "parentUUID": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({atvremotePath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "b9549027-2fd1-484a-8797-b31e7dabd43e",
                  "parentUUID": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "8468b27b-7ba8-4418-8161-4823f82ba1c7",
                  "parentUUID": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "d2cd82e8-dd23-441c-abf0-57a3f0f7e02a",
                  "parentUUID": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>cp.stderr(\"Hello World!\").code(123).end())});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "4048af3f-9571-43fa-9a8d-531adb48557b",
                  "parentUUID": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "f39edcfc-a2ce-418d-8c4e-ef0c847fac9a",
                  "parentUUID": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "e9d345ef-4914-43f7-a459-4fafdb22ff68",
                  "parentUUID": "4dadd460-8569-406d-b190-5f3b2f9e67b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f68f1d9d-a598-4255-a731-a67734c4c7bc",
                "9a3f3001-2c6a-46fc-b5b7-fb3da88f7901",
                "f3a1552f-2907-4260-b94a-065012c267a2",
                "b9549027-2fd1-484a-8797-b31e7dabd43e",
                "8468b27b-7ba8-4418-8161-4823f82ba1c7",
                "d2cd82e8-dd23-441c-abf0-57a3f0f7e02a",
                "4048af3f-9571-43fa-9a8d-531adb48557b",
                "f39edcfc-a2ce-418d-8c4e-ef0c847fac9a",
                "e9d345ef-4914-43f7-a459-4fafdb22ff68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 542,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1f3f0390-d784-4cb9-a037-da1e36ed9b85",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5887,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await NodePyATVInstance.check()",
                  "err": {},
                  "uuid": "721b4dd8-30df-484d-bc21-8a16eff0abcc",
                  "parentUUID": "1f3f0390-d784-4cb9-a037-da1e36ed9b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "87f41246-6bf3-42f5-ba88-35f733469bb8",
                  "parentUUID": "1f3f0390-d784-4cb9-a037-da1e36ed9b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "ba7b715a-6fbe-4c64-a43b-15fefe0abf36",
                  "parentUUID": "1f3f0390-d784-4cb9-a037-da1e36ed9b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "20b1c536-51ce-4990-afb5-0f58f684cf9d",
                  "parentUUID": "1f3f0390-d784-4cb9-a037-da1e36ed9b85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "721b4dd8-30df-484d-bc21-8a16eff0abcc",
                "87f41246-6bf3-42f5-ba88-35f733469bb8",
                "ba7b715a-6fbe-4c64-a43b-15fefe0abf36",
                "20b1c536-51ce-4990-afb5-0f58f684cf9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5894,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37b1ce82-e7b0-49b3-853c-093821b18468",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5434,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await NodePyATVInstance.find();assert.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "afc7ecc1-b516-4346-832c-accb83076ec3",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({atvscriptPath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({\"result\":\"success\",\"datetime\":\"2020-11-06T20:47:30.840022+01:00\",\"devices\":[]}).end()})})",
                  "err": {},
                  "uuid": "261ffaef-fa88-400b-8ee0-5500fb70f5e5",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "79dbe089-723a-423e-8f98-25370eeca762",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "0f897fb0-47b0-4dd1-9426-e2ca6439ef7b",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"failure\",datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "8b58ad8d-ef6b-4adf-892b-e74c95b15b27",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(JSON.stringify({\"result\":\"success\",\"datetime\":\"2020-11-06T20:47:30.840022+01:00\",\"devices\":[]}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "f6f02213-fa20-4211-9ae9-4894e45c84ba",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "21297efd-a086-45e4-aa91-5dd4c6dfa061",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "0810264f-b24d-4fd3-8dd4-8942f94594be",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\",datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{name:\"Vardagsrum\",address:\"10.0.10.81\",identifier:\"xxx\"}]}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,void 0);assert.strictEqual(devices[0].modelName,void 0);assert.strictEqual(devices[0].os,void 0);assert.strictEqual(devices[0].version,void 0);assert.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "7ab8b3d0-d7ca-47c8-9d2a-9296a1067da7",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\",datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{name:\"Vardagsrum\",address:\"10.0.10.81\",identifier:\"xxx\",device_info:{\"model\":\"Gen4K\",\"model_str\":\"Apple TV 4K\",\"operating_system\":\"TvOS\",\"version\":\"15.5.1\"},services:[{protocol:\"mrp\",port:49152},{protocol:\"airplay\",port:7e3}]}]}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,\"Gen4K\");assert.strictEqual(devices[0].modelName,\"Apple TV 4K\");assert.strictEqual(devices[0].os,\"TvOS\");assert.strictEqual(devices[0].version,\"15.5.1\");assert.deepStrictEqual(devices[0].services,[{protocol:NodePyATVProtocol.mrp,port:49152},{protocol:NodePyATVProtocol.airplay,port:7e3}])",
                  "err": {},
                  "uuid": "3036d9c7-8988-4568-a98e-c2200db70c48",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});assert.strictEqual(devices.length,4);assert.strictEqual(devices[0].name,\"Living Room\");assert.strictEqual(devices[0].host,\"10.0.0.30\");assert.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(devices[1].name,\"Kitchen\");assert.strictEqual(devices[1].host,\"10.0.0.79\");assert.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(devices[2].name,\"Bedroom\");assert.strictEqual(devices[2].host,\"10.0.0.20\");assert.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(devices[3].name,\"Basement\");assert.strictEqual(devices[3].host,\"10.0.0.156\");assert.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "9209e061-0d5a-41f5-94e0-03ed69bd3232",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);assert.strictEqual(response.devices.length,4);assert.strictEqual(response.errors.length,2);assert.strictEqual(response.devices[0].name,\"Living Room\");assert.strictEqual(response.devices[0].host,\"10.0.0.30\");assert.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(response.devices[1].name,\"Kitchen\");assert.strictEqual(response.devices[1].host,\"10.0.0.79\");assert.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(response.devices[2].name,\"Bedroom\");assert.strictEqual(response.devices[2].host,\"10.0.0.20\");assert.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(response.devices[3].name,\"Basement\");assert.strictEqual(response.devices[3].host,\"10.0.0.156\");assert.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");assert.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");assert.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "5dae2160-4aa8-4841-94f1-058739a3f2dc",
                  "parentUUID": "37b1ce82-e7b0-49b3-853c-093821b18468",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "afc7ecc1-b516-4346-832c-accb83076ec3",
                "261ffaef-fa88-400b-8ee0-5500fb70f5e5",
                "79dbe089-723a-423e-8f98-25370eeca762",
                "0f897fb0-47b0-4dd1-9426-e2ca6439ef7b",
                "8b58ad8d-ef6b-4adf-892b-e74c95b15b27",
                "f6f02213-fa20-4211-9ae9-4894e45c84ba",
                "21297efd-a086-45e4-aa91-5dd4c6dfa061",
                "0810264f-b24d-4fd3-8dd4-8942f94594be",
                "7ab8b3d0-d7ca-47c8-9d2a-9296a1067da7",
                "3036d9c7-8988-4568-a98e-c2200db70c48",
                "9209e061-0d5a-41f5-94e0-03ed69bd3232",
                "5dae2160-4aa8-4841-94f1-058739a3f2dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5452,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24518b1c-e04c-4547-a378-983861c526da",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=NodePyATVInstance.device({host:\"192.168.178.6\",name:\"My Testdevice\"});assert.strictEqual(device.host,\"192.168.178.6\");assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "6560c21b-e05f-4354-831b-cc378d09cec4",
                  "parentUUID": "24518b1c-e04c-4547-a378-983861c526da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6560c21b-e05f-4354-831b-cc378d09cec4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b34d86c8-fd3b-48e8-88ac-9458cee56b52",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await i.version({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "2dfd6fae-30d5-4a0b-9912-935aa641576a",
                  "parentUUID": "b34d86c8-fd3b-48e8-88ac-9458cee56b52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dfd6fae-30d5-4a0b-9912-935aa641576a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2534a554-30bb-483f-ad8f-640a8da5f8a7",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await assert.rejects(async()=>{await i.check({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "20493e09-c655-42de-86fd-4289ebf842f1",
                  "parentUUID": "2534a554-30bb-483f-ad8f-640a8da5f8a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20493e09-c655-42de-86fd-4289ebf842f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b9c8a65-ce44-46c2-a517-12d0d9e329c8",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvscriptPath:\"test\"});await i.find({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.stdout({\"result\":\"success\",\"datetime\":\"2020-11-06T20:47:30.840022+01:00\",\"devices\":[]}).end()})})",
                  "err": {},
                  "uuid": "4d6ce8b1-45a2-4816-960c-943f2724e82f",
                  "parentUUID": "4b9c8a65-ce44-46c2-a517-12d0d9e329c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d6ce8b1-45a2-4816-960c-943f2724e82f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "041dfe03-1557-4176-860d-9e3c19fe6b6a",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({debug:true});const d=i.device({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "ee80ebdd-33c6-46e8-934d-31b7ae6fd7cb",
                  "parentUUID": "041dfe03-1557-4176-860d-9e3c19fe6b6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee80ebdd-33c6-46e8-934d-31b7ae6fd7cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99076f1d-3506-498e-86b0-c0235eada5c4",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol)",
                  "err": {},
                  "uuid": "28f35fb4-b724-49c6-b101-b0e076145cee",
                  "parentUUID": "99076f1d-3506-498e-86b0-c0235eada5c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType)",
                  "err": {},
                  "uuid": "9fc2e07e-365a-4f48-b09c-2d01b2d42886",
                  "parentUUID": "99076f1d-3506-498e-86b0-c0235eada5c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "b090114e-cc28-4ae8-891d-d80938f3235d",
                  "parentUUID": "99076f1d-3506-498e-86b0-c0235eada5c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "ee10393e-d1f3-4a93-a907-d4a813812172",
                  "parentUUID": "99076f1d-3506-498e-86b0-c0235eada5c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "9c393007-9719-4beb-9841-afd06d110275",
                  "parentUUID": "99076f1d-3506-498e-86b0-c0235eada5c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "6a2a59b8-7200-4c50-91f1-96e08fb1fa1f",
                  "parentUUID": "99076f1d-3506-498e-86b0-c0235eada5c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys)",
                  "err": {},
                  "uuid": "83c5a41c-7e84-43ef-abcb-28ded7a0b6b9",
                  "parentUUID": "99076f1d-3506-498e-86b0-c0235eada5c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState)",
                  "err": {},
                  "uuid": "9d02536c-b212-4ce6-9372-15b136bc4c8a",
                  "parentUUID": "99076f1d-3506-498e-86b0-c0235eada5c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState)",
                  "err": {},
                  "uuid": "89f5a495-be90-47ab-930a-a9849f94865e",
                  "parentUUID": "99076f1d-3506-498e-86b0-c0235eada5c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28f35fb4-b724-49c6-b101-b0e076145cee",
                "9fc2e07e-365a-4f48-b09c-2d01b2d42886",
                "b090114e-cc28-4ae8-891d-d80938f3235d",
                "ee10393e-d1f3-4a93-a907-d4a813812172",
                "9c393007-9719-4beb-9841-afd06d110275",
                "6a2a59b8-7200-4c50-91f1-96e08fb1fa1f",
                "83c5a41c-7e84-43ef-abcb-28ded7a0b6b9",
                "9d02536c-b212-4ce6-9372-15b136bc4c8a",
                "89f5a495-be90-47ab-930a-a9849f94865e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "38194f83-355e-45b8-9b7f-3008d8f6adef",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e96a33f4-4793-46f5-a61e-5e0a5e76e1a2",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=addRequestId();assert.strictEqual(typeof id,\"string\");removeRequestId(id)",
                  "err": {},
                  "uuid": "d54128cc-c551-439d-bed9-6301087cbfb4",
                  "parentUUID": "e96a33f4-4793-46f5-a61e-5e0a5e76e1a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId(\"FOO\")",
                  "err": {},
                  "uuid": "d8163d88-49ef-47db-be6e-7fe28c38246c",
                  "parentUUID": "e96a33f4-4793-46f5-a61e-5e0a5e76e1a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d54128cc-c551-439d-bed9-6301087cbfb4",
                "d8163d88-49ef-47db-be6e-7fe28c38246c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d11df94a-e0f5-4645-8bde-b3ecbd1d1394",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "c7220103-e8c9-46c5-84c3-fa5ee735996b",
                  "parentUUID": "d11df94a-e0f5-4645-8bde-b3ecbd1d1394",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "9c5bc699-252d-4135-bc14-dfc3b10528c5",
                  "parentUUID": "d11df94a-e0f5-4645-8bde-b3ecbd1d1394",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:__name(function(msg){assert.strictEqual(this,null);assert.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "0d67ecff-4936-4fbf-ba15-fe68ea168439",
                  "parentUUID": "d11df94a-e0f5-4645-8bde-b3ecbd1d1394",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "4a0b2a67-3e2e-4c06-972b-38ad36708966",
                  "parentUUID": "d11df94a-e0f5-4645-8bde-b3ecbd1d1394",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{noColors:true,debug:__name(function(msg){assert.strictEqual(this,null);assert.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\")})",
                  "err": {},
                  "uuid": "7c80f2a6-c70f-4db4-aaf1-181be27aefc7",
                  "parentUUID": "d11df94a-e0f5-4645-8bde-b3ecbd1d1394",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7220103-e8c9-46c5-84c3-fa5ee735996b",
                "9c5bc699-252d-4135-bc14-dfc3b10528c5",
                "0d67ecff-4936-4fbf-ba15-fe68ea168439",
                "4a0b2a67-3e2e-4c06-972b-38ad36708966",
                "7c80f2a6-c70f-4db4-aaf1-181be27aefc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c0842e9-0ea0-47f5-a836-136d439282d9",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "b055959b-76c6-4632-bcc2-50b60d0f4dbf",
                  "parentUUID": "8c0842e9-0ea0-47f5-a836-136d439282d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "13047451-af71-4fcd-89a7-71683ed0604e",
                  "parentUUID": "8c0842e9-0ea0-47f5-a836-136d439282d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});assert.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "c9e88eac-0594-48b9-ab40-8ee61d4b4729",
                  "parentUUID": "8c0842e9-0ea0-47f5-a836-136d439282d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});assert.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "b74b02fb-568b-4c02-8bde-9a2e4fa9dbdc",
                  "parentUUID": "8c0842e9-0ea0-47f5-a836-136d439282d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b055959b-76c6-4632-bcc2-50b60d0f4dbf",
                "13047451-af71-4fcd-89a7-71683ed0604e",
                "c9e88eac-0594-48b9-ab40-8ee61d4b4729",
                "b74b02fb-568b-4c02-8bde-9a2e4fa9dbdc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "811fcbca-eaa9-49fd-88e5-b7898aee4c59",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters();assert.deepEqual(result,[])",
                  "err": {},
                  "uuid": "62bdc46f-a94a-4b17-bc5b-34730362f03c",
                  "parentUUID": "811fcbca-eaa9-49fd-88e5-b7898aee4c59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({host:\"192.168.178.2\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "cf170dcf-07bf-4965-b543-e8348538518f",
                  "parentUUID": "811fcbca-eaa9-49fd-88e5-b7898aee4c59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",protocol:NodePyATVProtocol.mrp,dmapCredentials:\"****\",mrpCredentials:\"****\",airplayCredentials:\"****\",companionCredentials:\"1234\",raopCredentials:\"::foo:\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "bc468ece-f4b3-416f-9bc8-bcb43a5ef278",
                  "parentUUID": "811fcbca-eaa9-49fd-88e5-b7898aee4c59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62bdc46f-a94a-4b17-bc5b-34730362f03c",
                "cf170dcf-07bf-4965-b543-e8348538518f",
                "bc468ece-f4b3-416f-9bc8-bcb43a5ef278"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c3ed1a2-cac4-46bc-9d27-c75fac67352d",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "40e658ef-9957-4151-80c8-e07b41df243b",
                  "parentUUID": "7c3ed1a2-cac4-46bc-9d27-c75fac67352d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=parseState(null,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "a5751dac-a68c-493e-9bbb-a6f1631580b9",
                  "parentUUID": "7c3ed1a2-cac4-46bc-9d27-c75fac67352d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={result:\"success\",datetime:\"2020-11-07T22:38:43.608030+01:00\",hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\",power_state:null,focus_state:null,volume:null,output_devices:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",mediaType:NodePyATVMediaType.video,deviceState:NodePyATVDeviceState.playing,title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,totalTime:8097,position:27,shuffle:NodePyATVShuffleState.off,repeat:NodePyATVRepeatState.off,app:\"Disney+\",appId:\"com.disney.disneyplus\",powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "47e20f08-59df-4fda-aedb-5f6b1a38115b",
                  "parentUUID": "7c3ed1a2-cac4-46bc-9d27-c75fac67352d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={result:\"failure\",datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};assert.throws(()=>{parseState(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "fc1d5fe2-f020-452a-9526-589339bb2690",
                  "parentUUID": "7c3ed1a2-cac4-46bc-9d27-c75fac67352d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "07f156b2-889f-4f83-8b63-2eef76399f67",
                  "parentUUID": "7c3ed1a2-cac4-46bc-9d27-c75fac67352d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={result:\"success\",datetime:true,hash:1337,media_type:false,device_state:43,title:void 0,artist:90,album:Infinity,genre:Math.PI,total_time:\"23min\",position:\"0:30.123\",shuffle:false,repeat:true,app:0,app_id:891645381647289,power_state:null,focus_state:null,volume:null,output_devices:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "669a8b93-bfdc-4083-b7e0-eb18525c50ea",
                  "parentUUID": "7c3ed1a2-cac4-46bc-9d27-c75fac67352d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={media_type:\"3d-experience\",device_state:\"initiating\",shuffle:\"everything\",repeat:\"nothing\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "7abfcfd8-5bf5-4a14-8fa1-89772ca041df",
                  "parentUUID": "7c3ed1a2-cac4-46bc-9d27-c75fac67352d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40e658ef-9957-4151-80c8-e07b41df243b",
                "a5751dac-a68c-493e-9bbb-a6f1631580b9",
                "47e20f08-59df-4fda-aedb-5f6b1a38115b",
                "fc1d5fe2-f020-452a-9526-589339bb2690",
                "07f156b2-889f-4f83-8b63-2eef76399f67",
                "669a8b93-bfdc-4083-b7e0-eb18525c50ea",
                "7abfcfd8-5bf5-4a14-8fa1-89772ca041df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}