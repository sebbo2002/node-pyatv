{
  "stats": {
    "suites": 93,
    "tests": 165,
    "passes": 163,
    "pending": 2,
    "failures": 0,
    "start": "2024-09-24T19:43:01.802Z",
    "end": "2024-09-24T19:43:13.707Z",
    "duration": 11905,
    "testsRegistered": 165,
    "passPercent": 100,
    "pendingPercent": 1.2121212121212122,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1acd0d65-167c-4f3a-9169-c8f6cab23589",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a0eb9cf2-409f-47b3-bc41-baaaf1e485e9",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "58b12a58-9a33-430a-a59c-0d592b715532",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "e32ea7a5-4a14-4238-9e78-918559f5771d",
                  "parentUUID": "58b12a58-9a33-430a-a59c-0d592b715532",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e32ea7a5-4a14-4238-9e78-918559f5771d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "853d52ec-b985-45b7-868c-76147dcc7dd5",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "3c944c0e-4684-4780-b435-c14be9810745",
                  "parentUUID": "853d52ec-b985-45b7-868c-76147dcc7dd5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c944c0e-4684-4780-b435-c14be9810745"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c96bd540-e938-408c-a147-66c27dd1e544",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "ecdea6ae-8925-4ee9-8361-926998f19e97",
                  "parentUUID": "c96bd540-e938-408c-a147-66c27dd1e544",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecdea6ae-8925-4ee9-8361-926998f19e97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c99d394-a83e-4d3a-8994-5e244a226352",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device:new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"})});assert.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "425d078a-1a84-49fe-bdc1-d883a03cd114",
                  "parentUUID": "1c99d394-a83e-4d3a-8994-5e244a226352",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "425d078a-1a84-49fe-bdc1-d883a03cd114"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8548b3a5-953e-49fe-8ed0-c93f630b7be6",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new NodePyATVDeviceEvent({key:\"genre\",old:\"Jazz\",new:\"Rock\",device});assert.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "1385771e-a84e-4a0d-b9b1-6674154c2c8a",
                  "parentUUID": "8548b3a5-953e-49fe-8ed0-c93f630b7be6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1385771e-a84e-4a0d-b9b1-6674154c2c8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6d68fda4-3340-4f26-9ee3-c6f6dcc1b101",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "17b4d847-9365-46b3-ba5e-152e1be4d978",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "ec992b1e-0767-4666-a45b-54c7eac6010d",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"title\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"My Movie\");assert.strictEqual(event.value,\"My Movie\");assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "27e7e37e-cabc-4707-b1a2-9af4339daccd",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);assert.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "5b293621-da95-4ea5-b51a-e0519c31a0f3",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"failure\",datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{assert.ok(error instanceof Error);assert.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "edf62b2e-84f7-4dd2-8e69-b2483bf7315e",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);assert.strictEqual(spawnCounter,2);assert.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "2989fbe7-4113-448c-b07c-15519bbd2e70",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{assert.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);assert.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "60c76950-c37e-4887-995e-0fff8b65aa69",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),power_state:\"off\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "99c5401e-9100-452a-9699-77560679d739",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),power_state:\"off\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"powerState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"off\");assert.strictEqual(event.newValue,NodePyATVPowerState.off);assert.strictEqual(event.value,\"off\");assert.strictEqual(event.value,NodePyATVPowerState.off);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "eb78aa39-3be3-4426-917e-389a22481671",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),focus_state:\"unfocused\"});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"focusState\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,\"unfocused\");assert.strictEqual(event.newValue,NodePyATVFocusState.unfocused);assert.strictEqual(event.value,\"unfocused\");assert.strictEqual(event.value,NodePyATVFocusState.unfocused);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "2890bb7e-81c8-4a99-95dc-06309da87b0c",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),output_devices:[{name:\"Living room\",identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"}]});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"outputDevices\");assert.strictEqual(event.oldValue,null);assert.deepStrictEqual(event.newValue,[{name:\"Living room\",identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"}]);assert.deepStrictEqual(event.value,[{name:\"Living room\",identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\"}]);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "82c9cd8d-d80a-4922-bdbf-720f2c5d5010",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{assert.ok(event instanceof NodePyATVDeviceEvent);assert.strictEqual(event.key,\"volume\");assert.strictEqual(event.oldValue,null);assert.strictEqual(event.newValue,20);assert.strictEqual(event.value,20);assert.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));assert.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "912500e6-f551-4231-8f3a-c3a7f8eb86d1",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",datetime:new Date().toJSON(),foo:\"bar\"});cp.end()})});device.on(\"update\",event=>{assert.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "e1cbfc27-0528-4ee6-819a-c3570807e82e",
                  "parentUUID": "17b4d847-9365-46b3-ba5e-152e1be4d978",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec992b1e-0767-4666-a45b-54c7eac6010d",
                "27e7e37e-cabc-4707-b1a2-9af4339daccd",
                "5b293621-da95-4ea5-b51a-e0519c31a0f3",
                "edf62b2e-84f7-4dd2-8e69-b2483bf7315e",
                "2989fbe7-4113-448c-b07c-15519bbd2e70",
                "60c76950-c37e-4887-995e-0fff8b65aa69",
                "99c5401e-9100-452a-9699-77560679d739",
                "eb78aa39-3be3-4426-917e-389a22481671",
                "2890bb7e-81c8-4a99-95dc-06309da87b0c",
                "82c9cd8d-d80a-4922-bdbf-720f2c5d5010",
                "912500e6-f551-4231-8f3a-c3a7f8eb86d1",
                "e1cbfc27-0528-4ee6-819a-c3570807e82e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a73ad61-ebfa-4ff1-8c1f-e468d8629fd3",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "5475a640-8063-494e-ade3-c7561a652623",
                  "parentUUID": "7a73ad61-ebfa-4ff1-8c1f-e468d8629fd3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "204dcb99-5e01-4ee1-8593-34d407e319e9",
                  "parentUUID": "7a73ad61-ebfa-4ff1-8c1f-e468d8629fd3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{assert.ok(err instanceof Error);assert.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "09abd18e-369c-45ca-b27f-15fac2dff966",
                  "parentUUID": "7a73ad61-ebfa-4ff1-8c1f-e468d8629fd3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "94cf0918-1c39-4f1e-a500-c7b98027732e",
                  "parentUUID": "7a73ad61-ebfa-4ff1-8c1f-e468d8629fd3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5475a640-8063-494e-ade3-c7561a652623",
                "204dcb99-5e01-4ee1-8593-34d407e319e9",
                "09abd18e-369c-45ca-b27f-15fac2dff966"
              ],
              "failures": [],
              "pending": [
                "94cf0918-1c39-4f1e-a500-c7b98027732e"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd744929-e66a-4742-b3b5-d7030ffbb821",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "459bc41d-43a5-4223-bf83-6c3c38644b74",
                  "parentUUID": "cd744929-e66a-4742-b3b5-d7030ffbb821",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "459bc41d-43a5-4223-bf83-6c3c38644b74"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57c74458-807a-4128-9fce-919db5e5d7a7",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const event=new NodePyATVDeviceEvent({key:\"dateTime\",old:\"foo\",new:\"bar\",device});let executions=0;device.once(\"test\",e=>{executions++;assert.strictEqual(e,event);assert.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "7358f073-793f-4daa-8169-3183ec5b7c48",
                  "parentUUID": "57c74458-807a-4128-9fce-919db5e5d7a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7358f073-793f-4daa-8169-3183ec5b7c48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6b0aa19-3d01-400d-954f-48b74dccedc0",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);assert.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "7a500fb5-1553-43ae-afb3-d4a72ed3cb71",
                  "parentUUID": "f6b0aa19-3d01-400d-954f-48b74dccedc0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a500fb5-1553-43ae-afb3-d4a72ed3cb71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f7d66d3-5dd4-47d2-8a83-e8e6d1605c32",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();assert.ok(typeof result,\"number\");assert.ok(result>=10)",
                  "err": {},
                  "uuid": "5838860b-be30-45d7-9027-17d09a0bae1a",
                  "parentUUID": "3f7d66d3-5dd4-47d2-8a83-e8e6d1605c32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5838860b-be30-45d7-9027-17d09a0bae1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "acfa4c77-05b6-4ceb-b94b-627a289ff778",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);assert.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "bdb9478b-da3f-4ebd-9ae3-ff50ee9c8004",
                  "parentUUID": "acfa4c77-05b6-4ceb-b94b-627a289ff778",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdb9478b-da3f-4ebd-9ae3-ff50ee9c8004"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd2c1e04-e321-41c0-b0ac-de0d01a07c34",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.listeners(\"test\").length,1);assert.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "5049f864-53ac-4ed9-8b16-bfcffbf67558",
                  "parentUUID": "dd2c1e04-e321-41c0-b0ac-de0d01a07c34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5049f864-53ac-4ed9-8b16-bfcffbf67558"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "92f05380-ed1a-4aed-9eef-c566e3a51d98",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "2d7b240a-1cc8-4556-82d1-7eb4c1746784",
                  "parentUUID": "92f05380-ed1a-4aed-9eef-c566e3a51d98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d7b240a-1cc8-4556-82d1-7eb4c1746784"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a035bec4-a21b-4b5e-b947-0c139d4e3005",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "2107b1a2-1470-470d-8e3f-7b0626ba3f49",
                  "parentUUID": "a035bec4-a21b-4b5e-b947-0c139d4e3005",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2107b1a2-1470-470d-8e3f-7b0626ba3f49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57daed71-4f6a-4165-b2e6-a2fec3855e53",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");assert.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);assert.deepStrictEqual(device.rawListeners(\"test\").length,1);assert.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "1c8b1740-3767-470e-9927-804684f6f958",
                  "parentUUID": "57daed71-4f6a-4165-b2e6-a2fec3855e53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c8b1740-3767-470e-9927-804684f6f958"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "349f5058-c937-4cd8-87b2-24ec66117f32",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);assert.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "d97aeab1-b870-4d03-aa0e-6f97d526ab2e",
                  "parentUUID": "349f5058-c937-4cd8-87b2-24ec66117f32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d97aeab1-b870-4d03-aa0e-6f97d526ab2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "924eca23-b49b-4bf5-aece-4e58e7ac0b23",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7eb6b3cb-75d3-4f44-b339-541eb7f06fda",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "8dd7ebf6-c28c-436f-934f-b90f50f750b4",
                  "parentUUID": "7eb6b3cb-75d3-4f44-b339-541eb7f06fda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8dd7ebf6-c28c-436f-934f-b90f50f750b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0fa1a722-f77d-466a-a240-b438a3a98c8b",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "1a9ccd27-9353-4dd9-aa39-d46af62e37b9",
                  "parentUUID": "0fa1a722-f77d-466a-a240-b438a3a98c8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a9ccd27-9353-4dd9-aa39-d46af62e37b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c302976e-5ab1-4305-8169-b269d11cc578",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\"});assert.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "9050dbd3-325f-4c37-b83b-b2065e07e030",
                  "parentUUID": "c302976e-5ab1-4305-8169-b269d11cc578",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9050dbd3-325f-4c37-b83b-b2065e07e030"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae131e7f-d2b3-4aaa-bc9a-4729963c63f0",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"]});assert.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "08a1690c-8119-4b44-b76d-b6f87c2801d5",
                  "parentUUID": "ae131e7f-d2b3-4aaa-bc9a-4729963c63f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08a1690c-8119-4b44-b76d-b6f87c2801d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "554754c1-929d-4608-a470-5892172624e5",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",protocol:NodePyATVProtocol.airplay});assert.strictEqual(device.protocol,NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "fb63a4b9-a46a-4570-a0a8-28e6f85bcde8",
                  "parentUUID": "554754c1-929d-4608-a470-5892172624e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb63a4b9-a46a-4570-a0a8-28e6f85bcde8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9dfb6777-fecd-449a-abf1-99d535b511ee",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\"});assert.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "12d1b8a4-4491-4015-8a65-4d4f72e5e9c1",
                  "parentUUID": "9dfb6777-fecd-449a-abf1-99d535b511ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12d1b8a4-4491-4015-8a65-4d4f72e5e9c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b568f98-88ed-464d-84f6-ef52a2d6b7b5",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\"});assert.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "3f3cca5d-42b2-41d1-bc62-ddde0a3b27dd",
                  "parentUUID": "2b568f98-88ed-464d-84f6-ef52a2d6b7b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "de3e58e1-f7bf-42f9-a043-80e4386e5f5e",
                  "parentUUID": "2b568f98-88ed-464d-84f6-ef52a2d6b7b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f3cca5d-42b2-41d1-bc62-ddde0a3b27dd",
                "de3e58e1-f7bf-42f9-a043-80e4386e5f5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "15f8851b-3ea6-4ab2-b222-23b547ed148f",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\"});assert.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "d34d5f31-3b3f-4b8b-96ca-8c90249334de",
                  "parentUUID": "15f8851b-3ea6-4ab2-b222-23b547ed148f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "b54a37ef-bae9-4e47-a48a-f6fee0a50a40",
                  "parentUUID": "15f8851b-3ea6-4ab2-b222-23b547ed148f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d34d5f31-3b3f-4b8b-96ca-8c90249334de",
                "b54a37ef-bae9-4e47-a48a-f6fee0a50a40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0ce560f-9d5b-4495-bad9-cb4e0be7e27c",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",os:\"TvOS\"});assert.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "26bda7ce-96a3-404f-80ca-0d2ab0a2b3e8",
                  "parentUUID": "d0ce560f-9d5b-4495-bad9-cb4e0be7e27c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "d9da8128-f6b1-4741-a7ae-96000d0d125a",
                  "parentUUID": "d0ce560f-9d5b-4495-bad9-cb4e0be7e27c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26bda7ce-96a3-404f-80ca-0d2ab0a2b3e8",
                "d9da8128-f6b1-4741-a7ae-96000d0d125a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b490abe-abf1-44b7-931d-d56e6d8f4b78",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",version:\"15.5.1\"});assert.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "22dfaee1-a66a-4da7-a90e-16ec56bc3cfa",
                  "parentUUID": "3b490abe-abf1-44b7-931d-d56e6d8f4b78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "ae4572d7-0d64-4467-a735-a3c6565ecd48",
                  "parentUUID": "3b490abe-abf1-44b7-931d-d56e6d8f4b78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22dfaee1-a66a-4da7-a90e-16ec56bc3cfa",
                "ae4572d7-0d64-4467-a735-a3c6565ecd48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f11230e5-9e1a-4626-9d09-2196c140d739",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\",id:\"xxx\",services:[{protocol:NodePyATVProtocol.mrp,port:49152},{protocol:NodePyATVProtocol.airplay,port:7e3}]});assert.deepStrictEqual(device.services,[{protocol:\"mrp\",port:49152},{protocol:\"airplay\",port:7e3}])",
                  "err": {},
                  "uuid": "3d954060-7263-4a68-bfd8-374a5474513e",
                  "parentUUID": "f11230e5-9e1a-4626-9d09-2196c140d739",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"Vardagsrum\",host:\"10.0.10.81\"});assert.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "631c1784-9bdc-4482-b649-dfed0b6ac889",
                  "parentUUID": "f11230e5-9e1a-4626-9d09-2196c140d739",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d954060-7263-4a68-bfd8-374a5474513e",
                "631c1784-9bdc-4482-b649-dfed0b6ac889"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e5422486-a7fb-45fd-9ae3-f78f7d5b1d34",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:true});assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "7a09473a-0490-46d1-8a70-92a2e0259049",
                  "parentUUID": "e5422486-a7fb-45fd-9ae3-f78f7d5b1d34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:fn});assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "cb28d261-f78c-4416-aac9-231890756634",
                  "parentUUID": "e5422486-a7fb-45fd-9ae3-f78f7d5b1d34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "b15fe692-abce-45ac-b06b-16f1cc8d1326",
                  "parentUUID": "e5422486-a7fb-45fd-9ae3-f78f7d5b1d34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a09473a-0490-46d1-8a70-92a2e0259049",
                "cb28d261-f78c-4416-aac9-231890756634",
                "b15fe692-abce-45ac-b06b-16f1cc8d1326"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb29ad85-5576-4267-b9ea-19e7645e9875",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.debug,void 0);device.debug=true;assert.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "1e8770e3-9b5e-4f2c-a91d-526da6a1c1c5",
                  "parentUUID": "cb29ad85-5576-4267-b9ea-19e7645e9875",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:true});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "1aa22a87-6e2a-4cfe-8ccf-c9d5354b3123",
                  "parentUUID": "cb29ad85-5576-4267-b9ea-19e7645e9875",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",debug:true});assert.strictEqual(device.debug,true);device.debug=void 0;assert.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "5670a2a1-a1e3-4a82-a8d5-2e4d140610be",
                  "parentUUID": "cb29ad85-5576-4267-b9ea-19e7645e9875",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});const fn=__name(()=>{},\"fn\");assert.strictEqual(device.debug,void 0);device.debug=fn;assert.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "d01aa3bc-28bc-4b3b-a5ed-ca3a6dd82959",
                  "parentUUID": "cb29ad85-5576-4267-b9ea-19e7645e9875",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e8770e3-9b5e-4f2c-a91d-526da6a1c1c5",
                "1aa22a87-6e2a-4cfe-8ccf-c9d5354b3123",
                "5670a2a1-a1e3-4a82-a8d5-2e4d140610be",
                "d01aa3bc-28bc-4b3b-a5ed-ca3a6dd82959"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4739a062-366d-441d-85b4-c810bace263d",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",protocol:NodePyATVProtocol.airplay});assert.deepEqual(device.toJSON(),{name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",protocol:NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "a90a57f5-f440-49ca-bee5-17be84dc16ad",
                  "parentUUID": "4739a062-366d-441d-85b4-c810bace263d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={name:\"My Testdevice\",host:\"192.168.178.2\",id:\"*****\",protocol:NodePyATVProtocol.airplay};const deviceA=new NodePyATVDevice(config);const deviceB=new NodePyATVDevice(deviceA.toJSON());assert.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "1be4c3e4-9c00-4a1c-88ac-d75d96e3e41e",
                  "parentUUID": "4739a062-366d-441d-85b4-c810bace263d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a90a57f5-f440-49ca-bee5-17be84dc16ad",
                "1be4c3e4-9c00-4a1c-88ac-d75d96e3e41e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "968036c9-d974-40c2-bd29-71a7a21cfaa8",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "3dd4b097-c150-442b-81b5-46656ad5a984",
                  "parentUUID": "968036c9-d974-40c2-bd29-71a7a21cfaa8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3dd4b097-c150-442b-81b5-46656ad5a984"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65a91f87-43bf-48d8-86b6-d23d46c15cbb",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "781a99fc-9e88-4f66-b867-f44360df6224",
                  "parentUUID": "65a91f87-43bf-48d8-86b6-d23d46c15cbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",datetime:\"2020-11-07T22:38:43.608030+01:00\",hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\"})})});const result=await device.getState();assert.deepStrictEqual(result,{dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",mediaType:NodePyATVMediaType.video,deviceState:NodePyATVDeviceState.playing,focusState:null,title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,totalTime:8097,volume:null,position:27,shuffle:NodePyATVShuffleState.off,repeat:NodePyATVRepeatState.off,app:\"Disney+\",appId:\"com.disney.disneyplus\",powerState:null,outputDevices:null})",
                  "err": {},
                  "uuid": "349aa564-aeaf-4528-948f-cff399fd40b0",
                  "parentUUID": "65a91f87-43bf-48d8-86b6-d23d46c15cbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"failure\",datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});assert.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "b9888b8a-2df2-4b95-abda-9c1a94894964",
                  "parentUUID": "65a91f87-43bf-48d8-86b6-d23d46c15cbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{executions++;cp.end({result:\"success\",datetime:new Date().toJSON(),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\"})})});const firstResult=await device.getState();const secondResult=await device.getState();assert.strictEqual(firstResult.dateTime,secondResult.dateTime);assert.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "c37854ba-0fdc-4cad-be5c-8a6f9e064370",
                  "parentUUID": "65a91f87-43bf-48d8-86b6-d23d46c15cbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",datetime:new Date(new Date().getTime()-1e3).toJSON(),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\"})})});const firstResult=await device.getState();assert.strictEqual(firstResult.position,27);const secondResult=await device.getState();assert.ok(secondResult.position);assert.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);assert.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "5b9cb4f2-1324-418f-8f6e-3520697df945",
                  "parentUUID": "65a91f87-43bf-48d8-86b6-d23d46c15cbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "349aa564-aeaf-4528-948f-cff399fd40b0",
                "b9888b8a-2df2-4b95-abda-9c1a94894964",
                "c37854ba-0fdc-4cad-be5c-8a6f9e064370",
                "5b9cb4f2-1324-418f-8f6e-3520697df945"
              ],
              "failures": [],
              "pending": [
                "781a99fc-9e88-4f66-b867-f44360df6224"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3cf7c949-3c66-4a66-8d20-05b70293a448",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{executions++;cp.end({result:\"success\",datetime:\"2020-11-07T22:38:43.608030+01:00\",title:\"Solo: A Star Wars Story\"})})});assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();assert.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");assert.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "60dd9657-6bf0-4489-b87a-6431cbfbf911",
                  "parentUUID": "3cf7c949-3c66-4a66-8d20-05b70293a448",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60dd9657-6bf0-4489-b87a-6431cbfbf911"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "42b959b6-875e-4c29-acd7-38985a3ce0d6",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",datetime:new Date().toJSON()})})});const result=await device.getDateTime();assert.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "a28378bc-095b-48e6-a73d-6081bbed065b",
                  "parentUUID": "42b959b6-875e-4c29-acd7-38985a3ce0d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a28378bc-095b-48e6-a73d-6081bbed065b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48649b6b-23bb-4e0c-a55a-2b84ed381695",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",hash:\"12345\"})})});const result=await device.getHash();assert.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "19e70909-b789-4f54-ab39-feb3e05369f0",
                  "parentUUID": "48649b6b-23bb-4e0c-a55a-2b84ed381695",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19e70909-b789-4f54-ab39-feb3e05369f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d30c864-a483-4a3a-b872-fb74b1723797",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",media_type:\"video\"})})});const result=await device.getMediaType();assert.deepStrictEqual(result,NodePyATVMediaType.video);assert.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "55cb3d86-246b-46e3-97f5-88bbae307318",
                  "parentUUID": "8d30c864-a483-4a3a-b872-fb74b1723797",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55cb3d86-246b-46e3-97f5-88bbae307318"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7930e01-91ae-4fd1-8bb3-694fa2d8042b",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",device_state:\"seeking\"})})});const result=await device.getDeviceState();assert.deepStrictEqual(result,NodePyATVDeviceState.seeking);assert.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "d9afa9ff-65d4-4114-a176-47c34e5ab7ba",
                  "parentUUID": "b7930e01-91ae-4fd1-8bb3-694fa2d8042b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9afa9ff-65d4-4114-a176-47c34e5ab7ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a10f5045-7855-4cac-912a-518695ab2829",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();assert.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "5a9592d8-9b21-4bdf-8f90-1f10fa21ac1b",
                  "parentUUID": "a10f5045-7855-4cac-912a-518695ab2829",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a9592d8-9b21-4bdf-8f90-1f10fa21ac1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "939b9c2b-73fa-4deb-bd08-7cf59efe0f64",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",artist:\"My Artist\"})})});const result=await device.getArtist();assert.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "31f93a45-4353-4d3a-b770-e7a5d95a77c0",
                  "parentUUID": "939b9c2b-73fa-4deb-bd08-7cf59efe0f64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31f93a45-4353-4d3a-b770-e7a5d95a77c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "226f69a6-7723-4d45-88f5-af1bf37fefc8",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",album:\"My ALbum\"})})});const result=await device.getAlbum();assert.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "123dfebc-9fb6-4230-bb7f-a580aa7f12aa",
                  "parentUUID": "226f69a6-7723-4d45-88f5-af1bf37fefc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "123dfebc-9fb6-4230-bb7f-a580aa7f12aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2ce2dc5-0839-4fb5-91db-9c8aae63d14b",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",genre:\"My Genre\"})})});const result=await device.getGenre();assert.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "c6d32401-c463-4c1d-b764-da428b86a2da",
                  "parentUUID": "a2ce2dc5-0839-4fb5-91db-9c8aae63d14b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6d32401-c463-4c1d-b764-da428b86a2da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eca90de4-7f02-428b-911d-03237b7f7b93",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();assert.strictEqual(result,45)",
                  "err": {},
                  "uuid": "d241e719-eb22-49e2-92f6-3c9c7d4e1c35",
                  "parentUUID": "eca90de4-7f02-428b-911d-03237b7f7b93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d241e719-eb22-49e2-92f6-3c9c7d4e1c35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a54012c-fac3-415e-bd5e-74d29e340d6f",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",position:30})})});const result=await device.getPosition();assert.strictEqual(result,30)",
                  "err": {},
                  "uuid": "33c641cd-5385-4212-8422-32edd7b799b1",
                  "parentUUID": "1a54012c-fac3-415e-bd5e-74d29e340d6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33c641cd-5385-4212-8422-32edd7b799b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "426029fb-3151-40d1-aeb5-fe69833fdb41",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();assert.deepStrictEqual(result,NodePyATVShuffleState.songs);assert.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "d78bc35a-10d4-42cb-915f-6f9dda04d08d",
                  "parentUUID": "426029fb-3151-40d1-aeb5-fe69833fdb41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d78bc35a-10d4-42cb-915f-6f9dda04d08d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c00a8b4e-b40c-4e8b-bf3c-56d0176b36b1",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",repeat:\"all\"})})});const result=await device.getRepeat();assert.deepStrictEqual(result,NodePyATVRepeatState.all);assert.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "a829dc61-685f-473c-b373-ae660212490d",
                  "parentUUID": "c00a8b4e-b40c-4e8b-bf3c-56d0176b36b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a829dc61-685f-473c-b373-ae660212490d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "deb7ef68-ccb0-406c-99da-38652e3bb44c",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",app:\"My App\"})})});const result=await device.getApp();assert.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "032f7129-69ad-4f19-b3f1-aaf52348f7f5",
                  "parentUUID": "deb7ef68-ccb0-406c-99da-38652e3bb44c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "032f7129-69ad-4f19-b3f1-aaf52348f7f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "884724b5-8f41-4b37-b661-bc83288821df",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end({result:\"success\",app_id:\"app.example.com\"})})});const result=await device.getAppId();assert.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "2ef2175b-fc8d-46d5-bede-10b601b1ddf2",
                  "parentUUID": "884724b5-8f41-4b37-b661-bc83288821df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ef2175b-fc8d-46d5-bede-10b601b1ddf2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ebf77a4-a96a-4dff-9eef-9db65dc96f6a",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();assert.strictEqual(result.length,25);assert.strictEqual(result[0].id,\"com.apple.Fitness\");assert.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "0fba1ca3-b3c1-43e0-81c3-cb9ca03da3bf",
                  "parentUUID": "7ebf77a4-a96a-4dff-9eef-9db65dc96f6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fba1ca3-b3c1-43e0-81c3-cb9ca03da3bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0bdf956f-87f2-47dc-bfeb-2ddb8c6f50bc",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "23240792-7c34-406e-a138-bebb0b431010",
                  "parentUUID": "0bdf956f-87f2-47dc-bfeb-2ddb8c6f50bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\"});await assert.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "3d11ab23-a327-4667-b1a6-000b541c775f",
                  "parentUUID": "0bdf956f-87f2-47dc-bfeb-2ddb8c6f50bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"failure\"}')})});await assert.rejects(async()=>{await device.pressKey(NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "79fff1e7-0d46-426e-a6cb-3f59e7d5d8a1",
                  "parentUUID": "0bdf956f-87f2-47dc-bfeb-2ddb8c6f50bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23240792-7c34-406e-a138-bebb0b431010",
                "3d11ab23-a327-4667-b1a6-000b541c775f",
                "79fff1e7-0d46-426e-a6cb-3f59e7d5d8a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7328bd58-9da5-4517-9b15-43ca5c342562",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "07718dc3-189e-40ef-b140-d12eae9b192a",
                  "parentUUID": "7328bd58-9da5-4517-9b15-43ca5c342562",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07718dc3-189e-40ef-b140-d12eae9b192a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "376fec18-3910-43ee-9ee0-486713a40fb0",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "62b93a21-a9d2-4f3b-9ecd-e49b40ce5754",
                  "parentUUID": "376fec18-3910-43ee-9ee0-486713a40fb0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62b93a21-a9d2-4f3b-9ecd-e49b40ce5754"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c764f733-9dbe-4cea-b0c8-7233377d8653",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "a8a905bb-6e05-4b07-9fe7-8aab3f081b67",
                  "parentUUID": "c764f733-9dbe-4cea-b0c8-7233377d8653",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8a905bb-6e05-4b07-9fe7-8aab3f081b67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47f43245-66c0-4495-a358-58043953e72b",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "a6aa34d1-36f6-495f-b256-ffd18df0b233",
                  "parentUUID": "47f43245-66c0-4495-a358-58043953e72b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6aa34d1-36f6-495f-b256-ffd18df0b233"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5c1cdd4-1de5-43b0-9fb3-4982eaf225df",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "a0266e0d-019e-453d-ba48-763c5c7f2bba",
                  "parentUUID": "f5c1cdd4-1de5-43b0-9fb3-4982eaf225df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0266e0d-019e-453d-ba48-763c5c7f2bba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51e329ae-b372-4d88-8584-923f34111eda",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "0fc764eb-49c5-4e49-acee-645605119123",
                  "parentUUID": "51e329ae-b372-4d88-8584-923f34111eda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fc764eb-49c5-4e49-acee-645605119123"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0591e80-649f-4b97-a2d0-00bf34453ebd",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b4c10a40-857e-4e2f-b4be-ac954c755a66",
                  "parentUUID": "b0591e80-649f-4b97-a2d0-00bf34453ebd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4c10a40-857e-4e2f-b4be-ac954c755a66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6fefb4d1-a07f-4034-ba7a-3a7452a6213d",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9a0bf02b-3446-47d5-bc86-6427b1e7e181",
                  "parentUUID": "6fefb4d1-a07f-4034-ba7a-3a7452a6213d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a0bf02b-3446-47d5-bc86-6427b1e7e181"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fa5fd7b-233f-44f2-9070-94a85cadda59",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "91666ec8-1d46-4025-9c83-7b558cd863cf",
                  "parentUUID": "4fa5fd7b-233f-44f2-9070-94a85cadda59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91666ec8-1d46-4025-9c83-7b558cd863cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a480cafb-0bc2-46e3-bf64-43e6fd081415",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9b4966ef-3889-4b83-bbc5-e6f5c7b31646",
                  "parentUUID": "a480cafb-0bc2-46e3-bf64-43e6fd081415",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b4966ef-3889-4b83-bbc5-e6f5c7b31646"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87f21e4c-7b2a-4f4b-9f88-9e56f3cf5c33",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "e7974477-5744-4e87-a290-b02004418fc3",
                  "parentUUID": "87f21e4c-7b2a-4f4b-9f88-9e56f3cf5c33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7974477-5744-4e87-a290-b02004418fc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2d7f8da-e7e4-460c-98fa-04791ea7d382",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "57d7eab9-a7a4-45d8-a2c5-b0cd9a68eaa8",
                  "parentUUID": "d2d7f8da-e7e4-460c-98fa-04791ea7d382",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57d7eab9-a7a4-45d8-a2c5-b0cd9a68eaa8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2222d630-4fde-45bd-80d0-5bffddf2cbce",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "fe290377-c55b-440f-a000-9741974ed77d",
                  "parentUUID": "2222d630-4fde-45bd-80d0-5bffddf2cbce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe290377-c55b-440f-a000-9741974ed77d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7142823-6b96-4c5f-a505-573242aa246e",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "bd4e4069-fe00-4246-beaa-305daba9fdec",
                  "parentUUID": "a7142823-6b96-4c5f-a505-573242aa246e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd4e4069-fe00-4246-beaa-305daba9fdec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9232885b-b020-4a9e-8c56-2092b0db7565",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "ec057fde-a167-4146-b7df-d2fbac0cdd92",
                  "parentUUID": "9232885b-b020-4a9e-8c56-2092b0db7565",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec057fde-a167-4146-b7df-d2fbac0cdd92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f13dfe1-c0cf-43a2-a502-d69d219c362d",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "820b3ab4-6526-4078-a7e9-88a6d21a3665",
                  "parentUUID": "5f13dfe1-c0cf-43a2-a502-d69d219c362d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "820b3ab4-6526-4078-a7e9-88a6d21a3665"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fdd5a1ce-3fba-4ba4-a457-1079a6ea028d",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "23c9d5f4-24dd-44d4-b621-8a647dfbcd28",
                  "parentUUID": "fdd5a1ce-3fba-4ba4-a457-1079a6ea028d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23c9d5f4-24dd-44d4-b621-8a647dfbcd28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5399364d-8a4c-4e01-95e6-1ca4146515ad",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "01def6e5-d49d-4267-b9b5-8f51e36538f8",
                  "parentUUID": "5399364d-8a4c-4e01-95e6-1ca4146515ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01def6e5-d49d-4267-b9b5-8f51e36538f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a3887ff-6968-4ff3-97a8-73e530f8da3f",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "0bf792d4-3599-48ca-aa35-c88f91946ec8",
                  "parentUUID": "0a3887ff-6968-4ff3-97a8-73e530f8da3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0bf792d4-3599-48ca-aa35-c88f91946ec8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf2801b9-4df5-44ae-985e-e8c10244172e",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9113fdec-b45a-4e04-ace7-a66488b80f83",
                  "parentUUID": "bf2801b9-4df5-44ae-985e-e8c10244172e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9113fdec-b45a-4e04-ace7-a66488b80f83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c509a152-98d6-483c-b7ef-b07821591690",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "37f945ac-9b8c-4097-ab13-3c3cb8f20ea7",
                  "parentUUID": "c509a152-98d6-483c-b7ef-b07821591690",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37f945ac-9b8c-4097-ab13-3c3cb8f20ea7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f942d41-814d-4b86-84bd-2fea3be1fa3c",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "5c4d0ecf-e7be-40e4-9b7e-9d238fe5ded6",
                  "parentUUID": "2f942d41-814d-4b86-84bd-2fea3be1fa3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c4d0ecf-e7be-40e4-9b7e-9d238fe5ded6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31f65398-d207-4c10-91ab-b6b763523d2f",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "95e4633d-f6cc-4276-a090-8ac182e03aa2",
                  "parentUUID": "31f65398-d207-4c10-91ab-b6b763523d2f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95e4633d-f6cc-4276-a090-8ac182e03aa2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "557ce881-3de5-482c-8c32-067662e5920a",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new NodePyATVDevice({name:\"My Testdevice\",host:\"192.168.178.2\",spawn:createFakeSpawn(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "eb950d1d-a698-46f7-b96f-7a21a6a6c4c8",
                  "parentUUID": "557ce881-3de5-482c-8c32-067662e5920a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb950d1d-a698-46f7-b96f-7a21a6a6c4c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6931916d-b0d9-49e8-a61f-3c2f521410e8",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a1a612a5-0010-42df-bb8b-81c905fe610c",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 473,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await NodePyATVInstance.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}assert.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");assert.ok(result.pyatv.length>=5,\"result.pyatv has content\");assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "f9f5ab29-8324-4ba7-9e0f-25440fff8ee0",
                  "parentUUID": "a1a612a5-0010-42df-bb8b-81c905fe610c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});assert.ok(result.pyatv);assert.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "0177b7d5-8af1-4a6d-9d3a-e32c8b592e52",
                  "parentUUID": "a1a612a5-0010-42df-bb8b-81c905fe610c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())});assert.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "6e25551c-928c-4627-9e89-30b60bc13ae1",
                  "parentUUID": "a1a612a5-0010-42df-bb8b-81c905fe610c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({atvremotePath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "7c7b06fa-6a82-4dfa-bad6-d5a07fafcc47",
                  "parentUUID": "a1a612a5-0010-42df-bb8b-81c905fe610c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "720e6910-4a2f-4aae-a964-1cc2ba6dd912",
                  "parentUUID": "a1a612a5-0010-42df-bb8b-81c905fe610c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:createFakeSpawn(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "8a8c1f27-8a82-47c5-9459-89a382928009",
                  "parentUUID": "a1a612a5-0010-42df-bb8b-81c905fe610c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>cp.stderr(\"Hello World!\").code(123).end())});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "52575887-48ef-43d2-b87f-fe33b4bbf78b",
                  "parentUUID": "a1a612a5-0010-42df-bb8b-81c905fe610c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "c832853a-c4b3-4679-9135-aeea01d7e637",
                  "parentUUID": "a1a612a5-0010-42df-bb8b-81c905fe610c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await NodePyATVInstance.version({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});assert.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "0e2eaaa7-4388-4dc1-86c1-32244a595493",
                  "parentUUID": "a1a612a5-0010-42df-bb8b-81c905fe610c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9f5ab29-8324-4ba7-9e0f-25440fff8ee0",
                "0177b7d5-8af1-4a6d-9d3a-e32c8b592e52",
                "6e25551c-928c-4627-9e89-30b60bc13ae1",
                "7c7b06fa-6a82-4dfa-bad6-d5a07fafcc47",
                "720e6910-4a2f-4aae-a964-1cc2ba6dd912",
                "8a8c1f27-8a82-47c5-9459-89a382928009",
                "52575887-48ef-43d2-b87f-fe33b4bbf78b",
                "c832853a-c4b3-4679-9135-aeea01d7e637",
                "0e2eaaa7-4388-4dc1-86c1-32244a595493"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 485,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0485009b-c76c-47ba-841e-02773dd0f50a",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5803,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await NodePyATVInstance.check()",
                  "err": {},
                  "uuid": "07771338-29f5-4618-9a08-fb188058dd73",
                  "parentUUID": "0485009b-c76c-47ba-841e-02773dd0f50a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "fafb0527-780e-4372-b5b7-708371a46897",
                  "parentUUID": "0485009b-c76c-47ba-841e-02773dd0f50a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "34f99f0a-004d-4b2d-96bc-3a13c48bb6cb",
                  "parentUUID": "0485009b-c76c-47ba-841e-02773dd0f50a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await assert.rejects(async()=>{await NodePyATVInstance.check({spawn:createFakeSpawn(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "e3b85642-4eae-4481-a32e-ce4f16401b86",
                  "parentUUID": "0485009b-c76c-47ba-841e-02773dd0f50a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07771338-29f5-4618-9a08-fb188058dd73",
                "fafb0527-780e-4372-b5b7-708371a46897",
                "34f99f0a-004d-4b2d-96bc-3a13c48bb6cb",
                "e3b85642-4eae-4481-a32e-ce4f16401b86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5809,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "706a5446-9c17-4f35-9021-fb9f81abfe47",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5407,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await NodePyATVInstance.find();assert.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "0f2044cc-1d16-46d5-83b9-6d6c0bf2b8b2",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({atvscriptPath:\"/foo/bar\",spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({\"result\":\"success\",\"datetime\":\"2020-11-06T20:47:30.840022+01:00\",\"devices\":[]}).end()})})",
                  "err": {},
                  "uuid": "345e0350-c288-487c-ad48-5a6f6c18a959",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "d5673130-63ec-44c5-85a5-e739bc14b827",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "d0b6edeb-1d18-4f1a-ab8d-75cf11f1926d",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"failure\",datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "dc6775a3-7646-4a39-8e67-e70833f7f63d",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(JSON.stringify({\"result\":\"success\",\"datetime\":\"2020-11-06T20:47:30.840022+01:00\",\"devices\":[]}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "febf15b6-0fc0-4c31-85ed-d2409b256778",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "5eece29f-0cdd-499f-8023-d2b73333d0b9",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async()=>{await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "10aa62eb-d264-4c01-9f0b-9f3a7f3c0498",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\",datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{name:\"Vardagsrum\",address:\"10.0.10.81\",identifier:\"xxx\"}]}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,void 0);assert.strictEqual(devices[0].modelName,void 0);assert.strictEqual(devices[0].os,void 0);assert.strictEqual(devices[0].version,void 0);assert.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "af73e2bf-1dc9-4545-b762-1f5cb8769fb1",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout({result:\"success\",datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{name:\"Vardagsrum\",address:\"10.0.10.81\",identifier:\"xxx\",device_info:{\"model\":\"Gen4K\",\"model_str\":\"Apple TV 4K\",\"operating_system\":\"TvOS\",\"version\":\"15.5.1\"},services:[{protocol:\"mrp\",port:49152},{protocol:\"airplay\",port:7e3}]}]}).code(1).end()})});assert.strictEqual(devices.length,1);assert.strictEqual(devices[0].name,\"Vardagsrum\");assert.strictEqual(devices[0].host,\"10.0.10.81\");assert.strictEqual(devices[0].id,\"xxx\");assert.strictEqual(devices[0].model,\"Gen4K\");assert.strictEqual(devices[0].modelName,\"Apple TV 4K\");assert.strictEqual(devices[0].os,\"TvOS\");assert.strictEqual(devices[0].version,\"15.5.1\");assert.deepStrictEqual(devices[0].services,[{protocol:NodePyATVProtocol.mrp,port:49152},{protocol:NodePyATVProtocol.airplay,port:7e3}])",
                  "err": {},
                  "uuid": "dd3808f5-f6fc-4b23-8289-ba945a9732d5",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});assert.strictEqual(devices.length,4);assert.strictEqual(devices[0].name,\"Living Room\");assert.strictEqual(devices[0].host,\"10.0.0.30\");assert.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(devices[1].name,\"Kitchen\");assert.strictEqual(devices[1].host,\"10.0.0.79\");assert.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(devices[2].name,\"Bedroom\");assert.strictEqual(devices[2].host,\"10.0.0.20\");assert.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(devices[3].name,\"Basement\");assert.strictEqual(devices[3].host,\"10.0.0.156\");assert.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "824306f2-b8d9-4ca6-a909-054e723e23f4",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await NodePyATVInstance.find({spawn:createFakeSpawn(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);assert.strictEqual(response.devices.length,4);assert.strictEqual(response.errors.length,2);assert.strictEqual(response.devices[0].name,\"Living Room\");assert.strictEqual(response.devices[0].host,\"10.0.0.30\");assert.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");assert.strictEqual(response.devices[1].name,\"Kitchen\");assert.strictEqual(response.devices[1].host,\"10.0.0.79\");assert.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");assert.strictEqual(response.devices[2].name,\"Bedroom\");assert.strictEqual(response.devices[2].host,\"10.0.0.20\");assert.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");assert.strictEqual(response.devices[3].name,\"Basement\");assert.strictEqual(response.devices[3].host,\"10.0.0.156\");assert.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");assert.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");assert.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "46b39242-56a9-47f3-b792-9b0c6d8633d0",
                  "parentUUID": "706a5446-9c17-4f35-9021-fb9f81abfe47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f2044cc-1d16-46d5-83b9-6d6c0bf2b8b2",
                "345e0350-c288-487c-ad48-5a6f6c18a959",
                "d5673130-63ec-44c5-85a5-e739bc14b827",
                "d0b6edeb-1d18-4f1a-ab8d-75cf11f1926d",
                "dc6775a3-7646-4a39-8e67-e70833f7f63d",
                "febf15b6-0fc0-4c31-85ed-d2409b256778",
                "5eece29f-0cdd-499f-8023-d2b73333d0b9",
                "10aa62eb-d264-4c01-9f0b-9f3a7f3c0498",
                "af73e2bf-1dc9-4545-b762-1f5cb8769fb1",
                "dd3808f5-f6fc-4b23-8289-ba945a9732d5",
                "824306f2-b8d9-4ca6-a909-054e723e23f4",
                "46b39242-56a9-47f3-b792-9b0c6d8633d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5422,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "68ad1feb-c99c-4415-ba2e-75dbbdb4a9bf",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=NodePyATVInstance.device({host:\"192.168.178.6\",name:\"My Testdevice\"});assert.strictEqual(device.host,\"192.168.178.6\");assert.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "50a361be-e386-4d51-8c93-d0f2f458c7a4",
                  "parentUUID": "68ad1feb-c99c-4415-ba2e-75dbbdb4a9bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50a361be-e386-4d51-8c93-d0f2f458c7a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "44e5dd5a-a55e-477b-b8d3-759b7ea12f85",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await i.version({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "7446a31b-2c96-4a9e-a519-fffc2e1cfede",
                  "parentUUID": "44e5dd5a-a55e-477b-b8d3-759b7ea12f85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7446a31b-2c96-4a9e-a519-fffc2e1cfede"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d192a5f-54e2-4162-9d06-3a1d8ee2d295",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvremotePath:\"test\"});await assert.rejects(async()=>{await i.check({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "2291b916-f347-477d-a946-59203bf23843",
                  "parentUUID": "8d192a5f-54e2-4162-9d06-3a1d8ee2d295",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2291b916-f347-477d-a946-59203bf23843"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3cd015e2-bde9-4bac-be58-a6efe565df19",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({atvscriptPath:\"test\"});await i.find({spawn:createFakeSpawn(cp=>{assert.strictEqual(cp.cmd(),\"test\");cp.stdout({\"result\":\"success\",\"datetime\":\"2020-11-06T20:47:30.840022+01:00\",\"devices\":[]}).end()})})",
                  "err": {},
                  "uuid": "81bbf733-817d-440f-b582-7ed07625c86f",
                  "parentUUID": "3cd015e2-bde9-4bac-be58-a6efe565df19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81bbf733-817d-440f-b582-7ed07625c86f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fcfe753f-f8cf-45d9-9e32-1dedde92f51d",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new NodePyATVInstance({debug:true});const d=i.device({name:\"My Testdevice\",host:\"192.168.178.2\"});assert.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "b3aeeefe-9ddf-433b-ab85-e93b64983771",
                  "parentUUID": "fcfe753f-f8cf-45d9-9e32-1dedde92f51d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3aeeefe-9ddf-433b-ab85-e93b64983771"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51ef1531-d38f-4e47-8e8d-f6e799965857",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol)",
                  "err": {},
                  "uuid": "ed7746a1-bca8-4ce0-befd-afd3bf731663",
                  "parentUUID": "51ef1531-d38f-4e47-8e8d-f6e799965857",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType)",
                  "err": {},
                  "uuid": "7feb9b19-b745-463f-b273-3e5e8ab6567f",
                  "parentUUID": "51ef1531-d38f-4e47-8e8d-f6e799965857",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "5f0f9975-cba5-4a09-8ab8-7c479a5772b7",
                  "parentUUID": "51ef1531-d38f-4e47-8e8d-f6e799965857",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "3b467703-c84b-42f2-8a79-a2cbc2dc3426",
                  "parentUUID": "51ef1531-d38f-4e47-8e8d-f6e799965857",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "58be0892-d377-46c5-90f1-703d851ad910",
                  "parentUUID": "51ef1531-d38f-4e47-8e8d-f6e799965857",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "368c8cf9-e638-44b1-84b9-5f9e2edc04b4",
                  "parentUUID": "51ef1531-d38f-4e47-8e8d-f6e799965857",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys)",
                  "err": {},
                  "uuid": "c3859170-5b05-4a03-b21c-1043403d0a1d",
                  "parentUUID": "51ef1531-d38f-4e47-8e8d-f6e799965857",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState)",
                  "err": {},
                  "uuid": "26d6d5ea-33b8-404d-a88a-5bbf3b152277",
                  "parentUUID": "51ef1531-d38f-4e47-8e8d-f6e799965857",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState)",
                  "err": {},
                  "uuid": "a97281da-f7cd-485b-9a4b-414d1f1ba0d0",
                  "parentUUID": "51ef1531-d38f-4e47-8e8d-f6e799965857",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed7746a1-bca8-4ce0-befd-afd3bf731663",
                "7feb9b19-b745-463f-b273-3e5e8ab6567f",
                "5f0f9975-cba5-4a09-8ab8-7c479a5772b7",
                "3b467703-c84b-42f2-8a79-a2cbc2dc3426",
                "58be0892-d377-46c5-90f1-703d851ad910",
                "368c8cf9-e638-44b1-84b9-5f9e2edc04b4",
                "c3859170-5b05-4a03-b21c-1043403d0a1d",
                "26d6d5ea-33b8-404d-a88a-5bbf3b152277",
                "a97281da-f7cd-485b-9a4b-414d1f1ba0d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cff8850f-3906-4547-85e7-cd084b392b6b",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ca2e21c4-1d66-4211-bcb2-4b8b7d0a29a5",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=addRequestId();assert.strictEqual(typeof id,\"string\");removeRequestId(id)",
                  "err": {},
                  "uuid": "c04de308-0477-41eb-8457-77da166551bf",
                  "parentUUID": "ca2e21c4-1d66-4211-bcb2-4b8b7d0a29a5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId(\"FOO\")",
                  "err": {},
                  "uuid": "b19b3770-e26b-4eda-b9ae-e019382675a2",
                  "parentUUID": "ca2e21c4-1d66-4211-bcb2-4b8b7d0a29a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c04de308-0477-41eb-8457-77da166551bf",
                "b19b3770-e26b-4eda-b9ae-e019382675a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba0585f6-28c9-48f2-85ea-cc0faff61bd0",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "ba0ae004-f546-4e15-b2d6-32aef5f748e9",
                  "parentUUID": "ba0585f6-28c9-48f2-85ea-cc0faff61bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "38ce7e1c-0ea7-41e3-ba10-1a2cdff2bb4f",
                  "parentUUID": "ba0585f6-28c9-48f2-85ea-cc0faff61bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{debug:__name(function(msg){assert.strictEqual(this,null);assert.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "0292edc9-b338-4726-badf-e8d357ebcd5e",
                  "parentUUID": "ba0585f6-28c9-48f2-85ea-cc0faff61bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "18e3dc1e-bac8-49f8-9771-5dd4b5c1df4c",
                  "parentUUID": "ba0585f6-28c9-48f2-85ea-cc0faff61bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug(\"TEST\",\"Hello World.\",{noColors:true,debug:__name(function(msg){assert.strictEqual(this,null);assert.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\")})",
                  "err": {},
                  "uuid": "a57aeee4-d6c3-404a-8af6-f4f5449a51a3",
                  "parentUUID": "ba0585f6-28c9-48f2-85ea-cc0faff61bd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba0ae004-f546-4e15-b2d6-32aef5f748e9",
                "38ce7e1c-0ea7-41e3-ba10-1a2cdff2bb4f",
                "0292edc9-b338-4726-badf-e8d357ebcd5e",
                "18e3dc1e-bac8-49f8-9771-5dd4b5c1df4c",
                "a57aeee4-d6c3-404a-8af6-f4f5449a51a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "388c1d70-a7e9-4e03-9241-3a5c378c60e9",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "641468c0-8dd6-43d5-8861-17240c51378f",
                  "parentUUID": "388c1d70-a7e9-4e03-9241-3a5c378c60e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});assert.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "774cdff9-11ee-4043-9966-784425c90133",
                  "parentUUID": "388c1d70-a7e9-4e03-9241-3a5c378c60e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});assert.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "b1a3141b-dbd7-4017-93b1-7fc37ac8f7f8",
                  "parentUUID": "388c1d70-a7e9-4e03-9241-3a5c378c60e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=getExecutable(NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});assert.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "3d3d438f-e793-4ea4-8f3d-96ef6e2af915",
                  "parentUUID": "388c1d70-a7e9-4e03-9241-3a5c378c60e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "641468c0-8dd6-43d5-8861-17240c51378f",
                "774cdff9-11ee-4043-9966-784425c90133",
                "b1a3141b-dbd7-4017-93b1-7fc37ac8f7f8",
                "3d3d438f-e793-4ea4-8f3d-96ef6e2af915"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c5660f9a-bd61-4fe9-a621-82c50834e5f3",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters();assert.deepEqual(result,[])",
                  "err": {},
                  "uuid": "8d2965d4-e7dd-4230-88e7-e417e5f3195e",
                  "parentUUID": "c5660f9a-bd61-4fe9-a621-82c50834e5f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({host:\"192.168.178.2\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "18220d06-9263-43a6-9cf2-1acad53ca445",
                  "parentUUID": "c5660f9a-bd61-4fe9-a621-82c50834e5f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await getParameters({hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",protocol:NodePyATVProtocol.mrp,dmapCredentials:\"****\",mrpCredentials:\"****\",airplayCredentials:\"****\",companionCredentials:\"1234\",raopCredentials:\"::foo:\"});assert.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "9f9147ba-1f97-4634-9893-68be2e37805d",
                  "parentUUID": "c5660f9a-bd61-4fe9-a621-82c50834e5f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d2965d4-e7dd-4230-88e7-e417e5f3195e",
                "18220d06-9263-43a6-9cf2-1acad53ca445",
                "9f9147ba-1f97-4634-9893-68be2e37805d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "350aa6f2-dbe7-4885-a8ae-83626a059ae0",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "3c1442b0-41bd-4a23-ab70-07b66128bda9",
                  "parentUUID": "350aa6f2-dbe7-4885-a8ae-83626a059ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=parseState(null,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "1dd5d04c-61f8-40be-8d5c-d25340f98408",
                  "parentUUID": "350aa6f2-dbe7-4885-a8ae-83626a059ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={result:\"success\",datetime:\"2020-11-07T22:38:43.608030+01:00\",hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",device_state:\"playing\",title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,total_time:8097,position:27,shuffle:\"off\",repeat:\"off\",app:\"Disney+\",app_id:\"com.disney.disneyplus\",power_state:null,focus_state:null,volume:null,output_devices:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",mediaType:NodePyATVMediaType.video,deviceState:NodePyATVDeviceState.playing,title:\"Solo: A Star Wars Story\",artist:null,album:null,genre:null,totalTime:8097,position:27,shuffle:NodePyATVShuffleState.off,repeat:NodePyATVRepeatState.off,app:\"Disney+\",appId:\"com.disney.disneyplus\",powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "4158a394-e757-4ed2-bbba-a02929fa0bf1",
                  "parentUUID": "350aa6f2-dbe7-4885-a8ae-83626a059ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={result:\"failure\",datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};assert.throws(()=>{parseState(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "ea277019-ec84-43ca-aa81-aee4b2452a42",
                  "parentUUID": "350aa6f2-dbe7-4885-a8ae-83626a059ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "854cca7d-2758-4f7d-9f8e-1f7938d32f5a",
                  "parentUUID": "350aa6f2-dbe7-4885-a8ae-83626a059ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={result:\"success\",datetime:true,hash:1337,media_type:false,device_state:43,title:void 0,artist:90,album:Infinity,genre:Math.PI,total_time:\"23min\",position:\"0:30.123\",shuffle:false,repeat:true,app:0,app_id:891645381647289,power_state:null,focus_state:null,volume:null,output_devices:null};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "d3ee6397-4f59-4232-ba89-66552a36ef1b",
                  "parentUUID": "350aa6f2-dbe7-4885-a8ae-83626a059ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={media_type:\"3d-experience\",device_state:\"initiating\",shuffle:\"everything\",repeat:\"nothing\"};const result=parseState(input,\"\",{});assert.deepStrictEqual(result,{dateTime:null,hash:null,mediaType:null,deviceState:null,title:null,artist:null,album:null,genre:null,totalTime:null,position:null,shuffle:null,repeat:null,app:null,appId:null,powerState:null,focusState:null,volume:null,outputDevices:null})",
                  "err": {},
                  "uuid": "7ae74ab5-cf18-4060-8a8d-4a0ccbc6ce9c",
                  "parentUUID": "350aa6f2-dbe7-4885-a8ae-83626a059ae0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c1442b0-41bd-4a23-ab70-07b66128bda9",
                "1dd5d04c-61f8-40be-8d5c-d25340f98408",
                "4158a394-e757-4ed2-bbba-a02929fa0bf1",
                "ea277019-ec84-43ca-aa81-aee4b2452a42",
                "854cca7d-2758-4f7d-9f8e-1f7938d32f5a",
                "d3ee6397-4f59-4232-ba89-66552a36ef1b",
                "7ae74ab5-cf18-4060-8a8d-4a0ccbc6ce9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}