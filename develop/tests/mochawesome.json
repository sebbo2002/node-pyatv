{
  "stats": {
    "suites": 102,
    "tests": 174,
    "passes": 172,
    "pending": 2,
    "failures": 0,
    "start": "2025-07-14T17:26:35.687Z",
    "end": "2025-07-14T17:26:47.987Z",
    "duration": 12300,
    "testsRegistered": 174,
    "passPercent": 100,
    "pendingPercent": 1.1494252873563218,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1682c425-babd-4637-9341-8bcdcb7cf729",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "47224b51-3a2d-4a6f-bb30-726806ec3fb5",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "db37fea1-f265-4539-90d4-ce81d7a5ca7d",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "d3c9bcbe-8dc0-4da8-a494-45736d1b9ba1",
                  "parentUUID": "db37fea1-f265-4539-90d4-ce81d7a5ca7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3c9bcbe-8dc0-4da8-a494-45736d1b9ba1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "44510ab7-a436-4d8c-9a41-19926e929247",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "e7424220-b924-458b-a75f-94da958ed9da",
                  "parentUUID": "44510ab7-a436-4d8c-9a41-19926e929247",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7424220-b924-458b-a75f-94da958ed9da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ecca9faa-ec33-4ec8-b33c-bea4d5f83964",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "966ea95e-15c5-4450-8d96-8e42dfff786e",
                  "parentUUID": "ecca9faa-ec33-4ec8-b33c-bea4d5f83964",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "966ea95e-15c5-4450-8d96-8e42dfff786e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90112d79-25a8-4402-9338-5a80aebd67d2",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "e34454e4-110a-4b0f-b1e8-bbbf5b878c48",
                  "parentUUID": "90112d79-25a8-4402-9338-5a80aebd67d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e34454e4-110a-4b0f-b1e8-bbbf5b878c48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf3318ff-143e-418b-951d-175d0a372f1e",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new import_device_event.default({device,key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "1100200d-4a27-4c71-93fc-e3e4c701930e",
                  "parentUUID": "bf3318ff-143e-418b-951d-175d0a372f1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1100200d-4a27-4c71-93fc-e3e4c701930e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3a7c2446-05d4-4f76-8a93-ad79b103a550",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "e6bbaa7e-0919-4e94-9e2c-fcbaa29f2933",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "3d815f86-b941-48f7-adf9-7fcad8d4311b",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);import_assert.default.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "32b75291-eac2-450d-90e8-758b117048da",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{import_assert.default.ok(error instanceof Error);import_assert.default.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "fc55357b-7c9c-45cb-aee2-e4f4492be952",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);import_assert.default.strictEqual(spawnCounter,2);import_assert.default.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "b485e3f4-672c-4c52-9190-e117b48a87c7",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);import_assert.default.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "1cb88b66-8c82-48b3-9082-b410b0fa140b",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "743b2767-27a9-4d7b-be16-9e8acd8a11ee",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "8431899e-5e72-48ab-a8f5-77ee6057fc16",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),focus_state:\"unfocused\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"focusState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"unfocused\");import_assert.default.strictEqual(event.newValue,import_types.NodePyATVFocusState.unfocused);import_assert.default.strictEqual(event.value,\"unfocused\");import_assert.default.strictEqual(event.value,import_types.NodePyATVFocusState.unfocused);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "c4d0e8c7-0d2e-4cab-8ee8-b675d90c92a0",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),output_devices:[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}],result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"outputDevices\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.deepStrictEqual(event.newValue,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.value,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "890843a0-6650-48bc-b892-15b7a8c87795",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),result:\"success\",volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"volume\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,20);import_assert.default.strictEqual(event.value,20);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "bbe42450-3945-4d74-8b02-9078197db65d",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),foo:\"bar\",result:\"success\"});cp.end()})});device.on(\"update\",event=>{import_assert.default.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "a12ee8f6-04b9-4159-b655-ae963713c989",
                  "parentUUID": "c47f66c9-233e-4d87-9fad-8fe1440f135b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6bbaa7e-0919-4e94-9e2c-fcbaa29f2933",
                "3d815f86-b941-48f7-adf9-7fcad8d4311b",
                "32b75291-eac2-450d-90e8-758b117048da",
                "fc55357b-7c9c-45cb-aee2-e4f4492be952",
                "b485e3f4-672c-4c52-9190-e117b48a87c7",
                "1cb88b66-8c82-48b3-9082-b410b0fa140b",
                "743b2767-27a9-4d7b-be16-9e8acd8a11ee",
                "8431899e-5e72-48ab-a8f5-77ee6057fc16",
                "c4d0e8c7-0d2e-4cab-8ee8-b675d90c92a0",
                "890843a0-6650-48bc-b892-15b7a8c87795",
                "bbe42450-3945-4d74-8b02-9078197db65d",
                "a12ee8f6-04b9-4159-b655-ae963713c989"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 62,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afb851a3-e660-4965-9a3f-2dc92f7a84e0",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "b89388d4-0f9a-4f58-b2d6-15234be2eccf",
                  "parentUUID": "afb851a3-e660-4965-9a3f-2dc92f7a84e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "f8a68fea-152d-4dc0-bd96-53ff2b3b0530",
                  "parentUUID": "afb851a3-e660-4965-9a3f-2dc92f7a84e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "b7f2b7b6-7f13-41a6-b8fe-61664cff5941",
                  "parentUUID": "afb851a3-e660-4965-9a3f-2dc92f7a84e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9554a3ad-02c7-418a-88d8-4734ed9ff893",
                  "parentUUID": "afb851a3-e660-4965-9a3f-2dc92f7a84e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b89388d4-0f9a-4f58-b2d6-15234be2eccf",
                "f8a68fea-152d-4dc0-bd96-53ff2b3b0530",
                "b7f2b7b6-7f13-41a6-b8fe-61664cff5941"
              ],
              "failures": [],
              "pending": [
                "9554a3ad-02c7-418a-88d8-4734ed9ff893"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3cef6235-29bf-4751-b6e5-61fbfca4b951",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "4b7d9775-4df7-4f78-a6c5-b0dc681d9904",
                  "parentUUID": "3cef6235-29bf-4751-b6e5-61fbfca4b951",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b7d9775-4df7-4f78-a6c5-b0dc681d9904"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "524496fe-0642-409b-8053-69a2c1a4d2ef",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const event=new import_lib.NodePyATVDeviceEvent({device,key:\"dateTime\",new:\"bar\",old:\"foo\"});let executions=0;device.once(\"test\",e=>{executions++;import_assert.default.strictEqual(e,event);import_assert.default.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "5840c847-7fc4-427c-a2ac-83381175be0b",
                  "parentUUID": "524496fe-0642-409b-8053-69a2c1a4d2ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5840c847-7fc4-427c-a2ac-83381175be0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c31dca8e-c34b-436e-a15b-9e3ef5780a20",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "d74319ee-4ba7-4baa-a032-4cc5c495523a",
                  "parentUUID": "c31dca8e-c34b-436e-a15b-9e3ef5780a20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d74319ee-4ba7-4baa-a032-4cc5c495523a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "983a2585-154a-443a-afcd-a3da1c18d384",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();import_assert.default.ok(typeof result,\"number\");import_assert.default.ok(result>=10)",
                  "err": {},
                  "uuid": "dc34a2c1-74ad-4ef3-95a2-a9373aa11852",
                  "parentUUID": "983a2585-154a-443a-afcd-a3da1c18d384",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc34a2c1-74ad-4ef3-95a2-a9373aa11852"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b225db0e-ca7f-4d99-b27e-190935505bad",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "255d08b2-6192-4b18-879d-de6fcd48cbb8",
                  "parentUUID": "b225db0e-ca7f-4d99-b27e-190935505bad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "255d08b2-6192-4b18-879d-de6fcd48cbb8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73e66853-1e34-482a-82bd-d5eac108d5b0",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "9e707b4a-a073-4b2b-85ac-f3f8b5b9ec20",
                  "parentUUID": "73e66853-1e34-482a-82bd-d5eac108d5b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e707b4a-a073-4b2b-85ac-f3f8b5b9ec20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c6dffd11-d318-478b-becd-c8b02b8881fa",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "6d169cbe-293e-4acf-a60a-2b9c3f822f9c",
                  "parentUUID": "c6dffd11-d318-478b-becd-c8b02b8881fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d169cbe-293e-4acf-a60a-2b9c3f822f9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b637149b-6490-402c-8548-8b46f29d8bb9",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "ea9ffda1-8659-4919-8d41-24ec540388cc",
                  "parentUUID": "b637149b-6490-402c-8548-8b46f29d8bb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea9ffda1-8659-4919-8d41-24ec540388cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad096443-2f1e-490b-a745-f44728644f49",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "d1b9f210-9576-4c62-8764-3147110a79f1",
                  "parentUUID": "ad096443-2f1e-490b-a745-f44728644f49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1b9f210-9576-4c62-8764-3147110a79f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a6200c7-d767-489c-8171-b5f353f9089c",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "976a87d6-333e-4487-83df-a49f7b705f17",
                  "parentUUID": "7a6200c7-d767-489c-8171-b5f353f9089c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "976a87d6-333e-4487-83df-a49f7b705f17"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d54f31c6-0337-4b69-bdc0-1a057d236b97",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd47550c-aaf2-4843-9e8f-3c3ace61897b",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "d7cb76a1-54c1-415a-8a82-48ed189e870d",
                  "parentUUID": "bd47550c-aaf2-4843-9e8f-3c3ace61897b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7cb76a1-54c1-415a-8a82-48ed189e870d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3aca1dea-862c-485e-9fa3-0ee5349a0658",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "201ff495-0b00-48ea-a605-69d4d76e438e",
                  "parentUUID": "3aca1dea-862c-485e-9fa3-0ee5349a0658",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "201ff495-0b00-48ea-a605-69d4d76e438e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2a4c56ae-6c43-4a25-b99a-40094134e9bf",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "882c4d32-c7e0-4776-85ff-a2d9ae423dc6",
                  "parentUUID": "2a4c56ae-6c43-4a25-b99a-40094134e9bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "882c4d32-c7e0-4776-85ff-a2d9ae423dc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9925a029-6fe4-4eba-ae7c-632456b81d0a",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"],host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "ba8ca66f-8ff9-4477-ab8e-926f60c33cfd",
                  "parentUUID": "9925a029-6fe4-4eba-ae7c-632456b81d0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba8ca66f-8ff9-4477-ab8e-926f60c33cfd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4140d5d0-e70b-4341-9fd3-2884a316ad66",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.strictEqual(device.protocol,import_types.NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "e1819529-7aa3-4789-a4ed-5bc93e92a76e",
                  "parentUUID": "4140d5d0-e70b-4341-9fd3-2884a316ad66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1819529-7aa3-4789-a4ed-5bc93e92a76e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ec06298-21e1-4088-b285-dab54632b26c",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "3ac807d9-985a-47a3-a770-2b1a3bc9fddd",
                  "parentUUID": "3ec06298-21e1-4088-b285-dab54632b26c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ac807d9-985a-47a3-a770-2b1a3bc9fddd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "504d595a-6d20-4656-b210-ba4dfb9a7648",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "298a52cd-9f12-42c6-a50f-7ca43ab129f5",
                  "parentUUID": "504d595a-6d20-4656-b210-ba4dfb9a7648",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "9d01b40a-27fc-4fbc-a57c-cc5c2a05c368",
                  "parentUUID": "504d595a-6d20-4656-b210-ba4dfb9a7648",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "298a52cd-9f12-42c6-a50f-7ca43ab129f5",
                "9d01b40a-27fc-4fbc-a57c-cc5c2a05c368"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3706c75d-e8e9-4833-b952-270ebb8d0357",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "a63ac5ac-807e-4fcb-a2cb-9e683d384655",
                  "parentUUID": "3706c75d-e8e9-4833-b952-270ebb8d0357",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "2fb3f335-70d5-411b-a1ad-2054b5f36bcb",
                  "parentUUID": "3706c75d-e8e9-4833-b952-270ebb8d0357",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a63ac5ac-807e-4fcb-a2cb-9e683d384655",
                "2fb3f335-70d5-411b-a1ad-2054b5f36bcb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "988146e6-5f96-471b-8747-4a57ba23447c",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",os:\"TvOS\"});import_assert.default.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "e7dc3764-3d2b-42e8-8447-14950991775d",
                  "parentUUID": "988146e6-5f96-471b-8747-4a57ba23447c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "d95eff37-8cd1-4e98-9e29-7dbb6223a078",
                  "parentUUID": "988146e6-5f96-471b-8747-4a57ba23447c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7dc3764-3d2b-42e8-8447-14950991775d",
                "d95eff37-8cd1-4e98-9e29-7dbb6223a078"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1f9f905-9366-4e5b-a93b-740b5dab180e",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",version:\"15.5.1\"});import_assert.default.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "611141c2-6100-4440-b659-a0360ad85e14",
                  "parentUUID": "c1f9f905-9366-4e5b-a93b-740b5dab180e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "dd7ba158-a769-4935-bf5c-643a96c18aab",
                  "parentUUID": "c1f9f905-9366-4e5b-a93b-740b5dab180e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "611141c2-6100-4440-b659-a0360ad85e14",
                "dd7ba158-a769-4935-bf5c-643a96c18aab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7166b9e-db60-4a59-a041-14de210da736",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:import_types.NodePyATVProtocol.mrp},{port:7e3,protocol:import_types.NodePyATVProtocol.airplay}]});import_assert.default.deepStrictEqual(device.services,[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}])",
                  "err": {},
                  "uuid": "acc532a2-a17a-4642-8e52-8f2062c13b2c",
                  "parentUUID": "b7166b9e-db60-4a59-a041-14de210da736",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "88db507b-2964-4315-9c76-11d10e3a46dd",
                  "parentUUID": "b7166b9e-db60-4a59-a041-14de210da736",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "acc532a2-a17a-4642-8e52-8f2062c13b2c",
                "88db507b-2964-4315-9c76-11d10e3a46dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2229d3e4-fc4d-4d2a-b359-f7be4d19f619",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "ea65b5d1-f972-4df2-9c00-a787c2e8d643",
                  "parentUUID": "2229d3e4-fc4d-4d2a-b359-f7be4d19f619",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new import_device.default({debug:fn,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "821670d0-56cd-494e-a513-8bb8cf90b0e5",
                  "parentUUID": "2229d3e4-fc4d-4d2a-b359-f7be4d19f619",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "2a3a72f4-29fc-44a4-bc18-334f78284d00",
                  "parentUUID": "2229d3e4-fc4d-4d2a-b359-f7be4d19f619",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea65b5d1-f972-4df2-9c00-a787c2e8d643",
                "821670d0-56cd-494e-a513-8bb8cf90b0e5",
                "2a3a72f4-29fc-44a4-bc18-334f78284d00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "369029dc-a5e6-45b2-a1d5-cfec98dad44f",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0);device.debug=true;import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "175afb40-d2eb-44f2-8df8-c3365ae1d2e7",
                  "parentUUID": "369029dc-a5e6-45b2-a1d5-cfec98dad44f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "cb1e20ef-2098-4e35-9c4d-cb22151d5044",
                  "parentUUID": "369029dc-a5e6-45b2-a1d5-cfec98dad44f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "0f490971-c0e8-4c7a-b0ab-48de93363c1c",
                  "parentUUID": "369029dc-a5e6-45b2-a1d5-cfec98dad44f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});const fn=__name(()=>{},\"fn\");import_assert.default.strictEqual(device.debug,void 0);device.debug=fn;import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "077e732e-6b29-410e-a259-c7e6b782a57d",
                  "parentUUID": "369029dc-a5e6-45b2-a1d5-cfec98dad44f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "175afb40-d2eb-44f2-8df8-c3365ae1d2e7",
                "cb1e20ef-2098-4e35-9c4d-cb22151d5044",
                "0f490971-c0e8-4c7a-b0ab-48de93363c1c",
                "077e732e-6b29-410e-a259-c7e6b782a57d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "197e3831-4d19-45c5-b23b-985a50e4dc3d",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.deepEqual(device.toJSON(),{host:\"192.168.178.2\",id:\"*****\",mac:void 0,name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "d77cf789-5407-4115-9e53-777492d2e657",
                  "parentUUID": "197e3831-4d19-45c5-b23b-985a50e4dc3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={host:\"192.168.178.2\",id:\"*****\",mac:\"469943881251875\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay};const deviceA=new import_device.default(config);const deviceB=new import_device.default(deviceA.toJSON());import_assert.default.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "504d1041-d744-4253-867c-f7c4d0fb6014",
                  "parentUUID": "197e3831-4d19-45c5-b23b-985a50e4dc3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d77cf789-5407-4115-9e53-777492d2e657",
                "504d1041-d744-4253-867c-f7c4d0fb6014"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1aff26e7-5023-4e54-841b-2e9d5b6dcb44",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "756627d7-81c4-488b-b9ae-855cf0e7a471",
                  "parentUUID": "1aff26e7-5023-4e54-841b-2e9d5b6dcb44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "756627d7-81c4-488b-b9ae-855cf0e7a471"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2da309ec-49e2-49bb-a7a9-96ae31d7598b",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "69b427d5-2b64-4eb5-b38a-844b28e68fbf",
                  "parentUUID": "2da309ec-49e2-49bb-a7a9-96ae31d7598b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const result=await device.getState();import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "495eb6cc-8121-4fb5-b227-49bd15ed3d0f",
                  "parentUUID": "2da309ec-49e2-49bb-a7a9-96ae31d7598b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});import_assert.default.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "b06265cd-c7b8-4f40-a313-84ddfa59db5f",
                  "parentUUID": "2da309ec-49e2-49bb-a7a9-96ae31d7598b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date().toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();const secondResult=await device.getState();import_assert.default.strictEqual(firstResult.dateTime,secondResult.dateTime);import_assert.default.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "e162db90-077a-4e93-9abf-44f71e9531fe",
                  "parentUUID": "2da309ec-49e2-49bb-a7a9-96ae31d7598b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date(new Date().getTime()-1e3).toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();import_assert.default.strictEqual(firstResult.position,27);const secondResult=await device.getState();import_assert.default.ok(secondResult.position);import_assert.default.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);import_assert.default.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "531826ab-d971-426c-89e3-bd1dd07bd613",
                  "parentUUID": "2da309ec-49e2-49bb-a7a9-96ae31d7598b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "495eb6cc-8121-4fb5-b227-49bd15ed3d0f",
                "b06265cd-c7b8-4f40-a313-84ddfa59db5f",
                "e162db90-077a-4e93-9abf-44f71e9531fe",
                "531826ab-d971-426c-89e3-bd1dd07bd613"
              ],
              "failures": [],
              "pending": [
                "69b427d5-2b64-4eb5-b38a-844b28e68fbf"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "321040cd-3092-4991-a36f-19a7c9d95b52",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({datetime:\"2020-11-07T22:38:43.608030+01:00\",result:\"success\",title:\"Solo: A Star Wars Story\"})})});import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");import_assert.default.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "43d2533b-1340-498b-93de-287d3221e521",
                  "parentUUID": "321040cd-3092-4991-a36f-19a7c9d95b52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43d2533b-1340-498b-93de-287d3221e521"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b8a53506-2839-4d65-9fac-13ad77e2d733",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:new Date().toJSON(),result:\"success\"})})});const result=await device.getDateTime();import_assert.default.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "4c3c9126-0886-47d2-919e-550de5cdcc60",
                  "parentUUID": "b8a53506-2839-4d65-9fac-13ad77e2d733",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c3c9126-0886-47d2-919e-550de5cdcc60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f773cbb7-1445-4959-be86-fd8b3c06f267",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({hash:\"12345\",result:\"success\"})})});const result=await device.getHash();import_assert.default.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "0843d9db-54f1-4e70-9eff-8c8cbebdd13d",
                  "parentUUID": "f773cbb7-1445-4959-be86-fd8b3c06f267",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0843d9db-54f1-4e70-9eff-8c8cbebdd13d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9866035e-aff3-46c7-8142-e963209f8d49",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({media_type:\"video\",result:\"success\"})})});const result=await device.getMediaType();import_assert.default.deepStrictEqual(result,import_types.NodePyATVMediaType.video);import_assert.default.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "aa13cbda-818a-4656-a202-d49870d1cbf7",
                  "parentUUID": "9866035e-aff3-46c7-8142-e963209f8d49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa13cbda-818a-4656-a202-d49870d1cbf7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff5a02b4-09a3-493d-93be-98528fd96c9a",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({device_state:\"seeking\",result:\"success\"})})});const result=await device.getDeviceState();import_assert.default.deepStrictEqual(result,import_types.NodePyATVDeviceState.seeking);import_assert.default.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "bf2402c6-386e-4094-a49f-877952503df9",
                  "parentUUID": "ff5a02b4-09a3-493d-93be-98528fd96c9a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf2402c6-386e-4094-a49f-877952503df9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a13434e-c127-45cd-aabe-d1f1a844f69e",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();import_assert.default.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "166c317e-5f26-4fac-af9e-a51828067b32",
                  "parentUUID": "1a13434e-c127-45cd-aabe-d1f1a844f69e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "166c317e-5f26-4fac-af9e-a51828067b32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e38bca31-ed2b-44ed-8d25-b89f00778700",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({artist:\"My Artist\",result:\"success\"})})});const result=await device.getArtist();import_assert.default.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "fb277c0e-c21e-4d8c-b2a9-f85fdf0d8dd9",
                  "parentUUID": "e38bca31-ed2b-44ed-8d25-b89f00778700",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb277c0e-c21e-4d8c-b2a9-f85fdf0d8dd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d8e21c3-4b09-4baf-aecb-f74cb62f1679",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:\"My ALbum\",result:\"success\"})})});const result=await device.getAlbum();import_assert.default.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "cec2f922-6646-42d0-8fdf-b488824aba1b",
                  "parentUUID": "9d8e21c3-4b09-4baf-aecb-f74cb62f1679",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cec2f922-6646-42d0-8fdf-b488824aba1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10007f2c-0c85-4097-b5a7-912c49037d04",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({genre:\"My Genre\",result:\"success\"})})});const result=await device.getGenre();import_assert.default.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "011cd383-2c69-45b7-b081-9ee7641ae1ec",
                  "parentUUID": "10007f2c-0c85-4097-b5a7-912c49037d04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "011cd383-2c69-45b7-b081-9ee7641ae1ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c51fef11-3e64-49fb-b7a4-4325001c430c",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();import_assert.default.strictEqual(result,45)",
                  "err": {},
                  "uuid": "a53dcd54-b831-48b2-a00b-c49dc372e7c1",
                  "parentUUID": "c51fef11-3e64-49fb-b7a4-4325001c430c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a53dcd54-b831-48b2-a00b-c49dc372e7c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fac136fb-fb4b-48a9-890f-557ce5553304",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({position:30,result:\"success\"})})});const result=await device.getPosition();import_assert.default.strictEqual(result,30)",
                  "err": {},
                  "uuid": "f1c5dd98-18d4-4321-877f-e2c58985e9b4",
                  "parentUUID": "fac136fb-fb4b-48a9-890f-557ce5553304",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1c5dd98-18d4-4321-877f-e2c58985e9b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7cbe4faa-934e-4901-8224-6bf5580e8853",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();import_assert.default.deepStrictEqual(result,import_types.NodePyATVShuffleState.songs);import_assert.default.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "11e3c537-5725-4581-a542-28b924cbb83e",
                  "parentUUID": "7cbe4faa-934e-4901-8224-6bf5580e8853",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11e3c537-5725-4581-a542-28b924cbb83e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1f2adaf3-e7e7-42c0-9c6e-9ddfa6daa78f",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({repeat:\"all\",result:\"success\"})})});const result=await device.getRepeat();import_assert.default.deepStrictEqual(result,import_types.NodePyATVRepeatState.all);import_assert.default.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "a8309703-d857-4b68-9c9e-819bccfb7007",
                  "parentUUID": "1f2adaf3-e7e7-42c0-9c6e-9ddfa6daa78f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8309703-d857-4b68-9c9e-819bccfb7007"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dbc577df-6a4a-47c8-a418-75229c961028",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app:\"My App\",result:\"success\"})})});const result=await device.getApp();import_assert.default.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "d3e336e8-9476-48e6-a7d4-cf0ec612a764",
                  "parentUUID": "dbc577df-6a4a-47c8-a418-75229c961028",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3e336e8-9476-48e6-a7d4-cf0ec612a764"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87dd74da-0176-40d3-919c-11f8ccbc3996",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app_id:\"app.example.com\",result:\"success\"})})});const result=await device.getAppId();import_assert.default.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "189f416d-858e-44f3-b4fd-b46db4ff9306",
                  "parentUUID": "87dd74da-0176-40d3-919c-11f8ccbc3996",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "189f416d-858e-44f3-b4fd-b46db4ff9306"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a4a3e52-40ba-4d88-849e-f1f2a3b03b80",
              "title": "getPowerState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPowerState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({power_state:\"on\",result:\"success\"})})});const result=await device.getPowerState();import_assert.default.strictEqual(result,import_types.NodePyATVPowerState.on)",
                  "err": {},
                  "uuid": "c50fbe5d-d97c-46f4-9297-84e2908d8b77",
                  "parentUUID": "9a4a3e52-40ba-4d88-849e-f1f2a3b03b80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c50fbe5d-d97c-46f4-9297-84e2908d8b77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb2836ef-23d0-48c1-b2bd-5d9c60833e9b",
              "title": "getVolume()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getVolume() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",volume:50})})});const result=await device.getVolume();import_assert.default.strictEqual(result,50)",
                  "err": {},
                  "uuid": "f9d98ae0-3b09-41fb-b4de-f987ea51f27a",
                  "parentUUID": "bb2836ef-23d0-48c1-b2bd-5d9c60833e9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9d98ae0-3b09-41fb-b4de-f987ea51f27a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "857fcb22-6726-46a9-a19b-4b752ad41ccd",
              "title": "getFocusState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getFocusState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({focus_state:\"focused\",result:\"success\"})})});const result=await device.getFocusState();import_assert.default.strictEqual(result,import_types.NodePyATVFocusState.focused)",
                  "err": {},
                  "uuid": "0bed5af0-3d2a-4113-8d9f-c28cdf9efd9d",
                  "parentUUID": "857fcb22-6726-46a9-a19b-4b752ad41ccd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0bed5af0-3d2a-4113-8d9f-c28cdf9efd9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3e90818-107f-426d-a2c8-2a828295bab9",
              "title": "getOutputDevices()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getOutputDevices() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({output_devices:[{identifier:\"foo\",name:\"Apple TV\"}],result:\"success\"})})});const result=await device.getOutputDevices();import_assert.default.deepStrictEqual(result,[{identifier:\"foo\",name:\"Apple TV\"}])",
                  "err": {},
                  "uuid": "80229a25-2a8e-458d-8cc2-e098c864bccd",
                  "parentUUID": "e3e90818-107f-426d-a2c8-2a828295bab9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80229a25-2a8e-458d-8cc2-e098c864bccd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dfa84565-2537-41ce-b7e3-0db54ab1829e",
              "title": "getContentIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getContentIdentifier() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({content_identifier:\"1234\",result:\"success\"})})});const result=await device.getContentIdentifier();import_assert.default.strictEqual(result,\"1234\")",
                  "err": {},
                  "uuid": "8e269a61-83fe-4629-ab87-87dc353df779",
                  "parentUUID": "dfa84565-2537-41ce-b7e3-0db54ab1829e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e269a61-83fe-4629-ab87-87dc353df779"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "55ec0efd-33a0-4843-af8e-528752f3de7f",
              "title": "getiTunesStoreIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getiTunesStoreIdentifier() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({itunes_store_identifier:1234,result:\"success\"})})});const result=await device.getiTunesStoreIdentifier();import_assert.default.strictEqual(result,1234)",
                  "err": {},
                  "uuid": "e57f521e-50c1-41ad-b8fa-7026c55d0c41",
                  "parentUUID": "55ec0efd-33a0-4843-af8e-528752f3de7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e57f521e-50c1-41ad-b8fa-7026c55d0c41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40bdb385-6d67-4fce-b257-7d41e9e4f8c2",
              "title": "getEpisodeNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getEpisodeNumber() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({episode_number:12,result:\"success\"})})});const result=await device.getEpisodeNumber();import_assert.default.strictEqual(result,12)",
                  "err": {},
                  "uuid": "6c05d309-c11f-43c0-a8a7-ce64bd59ccb4",
                  "parentUUID": "40bdb385-6d67-4fce-b257-7d41e9e4f8c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c05d309-c11f-43c0-a8a7-ce64bd59ccb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b521faff-4d3d-4d48-864e-82325e9aa42e",
              "title": "getSeasonNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeasonNumber() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",season_number:2})})});const result=await device.getSeasonNumber();import_assert.default.strictEqual(result,2)",
                  "err": {},
                  "uuid": "faed3de8-fafc-4c4f-ab40-fad964b1813c",
                  "parentUUID": "b521faff-4d3d-4d48-864e-82325e9aa42e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "faed3de8-fafc-4c4f-ab40-fad964b1813c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f15b3daf-faf6-438c-bf81-b94163f90340",
              "title": "getSeriesName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeriesName() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",series_name:\"The Testing Disaster\"})})});const result=await device.getSeriesName();import_assert.default.strictEqual(result,\"The Testing Disaster\")",
                  "err": {},
                  "uuid": "d7e20e8d-247b-4b3a-819c-2fdb053a9c56",
                  "parentUUID": "f15b3daf-faf6-438c-bf81-b94163f90340",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7e20e8d-247b-4b3a-819c-2fdb053a9c56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e611cd10-1a2c-45e6-bb86-69401be59bdb",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();import_assert.default.strictEqual(result.length,25);import_assert.default.strictEqual(result[0].id,\"com.apple.Fitness\");import_assert.default.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "fddee5b0-8b6d-4b1b-b4e2-8640236df378",
                  "parentUUID": "e611cd10-1a2c-45e6-bb86-69401be59bdb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fddee5b0-8b6d-4b1b-b4e2-8640236df378"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8fd5738b-e112-40ce-acb8-5179a19998c3",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(import_types.NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "6581758b-986e-47ec-800c-1685119dfac2",
                  "parentUUID": "8fd5738b-e112-40ce-acb8-5179a19998c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});await import_assert.default.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "e88ccd70-8915-4a48-8e67-868e36113746",
                  "parentUUID": "8fd5738b-e112-40ce-acb8-5179a19998c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"failure\"}')})});await import_assert.default.rejects(async()=>{await device.pressKey(import_types.NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "f3362efb-a900-4d6e-b3f1-d59dddc70f6d",
                  "parentUUID": "8fd5738b-e112-40ce-acb8-5179a19998c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6581758b-986e-47ec-800c-1685119dfac2",
                "e88ccd70-8915-4a48-8e67-868e36113746",
                "f3362efb-a900-4d6e-b3f1-d59dddc70f6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f4d871b4-6b6b-4f1f-a8b4-ef83f124607d",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "7df2a12e-f01c-4c02-b218-2240e8f2d29f",
                  "parentUUID": "f4d871b4-6b6b-4f1f-a8b4-ef83f124607d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7df2a12e-f01c-4c02-b218-2240e8f2d29f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a303cf9e-d679-4916-8977-9082daf3af6b",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "064cad71-8c7b-4719-9219-5612b98d5518",
                  "parentUUID": "a303cf9e-d679-4916-8977-9082daf3af6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "064cad71-8c7b-4719-9219-5612b98d5518"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dfbe39d1-fdc5-4ad7-b6d8-4f9fd822bf5b",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b676ad16-9fed-4af0-8c4d-cfe0c3aca913",
                  "parentUUID": "dfbe39d1-fdc5-4ad7-b6d8-4f9fd822bf5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b676ad16-9fed-4af0-8c4d-cfe0c3aca913"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a94d134-bf05-403d-a899-376d140c3511",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "553879a0-ba64-4941-a1e1-3569f0200baa",
                  "parentUUID": "3a94d134-bf05-403d-a899-376d140c3511",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "553879a0-ba64-4941-a1e1-3569f0200baa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4e6c0eda-515d-41c5-92cb-151fdfae92c1",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "845138af-b21c-42eb-be4b-569c7bef71e9",
                  "parentUUID": "4e6c0eda-515d-41c5-92cb-151fdfae92c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "845138af-b21c-42eb-be4b-569c7bef71e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "266792ed-75e1-42a4-911b-3464d92393f5",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "5517251d-c3a8-4409-b96f-66168d45438d",
                  "parentUUID": "266792ed-75e1-42a4-911b-3464d92393f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5517251d-c3a8-4409-b96f-66168d45438d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b9cec60-c959-4fc4-8a62-c667790da936",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f1eae17b-bd68-4ba6-8935-d03f1fb0b3ef",
                  "parentUUID": "8b9cec60-c959-4fc4-8a62-c667790da936",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1eae17b-bd68-4ba6-8935-d03f1fb0b3ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dff5896d-b2f4-400d-8559-c36a35ae150d",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "7454f91d-10d9-4278-8718-07a43a37ae94",
                  "parentUUID": "dff5896d-b2f4-400d-8559-c36a35ae150d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7454f91d-10d9-4278-8718-07a43a37ae94"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f65d41d1-bc63-4712-81a3-40050ee3863b",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c60e9ea7-35ed-488d-93f0-f4449fe0898a",
                  "parentUUID": "f65d41d1-bc63-4712-81a3-40050ee3863b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c60e9ea7-35ed-488d-93f0-f4449fe0898a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e04e765-5c3c-4824-bc1d-bc47ecf0d415",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3c35d418-13ad-46de-9ea4-3657c06bfcff",
                  "parentUUID": "5e04e765-5c3c-4824-bc1d-bc47ecf0d415",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c35d418-13ad-46de-9ea4-3657c06bfcff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ea80eb4-6b75-4f2a-934f-15d4513347eb",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9e56d8e6-4c26-4279-bccf-b95f4731e3a8",
                  "parentUUID": "1ea80eb4-6b75-4f2a-934f-15d4513347eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e56d8e6-4c26-4279-bccf-b95f4731e3a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e70fe340-9c60-4fd0-9434-5b8763dab019",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "2a2b5e7d-1b16-4493-ba41-b6f9732a71d9",
                  "parentUUID": "e70fe340-9c60-4fd0-9434-5b8763dab019",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a2b5e7d-1b16-4493-ba41-b6f9732a71d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e6164f6b-b672-423d-bb60-a51c7e34d87a",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "82469654-88ab-4469-8e04-32a304daa782",
                  "parentUUID": "e6164f6b-b672-423d-bb60-a51c7e34d87a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82469654-88ab-4469-8e04-32a304daa782"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93835b47-0d71-4588-bba9-bae9b42cfc00",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "2555a54d-e96c-4701-b6e7-7414e6d31c7d",
                  "parentUUID": "93835b47-0d71-4588-bba9-bae9b42cfc00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2555a54d-e96c-4701-b6e7-7414e6d31c7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "279e0cbe-f2db-43cb-9333-d0b1485b9996",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b63e8250-1702-4053-a182-4853886d519b",
                  "parentUUID": "279e0cbe-f2db-43cb-9333-d0b1485b9996",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b63e8250-1702-4053-a182-4853886d519b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39c6b5a5-82ff-415b-8521-c03736293f90",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f8433eff-d12d-4ce8-823e-0c20a0ddedf6",
                  "parentUUID": "39c6b5a5-82ff-415b-8521-c03736293f90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8433eff-d12d-4ce8-823e-0c20a0ddedf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1248b9d-f66c-42e4-8bf0-87af6cd4a561",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "2a8f6c8e-d30f-45d4-9843-b12a934b716f",
                  "parentUUID": "a1248b9d-f66c-42e4-8bf0-87af6cd4a561",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a8f6c8e-d30f-45d4-9843-b12a934b716f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e05248d3-cb65-4e8c-bd25-b87c639dd985",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f468e8c9-d75b-4d2a-a662-7b88268a0828",
                  "parentUUID": "e05248d3-cb65-4e8c-bd25-b87c639dd985",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f468e8c9-d75b-4d2a-a662-7b88268a0828"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1447d8b3-2c8e-4b36-996c-6f1e9fe085cd",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f4f5ede9-9a3d-4dbd-a369-c182144a659f",
                  "parentUUID": "1447d8b3-2c8e-4b36-996c-6f1e9fe085cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4f5ede9-9a3d-4dbd-a369-c182144a659f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0d4c71c-dfb8-4d9a-8a04-e13d54fc4ac2",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "cb6173a8-677b-47bc-a054-32b62acc455f",
                  "parentUUID": "b0d4c71c-dfb8-4d9a-8a04-e13d54fc4ac2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb6173a8-677b-47bc-a054-32b62acc455f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6bb07745-23e9-4a51-ba65-053d2b638639",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "c82c1338-911e-449b-80d9-c8d3a0969a9b",
                  "parentUUID": "6bb07745-23e9-4a51-ba65-053d2b638639",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c82c1338-911e-449b-80d9-c8d3a0969a9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "750be2c7-c175-4401-b4af-8040eddbb810",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "e041671d-771c-44f3-8e4e-e1c85ad5d7bc",
                  "parentUUID": "750be2c7-c175-4401-b4af-8040eddbb810",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e041671d-771c-44f3-8e4e-e1c85ad5d7bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72586a5e-ce71-4581-af14-53696be44d82",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "39147935-ea08-4d65-8bf6-d48315afd71a",
                  "parentUUID": "72586a5e-ce71-4581-af14-53696be44d82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39147935-ea08-4d65-8bf6-d48315afd71a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f904438f-7876-4a3c-be54-a7f87d24acf0",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "abeb4166-37b2-49a9-9c7e-0a3d8a22853a",
                  "parentUUID": "f904438f-7876-4a3c-be54-a7f87d24acf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abeb4166-37b2-49a9-9c7e-0a3d8a22853a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0d2764eb-2860-43cf-a18c-9f4f1134d618",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 678,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await import_lib.default.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}import_assert.default.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");import_assert.default.ok(result.pyatv.length>=5,\"result.pyatv has content\");import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "f39c2407-e7d6-4ca4-8454-f00d86f5e92b",
                  "parentUUID": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});import_assert.default.ok(result.pyatv);import_assert.default.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "e7bccaa6-4e94-4eab-86b0-d6960859fcb9",
                  "parentUUID": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())});import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "71126184-3849-4f28-920b-2c4007a9b681",
                  "parentUUID": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({atvremotePath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "0bbfabae-946f-482b-82a4-2f1e9634e708",
                  "parentUUID": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "8f830be0-0dc4-4d24-a0ef-2c0273af3877",
                  "parentUUID": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "590a25ba-431c-4e6b-a9b0-45d89ac7e23f",
                  "parentUUID": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.stderr(\"Hello World!\").code(123).end())});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "30470dbf-414b-464d-bee6-7a72911eca1c",
                  "parentUUID": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "e5388737-a98a-495b-8637-7487ea1c0f07",
                  "parentUUID": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "8f492037-9984-4e79-adb2-8b9a11dc85ea",
                  "parentUUID": "ac3dc88f-ce7f-4ed6-807e-7de83300e02b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f39c2407-e7d6-4ca4-8454-f00d86f5e92b",
                "e7bccaa6-4e94-4eab-86b0-d6960859fcb9",
                "71126184-3849-4f28-920b-2c4007a9b681",
                "0bbfabae-946f-482b-82a4-2f1e9634e708",
                "8f830be0-0dc4-4d24-a0ef-2c0273af3877",
                "590a25ba-431c-4e6b-a9b0-45d89ac7e23f",
                "30470dbf-414b-464d-bee6-7a72911eca1c",
                "e5388737-a98a-495b-8637-7487ea1c0f07",
                "8f492037-9984-4e79-adb2-8b9a11dc85ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 692,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "19b67481-7747-4266-a724-423b2be6e8b7",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5928,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await import_lib.default.check()",
                  "err": {},
                  "uuid": "d9f84208-89f9-4c40-abe2-cc1a23b6bdf7",
                  "parentUUID": "19b67481-7747-4266-a724-423b2be6e8b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "5f1319c4-8791-421d-8f7e-ee3a6202f492",
                  "parentUUID": "19b67481-7747-4266-a724-423b2be6e8b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "ae103675-edb6-4f41-826c-16800005c31a",
                  "parentUUID": "19b67481-7747-4266-a724-423b2be6e8b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "5d25aca1-1405-4dac-86ca-ac0b44cbda89",
                  "parentUUID": "19b67481-7747-4266-a724-423b2be6e8b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9f84208-89f9-4c40-abe2-cc1a23b6bdf7",
                "5f1319c4-8791-421d-8f7e-ee3a6202f492",
                "ae103675-edb6-4f41-826c-16800005c31a",
                "5d25aca1-1405-4dac-86ca-ac0b44cbda89"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5933,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1cc2cd88-e55e-493b-8628-72b25b2285da",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5453,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await import_lib.default.find();import_assert.default.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "3c9a673e-d8ef-4afb-84ce-c4e166f4bd10",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.find({atvscriptPath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "2f616937-7e06-40f8-b178-64b44a39b816",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "769e2406-b899-4702-bce1-9ad398d0c387",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "fd3d6892-45d4-4118-83d5-826ce1020af6",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\",result:\"failure\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "c98fd0be-c405-4758-bfb7-48dec5bfa096",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(JSON.stringify({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "30de251e-27c6-4022-b6a1-0c8b91cbe9dd",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "91a80791-85e1-4332-a08e-0653727afa96",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "7d77ed7c-8346-40e9-9606-f8692bfdfc19",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",identifier:\"xxx\",name:\"Vardagsrum\"}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,void 0);import_assert.default.strictEqual(devices[0].modelName,void 0);import_assert.default.strictEqual(devices[0].os,void 0);import_assert.default.strictEqual(devices[0].version,void 0);import_assert.default.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "890629b3-e693-41af-b4ca-e871b7b6e224",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",device_info:{model:\"Gen4K\",model_str:\"Apple TV 4K\",operating_system:\"TvOS\",version:\"15.5.1\"},identifier:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}]}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,\"Gen4K\");import_assert.default.strictEqual(devices[0].modelName,\"Apple TV 4K\");import_assert.default.strictEqual(devices[0].os,\"TvOS\");import_assert.default.strictEqual(devices[0].version,\"15.5.1\");import_assert.default.deepStrictEqual(devices[0].services,[{port:49152,protocol:import_lib.NodePyATVProtocol.mrp},{port:7e3,protocol:import_lib.NodePyATVProtocol.airplay}])",
                  "err": {},
                  "uuid": "c07ef6e0-7f5d-425f-bed7-dd21b22faf8b",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});import_assert.default.strictEqual(devices.length,4);import_assert.default.strictEqual(devices[0].name,\"Living Room\");import_assert.default.strictEqual(devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(devices[1].name,\"Kitchen\");import_assert.default.strictEqual(devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(devices[2].name,\"Bedroom\");import_assert.default.strictEqual(devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(devices[3].name,\"Basement\");import_assert.default.strictEqual(devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "d2cae8fb-183c-43c3-bcfb-e84c4c12d67b",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);import_assert.default.strictEqual(response.devices.length,4);import_assert.default.strictEqual(response.errors.length,2);import_assert.default.strictEqual(response.devices[0].name,\"Living Room\");import_assert.default.strictEqual(response.devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(response.devices[1].name,\"Kitchen\");import_assert.default.strictEqual(response.devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(response.devices[2].name,\"Bedroom\");import_assert.default.strictEqual(response.devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(response.devices[3].name,\"Basement\");import_assert.default.strictEqual(response.devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");import_assert.default.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");import_assert.default.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "806cbca6-85d1-4ce9-86df-29f2d1732d7d",
                  "parentUUID": "1cc2cd88-e55e-493b-8628-72b25b2285da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c9a673e-d8ef-4afb-84ce-c4e166f4bd10",
                "2f616937-7e06-40f8-b178-64b44a39b816",
                "769e2406-b899-4702-bce1-9ad398d0c387",
                "fd3d6892-45d4-4118-83d5-826ce1020af6",
                "c98fd0be-c405-4758-bfb7-48dec5bfa096",
                "30de251e-27c6-4022-b6a1-0c8b91cbe9dd",
                "91a80791-85e1-4332-a08e-0653727afa96",
                "7d77ed7c-8346-40e9-9606-f8692bfdfc19",
                "890629b3-e693-41af-b4ca-e871b7b6e224",
                "c07ef6e0-7f5d-425f-bed7-dd21b22faf8b",
                "d2cae8fb-183c-43c3-bcfb-e84c4c12d67b",
                "806cbca6-85d1-4ce9-86df-29f2d1732d7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5467,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "183c0d58-f15e-47fb-9d9f-ecd40167bdda",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=import_lib.default.device({host:\"192.168.178.6\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.6\");import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "b4b2b9b9-c043-4ec2-8176-28f25c31149d",
                  "parentUUID": "183c0d58-f15e-47fb-9d9f-ecd40167bdda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4b2b9b9-c043-4ec2-8176-28f25c31149d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e2a63739-702c-4b94-8f1b-847310a08d4b",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await i.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "70707328-4cf5-461b-b6db-4cb982cb340b",
                  "parentUUID": "e2a63739-702c-4b94-8f1b-847310a08d4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70707328-4cf5-461b-b6db-4cb982cb340b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e2c5e26-ba30-4b1e-9a4f-42993c9dddca",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await import_assert.default.rejects(async()=>{await i.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "cbe675e8-2690-4a8b-a192-698aaa638d1c",
                  "parentUUID": "7e2c5e26-ba30-4b1e-9a4f-42993c9dddca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cbe675e8-2690-4a8b-a192-698aaa638d1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89e51b18-41d7-49aa-af34-ef2129f87c23",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvscriptPath:\"test\"});await i.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "48f8510b-c93b-429d-842d-b4367dcfc69d",
                  "parentUUID": "89e51b18-41d7-49aa-af34-ef2129f87c23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48f8510b-c93b-429d-842d-b4367dcfc69d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d0163fd-b06c-41a5-83de-7509fbb76284",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({debug:true});const d=i.device({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "1dfc012d-f786-46fa-ab2b-a55306962137",
                  "parentUUID": "8d0163fd-b06c-41a5-83de-7509fbb76284",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1dfc012d-f786-46fa-ab2b-a55306962137"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVProtocol)",
                  "err": {},
                  "uuid": "f79d365c-a753-40a3-9a8e-4c8cf938eae2",
                  "parentUUID": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVMediaType)",
                  "err": {},
                  "uuid": "b65e2052-611c-4b33-983f-d4be25900cd5",
                  "parentUUID": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "cc2d0e30-7fcf-4694-9ead-81b78fa67bf7",
                  "parentUUID": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "9e342216-1eb1-4122-9aed-d7ba4cdeb037",
                  "parentUUID": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "9a788590-2699-4305-9258-f08e80759cf9",
                  "parentUUID": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "4d2808cc-2443-4855-bb64-70f2bb430cc8",
                  "parentUUID": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVKeys)",
                  "err": {},
                  "uuid": "abc6d60a-4057-4a3f-89a8-3b475bd85239",
                  "parentUUID": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVListenerState)",
                  "err": {},
                  "uuid": "a1aa6212-1851-4233-a4b4-fc91822c08c2",
                  "parentUUID": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVPowerState)",
                  "err": {},
                  "uuid": "90f387c9-209f-41bb-bd0d-9eb6acb621d3",
                  "parentUUID": "c61d55ef-bd53-422c-9ba0-f86ee5aa5f64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f79d365c-a753-40a3-9a8e-4c8cf938eae2",
                "b65e2052-611c-4b33-983f-d4be25900cd5",
                "cc2d0e30-7fcf-4694-9ead-81b78fa67bf7",
                "9e342216-1eb1-4122-9aed-d7ba4cdeb037",
                "9a788590-2699-4305-9258-f08e80759cf9",
                "4d2808cc-2443-4855-bb64-70f2bb430cc8",
                "abc6d60a-4057-4a3f-89a8-3b475bd85239",
                "a1aa6212-1851-4233-a4b4-fc91822c08c2",
                "90f387c9-209f-41bb-bd0d-9eb6acb621d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "09c0e07b-72ff-489c-bfd2-4538a4a62fd3",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a5de55ae-87f5-4164-bc27-8b1bc6c2119b",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=(0,import_tools.addRequestId)();import_assert.default.strictEqual(typeof id,\"string\");(0,import_tools.removeRequestId)(id)",
                  "err": {},
                  "uuid": "dc52d80e-515a-49ec-bdf7-458c8fc7b51e",
                  "parentUUID": "a5de55ae-87f5-4164-bc27-8b1bc6c2119b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.removeRequestId)(\"FOO\")",
                  "err": {},
                  "uuid": "580358e6-1ea6-41e5-bff6-dc233a28984c",
                  "parentUUID": "a5de55ae-87f5-4164-bc27-8b1bc6c2119b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc52d80e-515a-49ec-bdf7-458c8fc7b51e",
                "580358e6-1ea6-41e5-bff6-dc233a28984c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37b4d90d-cd36-4a19-a07c-95c09b562243",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "64052946-46a9-4e57-9e76-3f1a9fec7144",
                  "parentUUID": "37b4d90d-cd36-4a19-a07c-95c09b562243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "926fe0dc-4807-4100-84dc-129cc910faf4",
                  "parentUUID": "37b4d90d-cd36-4a19-a07c-95c09b562243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "902bfdb3-9abb-4364-8e86-e150c15bc839",
                  "parentUUID": "37b4d90d-cd36-4a19-a07c-95c09b562243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "437f82f2-e3e5-4ccd-bca3-e32164a93b4c",
                  "parentUUID": "37b4d90d-cd36-4a19-a07c-95c09b562243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\"),noColors:true})",
                  "err": {},
                  "uuid": "b9830c01-69b7-48a5-bb73-b038ad62883f",
                  "parentUUID": "37b4d90d-cd36-4a19-a07c-95c09b562243",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64052946-46a9-4e57-9e76-3f1a9fec7144",
                "926fe0dc-4807-4100-84dc-129cc910faf4",
                "902bfdb3-9abb-4364-8e86-e150c15bc839",
                "437f82f2-e3e5-4ccd-bca3-e32164a93b4c",
                "b9830c01-69b7-48a5-bb73-b038ad62883f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "019594e7-f720-49cc-865b-a7f1889cea50",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "06488327-c242-42ff-85ca-3f9d13d66992",
                  "parentUUID": "019594e7-f720-49cc-865b-a7f1889cea50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "d3e23f64-621a-4f4b-8513-df92de0acc6b",
                  "parentUUID": "019594e7-f720-49cc-865b-a7f1889cea50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "9c459b9d-338e-45b8-857f-a1e817d1d9f2",
                  "parentUUID": "019594e7-f720-49cc-865b-a7f1889cea50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "0a3a0789-a301-4609-ae86-70f412860f9b",
                  "parentUUID": "019594e7-f720-49cc-865b-a7f1889cea50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06488327-c242-42ff-85ca-3f9d13d66992",
                "d3e23f64-621a-4f4b-8513-df92de0acc6b",
                "9c459b9d-338e-45b8-857f-a1e817d1d9f2",
                "0a3a0789-a301-4609-ae86-70f412860f9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "958875d9-a0a6-4e68-8c2f-f419dd57cf24",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)();import_assert.default.deepEqual(result,[])",
                  "err": {},
                  "uuid": "650631ad-10e4-4ce7-a1a7-690f2b918025",
                  "parentUUID": "958875d9-a0a6-4e68-8c2f-f419dd57cf24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({host:\"192.168.178.2\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "d84aeb2e-c0ab-4227-9141-3e6123ca8163",
                  "parentUUID": "958875d9-a0a6-4e68-8c2f-f419dd57cf24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({airplayCredentials:\"****\",companionCredentials:\"1234\",dmapCredentials:\"****\",hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",mrpCredentials:\"****\",protocol:import_types.NodePyATVProtocol.mrp,raopCredentials:\"::foo:\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "8daeb0a6-13ea-49db-b963-4664850c9ca9",
                  "parentUUID": "958875d9-a0a6-4e68-8c2f-f419dd57cf24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "650631ad-10e4-4ce7-a1a7-690f2b918025",
                "d84aeb2e-c0ab-4227-9141-3e6123ca8163",
                "8daeb0a6-13ea-49db-b963-4664850c9ca9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a261a669-760b-4c84-bfb9-715671218b24",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "4a9fc320-2e64-4528-8819-218ca322874b",
                  "parentUUID": "a261a669-760b-4c84-bfb9-715671218b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.parseState)(null,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "c096f187-eddb-4399-a30c-ef91aa59d99f",
                  "parentUUID": "a261a669-760b-4c84-bfb9-715671218b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,content_identifier:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",episode_number:null,focus_state:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",itunes_store_identifier:null,media_type:\"video\",output_devices:null,position:27,power_state:null,repeat:\"off\",result:\"success\",season_number:null,series_name:null,shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097,volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "456030c5-b6e6-4d02-b6e7-b5e4c352b75b",
                  "parentUUID": "a261a669-760b-4c84-bfb9-715671218b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};import_assert.default.throws(()=>{(0,import_tools.parseState)(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "65f1e05f-26af-485e-b777-679c02aa1416",
                  "parentUUID": "a261a669-760b-4c84-bfb9-715671218b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "323e545a-ec6f-47e7-b1aa-2e2acc348d38",
                  "parentUUID": "a261a669-760b-4c84-bfb9-715671218b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:Infinity,app:0,app_id:891645381647289,artist:90,content_identifier:null,datetime:true,device_state:43,episode_number:null,focus_state:null,genre:Math.PI,hash:1337,itunes_store_identifier:null,media_type:false,output_devices:null,position:\"0:30.123\",power_state:null,repeat:true,result:\"success\",season_number:null,series_name:null,shuffle:false,title:void 0,total_time:\"23min\",volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "31ea6a89-61c4-4775-b728-7a68a34f2f7d",
                  "parentUUID": "a261a669-760b-4c84-bfb9-715671218b24",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={device_state:\"initiating\",media_type:\"3d-experience\",repeat:\"nothing\",shuffle:\"everything\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "43ff21cb-9485-4a1f-8aac-294b857e2da0",
                  "parentUUID": "a261a669-760b-4c84-bfb9-715671218b24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a9fc320-2e64-4528-8819-218ca322874b",
                "c096f187-eddb-4399-a30c-ef91aa59d99f",
                "456030c5-b6e6-4d02-b6e7-b5e4c352b75b",
                "65f1e05f-26af-485e-b777-679c02aa1416",
                "323e545a-ec6f-47e7-b1aa-2e2acc348d38",
                "31ea6a89-61c4-4775-b728-7a68a34f2f7d",
                "43ff21cb-9485-4a1f-8aac-294b857e2da0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}