{
  "stats": {
    "suites": 82,
    "tests": 136,
    "passes": 134,
    "pending": 2,
    "failures": 0,
    "start": "2020-12-15T20:02:28.928Z",
    "end": "2020-12-15T20:02:41.475Z",
    "duration": 12547,
    "testsRegistered": 136,
    "passPercent": 100,
    "pendingPercent": 1.4705882352941175,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bffdad88-8e32-4f3f-ba55-d53ad89e3b1f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d375252e-28f9-447d-9c5d-1327af37d596",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fc6e2c95-bf35-46b6-be6f-01d511bc1c66",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "c555e937-4f5b-4e56-8b16-877f12f7f979",
                  "parentUUID": "fc6e2c95-bf35-46b6-be6f-01d511bc1c66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c555e937-4f5b-4e56-8b16-877f12f7f979"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d473fce-2ba7-495e-90cc-fc0046cf1a6b",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "c7bf0218-702c-4812-89ba-f267f024d537",
                  "parentUUID": "6d473fce-2ba7-495e-90cc-fc0046cf1a6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7bf0218-702c-4812-89ba-f267f024d537"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e2748ec5-15cc-40ef-a21b-f0355eeb4b9f",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "7989b09b-5adb-416a-93bd-fa3c6d491d68",
                  "parentUUID": "e2748ec5-15cc-40ef-a21b-f0355eeb4b9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7989b09b-5adb-416a-93bd-fa3c6d491d68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad7b5428-e4d1-4b57-86d6-2a8342eee7d8",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "3662d9d2-ebb3-4be7-9e99-e614db3ef58c",
                  "parentUUID": "ad7b5428-e4d1-4b57-86d6-2a8342eee7d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3662d9d2-ebb3-4be7-9e99-e614db3ef58c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14630ffe-cbc8-4a91-8cb3-dc013c4ced10",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert_1.default.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "31e1d4ce-8405-46fe-9351-b15d919b1f7b",
                  "parentUUID": "14630ffe-cbc8-4a91-8cb3-dc013c4ced10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31e1d4ce-8405-46fe-9351-b15d919b1f7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "412aae0a-8622-450c-beb2-52c74ba94a27",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0cb94bdc-3383-4223-8fc0-d81da6cba945",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:title', event => {\n            assert_1.default.ok(event instanceof device_event_1.default);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "843cacc9-1cd6-45f0-ac46-7caebf68d6d4",
                  "parentUUID": "0cb94bdc-3383-4223-8fc0-d81da6cba945",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update', event => {\n            assert_1.default.ok(event instanceof device_event_1.default);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "e76ef659-18d8-4a99-8e5a-5b45bd8270dc",
                  "parentUUID": "0cb94bdc-3383-4223-8fc0-d81da6cba945",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const sort = [];\n    yield Promise.race([\n        new Promise(cb => {\n            device.once('update', () => {\n                sort.push('update');\n                cb(undefined);\n            });\n        }),\n        new Promise(cb => {\n            device.once('update:title', () => {\n                sort.push('update:title');\n                cb(undefined);\n            });\n        })\n    ]);\n    assert_1.default.deepStrictEqual(sort, ['update:title', 'update']);\n});",
                  "err": {},
                  "uuid": "9bee89d2-8058-42b3-9197-8aa974a2ee45",
                  "parentUUID": "0cb94bdc-3383-4223-8fc0-d81da6cba945",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let spawnCounter = 0;\n    let eventCounter = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            if (spawnCounter === 0) {\n                cp.onStdIn(() => cp.end());\n            }\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n            spawnCounter++;\n            if (spawnCounter >= 2) {\n                cp.end();\n            }\n        })\n    });\n    const listener = () => {\n        eventCounter++;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    yield device.getState();\n    device.off('update', listener);\n    assert_1.default.strictEqual(spawnCounter, 2);\n    assert_1.default.strictEqual(eventCounter, 1);\n});",
                  "err": {},
                  "uuid": "5f4b0251-895e-449e-a642-9413ae2e19e6",
                  "parentUUID": "0cb94bdc-3383-4223-8fc0-d81da6cba945",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    let callCounter = 0;\n    const error = new Error('This is an error. Be nice.');\n    device.once('error', err => {\n        assert_1.default.strictEqual(err, error);\n        callCounter++;\n    });\n    const listener = () => {\n        throw error;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    device.off('update', listener);\n    assert_1.default.strictEqual(callCounter, 1);\n});",
                  "err": {},
                  "uuid": "df768146-07f7-4a33-b520-8ab874faa6e5",
                  "parentUUID": "0cb94bdc-3383-4223-8fc0-d81da6cba945",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:powerState', event => {\n            assert_1.default.ok(event instanceof device_event_1.default);\n            assert_1.default.strictEqual(event.key, 'powerState');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'off');\n            assert_1.default.strictEqual(event.newValue, types_1.NodePyATVPowerState.off);\n            assert_1.default.strictEqual(event.value, 'off');\n            assert_1.default.strictEqual(event.value, types_1.NodePyATVPowerState.off);\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "251d30b8-8b43-43e0-9010-1a3f19e9d011",
                  "parentUUID": "0cb94bdc-3383-4223-8fc0-d81da6cba945",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "843cacc9-1cd6-45f0-ac46-7caebf68d6d4",
                "e76ef659-18d8-4a99-8e5a-5b45bd8270dc",
                "9bee89d2-8058-42b3-9197-8aa974a2ee45",
                "5f4b0251-895e-449e-a642-9413ae2e19e6",
                "df768146-07f7-4a33-b520-8ab874faa6e5",
                "251d30b8-8b43-43e0-9010-1a3f19e9d011"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9358a355-e901-447a-a6d5-dffd5d32a1bf",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const error = new Error();\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.error(error).end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.strictEqual(err, error);\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "11c12cbe-0a0b-4922-a363-133255292e35",
                  "parentUUID": "9358a355-e901-447a-a6d5-dffd5d32a1bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stderr('Hello World!').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "bb778ce3-2552-4d8a-8d73-e080732ae5e9",
                  "parentUUID": "9358a355-e901-447a-a6d5-dffd5d32a1bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stdout('#').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Unable to parse stdout json: SyntaxError: ' +\n                'Unexpected token # in JSON at position 0'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "b7299086-596b-48c3-9281-7c633343e736",
                  "parentUUID": "9358a355-e901-447a-a6d5-dffd5d32a1bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d842674e-1d5d-45a4-b034-9144ee46db19",
                  "parentUUID": "9358a355-e901-447a-a6d5-dffd5d32a1bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11c12cbe-0a0b-4922-a363-133255292e35",
                "bb778ce3-2552-4d8a-8d73-e080732ae5e9",
                "b7299086-596b-48c3-9281-7c633343e736"
              ],
              "failures": [],
              "pending": [
                "d842674e-1d5d-45a4-b034-9144ee46db19"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "06cc2fb3-c300-4afe-bce1-ff69728695cb",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "eeb32e94-b122-4cf9-aa04-03f6ba214b61",
                  "parentUUID": "06cc2fb3-c300-4afe-bce1-ff69728695cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eeb32e94-b122-4cf9-aa04-03f6ba214b61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f28f572-a6c5-43d9-96a9-d5f6724ddebf",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new device_event_1.default({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert_1.default.strictEqual(e, event);\n    assert_1.default.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "35dd3f60-4611-4d12-85a3-241ad9db44c7",
                  "parentUUID": "7f28f572-a6c5-43d9-96a9-d5f6724ddebf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35dd3f60-4611-4d12-85a3-241ad9db44c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4db2c155-60a0-4b71-9794-b7dce93073f4",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "aaa9fcef-4e6e-4c5a-9449-0590e4b34a31",
                  "parentUUID": "4db2c155-60a0-4b71-9794-b7dce93073f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aaa9fcef-4e6e-4c5a-9449-0590e4b34a31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c843c5d9-6574-44fa-a2e7-22e0ed5fc629",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert_1.default.ok(typeof result, 'number');\nassert_1.default.ok(result >= 10);",
                  "err": {},
                  "uuid": "8c8810b0-0d3d-43a6-8c1a-60d2657e21d8",
                  "parentUUID": "c843c5d9-6574-44fa-a2e7-22e0ed5fc629",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c8810b0-0d3d-43a6-8c1a-60d2657e21d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d77b28a-ede3-48ea-a300-42bd70c20833",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "2b925b64-afe5-492d-ac5f-72003a099464",
                  "parentUUID": "3d77b28a-ede3-48ea-a300-42bd70c20833",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b925b64-afe5-492d-ac5f-72003a099464"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1306c50d-2ec4-44bf-8ef3-f698f3e8b214",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "9148974d-f069-4c69-9808-fa78bab183e3",
                  "parentUUID": "1306c50d-2ec4-44bf-8ef3-f698f3e8b214",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9148974d-f069-4c69-9808-fa78bab183e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "994e8e68-86d5-4f83-9e42-0b862db67460",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "f74b70df-8cbd-4847-b2e4-238672103c1a",
                  "parentUUID": "994e8e68-86d5-4f83-9e42-0b862db67460",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f74b70df-8cbd-4847-b2e4-238672103c1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "543a7ace-15ba-4e22-804b-791ec2b9320c",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "a3a9f32f-d0ef-47b9-a764-efbbb317c321",
                  "parentUUID": "543a7ace-15ba-4e22-804b-791ec2b9320c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3a9f32f-d0ef-47b9-a764-efbbb317c321"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e32757a-0893-4fd5-abae-c16fe84a29cb",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: fake_spawn_1.createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "61aef89f-90a7-4077-8ffa-c42b7a73bc97",
                  "parentUUID": "8e32757a-0893-4fd5-abae-c16fe84a29cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61aef89f-90a7-4077-8ffa-c42b7a73bc97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9cdcfb9-6661-4b1f-bc58-0ae5ad0a4743",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 1);\n    device.removeListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 0);\n});",
                  "err": {},
                  "uuid": "e53445e3-f1eb-4c9b-a79e-e2ce8a21e905",
                  "parentUUID": "d9cdcfb9-6661-4b1f-bc58-0ae5ad0a4743",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e53445e3-f1eb-4c9b-a79e-e2ce8a21e905"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fb9a96df-d3a6-46d1-ae76-80cadfc35d00",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7956f01a-87be-4a35-a573-0196ea4718cf",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "141d31fc-ef73-42ab-af0f-4f7ee5318de1",
                  "parentUUID": "7956f01a-87be-4a35-a573-0196ea4718cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "141d31fc-ef73-42ab-af0f-4f7ee5318de1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa80f751-1581-48a6-98fa-0a2af31152f7",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "566b285c-bcfa-4138-8257-a86b19fa96d0",
                  "parentUUID": "fa80f751-1581-48a6-98fa-0a2af31152f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "566b285c-bcfa-4138-8257-a86b19fa96d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40af85d3-50f8-4007-89e6-c79e452f3265",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert_1.default.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "062f5de8-50bb-46a8-bd53-5226c375b8dd",
                  "parentUUID": "40af85d3-50f8-4007-89e6-c79e452f3265",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "062f5de8-50bb-46a8-bd53-5226c375b8dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3303bb53-cd45-47e0-8b42-35f8ecfb03c9",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.strictEqual(device.protocol, types_1.NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "053ca207-f985-491a-919c-4144f82d51e8",
                  "parentUUID": "3303bb53-cd45-47e0-8b42-35f8ecfb03c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "053ca207-f985-491a-919c-4144f82d51e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5962b7ae-a8be-4564-abe0-d75662383cd0",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "7c66d0f3-c253-49ed-8b6c-ec6664bd48f9",
                  "parentUUID": "5962b7ae-a8be-4564-abe0-d75662383cd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nconst device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "0fdbe0ba-7c05-47a9-b4a0-cc16bcba1abb",
                  "parentUUID": "5962b7ae-a8be-4564-abe0-d75662383cd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "ad80a4b4-a483-462e-9064-1dce4e7a49fc",
                  "parentUUID": "5962b7ae-a8be-4564-abe0-d75662383cd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c66d0f3-c253-49ed-8b6c-ec6664bd48f9",
                "0fdbe0ba-7c05-47a9-b4a0-cc16bcba1abb",
                "ad80a4b4-a483-462e-9064-1dce4e7a49fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71035abb-7414-4859-b2c5-a00f31ae5758",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "1e166da6-2080-4964-8d3c-ff71ebf2c37b",
                  "parentUUID": "71035abb-7414-4859-b2c5-a00f31ae5758",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "080c0e3a-4f21-49fd-93ed-43350491c069",
                  "parentUUID": "71035abb-7414-4859-b2c5-a00f31ae5758",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "e3eab300-2868-4fbb-a9c5-ea01389259ea",
                  "parentUUID": "71035abb-7414-4859-b2c5-a00f31ae5758",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "f5a0c5e3-3f1c-4afc-8cf8-d08b08be736a",
                  "parentUUID": "71035abb-7414-4859-b2c5-a00f31ae5758",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e166da6-2080-4964-8d3c-ff71ebf2c37b",
                "080c0e3a-4f21-49fd-93ed-43350491c069",
                "e3eab300-2868-4fbb-a9c5-ea01389259ea",
                "f5a0c5e3-3f1c-4afc-8cf8-d08b08be736a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f1eb09b-87b1-4eca-ba40-4653ca72f834",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "d52c3ed6-647d-4f17-9fc6-2485b192950a",
                  "parentUUID": "7f1eb09b-87b1-4eca-ba40-4653ca72f834",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n};\nconst deviceA = new device_1.default(config);\nconst deviceB = new device_1.default(deviceA.toJSON());\nassert_1.default.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "4a71de09-820f-47db-a4da-3b52cd052172",
                  "parentUUID": "7f1eb09b-87b1-4eca-ba40-4653ca72f834",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d52c3ed6-647d-4f17-9fc6-2485b192950a",
                "4a71de09-820f-47db-a4da-3b52cd052172"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1b760951-8c94-4a36-a1c5-6a9fba61fea9",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "7e409255-3b7d-477d-a980-d861de9a865c",
                  "parentUUID": "1b760951-8c94-4a36-a1c5-6a9fba61fea9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e409255-3b7d-477d-a980-d861de9a865c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "214c5dec-bb05-497d-b4ff-170659c4a4a3",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "375ff445-2e06-4b42-b6cc-ca36aac40605",
                  "parentUUID": "214c5dec-bb05-497d-b4ff-170659c4a4a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const result = yield device.getState();\n    assert_1.default.deepStrictEqual(result, {\n        dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n        hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n        mediaType: types_1.NodePyATVMediaType.video,\n        deviceState: types_1.NodePyATVDeviceState.playing,\n        title: 'Solo: A Star Wars Story',\n        artist: null,\n        album: null,\n        genre: null,\n        totalTime: 8097,\n        position: 27,\n        shuffle: types_1.NodePyATVShuffleState.off,\n        repeat: types_1.NodePyATVRepeatState.off,\n        app: 'Disney+',\n        appId: 'com.disney.disneyplus',\n        powerState: null\n    });\n});",
                  "err": {},
                  "uuid": "6a19556f-ebec-498d-9376-f44b77757878",
                  "parentUUID": "214c5dec-bb05-497d-b4ff-170659c4a4a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    const secondResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.dateTime, secondResult.dateTime);\n    assert_1.default.strictEqual(executions, 1);\n});",
                  "err": {},
                  "uuid": "8bece953-d1c7-450f-98d4-afc4e7a2a70f",
                  "parentUUID": "214c5dec-bb05-497d-b4ff-170659c4a4a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date(new Date().getTime() - 1000).toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.position, 27);\n    const secondResult = yield device.getState();\n    assert_1.default.ok(secondResult.position);\n    assert_1.default.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\n    assert_1.default.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);\n});",
                  "err": {},
                  "uuid": "26e0ca6e-505c-40a9-8c3d-fb9ec3ea0e75",
                  "parentUUID": "214c5dec-bb05-497d-b4ff-170659c4a4a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a19556f-ebec-498d-9376-f44b77757878",
                "8bece953-d1c7-450f-98d4-afc4e7a2a70f",
                "26e0ca6e-505c-40a9-8c3d-fb9ec3ea0e75"
              ],
              "failures": [],
              "pending": [
                "375ff445-2e06-4b42-b6cc-ca36aac40605"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9d4ead0-ed93-43b4-87b2-ad7c7b6387fa",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                title: 'Solo: A Star Wars Story'\n            });\n        })\n    });\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    device.clearState();\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    assert_1.default.strictEqual(executions, 2);\n});",
                  "err": {},
                  "uuid": "722e77b0-672e-4fd3-8d98-f178e6ae34ab",
                  "parentUUID": "a9d4ead0-ed93-43b4-87b2-ad7c7b6387fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "722e77b0-672e-4fd3-8d98-f178e6ae34ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63c89110-85b2-4c6d-9d8a-a7edcb708508",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON()\n            });\n        })\n    });\n    const result = yield device.getDateTime();\n    assert_1.default.ok(result instanceof Date);\n});",
                  "err": {},
                  "uuid": "c29b5412-849d-48f4-a833-9d15bb895b8e",
                  "parentUUID": "63c89110-85b2-4c6d-9d8a-a7edcb708508",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c29b5412-849d-48f4-a833-9d15bb895b8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b75537d1-1873-48a0-b102-4ff75500c994",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                hash: '12345'\n            });\n        })\n    });\n    const result = yield device.getHash();\n    assert_1.default.strictEqual(result, '12345');\n});",
                  "err": {},
                  "uuid": "86bcf83b-8475-49bd-862f-f749ddbabb92",
                  "parentUUID": "b75537d1-1873-48a0-b102-4ff75500c994",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86bcf83b-8475-49bd-862f-f749ddbabb92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1002a1b5-b1e9-45c7-89cf-6207614eed4a",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                media_type: 'video'\n            });\n        })\n    });\n    const result = yield device.getMediaType();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVMediaType.video);\n    assert_1.default.deepStrictEqual(result, 'video');\n});",
                  "err": {},
                  "uuid": "e4790007-5ea1-4d0d-8605-2258811ef816",
                  "parentUUID": "1002a1b5-b1e9-45c7-89cf-6207614eed4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4790007-5ea1-4d0d-8605-2258811ef816"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63f03e50-c604-4574-9500-c121994fade9",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                device_state: 'seeking'\n            });\n        })\n    });\n    const result = yield device.getDeviceState();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVDeviceState.seeking);\n    assert_1.default.deepStrictEqual(result, 'seeking');\n});",
                  "err": {},
                  "uuid": "c8f3740d-c711-413b-acb0-a4858fe40f19",
                  "parentUUID": "63f03e50-c604-4574-9500-c121994fade9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8f3740d-c711-413b-acb0-a4858fe40f19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18aa9e0d-a598-4acb-8dcc-ee3b8c30f553",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const result = yield device.getTitle();\n    assert_1.default.strictEqual(result, 'My Movie');\n});",
                  "err": {},
                  "uuid": "6f152618-5b3a-4024-966e-9b2eb023da7e",
                  "parentUUID": "18aa9e0d-a598-4acb-8dcc-ee3b8c30f553",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f152618-5b3a-4024-966e-9b2eb023da7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29431e0c-73de-4c9b-ab61-d3da6d21fd7f",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                artist: 'My Artist'\n            });\n        })\n    });\n    const result = yield device.getArtist();\n    assert_1.default.strictEqual(result, 'My Artist');\n});",
                  "err": {},
                  "uuid": "fbbf38fa-bf73-4ced-8dbf-b6cae793b1bd",
                  "parentUUID": "29431e0c-73de-4c9b-ab61-d3da6d21fd7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbbf38fa-bf73-4ced-8dbf-b6cae793b1bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0bda938-aa8f-4834-9c8d-c92cb49dc55d",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                album: 'My ALbum'\n            });\n        })\n    });\n    const result = yield device.getAlbum();\n    assert_1.default.strictEqual(result, 'My ALbum');\n});",
                  "err": {},
                  "uuid": "e507a4c9-be74-4018-8354-6317b1ddc076",
                  "parentUUID": "d0bda938-aa8f-4834-9c8d-c92cb49dc55d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e507a4c9-be74-4018-8354-6317b1ddc076"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f2830cdc-b184-46c3-b302-84506d5ed002",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                genre: 'My Genre'\n            });\n        })\n    });\n    const result = yield device.getGenre();\n    assert_1.default.strictEqual(result, 'My Genre');\n});",
                  "err": {},
                  "uuid": "5bb8eec1-3822-4e19-b17f-845ff601ce86",
                  "parentUUID": "f2830cdc-b184-46c3-b302-84506d5ed002",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bb8eec1-3822-4e19-b17f-845ff601ce86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ced0672d-4f0b-4c8b-bc6a-bbb58aa9fd6f",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                total_time: 45\n            });\n        })\n    });\n    const result = yield device.getTotalTime();\n    assert_1.default.strictEqual(result, 45);\n});",
                  "err": {},
                  "uuid": "cd9700ae-8adf-499e-8916-dd96217bd08d",
                  "parentUUID": "ced0672d-4f0b-4c8b-bc6a-bbb58aa9fd6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd9700ae-8adf-499e-8916-dd96217bd08d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ed6c97a6-2465-4d81-b8b8-7ff68a0abe14",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                position: 30\n            });\n        })\n    });\n    const result = yield device.getPosition();\n    assert_1.default.strictEqual(result, 30);\n});",
                  "err": {},
                  "uuid": "67060b72-58da-423b-9876-c86817a4eaa3",
                  "parentUUID": "ed6c97a6-2465-4d81-b8b8-7ff68a0abe14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67060b72-58da-423b-9876-c86817a4eaa3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0bf73201-1125-43bc-873b-8d4b7ea297b7",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                shuffle: 'songs'\n            });\n        })\n    });\n    const result = yield device.getShuffle();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVShuffleState.songs);\n    assert_1.default.deepStrictEqual(result, 'songs');\n});",
                  "err": {},
                  "uuid": "f4c03e71-9e55-42f6-8928-94419ebe3c3b",
                  "parentUUID": "0bf73201-1125-43bc-873b-8d4b7ea297b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4c03e71-9e55-42f6-8928-94419ebe3c3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1a083bb-8476-411f-ae6c-4656c7bd302f",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                repeat: 'all'\n            });\n        })\n    });\n    const result = yield device.getRepeat();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVRepeatState.all);\n    assert_1.default.deepStrictEqual(result, 'all');\n});",
                  "err": {},
                  "uuid": "b4e4a3d8-c18b-44b8-a4e6-4617001e35e1",
                  "parentUUID": "a1a083bb-8476-411f-ae6c-4656c7bd302f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4e4a3d8-c18b-44b8-a4e6-4617001e35e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52141f6f-6568-4a96-98e0-68d2c2aba01a",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app: 'My App'\n            });\n        })\n    });\n    const result = yield device.getApp();\n    assert_1.default.strictEqual(result, 'My App');\n});",
                  "err": {},
                  "uuid": "eefdc043-8f99-4818-9991-c412f573b74f",
                  "parentUUID": "52141f6f-6568-4a96-98e0-68d2c2aba01a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eefdc043-8f99-4818-9991-c412f573b74f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35b6c23b-41e6-4e63-a3b5-861906944f80",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app_id: 'app.example.com'\n            });\n        })\n    });\n    const result = yield device.getAppId();\n    assert_1.default.strictEqual(result, 'app.example.com');\n});",
                  "err": {},
                  "uuid": "6dc058a9-bbd1-49e5-a7af-40a65d096b9f",
                  "parentUUID": "35b6c23b-41e6-4e63-a3b5-861906944f80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dc058a9-bbd1-49e5-a7af-40a65d096b9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1fdbfd3e-dff8-453b-bf42-2ea51a4267ba",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    yield device.pressKey(types_1.NodePyATVKeys.home);\n});",
                  "err": {},
                  "uuid": "ff6ef5e6-1fe4-40a5-b90d-dfb8e01e0866",
                  "parentUUID": "1fdbfd3e-dff8-453b-bf42-2ea51a4267ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2'\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        yield device.pressKey('foo');\n    }), /Unsupported key value foo/);\n});",
                  "err": {},
                  "uuid": "4d23e3b0-b9a5-419a-b2c2-f5685f59be0d",
                  "parentUUID": "1fdbfd3e-dff8-453b-bf42-2ea51a4267ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"failure\"}');\n        })\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.pressKey(types_1.NodePyATVKeys.home);\n    }), /Unable to parse pyatv response/);\n});",
                  "err": {},
                  "uuid": "bf853314-0101-46dc-a03d-f56cc2e53b14",
                  "parentUUID": "1fdbfd3e-dff8-453b-bf42-2ea51a4267ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff6ef5e6-1fe4-40a5-b90d-dfb8e01e0866",
                "4d23e3b0-b9a5-419a-b2c2-f5685f59be0d",
                "bf853314-0101-46dc-a03d-f56cc2e53b14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5d33dbc-66b3-466f-9685-a68f564528be",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "bf98941f-c2a4-489b-bd78-1149f0c13630",
                  "parentUUID": "f5d33dbc-66b3-466f-9685-a68f564528be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf98941f-c2a4-489b-bd78-1149f0c13630"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14d61367-34ea-4a7a-807f-759b6dad84fa",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "408ab291-6155-4275-99a4-ef2638dcb430",
                  "parentUUID": "14d61367-34ea-4a7a-807f-759b6dad84fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "408ab291-6155-4275-99a4-ef2638dcb430"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "038c7231-4108-45ac-ade6-bd41bda85ee3",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "ffa06555-9af5-4981-9035-5851fd6b7c17",
                  "parentUUID": "038c7231-4108-45ac-ade6-bd41bda85ee3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ffa06555-9af5-4981-9035-5851fd6b7c17"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35c5f192-eae7-43de-adbe-0e55b6221984",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "26bbba73-ac36-4169-83da-641fd601d54f",
                  "parentUUID": "35c5f192-eae7-43de-adbe-0e55b6221984",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26bbba73-ac36-4169-83da-641fd601d54f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43f47099-1955-4fcf-86b5-bd1fd10293a9",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "b4ec0229-515d-415d-9215-e945e28afd60",
                  "parentUUID": "43f47099-1955-4fcf-86b5-bd1fd10293a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4ec0229-515d-415d-9215-e945e28afd60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b5b6c1f-d0b1-4cd3-ba7e-9640ebddf5c8",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "0251e221-5392-4f6c-929b-28db352c68a6",
                  "parentUUID": "2b5b6c1f-d0b1-4cd3-ba7e-9640ebddf5c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0251e221-5392-4f6c-929b-28db352c68a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5253ba22-b005-4cfd-9245-a194f8a0e6b0",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "2e692135-52e3-4698-8eaf-92e98567bc26",
                  "parentUUID": "5253ba22-b005-4cfd-9245-a194f8a0e6b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e692135-52e3-4698-8eaf-92e98567bc26"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74ba2758-0c14-4d1f-bf30-0e76049eecc3",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "96bab44e-23ae-4d0d-b232-7a5ec8577319",
                  "parentUUID": "74ba2758-0c14-4d1f-bf30-0e76049eecc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96bab44e-23ae-4d0d-b232-7a5ec8577319"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f8413ad-f6b0-4da7-bd0c-e00a868cd884",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "45376d7f-18b9-41df-aca8-1257d2a505fe",
                  "parentUUID": "8f8413ad-f6b0-4da7-bd0c-e00a868cd884",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45376d7f-18b9-41df-aca8-1257d2a505fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "593ef9d6-a3a0-490e-8a8c-847d6b8f795a",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "48f9394a-28be-483d-bd05-f829ab024ab7",
                  "parentUUID": "593ef9d6-a3a0-490e-8a8c-847d6b8f795a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48f9394a-28be-483d-bd05-f829ab024ab7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa6518c7-9482-43d2-afea-a4ee3e040ed7",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "273d6710-24fb-4144-a72b-8e8a0510c8d2",
                  "parentUUID": "fa6518c7-9482-43d2-afea-a4ee3e040ed7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "273d6710-24fb-4144-a72b-8e8a0510c8d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "473a2076-1122-49dc-bec8-ef6cd9b29169",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "1b95a9b7-058d-491e-b2d2-cbac2d4bfc06",
                  "parentUUID": "473a2076-1122-49dc-bec8-ef6cd9b29169",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b95a9b7-058d-491e-b2d2-cbac2d4bfc06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ab1da7a-99f8-4cc5-8418-3e689341562f",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "9c344cf4-43f3-425d-8e0b-835ada1fcbc6",
                  "parentUUID": "6ab1da7a-99f8-4cc5-8418-3e689341562f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c344cf4-43f3-425d-8e0b-835ada1fcbc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "239d7c73-6da7-4ccd-bea3-2e30bdd4dce8",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "21210ab9-7ee2-4d2d-9579-168a917c766d",
                  "parentUUID": "239d7c73-6da7-4ccd-bea3-2e30bdd4dce8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21210ab9-7ee2-4d2d-9579-168a917c766d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "163af107-bb78-43a8-8bbc-613da19bc29d",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "5bb4f1e4-250d-4dcd-a958-3a2ffdfb65af",
                  "parentUUID": "163af107-bb78-43a8-8bbc-613da19bc29d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bb4f1e4-250d-4dcd-a958-3a2ffdfb65af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8988cb53-ca74-4127-8d6a-ab7f687c06b7",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "4c7d2cfb-9799-43e6-b8e6-dd0e0f6e977a",
                  "parentUUID": "8988cb53-ca74-4127-8d6a-ab7f687c06b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c7d2cfb-9799-43e6-b8e6-dd0e0f6e977a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cad259db-d94a-4617-bcf5-6caf815acf86",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "54c69732-32b4-4f93-b1be-3c5644646c18",
                  "parentUUID": "cad259db-d94a-4617-bcf5-6caf815acf86",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54c69732-32b4-4f93-b1be-3c5644646c18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9fde34e-9ab7-44f1-97a5-5ba156aecb9c",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "150e3b32-158d-4f7d-9692-6632cd6a8cab",
                  "parentUUID": "d9fde34e-9ab7-44f1-97a5-5ba156aecb9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "150e3b32-158d-4f7d-9692-6632cd6a8cab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "535cf05e-63ba-4d3a-a2d6-181596c973d6",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c57ad67e-044a-4ff1-8df1-953ed868e865",
                  "parentUUID": "535cf05e-63ba-4d3a-a2d6-181596c973d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c57ad67e-044a-4ff1-8df1-953ed868e865"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29a9514e-2a8d-4a7e-b3b0-a5db8944b1ce",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "694c899d-7250-4e92-ba71-b5ea0556866f",
                  "parentUUID": "29a9514e-2a8d-4a7e-b3b0-a5db8944b1ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "694c899d-7250-4e92-ba71-b5ea0556866f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c8945fe-2914-4c05-a2e9-9b4f8f9104fa",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "6fb5cff4-bdc8-4dd5-af55-2c0c07515127",
                  "parentUUID": "7c8945fe-2914-4c05-a2e9-9b4f8f9104fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6fb5cff4-bdc8-4dd5-af55-2c0c07515127"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4e786fc5-2825-4bba-b635-fd28a481f587",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 1155,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(4000);\n    const result = yield index_1.default.version();\n    if (result.pyatv === null) {\n        throw new Error('No version found for pyatv. Is it installed in test environment?');\n    }\n    assert_1.default.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\n    assert_1.default.ok(result.pyatv.length >= 5, 'result.pyatv has content');\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "28812649-dd8d-407d-835f-a0165b254e0f",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.code(1);\n            cp.end('atvremote 0.7.4');\n        })\n    });\n    assert_1.default.ok(result.pyatv);\n    assert_1.default.strictEqual(result.pyatv, '0.7.4');\n});",
                  "err": {},
                  "uuid": "dfcd24a3-7e2f-4c0b-82b2-9b035a4d1e1c",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        noColors: true,\n        spawn: fake_spawn_1.createFakeSpawn(cp => cp.code(1).end())\n    });\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "061a5226-c30e-45ec-b408-da9ee1ff3cec",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        atvremotePath: '/foo/bar',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "79c8a843-78d0-4f28-a8d1-43e0439c8cba",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: true,\n        spawn: fake_spawn_1.createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "d8a97e9d-4a40-49cb-92e3-7e73d1c24397",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: () => { },\n        noColors: true,\n        spawn: fake_spawn_1.createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "a022abf6-b94f-4642-b1b4-5cb8b287bb5b",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "4d22f5b6-987f-434a-9413-e374f2784b45",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "bbcd605e-1463-4615-8d73-98ca00577bbc",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stdout('atvremote 42').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "f3fa8211-46c3-46aa-88d5-97668c11dab5",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on empty module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on empty module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = {};\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "2d866d83-d7e0-4dbd-a263-9778267351d9",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = { version: 42 };\n    const result = yield index_1.default.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "ebf7aad5-b8a6-48b6-83fd-3aea012e23fd",
                  "parentUUID": "9c82c1d8-54bb-482c-973e-8aff3fbabfa5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28812649-dd8d-407d-835f-a0165b254e0f",
                "dfcd24a3-7e2f-4c0b-82b2-9b035a4d1e1c",
                "061a5226-c30e-45ec-b408-da9ee1ff3cec",
                "79c8a843-78d0-4f28-a8d1-43e0439c8cba",
                "d8a97e9d-4a40-49cb-92e3-7e73d1c24397",
                "a022abf6-b94f-4642-b1b4-5cb8b287bb5b",
                "4d22f5b6-987f-434a-9413-e374f2784b45",
                "bbcd605e-1463-4615-8d73-98ca00577bbc",
                "f3fa8211-46c3-46aa-88d5-97668c11dab5",
                "2d866d83-d7e0-4dbd-a263-9778267351d9",
                "ebf7aad5-b8a6-48b6-83fd-3aea012e23fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1168,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5d0c8ce7-5840-4fa2-88bb-f4987fd4415f",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5777,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(12000);\n    yield index_1.default.check();\n});",
                  "err": {},
                  "uuid": "b97e00aa-0a7d-473b-97fd-f3c44e4f61a7",
                  "parentUUID": "5d0c8ce7-5840-4fa2-88bb-f4987fd4415f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "583087d8-5533-4875-b929-2b976528cd9f",
                  "parentUUID": "5d0c8ce7-5840-4fa2-88bb-f4987fd4415f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stdout('atvremote 0.5.1').code(1).end();\n            })\n        });\n    }), /Found pyatv, but unforunately it's too old. Please update pyatv./);\n});",
                  "err": {},
                  "uuid": "32758035-7074-498f-b7bf-c029d92e8300",
                  "parentUUID": "5d0c8ce7-5840-4fa2-88bb-f4987fd4415f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let i = 0;\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                if (i === 0) {\n                    cp.stdout('atvremote 0.7.0').code(1).end();\n                    i++;\n                }\n                else {\n                    cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n                }\n            })\n        });\n    }), /Unable to scan for devices/);\n});",
                  "err": {},
                  "uuid": "bd8ac5cd-93c3-4368-85de-0388b6700013",
                  "parentUUID": "5d0c8ce7-5840-4fa2-88bb-f4987fd4415f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b97e00aa-0a7d-473b-97fd-f3c44e4f61a7",
                "583087d8-5533-4875-b929-2b976528cd9f",
                "32758035-7074-498f-b7bf-c029d92e8300",
                "bd8ac5cd-93c3-4368-85de-0388b6700013"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5783,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "747ba701-408a-43d1-8bc7-322b5ae5ac1b",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5397,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(8000);\n    const result = yield index_1.default.find();\n    assert_1.default.ok(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "db15fe7c-e615-4f95-8894-3420357cb23e",
                  "parentUUID": "747ba701-408a-43d1-8bc7-322b5ae5ac1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.find({\n        atvscriptPath: '/foo/bar',\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "7b096f9b-5c1d-4cf0-bd6d-055f514ce706",
                  "parentUUID": "747ba701-408a-43d1-8bc7-322b5ae5ac1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stderr('Hello World!').code(1).end();\n            })\n        });\n    }), /Unable to execute request/);\n});",
                  "err": {},
                  "uuid": "0df4df9f-68df-4cb0-a107-d2697a4704e6",
                  "parentUUID": "747ba701-408a-43d1-8bc7-322b5ae5ac1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.error(new Error('Hello world!')).code(1).end();\n            })\n        });\n    }), /Hello world!/);\n});",
                  "err": {},
                  "uuid": "c0351e8a-f0db-4961-83e7-46083c8cbfa6",
                  "parentUUID": "747ba701-408a-43d1-8bc7-322b5ae5ac1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stdout(JSON.stringify({\n                    'result': 'success',\n                    'datetime': '2020-11-06T20:47:30.840022+01:00',\n                    'devices': []\n                }).substr(1)).end();\n            })\n        });\n    }), /Unable to parse result/);\n});",
                  "err": {},
                  "uuid": "04e9b75a-559a-44b4-9bf9-9b4267a30450",
                  "parentUUID": "747ba701-408a-43d1-8bc7-322b5ae5ac1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'error'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "d917a55a-1ecb-49ca-a7ac-617cb22e874f",
                  "parentUUID": "747ba701-408a-43d1-8bc7-322b5ae5ac1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'success'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "18d47d26-aa48-4c77-abf6-5bc65bd3bbee",
                  "parentUUID": "747ba701-408a-43d1-8bc7-322b5ae5ac1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db15fe7c-e615-4f95-8894-3420357cb23e",
                "7b096f9b-5c1d-4cf0-bd6d-055f514ce706",
                "0df4df9f-68df-4cb0-a107-d2697a4704e6",
                "c0351e8a-f0db-4961-83e7-46083c8cbfa6",
                "04e9b75a-559a-44b4-9bf9-9b4267a30450",
                "d917a55a-1ecb-49ca-a7ac-617cb22e874f",
                "18d47d26-aa48-4c77-abf6-5bc65bd3bbee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5405,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c68ba8b2-ad35-4d54-b331-fc72de6bd179",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = index_1.default.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert_1.default.strictEqual(device.host, '192.168.178.6');\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "0c37c760-aa9c-4fdc-a71e-e51aa4b14f9a",
                  "parentUUID": "c68ba8b2-ad35-4d54-b331-fc72de6bd179",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c37c760-aa9c-4fdc-a71e-e51aa4b14f9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2a0ebcbd-4a66-4841-a805-ddb4ecfbf677",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield i.version({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "0696efe9-3581-4349-a93d-b76c42334465",
                  "parentUUID": "2a0ebcbd-4a66-4841-a805-ddb4ecfbf677",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0696efe9-3581-4349-a93d-b76c42334465"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7113394-ca9b-424a-b6f1-62a0640ee27b",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield i.check({\n            spawn: fake_spawn_1.createFakeSpawn(cp => {\n                assert_1.default.strictEqual(cp.cmd(), 'test');\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "3f2614b1-fffb-40d0-bc6f-bb4f65720ffa",
                  "parentUUID": "b7113394-ca9b-424a-b6f1-62a0640ee27b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f2614b1-fffb-40d0-bc6f-bb4f65720ffa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "510ba821-54d0-41d7-90f6-34dc9b74a07f",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvscriptPath: 'test' });\n    yield i.find({\n        spawn: fake_spawn_1.createFakeSpawn(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "bdb25fb9-54c0-4bae-a9b1-a9b350f4ec3e",
                  "parentUUID": "510ba821-54d0-41d7-90f6-34dc9b74a07f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdb25fb9-54c0-4bae-a9b1-a9b350f4ec3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7abb29c5-7a6f-4341-86ee-3661ecaa37a8",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ debug: true });\n    const d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\n    assert_1.default.deepStrictEqual(d.debug, true);\n});",
                  "err": {},
                  "uuid": "e7a943ec-36fd-4ffb-89ce-bb7a942a3915",
                  "parentUUID": "7abb29c5-7a6f-4341-86ee-3661ecaa37a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7a943ec-36fd-4ffb-89ce-bb7a942a3915"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b050d4b1-1a81-45ac-840b-4e08c6d71422",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVProtocol);",
                  "err": {},
                  "uuid": "11e7bd5e-645b-41b8-a079-f9651debb4c9",
                  "parentUUID": "b050d4b1-1a81-45ac-840b-4e08c6d71422",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVMediaType);",
                  "err": {},
                  "uuid": "e8c3bd03-fef8-4e2f-b821-1ce773b08131",
                  "parentUUID": "b050d4b1-1a81-45ac-840b-4e08c6d71422",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "dd893396-bc7f-42f0-a963-e7dea76c8c67",
                  "parentUUID": "b050d4b1-1a81-45ac-840b-4e08c6d71422",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "000e74db-819f-4430-a998-a50a2fc0670b",
                  "parentUUID": "b050d4b1-1a81-45ac-840b-4e08c6d71422",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "32c9ad57-6888-4081-bf40-cb8d863faf8e",
                  "parentUUID": "b050d4b1-1a81-45ac-840b-4e08c6d71422",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "cf1ba889-04c6-49e1-bf91-c0ef2e8a9826",
                  "parentUUID": "b050d4b1-1a81-45ac-840b-4e08c6d71422",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVKeys);",
                  "err": {},
                  "uuid": "f9122c75-1541-47c6-a6c2-c6d2f271372e",
                  "parentUUID": "b050d4b1-1a81-45ac-840b-4e08c6d71422",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11e7bd5e-645b-41b8-a079-f9651debb4c9",
                "e8c3bd03-fef8-4e2f-b821-1ce773b08131",
                "dd893396-bc7f-42f0-a963-e7dea76c8c67",
                "000e74db-819f-4430-a998-a50a2fc0670b",
                "32c9ad57-6888-4081-bf40-cb8d863faf8e",
                "cf1ba889-04c6-49e1-bf91-c0ef2e8a9826",
                "f9122c75-1541-47c6-a6c2-c6d2f271372e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1577df09-b2e3-425c-b84f-ae1c3d1b150a",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5c863c44-8827-4118-8842-11b10f90a56f",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = tools_1.addRequestId();\nassert_1.default.strictEqual(typeof id, 'string');\ntools_1.removeRequestId(id);",
                  "err": {},
                  "uuid": "7b841b35-f11d-4442-a1f7-b9dba5e48342",
                  "parentUUID": "5c863c44-8827-4118-8842-11b10f90a56f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.removeRequestId('FOO');",
                  "err": {},
                  "uuid": "ab09845a-bc09-4671-bf5c-6aca0154c34c",
                  "parentUUID": "5c863c44-8827-4118-8842-11b10f90a56f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b841b35-f11d-4442-a1f7-b9dba5e48342",
                "ab09845a-bc09-4671-bf5c-6aca0154c34c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3082998c-0c5f-4825-8d51-71623fe7151e",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "66bc483f-71f3-4036-a207-9e706228d5cb",
                  "parentUUID": "3082998c-0c5f-4825-8d51-71623fe7151e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "46d48448-676c-44ff-b024-3fae463d47e9",
                  "parentUUID": "3082998c-0c5f-4825-8d51-71623fe7151e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "4e7fc47b-e856-40b2-9342-153421ccceb1",
                  "parentUUID": "3082998c-0c5f-4825-8d51-71623fe7151e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "0f61b27e-22ff-4bfe-8605-533006658345",
                  "parentUUID": "3082998c-0c5f-4825-8d51-71623fe7151e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "tools_1.debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "5339beff-8492-4ce0-89ba-ae3aa9e3d96e",
                  "parentUUID": "3082998c-0c5f-4825-8d51-71623fe7151e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66bc483f-71f3-4036-a207-9e706228d5cb",
                "46d48448-676c-44ff-b024-3fae463d47e9",
                "4e7fc47b-e856-40b2-9342-153421ccceb1",
                "0f61b27e-22ff-4bfe-8605-533006658345",
                "5339beff-8492-4ce0-89ba-ae3aa9e3d96e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7461e17b-6164-4cbc-a7fb-7f971e5414b1",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = tools_1.getExecutable(types_1.NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "c497f8c8-18c8-4253-8a4c-950e1b5823a2",
                  "parentUUID": "7461e17b-6164-4cbc-a7fb-7f971e5414b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = tools_1.getExecutable(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "c9371f4b-142d-49f3-b0f9-374cba91d1dd",
                  "parentUUID": "7461e17b-6164-4cbc-a7fb-7f971e5414b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = tools_1.getExecutable(types_1.NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "ffaaead4-7dc6-4572-9165-b18fb902afbf",
                  "parentUUID": "7461e17b-6164-4cbc-a7fb-7f971e5414b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = tools_1.getExecutable(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "436ddbb4-302a-4e69-861a-b87fed083d6a",
                  "parentUUID": "7461e17b-6164-4cbc-a7fb-7f971e5414b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c497f8c8-18c8-4253-8a4c-950e1b5823a2",
                "c9371f4b-142d-49f3-b0f9-374cba91d1dd",
                "ffaaead4-7dc6-4572-9165-b18fb902afbf",
                "436ddbb4-302a-4e69-861a-b87fed083d6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc1dcd9c-432a-4cb0-83c3-8779709eab94",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield tools_1.getParamters();\n    assert_1.default.deepEqual(result, []);\n});",
                  "err": {},
                  "uuid": "d7106249-b260-4d83-9420-ba3b9670fc07",
                  "parentUUID": "dc1dcd9c-432a-4cb0-83c3-8779709eab94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield tools_1.getParamters({\n        host: '192.168.178.2'\n    });\n    assert_1.default.deepEqual(result, ['-s', '192.168.178.2']);\n});",
                  "err": {},
                  "uuid": "243b5a2a-ce2d-43f3-90ca-4a9ebe293110",
                  "parentUUID": "dc1dcd9c-432a-4cb0-83c3-8779709eab94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield tools_1.getParamters({\n        hosts: ['192.168.178.2', '192.168.178.3'],\n        id: '****',\n        protocol: types_1.NodePyATVProtocol.mrp,\n        dmapCredentials: '****',\n        mrpCredentials: '****',\n        airplayCredentials: '****'\n    });\n    assert_1.default.deepEqual(result, [\n        '-s', '192.168.178.2,192.168.178.3',\n        '-i', '****',\n        '--protocol', 'mrp',\n        '--dmap-credentials', '****',\n        '--mrp-credentials', '****',\n        '--airplay-credentials', '****'\n    ]);\n});",
                  "err": {},
                  "uuid": "6b8a8c98-814d-4d3a-a183-d1aabdb2819d",
                  "parentUUID": "dc1dcd9c-432a-4cb0-83c3-8779709eab94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7106249-b260-4d83-9420-ba3b9670fc07",
                "243b5a2a-ce2d-43f3-90ca-4a9ebe293110",
                "6b8a8c98-814d-4d3a-a183-d1aabdb2819d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "adc01512-567b-4bee-89e8-c60ebf755d03",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "83dcf33c-78b0-42d5-bd7b-9eef5a8f30e1",
                  "parentUUID": "adc01512-567b-4bee-89e8-c60ebf755d03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = tools_1.parseState(null, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "bf38e876-b23b-4c5a-9828-7dbc1b0b410d",
                  "parentUUID": "adc01512-567b-4bee-89e8-c60ebf755d03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    powerState: null\n};\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: types_1.NodePyATVMediaType.video,\n    deviceState: types_1.NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: types_1.NodePyATVShuffleState.off,\n    repeat: types_1.NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null\n});",
                  "err": {},
                  "uuid": "0f5c3912-fde9-41d1-9e22-0945cc6b911f",
                  "parentUUID": "adc01512-567b-4bee-89e8-c60ebf755d03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "61d959d4-a9ad-4507-a370-1ac27545d3c4",
                  "parentUUID": "adc01512-567b-4bee-89e8-c60ebf755d03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    powerState: null\n};\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "c63a0203-3e82-4d6a-bf52-2526238be7d5",
                  "parentUUID": "adc01512-567b-4bee-89e8-c60ebf755d03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = tools_1.parseState(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "5b157726-2350-423f-b6ef-be2a4bd86ae5",
                  "parentUUID": "adc01512-567b-4bee-89e8-c60ebf755d03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83dcf33c-78b0-42d5-bd7b-9eef5a8f30e1",
                "bf38e876-b23b-4c5a-9828-7dbc1b0b410d",
                "0f5c3912-fde9-41d1-9e22-0945cc6b911f",
                "61d959d4-a9ad-4507-a370-1ac27545d3c4",
                "c63a0203-3e82-4d6a-bf52-2526238be7d5",
                "5b157726-2350-423f-b6ef-be2a4bd86ae5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}