{
  "stats": {
    "suites": 84,
    "tests": 143,
    "passes": 141,
    "pending": 2,
    "failures": 0,
    "start": "2022-06-09T16:31:31.193Z",
    "end": "2022-06-09T16:31:43.294Z",
    "duration": 12101,
    "testsRegistered": 143,
    "passPercent": 100,
    "pendingPercent": 1.3986013986013985,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e6f3b4d9-7215-4dec-95de-8498e285244a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "72c1224f-e750-4653-adba-aa7a06e0b9e9",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0fc60f5f-f806-4902-abb6-dda300cc439b",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "6792a63a-d910-49d8-8ff8-e9e65d87b294",
                  "parentUUID": "0fc60f5f-f806-4902-abb6-dda300cc439b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6792a63a-d910-49d8-8ff8-e9e65d87b294"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7499a17e-6157-487d-8290-b84a93df365b",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "cba7808e-2d2e-4d39-b511-960d680a7525",
                  "parentUUID": "7499a17e-6157-487d-8290-b84a93df365b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cba7808e-2d2e-4d39-b511-960d680a7525"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5efa1633-b518-41f6-b13f-00763e9f659e",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "9d1d1c20-6ff5-4de5-9695-a4eb7f764a1b",
                  "parentUUID": "5efa1633-b518-41f6-b13f-00763e9f659e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d1d1c20-6ff5-4de5-9695-a4eb7f764a1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "552e3f87-0f05-4f86-883d-6a3612b8e563",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "e3728e59-736d-49c5-aa33-9b960fcb06e6",
                  "parentUUID": "552e3f87-0f05-4f86-883d-6a3612b8e563",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3728e59-736d-49c5-aa33-9b960fcb06e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "918f61d3-a266-4972-89fd-8de1b30a99d6",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert_1.default.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "7c9018a6-2879-40e6-a6af-0548d26dd15a",
                  "parentUUID": "918f61d3-a266-4972-89fd-8de1b30a99d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c9018a6-2879-40e6-a6af-0548d26dd15a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4941b98a-99cd-4f87-bfac-a227ac563785",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4d72636a-ab79-4915-8c97-d377285cf0fa",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:title', event => {\n            assert_1.default.ok(event instanceof lib_1.NodePyATVDeviceEvent);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "6cedef4b-7b4f-4820-bb0b-b3c092b9af7e",
                  "parentUUID": "4d72636a-ab79-4915-8c97-d377285cf0fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update', event => {\n            assert_1.default.ok(event instanceof lib_1.NodePyATVDeviceEvent);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "76edc7e4-6203-4924-84e8-166abf9b5d59",
                  "parentUUID": "4d72636a-ab79-4915-8c97-d377285cf0fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const sort = [];\n    yield Promise.race([\n        new Promise(cb => {\n            device.once('update', () => {\n                sort.push('update');\n                cb(undefined);\n            });\n        }),\n        new Promise(cb => {\n            device.once('update:title', () => {\n                sort.push('update:title');\n                cb(undefined);\n            });\n        })\n    ]);\n    assert_1.default.deepStrictEqual(sort, ['update:title', 'update']);\n});",
                  "err": {},
                  "uuid": "af7e9ee1-1721-4f6f-b1bd-e976e6f1f983",
                  "parentUUID": "4d72636a-ab79-4915-8c97-d377285cf0fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('error', error => {\n            assert_1.default.ok(error instanceof Error);\n            assert_1.default.ok(error.toString().includes('invalid credentials: 321'));\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "7e128190-9025-4aef-a832-128e2c002167",
                  "parentUUID": "4d72636a-ab79-4915-8c97-d377285cf0fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let spawnCounter = 0;\n    let eventCounter = 0;\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            if (spawnCounter === 0) {\n                cp.onStdIn(() => cp.end());\n            }\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n            spawnCounter++;\n            if (spawnCounter >= 2) {\n                cp.end();\n            }\n        })\n    });\n    const listener = () => {\n        eventCounter++;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    yield device.getState();\n    device.off('update', listener);\n    assert_1.default.strictEqual(spawnCounter, 2);\n    assert_1.default.strictEqual(eventCounter, 1);\n});",
                  "err": {},
                  "uuid": "575441a6-bb3e-47d2-a081-aefd7e98bde5",
                  "parentUUID": "4d72636a-ab79-4915-8c97-d377285cf0fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    let callCounter = 0;\n    const error = new Error('This is an error. Be nice.');\n    device.once('error', err => {\n        assert_1.default.strictEqual(err, error);\n        callCounter++;\n    });\n    const listener = () => {\n        throw error;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    device.off('update', listener);\n    assert_1.default.strictEqual(callCounter, 1);\n});",
                  "err": {},
                  "uuid": "c0bc635c-5e19-4fee-b141-a18ff62a3fec",
                  "parentUUID": "4d72636a-ab79-4915-8c97-d377285cf0fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:powerState', event => {\n            assert_1.default.ok(event instanceof lib_1.NodePyATVDeviceEvent);\n            assert_1.default.strictEqual(event.key, 'powerState');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'off');\n            assert_1.default.strictEqual(event.newValue, lib_1.NodePyATVPowerState.off);\n            assert_1.default.strictEqual(event.value, 'off');\n            assert_1.default.strictEqual(event.value, lib_1.NodePyATVPowerState.off);\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "3febe3af-8c7c-475f-a2b7-47c6d227c837",
                  "parentUUID": "4d72636a-ab79-4915-8c97-d377285cf0fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6cedef4b-7b4f-4820-bb0b-b3c092b9af7e",
                "76edc7e4-6203-4924-84e8-166abf9b5d59",
                "af7e9ee1-1721-4f6f-b1bd-e976e6f1f983",
                "7e128190-9025-4aef-a832-128e2c002167",
                "575441a6-bb3e-47d2-a081-aefd7e98bde5",
                "c0bc635c-5e19-4fee-b141-a18ff62a3fec",
                "3febe3af-8c7c-475f-a2b7-47c6d227c837"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e4c4241-4e55-4e0c-931d-727f190c0048",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const error = new Error();\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.error(error).end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.strictEqual(err, error);\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "3811cc6b-74fc-4275-8616-f80d7e24851f",
                  "parentUUID": "9e4c4241-4e55-4e0c-931d-727f190c0048",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stderr('Hello World!').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "5fa741b1-0ddc-4f25-9070-a756d013bca5",
                  "parentUUID": "9e4c4241-4e55-4e0c-931d-727f190c0048",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('#').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Unable to parse stdout json: SyntaxError: ' +\n                'Unexpected token # in JSON at position 0'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "5b007050-e5f4-4521-9e39-021ff331a969",
                  "parentUUID": "9e4c4241-4e55-4e0c-931d-727f190c0048",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "18ac27d9-a942-4c57-ae51-b2e6c8e25010",
                  "parentUUID": "9e4c4241-4e55-4e0c-931d-727f190c0048",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3811cc6b-74fc-4275-8616-f80d7e24851f",
                "5fa741b1-0ddc-4f25-9070-a756d013bca5",
                "5b007050-e5f4-4521-9e39-021ff331a969"
              ],
              "failures": [],
              "pending": [
                "18ac27d9-a942-4c57-ae51-b2e6c8e25010"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fde1a389-c6e2-4aaa-8897-f6b8530319d6",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "7cc20d0c-19aa-437a-ab43-35ad2fde50a8",
                  "parentUUID": "fde1a389-c6e2-4aaa-8897-f6b8530319d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7cc20d0c-19aa-437a-ab43-35ad2fde50a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a7f64a6-d247-4dbb-b07a-ec10f7d77864",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new lib_1.NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert_1.default.strictEqual(e, event);\n    assert_1.default.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "467af1e1-a2ed-4bc0-98a4-06442fae866d",
                  "parentUUID": "9a7f64a6-d247-4dbb-b07a-ec10f7d77864",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "467af1e1-a2ed-4bc0-98a4-06442fae866d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9166a7a-7c8a-4384-b092-8c7f7d04fe47",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "47311782-0d01-4ef5-aee0-0ab9b11adea3",
                  "parentUUID": "a9166a7a-7c8a-4384-b092-8c7f7d04fe47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47311782-0d01-4ef5-aee0-0ab9b11adea3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c29c18c-bb03-422c-aab9-3bc54891c517",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert_1.default.ok(typeof result, 'number');\nassert_1.default.ok(result >= 10);",
                  "err": {},
                  "uuid": "0b53621e-5744-4c29-bd41-c9fe4b952166",
                  "parentUUID": "0c29c18c-bb03-422c-aab9-3bc54891c517",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b53621e-5744-4c29-bd41-c9fe4b952166"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac9937a7-a695-462a-aa4b-ac3dd2c55634",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "516fe96e-b0cd-4ed2-a2ea-cfee040b9b36",
                  "parentUUID": "ac9937a7-a695-462a-aa4b-ac3dd2c55634",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "516fe96e-b0cd-4ed2-a2ea-cfee040b9b36"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6b9284df-2bb0-4710-aa17-817e0e7206f4",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "7296e013-0b46-4689-852d-4fe913cb621d",
                  "parentUUID": "6b9284df-2bb0-4710-aa17-817e0e7206f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7296e013-0b46-4689-852d-4fe913cb621d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb6f5e63-e803-4ab6-b776-bbcf4055dfa5",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "74a08ac0-40f3-4cf2-b52e-315d774614f2",
                  "parentUUID": "bb6f5e63-e803-4ab6-b776-bbcf4055dfa5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74a08ac0-40f3-4cf2-b52e-315d774614f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3da0c5bc-20a3-40f4-b2c3-31f1db677740",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "8bce9b29-4767-404e-bf66-addf43f2bd13",
                  "parentUUID": "3da0c5bc-20a3-40f4-b2c3-31f1db677740",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bce9b29-4767-404e-bf66-addf43f2bd13"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "827c91a4-62ac-40a7-a102-b0e0c0e23155",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "986678a1-b8c7-4fac-a050-92c1be370d49",
                  "parentUUID": "827c91a4-62ac-40a7-a102-b0e0c0e23155",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "986678a1-b8c7-4fac-a050-92c1be370d49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5b83c9cf-cadc-4479-bc22-6aaadff71bbc",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 1);\n    device.removeListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 0);\n});",
                  "err": {},
                  "uuid": "3da23de6-1b29-4473-befc-d89233bf937d",
                  "parentUUID": "5b83c9cf-cadc-4479-bc22-6aaadff71bbc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3da23de6-1b29-4473-befc-d89233bf937d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b596869a-0e30-4bb6-9fb0-8c4098995d1e",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1b87a02b-2453-4e0f-a223-a716d0e53a56",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "76ac4cdd-7e9c-4eb7-833a-71061a75bbd3",
                  "parentUUID": "1b87a02b-2453-4e0f-a223-a716d0e53a56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76ac4cdd-7e9c-4eb7-833a-71061a75bbd3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9676d4d-281a-41bf-be8d-f2ccdc67f96b",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "f74e9a82-82b3-4fc3-ae30-baf22bc263f0",
                  "parentUUID": "e9676d4d-281a-41bf-be8d-f2ccdc67f96b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f74e9a82-82b3-4fc3-ae30-baf22bc263f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fdadd8d7-915d-49ff-b9fb-cc205eb62a52",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert_1.default.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "956b2fec-e9f1-49e6-9d4d-5fc859aeaa75",
                  "parentUUID": "fdadd8d7-915d-49ff-b9fb-cc205eb62a52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "956b2fec-e9f1-49e6-9d4d-5fc859aeaa75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "152ffa81-1357-4d5a-afb9-a73cbc11e2b0",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.strictEqual(device.protocol, types_1.NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "d9b43955-6188-4240-9f38-8db6c07e6f01",
                  "parentUUID": "152ffa81-1357-4d5a-afb9-a73cbc11e2b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9b43955-6188-4240-9f38-8db6c07e6f01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e515fdf7-c6df-4ec8-88e5-44316c493c19",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "9e688855-4aaf-4c10-8fc2-b47c95ff2c6b",
                  "parentUUID": "e515fdf7-c6df-4ec8-88e5-44316c493c19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nconst device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "8b0e204d-90d0-447e-9d4f-c3ca336ded1f",
                  "parentUUID": "e515fdf7-c6df-4ec8-88e5-44316c493c19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "2d622ab3-c76b-419a-9fb8-82b393af2b71",
                  "parentUUID": "e515fdf7-c6df-4ec8-88e5-44316c493c19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e688855-4aaf-4c10-8fc2-b47c95ff2c6b",
                "8b0e204d-90d0-447e-9d4f-c3ca336ded1f",
                "2d622ab3-c76b-419a-9fb8-82b393af2b71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "903dbb90-374e-4c96-a60f-95198d2418b6",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "453fd6f3-5f55-4110-bdf0-bc854cf1f73a",
                  "parentUUID": "903dbb90-374e-4c96-a60f-95198d2418b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "a030d1b6-4b85-437a-a67b-3868f27f0be1",
                  "parentUUID": "903dbb90-374e-4c96-a60f-95198d2418b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "cbe1eb94-5607-4df5-9101-dc4ec8e861bd",
                  "parentUUID": "903dbb90-374e-4c96-a60f-95198d2418b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "b3131ce5-a3c5-470c-b377-d85fa60e56f2",
                  "parentUUID": "903dbb90-374e-4c96-a60f-95198d2418b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "453fd6f3-5f55-4110-bdf0-bc854cf1f73a",
                "a030d1b6-4b85-437a-a67b-3868f27f0be1",
                "cbe1eb94-5607-4df5-9101-dc4ec8e861bd",
                "b3131ce5-a3c5-470c-b377-d85fa60e56f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7b7b3494-be46-4ecb-8f5c-f77bbf6f13fe",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "886a8362-3f70-468b-963e-a313f0511c81",
                  "parentUUID": "7b7b3494-be46-4ecb-8f5c-f77bbf6f13fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n};\nconst deviceA = new device_1.default(config);\nconst deviceB = new device_1.default(deviceA.toJSON());\nassert_1.default.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "0a8e5c28-241b-4819-9913-b93270fea488",
                  "parentUUID": "7b7b3494-be46-4ecb-8f5c-f77bbf6f13fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "886a8362-3f70-468b-963e-a313f0511c81",
                "0a8e5c28-241b-4819-9913-b93270fea488"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b746418-b1ef-4985-9eaa-a68e4c2df2f7",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "5ebf4cad-bc60-4961-80d5-f6672af1789e",
                  "parentUUID": "4b746418-b1ef-4985-9eaa-a68e4c2df2f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ebf4cad-bc60-4961-80d5-f6672af1789e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e9aea33-9d23-418c-8177-9137805b04a2",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "8ec47d0c-4455-4193-9e95-ac04a8c19948",
                  "parentUUID": "7e9aea33-9d23-418c-8177-9137805b04a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const result = yield device.getState();\n    assert_1.default.deepStrictEqual(result, {\n        dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n        hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n        mediaType: types_1.NodePyATVMediaType.video,\n        deviceState: types_1.NodePyATVDeviceState.playing,\n        title: 'Solo: A Star Wars Story',\n        artist: null,\n        album: null,\n        genre: null,\n        totalTime: 8097,\n        position: 27,\n        shuffle: types_1.NodePyATVShuffleState.off,\n        repeat: types_1.NodePyATVRepeatState.off,\n        app: 'Disney+',\n        appId: 'com.disney.disneyplus',\n        powerState: null\n    });\n});",
                  "err": {},
                  "uuid": "236051ff-c1f6-4079-94ec-4c1a8b1b6651",
                  "parentUUID": "7e9aea33-9d23-418c-8177-9137805b04a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.getState();\n    }), /Got pyatv Error: invalid credentials: 321/);\n});",
                  "err": {},
                  "uuid": "117ee609-d84f-47a7-b800-4d8c1afb7f94",
                  "parentUUID": "7e9aea33-9d23-418c-8177-9137805b04a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    const secondResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.dateTime, secondResult.dateTime);\n    assert_1.default.strictEqual(executions, 1);\n});",
                  "err": {},
                  "uuid": "4e2f3563-3c76-40d2-88fa-e20dfe7ff38e",
                  "parentUUID": "7e9aea33-9d23-418c-8177-9137805b04a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date(new Date().getTime() - 1000).toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.position, 27);\n    const secondResult = yield device.getState();\n    assert_1.default.ok(secondResult.position);\n    assert_1.default.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\n    assert_1.default.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);\n});",
                  "err": {},
                  "uuid": "c65227d1-3c87-4306-b813-c6fb6f7e94f1",
                  "parentUUID": "7e9aea33-9d23-418c-8177-9137805b04a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "236051ff-c1f6-4079-94ec-4c1a8b1b6651",
                "117ee609-d84f-47a7-b800-4d8c1afb7f94",
                "4e2f3563-3c76-40d2-88fa-e20dfe7ff38e",
                "c65227d1-3c87-4306-b813-c6fb6f7e94f1"
              ],
              "failures": [],
              "pending": [
                "8ec47d0c-4455-4193-9e95-ac04a8c19948"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a340893-a334-4b54-9853-456101c911e2",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                title: 'Solo: A Star Wars Story'\n            });\n        })\n    });\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    device.clearState();\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    assert_1.default.strictEqual(executions, 2);\n});",
                  "err": {},
                  "uuid": "12fe6595-7b2a-4a2e-bb03-2420ad65357e",
                  "parentUUID": "4a340893-a334-4b54-9853-456101c911e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12fe6595-7b2a-4a2e-bb03-2420ad65357e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "61d1f1a0-1795-4ff1-be06-8dc29a385d28",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON()\n            });\n        })\n    });\n    const result = yield device.getDateTime();\n    assert_1.default.ok(result instanceof Date);\n});",
                  "err": {},
                  "uuid": "2298dada-0314-4cfe-b80d-75f640456c8c",
                  "parentUUID": "61d1f1a0-1795-4ff1-be06-8dc29a385d28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2298dada-0314-4cfe-b80d-75f640456c8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "20d8e428-2e50-4727-9ea7-ff357c4a7581",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                hash: '12345'\n            });\n        })\n    });\n    const result = yield device.getHash();\n    assert_1.default.strictEqual(result, '12345');\n});",
                  "err": {},
                  "uuid": "9c2d9b48-da9e-405a-ad11-f717c6213db2",
                  "parentUUID": "20d8e428-2e50-4727-9ea7-ff357c4a7581",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c2d9b48-da9e-405a-ad11-f717c6213db2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bab1c740-c4c0-4877-9624-c19c0df192b5",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                media_type: 'video'\n            });\n        })\n    });\n    const result = yield device.getMediaType();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVMediaType.video);\n    assert_1.default.deepStrictEqual(result, 'video');\n});",
                  "err": {},
                  "uuid": "c211add0-6352-4a26-b73f-05a862e91736",
                  "parentUUID": "bab1c740-c4c0-4877-9624-c19c0df192b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c211add0-6352-4a26-b73f-05a862e91736"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cbe83c0e-92ea-4163-a4b7-2e4bd5091f6d",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                device_state: 'seeking'\n            });\n        })\n    });\n    const result = yield device.getDeviceState();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVDeviceState.seeking);\n    assert_1.default.deepStrictEqual(result, 'seeking');\n});",
                  "err": {},
                  "uuid": "f09ed954-ebf1-4b5d-ad46-02d48a7b7ad4",
                  "parentUUID": "cbe83c0e-92ea-4163-a4b7-2e4bd5091f6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f09ed954-ebf1-4b5d-ad46-02d48a7b7ad4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ebab9060-740b-4800-a3d1-ab26dc2e3c21",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const result = yield device.getTitle();\n    assert_1.default.strictEqual(result, 'My Movie');\n});",
                  "err": {},
                  "uuid": "2ca02977-4167-4701-8c27-db7b5da56ef9",
                  "parentUUID": "ebab9060-740b-4800-a3d1-ab26dc2e3c21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ca02977-4167-4701-8c27-db7b5da56ef9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de7f4830-1ab8-4fb0-9d08-8707b9487e3d",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                artist: 'My Artist'\n            });\n        })\n    });\n    const result = yield device.getArtist();\n    assert_1.default.strictEqual(result, 'My Artist');\n});",
                  "err": {},
                  "uuid": "9e3f4ecf-6e95-43f9-bcfa-50684cf103af",
                  "parentUUID": "de7f4830-1ab8-4fb0-9d08-8707b9487e3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e3f4ecf-6e95-43f9-bcfa-50684cf103af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e480820-9ebe-460c-bf62-45d505914006",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                album: 'My ALbum'\n            });\n        })\n    });\n    const result = yield device.getAlbum();\n    assert_1.default.strictEqual(result, 'My ALbum');\n});",
                  "err": {},
                  "uuid": "1ad1dc46-ad66-4841-a5c2-819e981504b2",
                  "parentUUID": "5e480820-9ebe-460c-bf62-45d505914006",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ad1dc46-ad66-4841-a5c2-819e981504b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb8745e6-6781-4eb0-9cc9-4ba3480503b9",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                genre: 'My Genre'\n            });\n        })\n    });\n    const result = yield device.getGenre();\n    assert_1.default.strictEqual(result, 'My Genre');\n});",
                  "err": {},
                  "uuid": "3b2143a3-423b-4cea-a466-3804dd7218d4",
                  "parentUUID": "fb8745e6-6781-4eb0-9cc9-4ba3480503b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b2143a3-423b-4cea-a466-3804dd7218d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4ab54c8-eb5a-4c27-b0a9-684581c8a689",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                total_time: 45\n            });\n        })\n    });\n    const result = yield device.getTotalTime();\n    assert_1.default.strictEqual(result, 45);\n});",
                  "err": {},
                  "uuid": "6f390023-c389-4f88-8f8e-c08da60ef397",
                  "parentUUID": "b4ab54c8-eb5a-4c27-b0a9-684581c8a689",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f390023-c389-4f88-8f8e-c08da60ef397"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9be1e77e-0437-43a7-a8f8-483d62bc0eda",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                position: 30\n            });\n        })\n    });\n    const result = yield device.getPosition();\n    assert_1.default.strictEqual(result, 30);\n});",
                  "err": {},
                  "uuid": "9e212174-df3f-4e14-b7b6-14af626a1e53",
                  "parentUUID": "9be1e77e-0437-43a7-a8f8-483d62bc0eda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e212174-df3f-4e14-b7b6-14af626a1e53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79c740f9-7ff6-479c-9dbe-64f96d0a0485",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                shuffle: 'songs'\n            });\n        })\n    });\n    const result = yield device.getShuffle();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVShuffleState.songs);\n    assert_1.default.deepStrictEqual(result, 'songs');\n});",
                  "err": {},
                  "uuid": "8461a332-8818-424d-b4a9-f2d8cccefe43",
                  "parentUUID": "79c740f9-7ff6-479c-9dbe-64f96d0a0485",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8461a332-8818-424d-b4a9-f2d8cccefe43"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5c22420-87cf-4055-bca9-e8a701648060",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                repeat: 'all'\n            });\n        })\n    });\n    const result = yield device.getRepeat();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVRepeatState.all);\n    assert_1.default.deepStrictEqual(result, 'all');\n});",
                  "err": {},
                  "uuid": "d0aa110f-0657-4d31-9692-bc9a1ca091a4",
                  "parentUUID": "d5c22420-87cf-4055-bca9-e8a701648060",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0aa110f-0657-4d31-9692-bc9a1ca091a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0807de1e-fcd0-422c-9d7a-5e3ec30bc861",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                app: 'My App'\n            });\n        })\n    });\n    const result = yield device.getApp();\n    assert_1.default.strictEqual(result, 'My App');\n});",
                  "err": {},
                  "uuid": "e0b9728f-d829-4a81-a4f3-ce594a6a78be",
                  "parentUUID": "0807de1e-fcd0-422c-9d7a-5e3ec30bc861",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0b9728f-d829-4a81-a4f3-ce594a6a78be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7b56184-f269-4ef2-9b4c-8d36473b2958",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                app_id: 'app.example.com'\n            });\n        })\n    });\n    const result = yield device.getAppId();\n    assert_1.default.strictEqual(result, 'app.example.com');\n});",
                  "err": {},
                  "uuid": "6c93917e-0ca1-4ae9-bf65-7c03dda9b866",
                  "parentUUID": "b7b56184-f269-4ef2-9b4c-8d36473b2958",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c93917e-0ca1-4ae9-bf65-7c03dda9b866"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7866ce28-20ab-40f5-b400-66200568e51b",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    yield device.pressKey(types_1.NodePyATVKeys.home);\n});",
                  "err": {},
                  "uuid": "ca3cb6c3-9160-44fe-ad46-ae985515e621",
                  "parentUUID": "7866ce28-20ab-40f5-b400-66200568e51b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2'\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        yield device.pressKey('foo');\n    }), /Unsupported key value foo/);\n});",
                  "err": {},
                  "uuid": "a0a1ba6f-f19a-492a-b2a8-89470965707c",
                  "parentUUID": "7866ce28-20ab-40f5-b400-66200568e51b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"failure\"}');\n        })\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.pressKey(types_1.NodePyATVKeys.home);\n    }), /Unable to parse pyatv response/);\n});",
                  "err": {},
                  "uuid": "733186be-6425-47e0-b680-da18307679e5",
                  "parentUUID": "7866ce28-20ab-40f5-b400-66200568e51b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca3cb6c3-9160-44fe-ad46-ae985515e621",
                "a0a1ba6f-f19a-492a-b2a8-89470965707c",
                "733186be-6425-47e0-b680-da18307679e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "604ccb47-9e6b-4de8-93c6-644d20bb0acd",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "6618148b-e742-4b04-a27a-d2a80885ff90",
                  "parentUUID": "604ccb47-9e6b-4de8-93c6-644d20bb0acd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6618148b-e742-4b04-a27a-d2a80885ff90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "697a851f-e7ae-490f-bd01-3791a913a450",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "f5a6e8f3-e62f-4e12-af83-b89d80511467",
                  "parentUUID": "697a851f-e7ae-490f-bd01-3791a913a450",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5a6e8f3-e62f-4e12-af83-b89d80511467"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d8bf5cd5-8e99-436f-aa0c-65f70b799ce3",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "1d4169c0-d0cc-4455-8d2d-46a1ae9a0a38",
                  "parentUUID": "d8bf5cd5-8e99-436f-aa0c-65f70b799ce3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d4169c0-d0cc-4455-8d2d-46a1ae9a0a38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24eaa2f6-1bc5-4008-a0a9-5cdbc9c37997",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "2ae9159c-41d2-42c5-b6b7-ceed3e14c12c",
                  "parentUUID": "24eaa2f6-1bc5-4008-a0a9-5cdbc9c37997",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ae9159c-41d2-42c5-b6b7-ceed3e14c12c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c6b8558-5da9-4b11-b006-6206b4bc3853",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "510bf419-baa1-4d03-ad21-36f00edca9f1",
                  "parentUUID": "0c6b8558-5da9-4b11-b006-6206b4bc3853",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "510bf419-baa1-4d03-ad21-36f00edca9f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "862e3d95-24fd-4ee9-8045-869027bc3f4e",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "766d1d9b-928f-4d10-9f7b-7c3f538ebd29",
                  "parentUUID": "862e3d95-24fd-4ee9-8045-869027bc3f4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "766d1d9b-928f-4d10-9f7b-7c3f538ebd29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4546d0d5-0649-41cb-8d4e-eb6c68c43aaa",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "5feb7db0-c7e6-45fa-9fc4-7500558ac60d",
                  "parentUUID": "4546d0d5-0649-41cb-8d4e-eb6c68c43aaa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5feb7db0-c7e6-45fa-9fc4-7500558ac60d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "892bce4b-8194-4bdb-97de-d96585feed3c",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "7fbbce23-e13b-4b06-8c38-50c66ad89e70",
                  "parentUUID": "892bce4b-8194-4bdb-97de-d96585feed3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fbbce23-e13b-4b06-8c38-50c66ad89e70"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fca0bd79-53ae-4f2c-8959-653ca7df5695",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "0602f466-7844-4e9c-a416-0a1785dc686e",
                  "parentUUID": "fca0bd79-53ae-4f2c-8959-653ca7df5695",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0602f466-7844-4e9c-a416-0a1785dc686e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "28d50d50-6904-4578-bdac-ab3e25b8154a",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "f8f35324-12bd-4df9-9591-aa319a07e92a",
                  "parentUUID": "28d50d50-6904-4578-bdac-ab3e25b8154a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8f35324-12bd-4df9-9591-aa319a07e92a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a0459346-c6ef-4d54-b191-d025ac2f3197",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "e2c8ea5e-0d1b-49ce-81a8-23e3e76803a1",
                  "parentUUID": "a0459346-c6ef-4d54-b191-d025ac2f3197",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2c8ea5e-0d1b-49ce-81a8-23e3e76803a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "456ab263-1c5b-47e3-b864-d5724b281205",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "6772d628-97ba-4cfb-ac72-42b083f2dbb4",
                  "parentUUID": "456ab263-1c5b-47e3-b864-d5724b281205",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6772d628-97ba-4cfb-ac72-42b083f2dbb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4c68e6f-af1a-4fff-a95e-fd0f1faaea62",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "a9c500e9-7532-4f38-9b05-6d7495d4de0e",
                  "parentUUID": "d4c68e6f-af1a-4fff-a95e-fd0f1faaea62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9c500e9-7532-4f38-9b05-6d7495d4de0e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c26b2430-f7bd-44ae-b6a4-0850579548a6",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "f725952b-2a74-437f-a01b-639e677d5ce9",
                  "parentUUID": "c26b2430-f7bd-44ae-b6a4-0850579548a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f725952b-2a74-437f-a01b-639e677d5ce9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "edbe63e7-25db-4288-9b54-90fd4df84612",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "16592325-f36d-468f-b239-66a9ada88069",
                  "parentUUID": "edbe63e7-25db-4288-9b54-90fd4df84612",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16592325-f36d-468f-b239-66a9ada88069"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b8ac36b-9b8f-44d2-aeac-4b96086cd8da",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "5caaa0a4-aa89-4cde-8d1e-aa4d23de56a1",
                  "parentUUID": "8b8ac36b-9b8f-44d2-aeac-4b96086cd8da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5caaa0a4-aa89-4cde-8d1e-aa4d23de56a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0322eb49-e1b7-49df-a4f8-70482f9cc9c5",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c6c61edd-8283-4ab9-be16-06628116d709",
                  "parentUUID": "0322eb49-e1b7-49df-a4f8-70482f9cc9c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6c61edd-8283-4ab9-be16-06628116d709"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d42ecea6-b3d8-4b83-8ef1-446bf5a19ba6",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "007d8de7-ffa9-432b-ba03-41d4f831c275",
                  "parentUUID": "d42ecea6-b3d8-4b83-8ef1-446bf5a19ba6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "007d8de7-ffa9-432b-ba03-41d4f831c275"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1ecf229-5b7b-4e4e-a27e-3e6600fc2d86",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "20cb9368-877c-4354-965e-8f099a8a2019",
                  "parentUUID": "c1ecf229-5b7b-4e4e-a27e-3e6600fc2d86",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20cb9368-877c-4354-965e-8f099a8a2019"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0029c75d-1fcc-4631-affa-a68966da2c83",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "17405519-d3be-44fc-8f37-742018065ee5",
                  "parentUUID": "0029c75d-1fcc-4631-affa-a68966da2c83",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17405519-d3be-44fc-8f37-742018065ee5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4a1efd8-734d-4a97-9157-d9fa2ea972c3",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "2b65f78b-9593-47d2-b3cf-67e2640f6cdf",
                  "parentUUID": "d4a1efd8-734d-4a97-9157-d9fa2ea972c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b65f78b-9593-47d2-b3cf-67e2640f6cdf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8da512e5-922f-4f34-924e-f8b42133a394",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "b4af5960-1cf7-4ce6-8ba3-c9732c326a2d",
                  "parentUUID": "8da512e5-922f-4f34-924e-f8b42133a394",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4af5960-1cf7-4ce6-8ba3-c9732c326a2d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a511a845-ba58-4b99-8314-8790f79151c9",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "f520bdc4-44c2-42e4-85e5-97fe4a752b67",
                  "parentUUID": "a511a845-ba58-4b99-8314-8790f79151c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f520bdc4-44c2-42e4-85e5-97fe4a752b67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "82d88fa3-8ba5-4354-bb8d-1492f66f270c",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 660,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(4000);\n    const result = yield index_1.default.version();\n    if (result.pyatv === null) {\n        throw new Error('No version found for pyatv. Is it installed in test environment?');\n    }\n    assert_1.default.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\n    assert_1.default.ok(result.pyatv.length >= 5, 'result.pyatv has content');\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "13a0ed3e-4ca3-42ba-997a-6bed17fcf813",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.code(1);\n            cp.end('atvremote 0.7.4');\n        })\n    });\n    assert_1.default.ok(result.pyatv);\n    assert_1.default.strictEqual(result.pyatv, '0.7.4');\n});",
                  "err": {},
                  "uuid": "9ea9208c-66fe-4f62-86fd-ff3bf453cbac",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        noColors: true,\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.code(1).end())\n    });\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "99626495-9c9c-41fe-9076-83456b75498c",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        atvremotePath: '/foo/bar',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "1e7cb74f-c179-49a5-87ba-4c7f296b95ac",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: true,\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "89a6a04b-cadd-4a43-93f3-be1d100c2878",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: () => { },\n        noColors: true,\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "11b24957-cd70-45db-ae80-0167c2561dd3",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.stderr('Hello World!').code(123).end())\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "2a2e6962-0b48-4017-8e64-4ee540f5873c",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.error(new Error('Hello world!')).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "693f3e92-038b-488a-bb00-9d3f252f0d08",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('atvremote 42').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "aee99b09-98db-4f83-b900-3816494ee798",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on empty module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on empty module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = {};\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "ecc0595e-b413-49a3-9b86-3b08afba1230",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = { version: 42 };\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "08667bb7-32d5-4039-8dda-272eb9cebf42",
                  "parentUUID": "ed6c9de1-a284-4ce2-8fda-6616d0699ebe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13a0ed3e-4ca3-42ba-997a-6bed17fcf813",
                "9ea9208c-66fe-4f62-86fd-ff3bf453cbac",
                "99626495-9c9c-41fe-9076-83456b75498c",
                "1e7cb74f-c179-49a5-87ba-4c7f296b95ac",
                "89a6a04b-cadd-4a43-93f3-be1d100c2878",
                "11b24957-cd70-45db-ae80-0167c2561dd3",
                "2a2e6962-0b48-4017-8e64-4ee540f5873c",
                "693f3e92-038b-488a-bb00-9d3f252f0d08",
                "aee99b09-98db-4f83-b900-3816494ee798",
                "ecc0595e-b413-49a3-9b86-3b08afba1230",
                "08667bb7-32d5-4039-8dda-272eb9cebf42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 678,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29a8df4d-2130-4dfd-8859-dbabdcfdea10",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5876,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(12000);\n    yield index_1.default.check();\n});",
                  "err": {},
                  "uuid": "8dfc7618-8fe6-49e7-8696-c73d795e9851",
                  "parentUUID": "29a8df4d-2130-4dfd-8859-dbabdcfdea10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "242bf454-d125-43c6-9d8d-db5642e5f01b",
                  "parentUUID": "29a8df4d-2130-4dfd-8859-dbabdcfdea10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout('atvremote 0.5.1').code(1).end();\n            })\n        });\n    }), /Found pyatv, but unforunately it's too old. Please update pyatv./);\n});",
                  "err": {},
                  "uuid": "a00ccef4-c881-4b7d-a145-d9e99e813d69",
                  "parentUUID": "29a8df4d-2130-4dfd-8859-dbabdcfdea10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let i = 0;\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                if (i === 0) {\n                    cp.stdout('atvremote 0.7.0').code(1).end();\n                    i++;\n                }\n                else {\n                    cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n                }\n            })\n        });\n    }), /Unable to scan for devices/);\n});",
                  "err": {},
                  "uuid": "7ec283bc-2728-4aae-8323-a1e15d738745",
                  "parentUUID": "29a8df4d-2130-4dfd-8859-dbabdcfdea10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8dfc7618-8fe6-49e7-8696-c73d795e9851",
                "242bf454-d125-43c6-9d8d-db5642e5f01b",
                "a00ccef4-c881-4b7d-a145-d9e99e813d69",
                "7ec283bc-2728-4aae-8323-a1e15d738745"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5881,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be669eb9-9fe0-47de-a6e3-03352ea784a2",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5396,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(8000);\n    const result = yield index_1.default.find();\n    assert_1.default.ok(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "80265c05-5be0-45d0-9e61-8a84d45c23fa",
                  "parentUUID": "be669eb9-9fe0-47de-a6e3-03352ea784a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.find({\n        atvscriptPath: '/foo/bar',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "5c3fd164-d4d6-44d2-96f0-cfa0c210aefe",
                  "parentUUID": "be669eb9-9fe0-47de-a6e3-03352ea784a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stderr('Hello World!').code(1).end();\n            })\n        });\n    }), /Unable to execute request/);\n});",
                  "err": {},
                  "uuid": "6148abb9-4699-4141-ac3c-2b44356ebae6",
                  "parentUUID": "be669eb9-9fe0-47de-a6e3-03352ea784a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.error(new Error('Hello world!')).code(1).end();\n            })\n        });\n    }), /Hello world!/);\n});",
                  "err": {},
                  "uuid": "387db79d-8e23-45bd-aeea-8014f04f9153",
                  "parentUUID": "be669eb9-9fe0-47de-a6e3-03352ea784a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout(JSON.stringify({\n                    'result': 'success',\n                    'datetime': '2020-11-06T20:47:30.840022+01:00',\n                    'devices': []\n                }).substr(1)).end();\n            })\n        });\n    }), /Unable to parse result/);\n});",
                  "err": {},
                  "uuid": "36f66ea3-a16d-42cd-a581-cf6b1a576863",
                  "parentUUID": "be669eb9-9fe0-47de-a6e3-03352ea784a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout({\n                    result: 'error'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "bededd42-21f6-4464-bacf-fc369265aaaa",
                  "parentUUID": "be669eb9-9fe0-47de-a6e3-03352ea784a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout({\n                    result: 'success'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "56b55059-39a2-4932-9a18-01dc7eda6882",
                  "parentUUID": "be669eb9-9fe0-47de-a6e3-03352ea784a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80265c05-5be0-45d0-9e61-8a84d45c23fa",
                "5c3fd164-d4d6-44d2-96f0-cfa0c210aefe",
                "6148abb9-4699-4141-ac3c-2b44356ebae6",
                "387db79d-8e23-45bd-aeea-8014f04f9153",
                "36f66ea3-a16d-42cd-a581-cf6b1a576863",
                "bededd42-21f6-4464-bacf-fc369265aaaa",
                "56b55059-39a2-4932-9a18-01dc7eda6882"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5404,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "59812a89-7543-48ca-897b-4c007fadeacd",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = index_1.default.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert_1.default.strictEqual(device.host, '192.168.178.6');\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "c53d0440-6555-4ffb-b962-0c418a93abc4",
                  "parentUUID": "59812a89-7543-48ca-897b-4c007fadeacd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c53d0440-6555-4ffb-b962-0c418a93abc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "776c8d11-1b92-4dfb-a30e-7826adb7515e",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield i.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "70e43acc-873f-400e-9cfe-56650ee809bc",
                  "parentUUID": "776c8d11-1b92-4dfb-a30e-7826adb7515e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70e43acc-873f-400e-9cfe-56650ee809bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab57a285-00b6-4bba-898b-7b782f6c92e5",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield i.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                assert_1.default.strictEqual(cp.cmd(), 'test');\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "5acffb0c-7cad-48b5-8cef-9a31ef1d5ee9",
                  "parentUUID": "ab57a285-00b6-4bba-898b-7b782f6c92e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5acffb0c-7cad-48b5-8cef-9a31ef1d5ee9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a97adbc7-54be-4151-9d10-f933050e3010",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvscriptPath: 'test' });\n    yield i.find({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "4d3f6541-c22b-4bd4-88e9-feec84d6dc3f",
                  "parentUUID": "a97adbc7-54be-4151-9d10-f933050e3010",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d3f6541-c22b-4bd4-88e9-feec84d6dc3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ab03702-a6a5-4ab1-8e9f-0354baf159c7",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ debug: true });\n    const d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\n    assert_1.default.deepStrictEqual(d.debug, true);\n});",
                  "err": {},
                  "uuid": "298fd854-2d33-4734-b6e5-e1e5b1f779a4",
                  "parentUUID": "9ab03702-a6a5-4ab1-8e9f-0354baf159c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "298fd854-2d33-4734-b6e5-e1e5b1f779a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVProtocol);",
                  "err": {},
                  "uuid": "df3d9463-81fe-426a-9085-e78e7028a1dd",
                  "parentUUID": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVMediaType);",
                  "err": {},
                  "uuid": "99b640d8-871f-4f08-afae-e2a30a4c6555",
                  "parentUUID": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "384c7fde-c6cc-4296-9b89-959692e4f948",
                  "parentUUID": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "f537c602-43cd-4c99-a099-0e4932769354",
                  "parentUUID": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "5662a51f-b77b-4086-a781-8f0d79740b2e",
                  "parentUUID": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "3d5209e2-e35c-4b5a-aa6c-e44eafec7071",
                  "parentUUID": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVKeys);",
                  "err": {},
                  "uuid": "2288eaa6-e100-47de-b778-a8a0adc758d5",
                  "parentUUID": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVListenerState);",
                  "err": {},
                  "uuid": "96377020-4207-482b-818a-745d1ff259e0",
                  "parentUUID": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVPowerState);",
                  "err": {},
                  "uuid": "72293536-5c7b-4d0f-9ede-3353a4e373d5",
                  "parentUUID": "297d3e00-6e25-4a89-a140-bda4524ccbe1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df3d9463-81fe-426a-9085-e78e7028a1dd",
                "99b640d8-871f-4f08-afae-e2a30a4c6555",
                "384c7fde-c6cc-4296-9b89-959692e4f948",
                "f537c602-43cd-4c99-a099-0e4932769354",
                "5662a51f-b77b-4086-a781-8f0d79740b2e",
                "3d5209e2-e35c-4b5a-aa6c-e44eafec7071",
                "2288eaa6-e100-47de-b778-a8a0adc758d5",
                "96377020-4207-482b-818a-745d1ff259e0",
                "72293536-5c7b-4d0f-9ede-3353a4e373d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8bafc2e4-043e-4290-a72e-d511e70c0bc9",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "05212a84-1dff-453d-8de2-88a23c443db6",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = (0, tools_1.addRequestId)();\nassert_1.default.strictEqual(typeof id, 'string');\n(0, tools_1.removeRequestId)(id);",
                  "err": {},
                  "uuid": "e2dd00d4-7b13-4e4a-b2bd-9d38c8730280",
                  "parentUUID": "05212a84-1dff-453d-8de2-88a23c443db6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.removeRequestId)('FOO');",
                  "err": {},
                  "uuid": "21410e67-88dd-49cd-994f-a2a22fb3a88f",
                  "parentUUID": "05212a84-1dff-453d-8de2-88a23c443db6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2dd00d4-7b13-4e4a-b2bd-9d38c8730280",
                "21410e67-88dd-49cd-994f-a2a22fb3a88f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cfce0232-7969-448f-bcda-c8a304724e95",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "f4d711e9-3bda-4c30-b9a3-b2a0435d40b9",
                  "parentUUID": "cfce0232-7969-448f-bcda-c8a304724e95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "5e322d81-b3b4-428a-8796-089550d5955b",
                  "parentUUID": "cfce0232-7969-448f-bcda-c8a304724e95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "cb956f2b-cd82-4fa5-8731-149b3ac9d88d",
                  "parentUUID": "cfce0232-7969-448f-bcda-c8a304724e95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "d3c9f18c-9fd1-4229-a916-ca7ccb0721bb",
                  "parentUUID": "cfce0232-7969-448f-bcda-c8a304724e95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "9df8bb92-386d-45b6-a0d1-ab9282d2f989",
                  "parentUUID": "cfce0232-7969-448f-bcda-c8a304724e95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4d711e9-3bda-4c30-b9a3-b2a0435d40b9",
                "5e322d81-b3b4-428a-8796-089550d5955b",
                "cb956f2b-cd82-4fa5-8731-149b3ac9d88d",
                "d3c9f18c-9fd1-4229-a916-ca7ccb0721bb",
                "9df8bb92-386d-45b6-a0d1-ab9282d2f989"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3cd8346c-f0f6-4aef-a250-f24019275847",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "90d83e8a-e936-4b79-ba7a-3304b75051c0",
                  "parentUUID": "3cd8346c-f0f6-4aef-a250-f24019275847",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "04d01a83-7ecb-4dce-8659-a20f540c697c",
                  "parentUUID": "3cd8346c-f0f6-4aef-a250-f24019275847",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "10f84aca-bf92-48ed-a69b-135c9c9f8230",
                  "parentUUID": "3cd8346c-f0f6-4aef-a250-f24019275847",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "8219abfd-671d-478e-8f5f-5a54dca0ff95",
                  "parentUUID": "3cd8346c-f0f6-4aef-a250-f24019275847",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90d83e8a-e936-4b79-ba7a-3304b75051c0",
                "04d01a83-7ecb-4dce-8659-a20f540c697c",
                "10f84aca-bf92-48ed-a69b-135c9c9f8230",
                "8219abfd-671d-478e-8f5f-5a54dca0ff95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3fe5f82c-98dd-4a58-ba8a-2d2234f4cb71",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield (0, tools_1.getParamters)();\n    assert_1.default.deepEqual(result, []);\n});",
                  "err": {},
                  "uuid": "1f34855e-7424-45ea-a341-f41cfd9452c1",
                  "parentUUID": "3fe5f82c-98dd-4a58-ba8a-2d2234f4cb71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield (0, tools_1.getParamters)({\n        host: '192.168.178.2'\n    });\n    assert_1.default.deepEqual(result, ['-s', '192.168.178.2']);\n});",
                  "err": {},
                  "uuid": "a097a521-b384-4d28-ba17-8941c025f66f",
                  "parentUUID": "3fe5f82c-98dd-4a58-ba8a-2d2234f4cb71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield (0, tools_1.getParamters)({\n        hosts: ['192.168.178.2', '192.168.178.3'],\n        id: '****',\n        protocol: types_1.NodePyATVProtocol.mrp,\n        dmapCredentials: '****',\n        mrpCredentials: '****',\n        airplayCredentials: '****',\n        companionCredentials: '1234',\n        raopCredentials: '::foo:'\n    });\n    assert_1.default.deepEqual(result, [\n        '-s', '192.168.178.2,192.168.178.3',\n        '-i', '****',\n        '--protocol', 'mrp',\n        '--dmap-credentials', '****',\n        '--mrp-credentials', '****',\n        '--airplay-credentials', '****',\n        '--companion-credentials', '1234',\n        '--raop-credentials', '::foo:'\n    ]);\n});",
                  "err": {},
                  "uuid": "d48f1856-756b-4734-b4cd-ad38ffd76da9",
                  "parentUUID": "3fe5f82c-98dd-4a58-ba8a-2d2234f4cb71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f34855e-7424-45ea-a341-f41cfd9452c1",
                "a097a521-b384-4d28-ba17-8941c025f66f",
                "d48f1856-756b-4734-b4cd-ad38ffd76da9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "44834610-06fc-4ec5-84e8-a3f37718b451",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "02601be3-b0a9-4204-90f5-a7150ec75f71",
                  "parentUUID": "44834610-06fc-4ec5-84e8-a3f37718b451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = (0, tools_1.parseState)(null, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "00a69a38-ce90-41cb-9d2f-8c3b68c72af4",
                  "parentUUID": "44834610-06fc-4ec5-84e8-a3f37718b451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    powerState: null\n};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: types_1.NodePyATVMediaType.video,\n    deviceState: types_1.NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: types_1.NodePyATVShuffleState.off,\n    repeat: types_1.NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null\n});",
                  "err": {},
                  "uuid": "c2308189-a947-4b01-b52b-63c791bcbeab",
                  "parentUUID": "44834610-06fc-4ec5-84e8-a3f37718b451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert_1.default.throws(() => {\n    (0, tools_1.parseState)(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "d9ea713e-61ec-4b7e-a27f-e9c1d199eb73",
                  "parentUUID": "44834610-06fc-4ec5-84e8-a3f37718b451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "8ef58873-c6e0-4c28-9113-e76500d5ad39",
                  "parentUUID": "44834610-06fc-4ec5-84e8-a3f37718b451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    powerState: null\n};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "a129b28b-b28a-405f-ad6d-57ea6e3966f0",
                  "parentUUID": "44834610-06fc-4ec5-84e8-a3f37718b451",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "67326826-0720-4c84-9f2c-f04390717f1a",
                  "parentUUID": "44834610-06fc-4ec5-84e8-a3f37718b451",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02601be3-b0a9-4204-90f5-a7150ec75f71",
                "00a69a38-ce90-41cb-9d2f-8c3b68c72af4",
                "c2308189-a947-4b01-b52b-63c791bcbeab",
                "d9ea713e-61ec-4b7e-a27f-e9c1d199eb73",
                "8ef58873-c6e0-4c28-9113-e76500d5ad39",
                "a129b28b-b28a-405f-ad6d-57ea6e3966f0",
                "67326826-0720-4c84-9f2c-f04390717f1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}