{
  "stats": {
    "suites": 84,
    "tests": 143,
    "passes": 141,
    "pending": 2,
    "failures": 0,
    "start": "2022-05-01T21:25:43.117Z",
    "end": "2022-05-01T21:25:55.135Z",
    "duration": 12018,
    "testsRegistered": 143,
    "passPercent": 100,
    "pendingPercent": 1.3986013986013985,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b58c703c-99bb-4f3c-9ee8-b8ddd1eeee7a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f7dc6643-d751-4667-9950-691f6a379d4b",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8e6d4e1d-3060-4204-8b10-440c3f491e0c",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "7642662f-57e4-4f1b-b13e-2ede1e8927b2",
                  "parentUUID": "8e6d4e1d-3060-4204-8b10-440c3f491e0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7642662f-57e4-4f1b-b13e-2ede1e8927b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b712185c-40d6-4923-8f71-f6569cdc2adc",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "1c3289e0-ef09-421f-b07b-bd6e8ffe6994",
                  "parentUUID": "b712185c-40d6-4923-8f71-f6569cdc2adc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c3289e0-ef09-421f-b07b-bd6e8ffe6994"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9762e00b-3044-41e8-ad75-bb615477bf91",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "83be3a63-b458-4910-a0bf-38f030f80ce9",
                  "parentUUID": "9762e00b-3044-41e8-ad75-bb615477bf91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83be3a63-b458-4910-a0bf-38f030f80ce9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0a7ce16-8e3e-45fe-a51a-e4c1dc01f0e7",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "37e3d9cb-5cdf-42e3-ad5a-3ba849bb99ca",
                  "parentUUID": "b0a7ce16-8e3e-45fe-a51a-e4c1dc01f0e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37e3d9cb-5cdf-42e3-ad5a-3ba849bb99ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72cb9512-6264-463c-9964-08a170034fd8",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert_1.default.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "5e5de9e1-7a0c-468b-9978-ed2901ef9730",
                  "parentUUID": "72cb9512-6264-463c-9964-08a170034fd8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e5de9e1-7a0c-468b-9978-ed2901ef9730"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d6befba2-54f7-42ac-954f-0670b191b325",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1b4488eb-2b87-4a26-9782-226111d13136",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:title', event => {\n            assert_1.default.ok(event instanceof lib_1.NodePyATVDeviceEvent);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "6ca8a95a-8c78-4e5b-8ce1-ba1e1ac80060",
                  "parentUUID": "1b4488eb-2b87-4a26-9782-226111d13136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update', event => {\n            assert_1.default.ok(event instanceof lib_1.NodePyATVDeviceEvent);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "f1ff9d07-6228-4064-9363-b4042a97e0d5",
                  "parentUUID": "1b4488eb-2b87-4a26-9782-226111d13136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const sort = [];\n    yield Promise.race([\n        new Promise(cb => {\n            device.once('update', () => {\n                sort.push('update');\n                cb(undefined);\n            });\n        }),\n        new Promise(cb => {\n            device.once('update:title', () => {\n                sort.push('update:title');\n                cb(undefined);\n            });\n        })\n    ]);\n    assert_1.default.deepStrictEqual(sort, ['update:title', 'update']);\n});",
                  "err": {},
                  "uuid": "3cc8c8e2-74f6-4d05-97ca-ec4eb41e2c56",
                  "parentUUID": "1b4488eb-2b87-4a26-9782-226111d13136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('error', error => {\n            assert_1.default.ok(error instanceof Error);\n            assert_1.default.ok(error.toString().includes('invalid credentials: 321'));\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "2c7a687d-218d-4058-8681-fab6229e4b33",
                  "parentUUID": "1b4488eb-2b87-4a26-9782-226111d13136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let spawnCounter = 0;\n    let eventCounter = 0;\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            if (spawnCounter === 0) {\n                cp.onStdIn(() => cp.end());\n            }\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n            spawnCounter++;\n            if (spawnCounter >= 2) {\n                cp.end();\n            }\n        })\n    });\n    const listener = () => {\n        eventCounter++;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    yield device.getState();\n    device.off('update', listener);\n    assert_1.default.strictEqual(spawnCounter, 2);\n    assert_1.default.strictEqual(eventCounter, 1);\n});",
                  "err": {},
                  "uuid": "54517e0a-6c96-4274-b403-7f945b2be997",
                  "parentUUID": "1b4488eb-2b87-4a26-9782-226111d13136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    let callCounter = 0;\n    const error = new Error('This is an error. Be nice.');\n    device.once('error', err => {\n        assert_1.default.strictEqual(err, error);\n        callCounter++;\n    });\n    const listener = () => {\n        throw error;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    device.off('update', listener);\n    assert_1.default.strictEqual(callCounter, 1);\n});",
                  "err": {},
                  "uuid": "e1ecbbdb-7c6d-46e5-a3ef-b161a9cbeacd",
                  "parentUUID": "1b4488eb-2b87-4a26-9782-226111d13136",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:powerState', event => {\n            assert_1.default.ok(event instanceof lib_1.NodePyATVDeviceEvent);\n            assert_1.default.strictEqual(event.key, 'powerState');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'off');\n            assert_1.default.strictEqual(event.newValue, lib_1.NodePyATVPowerState.off);\n            assert_1.default.strictEqual(event.value, 'off');\n            assert_1.default.strictEqual(event.value, lib_1.NodePyATVPowerState.off);\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "878473cd-0604-497a-bac5-1146a528ad65",
                  "parentUUID": "1b4488eb-2b87-4a26-9782-226111d13136",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ca8a95a-8c78-4e5b-8ce1-ba1e1ac80060",
                "f1ff9d07-6228-4064-9363-b4042a97e0d5",
                "3cc8c8e2-74f6-4d05-97ca-ec4eb41e2c56",
                "2c7a687d-218d-4058-8681-fab6229e4b33",
                "54517e0a-6c96-4274-b403-7f945b2be997",
                "e1ecbbdb-7c6d-46e5-a3ef-b161a9cbeacd",
                "878473cd-0604-497a-bac5-1146a528ad65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb7208aa-6f29-4ff0-b36a-b36104e865a2",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const error = new Error();\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.error(error).end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.strictEqual(err, error);\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "d113a084-3291-4d23-86e0-041aa31b532f",
                  "parentUUID": "cb7208aa-6f29-4ff0-b36a-b36104e865a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stderr('Hello World!').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "81723046-2fd3-4c9b-b610-2510f55d3262",
                  "parentUUID": "cb7208aa-6f29-4ff0-b36a-b36104e865a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('#').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Unable to parse stdout json: SyntaxError: ' +\n                'Unexpected token # in JSON at position 0'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "944f4f61-0ea4-44e5-b45a-1f44565216b2",
                  "parentUUID": "cb7208aa-6f29-4ff0-b36a-b36104e865a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "91528253-d687-4b3c-9101-b17ecd970d5a",
                  "parentUUID": "cb7208aa-6f29-4ff0-b36a-b36104e865a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d113a084-3291-4d23-86e0-041aa31b532f",
                "81723046-2fd3-4c9b-b610-2510f55d3262",
                "944f4f61-0ea4-44e5-b45a-1f44565216b2"
              ],
              "failures": [],
              "pending": [
                "91528253-d687-4b3c-9101-b17ecd970d5a"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b04ddcac-bdc9-4a08-b584-913a7a88eb00",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "db663168-1463-4739-b208-0c90c9ad0c30",
                  "parentUUID": "b04ddcac-bdc9-4a08-b584-913a7a88eb00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db663168-1463-4739-b208-0c90c9ad0c30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d951c3f0-fd11-4a97-bb5a-acb8d7b51136",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new lib_1.NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert_1.default.strictEqual(e, event);\n    assert_1.default.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "a5713787-a7b9-40c6-b334-d20a88908ba0",
                  "parentUUID": "d951c3f0-fd11-4a97-bb5a-acb8d7b51136",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5713787-a7b9-40c6-b334-d20a88908ba0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "17f66380-5691-4cdf-9199-573fc565dc68",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "e7a3a729-edc4-4e4a-9927-05390663d011",
                  "parentUUID": "17f66380-5691-4cdf-9199-573fc565dc68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7a3a729-edc4-4e4a-9927-05390663d011"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f2461b0-f85d-4034-893b-f3b05cc5b768",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert_1.default.ok(typeof result, 'number');\nassert_1.default.ok(result >= 10);",
                  "err": {},
                  "uuid": "92e50ef4-2adb-40ec-ba5b-f6a0eed0e68d",
                  "parentUUID": "6f2461b0-f85d-4034-893b-f3b05cc5b768",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92e50ef4-2adb-40ec-ba5b-f6a0eed0e68d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89b4461a-8244-4a84-9566-c6d9ab8c4157",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "88565914-a931-493c-9d3a-c750e8582980",
                  "parentUUID": "89b4461a-8244-4a84-9566-c6d9ab8c4157",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88565914-a931-493c-9d3a-c750e8582980"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43ccd422-e9aa-4a85-9af9-5f767da08790",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "5b2613c7-ba87-4c9f-b17a-536f9872ca04",
                  "parentUUID": "43ccd422-e9aa-4a85-9af9-5f767da08790",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b2613c7-ba87-4c9f-b17a-536f9872ca04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e492175a-9264-4131-80a9-ebfc0f216dcc",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "f489e8d5-9b39-4d2f-ab18-800c8a4a7480",
                  "parentUUID": "e492175a-9264-4131-80a9-ebfc0f216dcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f489e8d5-9b39-4d2f-ab18-800c8a4a7480"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a0a65934-7751-489b-8c46-09858adc8e43",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "d4daa684-a0b4-4696-95a2-9a43055d3a59",
                  "parentUUID": "a0a65934-7751-489b-8c46-09858adc8e43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4daa684-a0b4-4696-95a2-9a43055d3a59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9809008a-2c8d-4cf1-8ef1-7bd4dfb653e2",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "8c0284f2-83c4-47be-a4c7-573f8c51156b",
                  "parentUUID": "9809008a-2c8d-4cf1-8ef1-7bd4dfb653e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c0284f2-83c4-47be-a4c7-573f8c51156b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3fdb2b47-a6d0-48ec-b208-9cda6ae04965",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 1);\n    device.removeListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 0);\n});",
                  "err": {},
                  "uuid": "36f4f784-d08b-4667-82fe-bbbbc2720075",
                  "parentUUID": "3fdb2b47-a6d0-48ec-b208-9cda6ae04965",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36f4f784-d08b-4667-82fe-bbbbc2720075"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56c0242e-bf1e-483d-b9c7-9fb901217f75",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8fa3dedb-77d5-4a76-9481-8ea8824f8642",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "b931568a-d489-4176-b08e-15694d212ec8",
                  "parentUUID": "8fa3dedb-77d5-4a76-9481-8ea8824f8642",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b931568a-d489-4176-b08e-15694d212ec8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de68c607-0294-4ae4-9520-4427d2c27683",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "aa980b8f-e4f6-4a10-a6cd-553937906a7a",
                  "parentUUID": "de68c607-0294-4ae4-9520-4427d2c27683",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa980b8f-e4f6-4a10-a6cd-553937906a7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb77f715-7f0e-474d-80e3-12309d1bc8df",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert_1.default.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "14fac816-82a2-4f25-93c4-e0cc8e7c0c96",
                  "parentUUID": "bb77f715-7f0e-474d-80e3-12309d1bc8df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14fac816-82a2-4f25-93c4-e0cc8e7c0c96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf166ae4-597b-4c69-bf02-e02857d8b76c",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.strictEqual(device.protocol, types_1.NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "16a4a6c3-b0f3-428a-8976-7129b1f161c6",
                  "parentUUID": "bf166ae4-597b-4c69-bf02-e02857d8b76c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16a4a6c3-b0f3-428a-8976-7129b1f161c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d3eb6472-6e3f-44e6-80d0-91a612d85252",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "c5fc1ef1-c8cf-4756-ae37-20239849d50c",
                  "parentUUID": "d3eb6472-6e3f-44e6-80d0-91a612d85252",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nconst device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "4e995097-9a71-4a4e-819c-3be785dfad06",
                  "parentUUID": "d3eb6472-6e3f-44e6-80d0-91a612d85252",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "d2e6deb1-8c25-41f4-987d-8753f7f83482",
                  "parentUUID": "d3eb6472-6e3f-44e6-80d0-91a612d85252",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5fc1ef1-c8cf-4756-ae37-20239849d50c",
                "4e995097-9a71-4a4e-819c-3be785dfad06",
                "d2e6deb1-8c25-41f4-987d-8753f7f83482"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "88df4230-e3a5-42e6-978d-26d445b1d266",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "973ecc5c-8b94-4b64-8384-4a00568f4cb4",
                  "parentUUID": "88df4230-e3a5-42e6-978d-26d445b1d266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "4f9f6b1c-18d1-4ab9-94fc-bdb4fee3740a",
                  "parentUUID": "88df4230-e3a5-42e6-978d-26d445b1d266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "c5338db5-5e03-4f3f-9cec-2ff5dd1dfb04",
                  "parentUUID": "88df4230-e3a5-42e6-978d-26d445b1d266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "72a3322e-8311-46c7-b5c3-017f74debc88",
                  "parentUUID": "88df4230-e3a5-42e6-978d-26d445b1d266",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "973ecc5c-8b94-4b64-8384-4a00568f4cb4",
                "4f9f6b1c-18d1-4ab9-94fc-bdb4fee3740a",
                "c5338db5-5e03-4f3f-9cec-2ff5dd1dfb04",
                "72a3322e-8311-46c7-b5c3-017f74debc88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bbe4c8cf-2f66-4329-bd6a-71fd8fcf2cd0",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "af5ece20-661f-4943-9b33-728838985a72",
                  "parentUUID": "bbe4c8cf-2f66-4329-bd6a-71fd8fcf2cd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n};\nconst deviceA = new device_1.default(config);\nconst deviceB = new device_1.default(deviceA.toJSON());\nassert_1.default.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "24f01446-5460-49b1-9dcb-a08da27becc7",
                  "parentUUID": "bbe4c8cf-2f66-4329-bd6a-71fd8fcf2cd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af5ece20-661f-4943-9b33-728838985a72",
                "24f01446-5460-49b1-9dcb-a08da27becc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1629f9f9-be97-4f7b-bd91-6f8337201c60",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "a13ea113-ea89-4b0f-b878-80ef6469c943",
                  "parentUUID": "1629f9f9-be97-4f7b-bd91-6f8337201c60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a13ea113-ea89-4b0f-b878-80ef6469c943"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "458a121a-f178-4524-99e9-cacc38a9eaba",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ab70e124-cbcb-4518-b318-33b590fe3ca8",
                  "parentUUID": "458a121a-f178-4524-99e9-cacc38a9eaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const result = yield device.getState();\n    assert_1.default.deepStrictEqual(result, {\n        dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n        hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n        mediaType: types_1.NodePyATVMediaType.video,\n        deviceState: types_1.NodePyATVDeviceState.playing,\n        title: 'Solo: A Star Wars Story',\n        artist: null,\n        album: null,\n        genre: null,\n        totalTime: 8097,\n        position: 27,\n        shuffle: types_1.NodePyATVShuffleState.off,\n        repeat: types_1.NodePyATVRepeatState.off,\n        app: 'Disney+',\n        appId: 'com.disney.disneyplus',\n        powerState: null\n    });\n});",
                  "err": {},
                  "uuid": "8d7aa822-80b2-4d24-8b55-e4029ff9260f",
                  "parentUUID": "458a121a-f178-4524-99e9-cacc38a9eaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.getState();\n    }), /Got pyatv Error: invalid credentials: 321/);\n});",
                  "err": {},
                  "uuid": "65fc2a50-4cd9-41bd-adb3-342e933bc3bc",
                  "parentUUID": "458a121a-f178-4524-99e9-cacc38a9eaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    const secondResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.dateTime, secondResult.dateTime);\n    assert_1.default.strictEqual(executions, 1);\n});",
                  "err": {},
                  "uuid": "4d68a8d5-51f6-4f4c-90e6-02bdaa93fe1f",
                  "parentUUID": "458a121a-f178-4524-99e9-cacc38a9eaba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date(new Date().getTime() - 1000).toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.position, 27);\n    const secondResult = yield device.getState();\n    assert_1.default.ok(secondResult.position);\n    assert_1.default.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\n    assert_1.default.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);\n});",
                  "err": {},
                  "uuid": "591362a6-2aba-4c32-9348-293d0e869046",
                  "parentUUID": "458a121a-f178-4524-99e9-cacc38a9eaba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d7aa822-80b2-4d24-8b55-e4029ff9260f",
                "65fc2a50-4cd9-41bd-adb3-342e933bc3bc",
                "4d68a8d5-51f6-4f4c-90e6-02bdaa93fe1f",
                "591362a6-2aba-4c32-9348-293d0e869046"
              ],
              "failures": [],
              "pending": [
                "ab70e124-cbcb-4518-b318-33b590fe3ca8"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd4e5ff1-0c3b-4229-b2e9-4cf1a96ae834",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                title: 'Solo: A Star Wars Story'\n            });\n        })\n    });\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    device.clearState();\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    assert_1.default.strictEqual(executions, 2);\n});",
                  "err": {},
                  "uuid": "9b78bca3-2559-42ff-a559-f6cffdd7a3ee",
                  "parentUUID": "dd4e5ff1-0c3b-4229-b2e9-4cf1a96ae834",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b78bca3-2559-42ff-a559-f6cffdd7a3ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "784ddf0b-1e80-466e-a41b-a53d136f34ea",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON()\n            });\n        })\n    });\n    const result = yield device.getDateTime();\n    assert_1.default.ok(result instanceof Date);\n});",
                  "err": {},
                  "uuid": "531e3122-3af5-4ca7-822b-32bf4a65fcf3",
                  "parentUUID": "784ddf0b-1e80-466e-a41b-a53d136f34ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "531e3122-3af5-4ca7-822b-32bf4a65fcf3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "581e2800-2844-4d57-a165-45a514cb9c75",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                hash: '12345'\n            });\n        })\n    });\n    const result = yield device.getHash();\n    assert_1.default.strictEqual(result, '12345');\n});",
                  "err": {},
                  "uuid": "bf76c415-5f98-4202-b551-e11e987f9175",
                  "parentUUID": "581e2800-2844-4d57-a165-45a514cb9c75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf76c415-5f98-4202-b551-e11e987f9175"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a74f624-fb53-4d10-8647-ccff7b694aec",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                media_type: 'video'\n            });\n        })\n    });\n    const result = yield device.getMediaType();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVMediaType.video);\n    assert_1.default.deepStrictEqual(result, 'video');\n});",
                  "err": {},
                  "uuid": "d0af2e10-f59e-4140-b188-0f731a6be2be",
                  "parentUUID": "7a74f624-fb53-4d10-8647-ccff7b694aec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0af2e10-f59e-4140-b188-0f731a6be2be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "60b8e99f-9740-40e6-a9b7-1db77a31bdad",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                device_state: 'seeking'\n            });\n        })\n    });\n    const result = yield device.getDeviceState();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVDeviceState.seeking);\n    assert_1.default.deepStrictEqual(result, 'seeking');\n});",
                  "err": {},
                  "uuid": "e7f19bc1-da7a-48ac-ae12-0b04a8f3bdef",
                  "parentUUID": "60b8e99f-9740-40e6-a9b7-1db77a31bdad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7f19bc1-da7a-48ac-ae12-0b04a8f3bdef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "159c0044-4fde-4d97-a9c6-095984eb91f4",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const result = yield device.getTitle();\n    assert_1.default.strictEqual(result, 'My Movie');\n});",
                  "err": {},
                  "uuid": "644a2b56-2e4c-4210-9c1a-5cb5d88486a9",
                  "parentUUID": "159c0044-4fde-4d97-a9c6-095984eb91f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "644a2b56-2e4c-4210-9c1a-5cb5d88486a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "288bf0e0-77db-4050-9842-96b28d9d01a6",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                artist: 'My Artist'\n            });\n        })\n    });\n    const result = yield device.getArtist();\n    assert_1.default.strictEqual(result, 'My Artist');\n});",
                  "err": {},
                  "uuid": "fe2d1af5-501e-4f65-b373-cd0616d09ed0",
                  "parentUUID": "288bf0e0-77db-4050-9842-96b28d9d01a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe2d1af5-501e-4f65-b373-cd0616d09ed0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee249fa5-658d-4ce5-a22b-bf81811a5c00",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                album: 'My ALbum'\n            });\n        })\n    });\n    const result = yield device.getAlbum();\n    assert_1.default.strictEqual(result, 'My ALbum');\n});",
                  "err": {},
                  "uuid": "77b09a8b-3803-48c7-a099-185b2d8cd78b",
                  "parentUUID": "ee249fa5-658d-4ce5-a22b-bf81811a5c00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77b09a8b-3803-48c7-a099-185b2d8cd78b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c86eb0e-06e2-43cd-8bbc-f2a9585366df",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                genre: 'My Genre'\n            });\n        })\n    });\n    const result = yield device.getGenre();\n    assert_1.default.strictEqual(result, 'My Genre');\n});",
                  "err": {},
                  "uuid": "daad89ab-61b8-4380-8df6-8f7d50dd1cda",
                  "parentUUID": "5c86eb0e-06e2-43cd-8bbc-f2a9585366df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "daad89ab-61b8-4380-8df6-8f7d50dd1cda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bdd90c1a-4075-465c-9ce4-e2bab9473af2",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                total_time: 45\n            });\n        })\n    });\n    const result = yield device.getTotalTime();\n    assert_1.default.strictEqual(result, 45);\n});",
                  "err": {},
                  "uuid": "56553a71-9fe0-4473-a27d-0ae8715226bf",
                  "parentUUID": "bdd90c1a-4075-465c-9ce4-e2bab9473af2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56553a71-9fe0-4473-a27d-0ae8715226bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "938003fa-dd87-4ae2-b935-de76bf804f61",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                position: 30\n            });\n        })\n    });\n    const result = yield device.getPosition();\n    assert_1.default.strictEqual(result, 30);\n});",
                  "err": {},
                  "uuid": "9ed06a47-7527-4af3-9245-2dab65d1abde",
                  "parentUUID": "938003fa-dd87-4ae2-b935-de76bf804f61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ed06a47-7527-4af3-9245-2dab65d1abde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79874049-f1ab-477a-b165-65efc36bb374",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                shuffle: 'songs'\n            });\n        })\n    });\n    const result = yield device.getShuffle();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVShuffleState.songs);\n    assert_1.default.deepStrictEqual(result, 'songs');\n});",
                  "err": {},
                  "uuid": "5c7e914f-d431-4cbc-9d20-d620d4e1b0ee",
                  "parentUUID": "79874049-f1ab-477a-b165-65efc36bb374",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c7e914f-d431-4cbc-9d20-d620d4e1b0ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e8a621da-45d3-4b96-9ac9-86607ee9db08",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                repeat: 'all'\n            });\n        })\n    });\n    const result = yield device.getRepeat();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVRepeatState.all);\n    assert_1.default.deepStrictEqual(result, 'all');\n});",
                  "err": {},
                  "uuid": "400ddcb3-6731-4e36-b89e-8825f5b221a1",
                  "parentUUID": "e8a621da-45d3-4b96-9ac9-86607ee9db08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "400ddcb3-6731-4e36-b89e-8825f5b221a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37cce3cc-4e3a-449b-9a93-0df4a1bab890",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                app: 'My App'\n            });\n        })\n    });\n    const result = yield device.getApp();\n    assert_1.default.strictEqual(result, 'My App');\n});",
                  "err": {},
                  "uuid": "08fe58d3-ab6a-465f-bd56-0412522ea581",
                  "parentUUID": "37cce3cc-4e3a-449b-9a93-0df4a1bab890",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08fe58d3-ab6a-465f-bd56-0412522ea581"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4d4d259-0230-4d21-8b99-fc92c48fa119",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                app_id: 'app.example.com'\n            });\n        })\n    });\n    const result = yield device.getAppId();\n    assert_1.default.strictEqual(result, 'app.example.com');\n});",
                  "err": {},
                  "uuid": "08c52462-a50a-4fe1-a876-c2dcb05b9a42",
                  "parentUUID": "e4d4d259-0230-4d21-8b99-fc92c48fa119",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08c52462-a50a-4fe1-a876-c2dcb05b9a42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c983ad43-826c-464b-8a20-c9819a1d431f",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    yield device.pressKey(types_1.NodePyATVKeys.home);\n});",
                  "err": {},
                  "uuid": "62e57542-599e-41bf-a3eb-e662c3f71e5e",
                  "parentUUID": "c983ad43-826c-464b-8a20-c9819a1d431f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2'\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        yield device.pressKey('foo');\n    }), /Unsupported key value foo/);\n});",
                  "err": {},
                  "uuid": "6248b9cd-5257-4967-a9b2-a249cb3ef534",
                  "parentUUID": "c983ad43-826c-464b-8a20-c9819a1d431f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"failure\"}');\n        })\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.pressKey(types_1.NodePyATVKeys.home);\n    }), /Unable to parse pyatv response/);\n});",
                  "err": {},
                  "uuid": "ac0b9c05-697e-4d80-bd4e-950aa9ac0a03",
                  "parentUUID": "c983ad43-826c-464b-8a20-c9819a1d431f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62e57542-599e-41bf-a3eb-e662c3f71e5e",
                "6248b9cd-5257-4967-a9b2-a249cb3ef534",
                "ac0b9c05-697e-4d80-bd4e-950aa9ac0a03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0473e4cc-64d9-4c5b-9887-548b855a7169",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "eb6576a1-580f-4332-8faf-56373663c802",
                  "parentUUID": "0473e4cc-64d9-4c5b-9887-548b855a7169",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb6576a1-580f-4332-8faf-56373663c802"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5fbe5487-3b6d-4e5c-b561-cf305a4b350a",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "aba767b1-e70e-4733-8169-22d81aa9a204",
                  "parentUUID": "5fbe5487-3b6d-4e5c-b561-cf305a4b350a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aba767b1-e70e-4733-8169-22d81aa9a204"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af78425c-edc9-4d58-88d4-55b78a2efe93",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "6c81c6f8-4a49-49b0-a04a-cc290b8dce5f",
                  "parentUUID": "af78425c-edc9-4d58-88d4-55b78a2efe93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c81c6f8-4a49-49b0-a04a-cc290b8dce5f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4273b9d6-1a19-4799-89d8-c02294197a17",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "a33d7159-94c0-4a32-a250-14419c36cd85",
                  "parentUUID": "4273b9d6-1a19-4799-89d8-c02294197a17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a33d7159-94c0-4a32-a250-14419c36cd85"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8bddfe21-59ad-4fdf-a529-59ce748ec9ad",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "6947f038-e7fb-4d86-b7e0-2001987faefe",
                  "parentUUID": "8bddfe21-59ad-4fdf-a529-59ce748ec9ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6947f038-e7fb-4d86-b7e0-2001987faefe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40a38c39-64e3-4d6c-9bc7-d83510f9ec98",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "ebd51ecf-5676-48f4-be14-007c00b7cdbd",
                  "parentUUID": "40a38c39-64e3-4d6c-9bc7-d83510f9ec98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebd51ecf-5676-48f4-be14-007c00b7cdbd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "abecff81-8fe9-4fc0-97c9-c58ea2bc2825",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "01a8681d-8837-4913-b1be-7dbfcca7127d",
                  "parentUUID": "abecff81-8fe9-4fc0-97c9-c58ea2bc2825",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01a8681d-8837-4913-b1be-7dbfcca7127d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c1e2396-5c9f-40d9-9d45-aff5be6c72e1",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "e4f1a0e5-a338-4132-9cec-88c8d52dc0b6",
                  "parentUUID": "5c1e2396-5c9f-40d9-9d45-aff5be6c72e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4f1a0e5-a338-4132-9cec-88c8d52dc0b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "218d64d0-c6d1-4036-a756-b67d8e70795a",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "3f6cd84c-7817-46fb-a278-4aa6479c92cd",
                  "parentUUID": "218d64d0-c6d1-4036-a756-b67d8e70795a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f6cd84c-7817-46fb-a278-4aa6479c92cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67f2db3d-d117-4078-adf2-51261c25cb74",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "283f3080-8b47-4f0a-a303-5db4a9b5add0",
                  "parentUUID": "67f2db3d-d117-4078-adf2-51261c25cb74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "283f3080-8b47-4f0a-a303-5db4a9b5add0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22c67c4d-0907-493d-aa93-1abb421c2c0d",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "bcc9e5ab-504c-48d5-9c50-644a37521259",
                  "parentUUID": "22c67c4d-0907-493d-aa93-1abb421c2c0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bcc9e5ab-504c-48d5-9c50-644a37521259"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f4ae009-14bf-4b1f-9a3b-7837b9e5fe0f",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "be616442-ba7a-445b-a7ae-79344a0d6298",
                  "parentUUID": "5f4ae009-14bf-4b1f-9a3b-7837b9e5fe0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be616442-ba7a-445b-a7ae-79344a0d6298"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6031be79-d227-46e3-8b92-bab3fc0d61fe",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c701b7a8-0923-463e-b0a7-479623e41fa4",
                  "parentUUID": "6031be79-d227-46e3-8b92-bab3fc0d61fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c701b7a8-0923-463e-b0a7-479623e41fa4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8571e100-ad47-487a-8c48-53e7ca9bc059",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "4fd3b776-8320-43ce-9d10-30955efbaca5",
                  "parentUUID": "8571e100-ad47-487a-8c48-53e7ca9bc059",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fd3b776-8320-43ce-9d10-30955efbaca5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0a2ab17-f61e-469a-87ac-c6529f9c0963",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "125db087-8d34-4665-848d-5ce68d612556",
                  "parentUUID": "e0a2ab17-f61e-469a-87ac-c6529f9c0963",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "125db087-8d34-4665-848d-5ce68d612556"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "80ab6840-d748-4b94-86a5-497e7b013301",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "7a38e12e-6531-4cee-9a20-03826d797846",
                  "parentUUID": "80ab6840-d748-4b94-86a5-497e7b013301",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a38e12e-6531-4cee-9a20-03826d797846"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "596ce568-4b19-4354-8e5a-96510e7ac86f",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "4d7941df-5a3c-4c0d-a1ee-f795a870efdd",
                  "parentUUID": "596ce568-4b19-4354-8e5a-96510e7ac86f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d7941df-5a3c-4c0d-a1ee-f795a870efdd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "54288086-30cb-4341-b0a0-1123c6e64080",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "3bb021f8-6628-479f-a578-332a48449c82",
                  "parentUUID": "54288086-30cb-4341-b0a0-1123c6e64080",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bb021f8-6628-479f-a578-332a48449c82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a4acc8e9-154f-4149-84fd-3ceb8fecb1d8",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "cf436f09-24f7-4f85-8b8f-61c99a2bde95",
                  "parentUUID": "a4acc8e9-154f-4149-84fd-3ceb8fecb1d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf436f09-24f7-4f85-8b8f-61c99a2bde95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6548630f-03a2-43db-9c5c-4f846e8aff22",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "456f101c-9e14-487f-b3e3-70154aa41525",
                  "parentUUID": "6548630f-03a2-43db-9c5c-4f846e8aff22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "456f101c-9e14-487f-b3e3-70154aa41525"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a82e1123-b246-4043-b640-13b1b1709cdd",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "9dd582c4-f6ae-4445-b5c6-9a4b7251797d",
                  "parentUUID": "a82e1123-b246-4043-b640-13b1b1709cdd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9dd582c4-f6ae-4445-b5c6-9a4b7251797d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1b406df3-0830-4094-84ee-ef55b52bbd58",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "a2d589eb-ebc8-4969-af24-e87cb3f70450",
                  "parentUUID": "1b406df3-0830-4094-84ee-ef55b52bbd58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2d589eb-ebc8-4969-af24-e87cb3f70450"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c49e466d-1cb5-4a5f-821b-e04bb54c2738",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "22069226-2b9d-4ca7-be8c-5e97512b61be",
                  "parentUUID": "c49e466d-1cb5-4a5f-821b-e04bb54c2738",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22069226-2b9d-4ca7-be8c-5e97512b61be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9773f519-5e15-41e8-9f02-deca23c380f8",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 471,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(4000);\n    const result = yield index_1.default.version();\n    if (result.pyatv === null) {\n        throw new Error('No version found for pyatv. Is it installed in test environment?');\n    }\n    assert_1.default.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\n    assert_1.default.ok(result.pyatv.length >= 5, 'result.pyatv has content');\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "1ec0dc01-5927-4e75-bc5c-8ea02e37f0c8",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.code(1);\n            cp.end('atvremote 0.7.4');\n        })\n    });\n    assert_1.default.ok(result.pyatv);\n    assert_1.default.strictEqual(result.pyatv, '0.7.4');\n});",
                  "err": {},
                  "uuid": "ccff9391-6db1-40a9-b5e2-ab4c0b9625d0",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        noColors: true,\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.code(1).end())\n    });\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "09ca2652-eb85-41c9-85b8-dabfb3cb38c3",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        atvremotePath: '/foo/bar',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "fba8ffd8-7d39-4bc4-82f6-75f31e682d8a",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: true,\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "c4e597bf-2f86-4316-8c40-f4cd1ed0d68c",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: () => { },\n        noColors: true,\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "e7263fd6-64e4-40d2-bd42-5868e56c0b88",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.stderr('Hello World!').code(123).end())\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "fdcb62e6-9ffe-48e4-8b3a-d65cabc63062",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.error(new Error('Hello world!')).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "50d5271b-34a0-465d-99e0-cc39f86fb0e9",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('atvremote 42').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "caa10c86-8c54-4160-a874-35b5820c9944",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on empty module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on empty module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = {};\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "ed25cb8b-8b1b-4e8e-9491-9b1388ccb3b6",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = { version: 42 };\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "6d6c0c83-404d-442b-b7fd-5f52cdaca4cd",
                  "parentUUID": "4e739ef9-b515-45d7-bb6f-2644500f6fcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ec0dc01-5927-4e75-bc5c-8ea02e37f0c8",
                "ccff9391-6db1-40a9-b5e2-ab4c0b9625d0",
                "09ca2652-eb85-41c9-85b8-dabfb3cb38c3",
                "fba8ffd8-7d39-4bc4-82f6-75f31e682d8a",
                "c4e597bf-2f86-4316-8c40-f4cd1ed0d68c",
                "e7263fd6-64e4-40d2-bd42-5868e56c0b88",
                "fdcb62e6-9ffe-48e4-8b3a-d65cabc63062",
                "50d5271b-34a0-465d-99e0-cc39f86fb0e9",
                "caa10c86-8c54-4160-a874-35b5820c9944",
                "ed25cb8b-8b1b-4e8e-9491-9b1388ccb3b6",
                "6d6c0c83-404d-442b-b7fd-5f52cdaca4cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 484,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "882a30fa-f1cb-46b8-911f-94ee9e7f3db2",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5915,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(12000);\n    yield index_1.default.check();\n});",
                  "err": {},
                  "uuid": "8e6ad5d2-c430-4be9-932f-743581c2b0fe",
                  "parentUUID": "882a30fa-f1cb-46b8-911f-94ee9e7f3db2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "b8ba0fbe-e257-4861-bf19-1838a693d702",
                  "parentUUID": "882a30fa-f1cb-46b8-911f-94ee9e7f3db2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout('atvremote 0.5.1').code(1).end();\n            })\n        });\n    }), /Found pyatv, but unforunately it's too old. Please update pyatv./);\n});",
                  "err": {},
                  "uuid": "1c031e8d-29c4-44b6-87dd-9bcafe839708",
                  "parentUUID": "882a30fa-f1cb-46b8-911f-94ee9e7f3db2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let i = 0;\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                if (i === 0) {\n                    cp.stdout('atvremote 0.7.0').code(1).end();\n                    i++;\n                }\n                else {\n                    cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n                }\n            })\n        });\n    }), /Unable to scan for devices/);\n});",
                  "err": {},
                  "uuid": "d4dd4510-1ae5-4edd-9158-11fbe47c9bcb",
                  "parentUUID": "882a30fa-f1cb-46b8-911f-94ee9e7f3db2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e6ad5d2-c430-4be9-932f-743581c2b0fe",
                "b8ba0fbe-e257-4861-bf19-1838a693d702",
                "1c031e8d-29c4-44b6-87dd-9bcafe839708",
                "d4dd4510-1ae5-4edd-9158-11fbe47c9bcb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5919,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b693f70-c465-415f-b054-a85f3f1893ea",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5464,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(8000);\n    const result = yield index_1.default.find();\n    assert_1.default.ok(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "5edc0540-146c-417c-83db-e60198607419",
                  "parentUUID": "4b693f70-c465-415f-b054-a85f3f1893ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.find({\n        atvscriptPath: '/foo/bar',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "dc4dbe10-1a91-4930-9f6c-24a8edc87d21",
                  "parentUUID": "4b693f70-c465-415f-b054-a85f3f1893ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stderr('Hello World!').code(1).end();\n            })\n        });\n    }), /Unable to execute request/);\n});",
                  "err": {},
                  "uuid": "be6002b6-1491-4e6a-82d8-c712321c17ee",
                  "parentUUID": "4b693f70-c465-415f-b054-a85f3f1893ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.error(new Error('Hello world!')).code(1).end();\n            })\n        });\n    }), /Hello world!/);\n});",
                  "err": {},
                  "uuid": "14e97828-a7c9-48b2-b115-9d55b4337601",
                  "parentUUID": "4b693f70-c465-415f-b054-a85f3f1893ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout(JSON.stringify({\n                    'result': 'success',\n                    'datetime': '2020-11-06T20:47:30.840022+01:00',\n                    'devices': []\n                }).substr(1)).end();\n            })\n        });\n    }), /Unable to parse result/);\n});",
                  "err": {},
                  "uuid": "1069306c-3ef5-4090-b6be-7d512a30a50c",
                  "parentUUID": "4b693f70-c465-415f-b054-a85f3f1893ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout({\n                    result: 'error'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "1f7721e1-fa59-4573-912b-5b05bbac5247",
                  "parentUUID": "4b693f70-c465-415f-b054-a85f3f1893ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout({\n                    result: 'success'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "c7f92638-3116-4e58-a8cf-81ca50096e58",
                  "parentUUID": "4b693f70-c465-415f-b054-a85f3f1893ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5edc0540-146c-417c-83db-e60198607419",
                "dc4dbe10-1a91-4930-9f6c-24a8edc87d21",
                "be6002b6-1491-4e6a-82d8-c712321c17ee",
                "14e97828-a7c9-48b2-b115-9d55b4337601",
                "1069306c-3ef5-4090-b6be-7d512a30a50c",
                "1f7721e1-fa59-4573-912b-5b05bbac5247",
                "c7f92638-3116-4e58-a8cf-81ca50096e58"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5471,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a0b7bae2-fc27-49e8-81c3-4a190eca3a68",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = index_1.default.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert_1.default.strictEqual(device.host, '192.168.178.6');\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "c3344cf8-b7f9-4fce-b114-f75299187e99",
                  "parentUUID": "a0b7bae2-fc27-49e8-81c3-4a190eca3a68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3344cf8-b7f9-4fce-b114-f75299187e99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "831cdc13-2ba2-44f1-a862-a2c238aafe3d",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield i.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "496c2043-cd1b-47e6-a7e3-a104289e2f2b",
                  "parentUUID": "831cdc13-2ba2-44f1-a862-a2c238aafe3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "496c2043-cd1b-47e6-a7e3-a104289e2f2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e90ae049-dfb2-4c09-a466-78cbced0314b",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield i.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                assert_1.default.strictEqual(cp.cmd(), 'test');\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "380abb47-b72a-492b-9a79-fd3d2a22f8c0",
                  "parentUUID": "e90ae049-dfb2-4c09-a466-78cbced0314b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "380abb47-b72a-492b-9a79-fd3d2a22f8c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "557e4f43-03b0-48de-9c48-f6d696216ce1",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvscriptPath: 'test' });\n    yield i.find({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "3140fd63-40ef-4764-9444-cb544e28e7c2",
                  "parentUUID": "557e4f43-03b0-48de-9c48-f6d696216ce1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3140fd63-40ef-4764-9444-cb544e28e7c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79c769a1-6b99-4367-ba7b-1e4e654dfe6f",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ debug: true });\n    const d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\n    assert_1.default.deepStrictEqual(d.debug, true);\n});",
                  "err": {},
                  "uuid": "276fc8ac-0f16-4a76-9866-82c5d89c93a1",
                  "parentUUID": "79c769a1-6b99-4367-ba7b-1e4e654dfe6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "276fc8ac-0f16-4a76-9866-82c5d89c93a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "004b03be-26fb-4338-92b6-37395ac19c7a",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVProtocol);",
                  "err": {},
                  "uuid": "a4205b75-c4b0-4cd0-b73f-0d53ef7e711e",
                  "parentUUID": "004b03be-26fb-4338-92b6-37395ac19c7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVMediaType);",
                  "err": {},
                  "uuid": "9ceff449-8bfb-4ccf-854b-f9c950119396",
                  "parentUUID": "004b03be-26fb-4338-92b6-37395ac19c7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "f8726184-84b3-4b97-ac7a-503d2cf8fd59",
                  "parentUUID": "004b03be-26fb-4338-92b6-37395ac19c7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "df74b474-6867-4a59-a411-06aafb1b9a7c",
                  "parentUUID": "004b03be-26fb-4338-92b6-37395ac19c7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "f27a9339-77e4-4ee9-8989-a7790036b7c9",
                  "parentUUID": "004b03be-26fb-4338-92b6-37395ac19c7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "d60503e6-8555-401c-97c4-5c007ab1ce60",
                  "parentUUID": "004b03be-26fb-4338-92b6-37395ac19c7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVKeys);",
                  "err": {},
                  "uuid": "9d8764d7-4e75-49e4-9487-85543c91d3c1",
                  "parentUUID": "004b03be-26fb-4338-92b6-37395ac19c7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVListenerState);",
                  "err": {},
                  "uuid": "20adfcbf-4e62-4694-b7bd-eb2ee350c2f9",
                  "parentUUID": "004b03be-26fb-4338-92b6-37395ac19c7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVPowerState);",
                  "err": {},
                  "uuid": "93240945-0078-4c9d-8d25-15cd9069eee9",
                  "parentUUID": "004b03be-26fb-4338-92b6-37395ac19c7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4205b75-c4b0-4cd0-b73f-0d53ef7e711e",
                "9ceff449-8bfb-4ccf-854b-f9c950119396",
                "f8726184-84b3-4b97-ac7a-503d2cf8fd59",
                "df74b474-6867-4a59-a411-06aafb1b9a7c",
                "f27a9339-77e4-4ee9-8989-a7790036b7c9",
                "d60503e6-8555-401c-97c4-5c007ab1ce60",
                "9d8764d7-4e75-49e4-9487-85543c91d3c1",
                "20adfcbf-4e62-4694-b7bd-eb2ee350c2f9",
                "93240945-0078-4c9d-8d25-15cd9069eee9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "022bc27d-f023-46bd-9239-e658c72494a9",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d889eed5-354d-48d7-a059-660d04e6408b",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = (0, tools_1.addRequestId)();\nassert_1.default.strictEqual(typeof id, 'string');\n(0, tools_1.removeRequestId)(id);",
                  "err": {},
                  "uuid": "706f1f4c-1a2a-4a59-87ac-15d704c5d6b6",
                  "parentUUID": "d889eed5-354d-48d7-a059-660d04e6408b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.removeRequestId)('FOO');",
                  "err": {},
                  "uuid": "b669b3e5-c6df-4ef1-8a09-3489c9b2f29d",
                  "parentUUID": "d889eed5-354d-48d7-a059-660d04e6408b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "706f1f4c-1a2a-4a59-87ac-15d704c5d6b6",
                "b669b3e5-c6df-4ef1-8a09-3489c9b2f29d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bee18307-4df7-410d-8d33-240efaf4e4a1",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "b09270c7-d608-4c9b-99b1-b11647934a08",
                  "parentUUID": "bee18307-4df7-410d-8d33-240efaf4e4a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "4fcf7f00-f214-4fc2-b908-7b4a962727d6",
                  "parentUUID": "bee18307-4df7-410d-8d33-240efaf4e4a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "bb9c5049-4b64-4ab2-a4cc-07e30dc4a45f",
                  "parentUUID": "bee18307-4df7-410d-8d33-240efaf4e4a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "7eaf88ac-fa7f-43cc-988e-1a546db5749c",
                  "parentUUID": "bee18307-4df7-410d-8d33-240efaf4e4a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "2b768454-4b5d-4a42-acfb-67f84e220ee4",
                  "parentUUID": "bee18307-4df7-410d-8d33-240efaf4e4a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b09270c7-d608-4c9b-99b1-b11647934a08",
                "4fcf7f00-f214-4fc2-b908-7b4a962727d6",
                "bb9c5049-4b64-4ab2-a4cc-07e30dc4a45f",
                "7eaf88ac-fa7f-43cc-988e-1a546db5749c",
                "2b768454-4b5d-4a42-acfb-67f84e220ee4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6adb01f7-ca26-4cbd-8ec5-aba735afcb64",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "e1166f0d-3b3d-4745-878e-09f1fb27a834",
                  "parentUUID": "6adb01f7-ca26-4cbd-8ec5-aba735afcb64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "de8ffcf8-c01f-4b00-b836-cb0832dbd92b",
                  "parentUUID": "6adb01f7-ca26-4cbd-8ec5-aba735afcb64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "84aec7df-6853-40ca-a1d5-46e4bb9f227d",
                  "parentUUID": "6adb01f7-ca26-4cbd-8ec5-aba735afcb64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "5062b68f-0f92-4a72-88f0-7ff4029b85a8",
                  "parentUUID": "6adb01f7-ca26-4cbd-8ec5-aba735afcb64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1166f0d-3b3d-4745-878e-09f1fb27a834",
                "de8ffcf8-c01f-4b00-b836-cb0832dbd92b",
                "84aec7df-6853-40ca-a1d5-46e4bb9f227d",
                "5062b68f-0f92-4a72-88f0-7ff4029b85a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "06dc1db9-b3e0-4d36-8ddf-2d107b98986f",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield (0, tools_1.getParamters)();\n    assert_1.default.deepEqual(result, []);\n});",
                  "err": {},
                  "uuid": "8cdd489f-1734-494d-b795-ce716ae57ee6",
                  "parentUUID": "06dc1db9-b3e0-4d36-8ddf-2d107b98986f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield (0, tools_1.getParamters)({\n        host: '192.168.178.2'\n    });\n    assert_1.default.deepEqual(result, ['-s', '192.168.178.2']);\n});",
                  "err": {},
                  "uuid": "32600bbe-ba5a-46a2-9bfe-f5a732955984",
                  "parentUUID": "06dc1db9-b3e0-4d36-8ddf-2d107b98986f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield (0, tools_1.getParamters)({\n        hosts: ['192.168.178.2', '192.168.178.3'],\n        id: '****',\n        protocol: types_1.NodePyATVProtocol.mrp,\n        dmapCredentials: '****',\n        mrpCredentials: '****',\n        airplayCredentials: '****',\n        companionCredentials: '1234',\n        raopCredentials: '::foo:'\n    });\n    assert_1.default.deepEqual(result, [\n        '-s', '192.168.178.2,192.168.178.3',\n        '-i', '****',\n        '--protocol', 'mrp',\n        '--dmap-credentials', '****',\n        '--mrp-credentials', '****',\n        '--airplay-credentials', '****',\n        '--companion-credentials', '1234',\n        '--raop-credentials', '::foo:'\n    ]);\n});",
                  "err": {},
                  "uuid": "6c2f538c-a2c4-4375-b607-c8a7e0afbb9e",
                  "parentUUID": "06dc1db9-b3e0-4d36-8ddf-2d107b98986f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cdd489f-1734-494d-b795-ce716ae57ee6",
                "32600bbe-ba5a-46a2-9bfe-f5a732955984",
                "6c2f538c-a2c4-4375-b607-c8a7e0afbb9e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8d08089-0d0f-4e80-a742-1bfacd865e44",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "1ff5936e-56ba-43dd-a8a9-54fa992b97f4",
                  "parentUUID": "f8d08089-0d0f-4e80-a742-1bfacd865e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = (0, tools_1.parseState)(null, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "7fc1041f-16f9-4635-95b7-35c61e9d0db0",
                  "parentUUID": "f8d08089-0d0f-4e80-a742-1bfacd865e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    powerState: null\n};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: types_1.NodePyATVMediaType.video,\n    deviceState: types_1.NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: types_1.NodePyATVShuffleState.off,\n    repeat: types_1.NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null\n});",
                  "err": {},
                  "uuid": "67145793-7575-4a65-9730-e95aea192165",
                  "parentUUID": "f8d08089-0d0f-4e80-a742-1bfacd865e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert_1.default.throws(() => {\n    (0, tools_1.parseState)(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "74fc88a8-bfca-47e3-b2b6-8c8072c125fc",
                  "parentUUID": "f8d08089-0d0f-4e80-a742-1bfacd865e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "7ba6e0f6-fbf8-472b-82d6-8b9a0b877f8c",
                  "parentUUID": "f8d08089-0d0f-4e80-a742-1bfacd865e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    powerState: null\n};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "6e9fb6d1-9390-4603-a1b1-0de19c1ad7f6",
                  "parentUUID": "f8d08089-0d0f-4e80-a742-1bfacd865e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "796dc8bd-52d9-40cc-8b56-3fb2f9bfa0b8",
                  "parentUUID": "f8d08089-0d0f-4e80-a742-1bfacd865e44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ff5936e-56ba-43dd-a8a9-54fa992b97f4",
                "7fc1041f-16f9-4635-95b7-35c61e9d0db0",
                "67145793-7575-4a65-9730-e95aea192165",
                "74fc88a8-bfca-47e3-b2b6-8c8072c125fc",
                "7ba6e0f6-fbf8-472b-82d6-8b9a0b877f8c",
                "6e9fb6d1-9390-4603-a1b1-0de19c1ad7f6",
                "796dc8bd-52d9-40cc-8b56-3fb2f9bfa0b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}