{
  "stats": {
    "suites": 102,
    "tests": 174,
    "passes": 172,
    "pending": 2,
    "failures": 0,
    "start": "2025-10-14T18:13:56.601Z",
    "end": "2025-10-14T18:14:08.961Z",
    "duration": 12360,
    "testsRegistered": 174,
    "passPercent": 100,
    "pendingPercent": 1.1494252873563218,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "99c6eb65-02f1-4fd1-83cb-84ff520dddc9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9f85afcd-cd7c-44e8-949d-d2ff54e4b46a",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e8a77974-0c8a-450c-a63a-869924d302bc",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "579d1af9-a693-4f0e-84f1-d64318dbfeff",
                  "parentUUID": "e8a77974-0c8a-450c-a63a-869924d302bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "579d1af9-a693-4f0e-84f1-d64318dbfeff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "787f1ee3-9fc6-48dc-90d5-75bf6c06e67b",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "5110ffad-095c-4af9-9433-d0c633a0c16f",
                  "parentUUID": "787f1ee3-9fc6-48dc-90d5-75bf6c06e67b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5110ffad-095c-4af9-9433-d0c633a0c16f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5a01703-c8af-4e6c-a299-932f39a0e190",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "5db1d45a-5f6b-4cd5-ab86-034649c84915",
                  "parentUUID": "a5a01703-c8af-4e6c-a299-932f39a0e190",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5db1d45a-5f6b-4cd5-ab86-034649c84915"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "acc7d4b5-e70b-49cf-bd46-803d3125f732",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "0dda9922-5a54-45fd-aa83-e64a6d18b383",
                  "parentUUID": "acc7d4b5-e70b-49cf-bd46-803d3125f732",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dda9922-5a54-45fd-aa83-e64a6d18b383"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd6c4b41-4a27-49fe-890a-6c00b8667a06",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new import_device_event.default({device,key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "6edcc3a7-bd7b-4c5a-8c8d-2a2c5fe1a4d1",
                  "parentUUID": "bd6c4b41-4a27-49fe-890a-6c00b8667a06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6edcc3a7-bd7b-4c5a-8c8d-2a2c5fe1a4d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "38477c44-e84f-48dc-b859-84212677c25f",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "dea2aa3b-55ce-41c9-82f2-a5f8f6d540f7",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "785a1419-1daf-4f5c-88bc-08a411384b83",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);import_assert.default.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "ee5af4b6-fe98-4c6e-8617-4a032cb9b51e",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{import_assert.default.ok(error instanceof Error);import_assert.default.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "0beb9bb7-5aae-4c76-83b8-ae383f8b7862",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);import_assert.default.strictEqual(spawnCounter,2);import_assert.default.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "f6acf56f-832d-4263-b76f-cf5c4b098abf",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);import_assert.default.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "3b0d3226-acee-44cd-bcfb-4fd8f231ad66",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "2c507da7-6012-47cf-986a-25eb70978e80",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "b4fd6962-b6db-461a-ba33-c2f0f0875aef",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),focus_state:\"unfocused\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"focusState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"unfocused\");import_assert.default.strictEqual(event.newValue,import_types.NodePyATVFocusState.unfocused);import_assert.default.strictEqual(event.value,\"unfocused\");import_assert.default.strictEqual(event.value,import_types.NodePyATVFocusState.unfocused);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "831b7b29-9a9f-439a-80c2-8b4535cf87d6",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),output_devices:[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}],result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"outputDevices\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.deepStrictEqual(event.newValue,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.value,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "de454a6f-b946-436d-b6e7-64369fa13c82",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),result:\"success\",volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"volume\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,20);import_assert.default.strictEqual(event.value,20);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "9326656f-6a46-4777-840d-22aa4055b750",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),foo:\"bar\",result:\"success\"});cp.end()})});device.on(\"update\",event=>{import_assert.default.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "221906f7-8494-41c7-94ee-82b17e1762a5",
                  "parentUUID": "20060969-ecc0-410e-acb2-ebcc56e46e9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dea2aa3b-55ce-41c9-82f2-a5f8f6d540f7",
                "785a1419-1daf-4f5c-88bc-08a411384b83",
                "ee5af4b6-fe98-4c6e-8617-4a032cb9b51e",
                "0beb9bb7-5aae-4c76-83b8-ae383f8b7862",
                "f6acf56f-832d-4263-b76f-cf5c4b098abf",
                "3b0d3226-acee-44cd-bcfb-4fd8f231ad66",
                "2c507da7-6012-47cf-986a-25eb70978e80",
                "b4fd6962-b6db-461a-ba33-c2f0f0875aef",
                "831b7b29-9a9f-439a-80c2-8b4535cf87d6",
                "de454a6f-b946-436d-b6e7-64369fa13c82",
                "9326656f-6a46-4777-840d-22aa4055b750",
                "221906f7-8494-41c7-94ee-82b17e1762a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1ffb2f3-b2eb-4293-9c44-36c4c34ac839",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "f1c1beb1-b6c7-40af-91de-ad2b641c40b2",
                  "parentUUID": "e1ffb2f3-b2eb-4293-9c44-36c4c34ac839",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "4458ad3c-7cd1-40f0-b8b3-a0a8815b09f8",
                  "parentUUID": "e1ffb2f3-b2eb-4293-9c44-36c4c34ac839",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "d29f9f49-f1d3-4c9a-bc3a-ce95045ab433",
                  "parentUUID": "e1ffb2f3-b2eb-4293-9c44-36c4c34ac839",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c4092a09-38bd-4c9e-bf42-f2158c63608b",
                  "parentUUID": "e1ffb2f3-b2eb-4293-9c44-36c4c34ac839",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1c1beb1-b6c7-40af-91de-ad2b641c40b2",
                "4458ad3c-7cd1-40f0-b8b3-a0a8815b09f8",
                "d29f9f49-f1d3-4c9a-bc3a-ce95045ab433"
              ],
              "failures": [],
              "pending": [
                "c4092a09-38bd-4c9e-bf42-f2158c63608b"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4a4d432-7d7a-4a4c-b600-f7491eda6dcf",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "4da5a2df-80da-4a9d-8302-60f459030bc6",
                  "parentUUID": "c4a4d432-7d7a-4a4c-b600-f7491eda6dcf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4da5a2df-80da-4a9d-8302-60f459030bc6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21cec6b8-5bc6-4edb-bdd5-91aa02aa6a30",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const event=new import_lib.NodePyATVDeviceEvent({device,key:\"dateTime\",new:\"bar\",old:\"foo\"});let executions=0;device.once(\"test\",e=>{executions++;import_assert.default.strictEqual(e,event);import_assert.default.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "fad19d27-4c98-4242-8bdf-c29b2690d675",
                  "parentUUID": "21cec6b8-5bc6-4edb-bdd5-91aa02aa6a30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fad19d27-4c98-4242-8bdf-c29b2690d675"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc8b1b50-af7f-498a-8021-ddb14cd37ddb",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "58bb54f7-6783-40d0-a01c-17478793f254",
                  "parentUUID": "cc8b1b50-af7f-498a-8021-ddb14cd37ddb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58bb54f7-6783-40d0-a01c-17478793f254"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e83f92e1-3934-43d2-93f7-99dd0cc31c4c",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();import_assert.default.ok(typeof result,\"number\");import_assert.default.ok(result>=10)",
                  "err": {},
                  "uuid": "f9e93169-20b0-458f-8eaf-16775b4621f6",
                  "parentUUID": "e83f92e1-3934-43d2-93f7-99dd0cc31c4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9e93169-20b0-458f-8eaf-16775b4621f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dce2496c-19a0-4555-aabc-54bf986d95c1",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "1731917a-b3a0-4e5d-99ba-526478ab07f8",
                  "parentUUID": "dce2496c-19a0-4555-aabc-54bf986d95c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1731917a-b3a0-4e5d-99ba-526478ab07f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2ab972d-0faf-4714-aa98-68584d008073",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "95c21f9b-064e-4773-ac1c-7206cffdac7a",
                  "parentUUID": "b2ab972d-0faf-4714-aa98-68584d008073",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95c21f9b-064e-4773-ac1c-7206cffdac7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cfc77a2b-def5-48b3-9441-bb393b4ed360",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "bd200498-26e5-4548-b62c-f41395f73a05",
                  "parentUUID": "cfc77a2b-def5-48b3-9441-bb393b4ed360",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd200498-26e5-4548-b62c-f41395f73a05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c4c25d9-7a47-4d5d-a095-28cc9fdbf7a3",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "d4f078b8-a3b4-4851-adf8-06ae112e9446",
                  "parentUUID": "8c4c25d9-7a47-4d5d-a095-28cc9fdbf7a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4f078b8-a3b4-4851-adf8-06ae112e9446"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1391eb75-f78c-4b48-bc0f-9f94428f05b9",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "8a054c9d-0a13-47f6-a7b5-615b070c7a9e",
                  "parentUUID": "1391eb75-f78c-4b48-bc0f-9f94428f05b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a054c9d-0a13-47f6-a7b5-615b070c7a9e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b02ec0c0-6cc3-43c3-b01b-7fec733f9d43",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "8b070701-be88-466f-9947-85a0cc2f9e38",
                  "parentUUID": "b02ec0c0-6cc3-43c3-b01b-7fec733f9d43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b070701-be88-466f-9947-85a0cc2f9e38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f9b52b5e-dad9-4635-9dc9-cabcf679e09c",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2eddfae6-d3e7-47cf-a6fe-e959062ab529",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "8d3c5017-f5e4-4271-b9ab-0d50a1b6981d",
                  "parentUUID": "2eddfae6-d3e7-47cf-a6fe-e959062ab529",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d3c5017-f5e4-4271-b9ab-0d50a1b6981d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6d0b9d7-c435-4266-92ed-898a29ab1fe2",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "86299618-1de0-46e6-9388-a0d976c06475",
                  "parentUUID": "d6d0b9d7-c435-4266-92ed-898a29ab1fe2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86299618-1de0-46e6-9388-a0d976c06475"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "59816e93-21bf-4238-a98a-3e3ed7b3c49d",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "ebb3210e-6192-40c9-94a7-e688290fb45c",
                  "parentUUID": "59816e93-21bf-4238-a98a-3e3ed7b3c49d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebb3210e-6192-40c9-94a7-e688290fb45c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c8a0c60-7be9-467a-9f93-89f457aec423",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"],host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "26b81631-eca2-4f85-a7e3-6f5802f4b508",
                  "parentUUID": "7c8a0c60-7be9-467a-9f93-89f457aec423",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26b81631-eca2-4f85-a7e3-6f5802f4b508"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7fe7e313-61aa-4e88-afbe-451dba83d6bd",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.strictEqual(device.protocol,import_types.NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "29143c9a-05f5-4800-9dc6-a6cf8e380a23",
                  "parentUUID": "7fe7e313-61aa-4e88-afbe-451dba83d6bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29143c9a-05f5-4800-9dc6-a6cf8e380a23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f0063cd-1d81-4b88-82bb-5cf75315b908",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "19badca1-fa9c-44cb-9b5e-e10e59cba267",
                  "parentUUID": "7f0063cd-1d81-4b88-82bb-5cf75315b908",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19badca1-fa9c-44cb-9b5e-e10e59cba267"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "517e5544-2484-4fc7-86f7-9e59f7cf7938",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "06e65d4a-29c6-4ffd-853a-50d375adbbac",
                  "parentUUID": "517e5544-2484-4fc7-86f7-9e59f7cf7938",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "02cf620a-5268-4720-b776-f19bc14115ec",
                  "parentUUID": "517e5544-2484-4fc7-86f7-9e59f7cf7938",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06e65d4a-29c6-4ffd-853a-50d375adbbac",
                "02cf620a-5268-4720-b776-f19bc14115ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d579885b-8594-492b-ac07-d6b22b7c676d",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "e89d2fd6-dce0-4b59-8b9b-66aff8aeb906",
                  "parentUUID": "d579885b-8594-492b-ac07-d6b22b7c676d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "e00ee4bb-9ea1-4e74-ab9a-580de2086d71",
                  "parentUUID": "d579885b-8594-492b-ac07-d6b22b7c676d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e89d2fd6-dce0-4b59-8b9b-66aff8aeb906",
                "e00ee4bb-9ea1-4e74-ab9a-580de2086d71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6efe0bec-03ad-45d4-a461-3e7c91a0ea6f",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",os:\"TvOS\"});import_assert.default.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "c57d8ffd-7940-4ab2-97cf-b8f4ef7306d2",
                  "parentUUID": "6efe0bec-03ad-45d4-a461-3e7c91a0ea6f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "b6ff6d22-b744-44f2-a8f5-ca6577e05ebe",
                  "parentUUID": "6efe0bec-03ad-45d4-a461-3e7c91a0ea6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c57d8ffd-7940-4ab2-97cf-b8f4ef7306d2",
                "b6ff6d22-b744-44f2-a8f5-ca6577e05ebe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18e446b3-c215-42f7-bfe8-2b43799c28f6",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",version:\"15.5.1\"});import_assert.default.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "580b60a9-273e-4e63-bcd7-76ead3609a93",
                  "parentUUID": "18e446b3-c215-42f7-bfe8-2b43799c28f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "0c72c9f5-ec62-485c-9483-f6e68377eb65",
                  "parentUUID": "18e446b3-c215-42f7-bfe8-2b43799c28f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "580b60a9-273e-4e63-bcd7-76ead3609a93",
                "0c72c9f5-ec62-485c-9483-f6e68377eb65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae74ad5b-9983-4a28-b817-31c1e1e8d408",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:import_types.NodePyATVProtocol.mrp},{port:7e3,protocol:import_types.NodePyATVProtocol.airplay}]});import_assert.default.deepStrictEqual(device.services,[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}])",
                  "err": {},
                  "uuid": "3eeaeb12-3967-4007-9598-3110275316c6",
                  "parentUUID": "ae74ad5b-9983-4a28-b817-31c1e1e8d408",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "f6e24d9b-e81e-4e1d-a303-41082bbd575b",
                  "parentUUID": "ae74ad5b-9983-4a28-b817-31c1e1e8d408",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3eeaeb12-3967-4007-9598-3110275316c6",
                "f6e24d9b-e81e-4e1d-a303-41082bbd575b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76834b4b-3e5b-445d-9e06-358cbea9ee00",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "57df50b4-bbe3-4f9e-9c0f-b13e057a18fc",
                  "parentUUID": "76834b4b-3e5b-445d-9e06-358cbea9ee00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new import_device.default({debug:fn,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "5ece4eb3-2855-4a2d-b69d-2d852cac1c8f",
                  "parentUUID": "76834b4b-3e5b-445d-9e06-358cbea9ee00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "cde93165-4aa1-4411-b505-dd15c129c823",
                  "parentUUID": "76834b4b-3e5b-445d-9e06-358cbea9ee00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57df50b4-bbe3-4f9e-9c0f-b13e057a18fc",
                "5ece4eb3-2855-4a2d-b69d-2d852cac1c8f",
                "cde93165-4aa1-4411-b505-dd15c129c823"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3114bd8c-a0d1-48ca-84d9-40d710855e02",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0);device.debug=true;import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "bec900a1-4798-434d-8710-911141ead458",
                  "parentUUID": "3114bd8c-a0d1-48ca-84d9-40d710855e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "831e78d9-39de-4ba6-a8b5-74e15a5c67d2",
                  "parentUUID": "3114bd8c-a0d1-48ca-84d9-40d710855e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "17548cec-20ea-4fe8-b7f5-2fce0d50db77",
                  "parentUUID": "3114bd8c-a0d1-48ca-84d9-40d710855e02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});const fn=__name(()=>{},\"fn\");import_assert.default.strictEqual(device.debug,void 0);device.debug=fn;import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "6e8c7b16-2df1-4f5d-a67f-3e127f5d0af6",
                  "parentUUID": "3114bd8c-a0d1-48ca-84d9-40d710855e02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bec900a1-4798-434d-8710-911141ead458",
                "831e78d9-39de-4ba6-a8b5-74e15a5c67d2",
                "17548cec-20ea-4fe8-b7f5-2fce0d50db77",
                "6e8c7b16-2df1-4f5d-a67f-3e127f5d0af6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f929b9ff-1f9d-444f-816a-1e928aede51c",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.deepEqual(device.toJSON(),{host:\"192.168.178.2\",id:\"*****\",mac:void 0,name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "57e09735-ca87-4e8e-8e78-278948103689",
                  "parentUUID": "f929b9ff-1f9d-444f-816a-1e928aede51c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={host:\"192.168.178.2\",id:\"*****\",mac:\"469943881251875\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay};const deviceA=new import_device.default(config);const deviceB=new import_device.default(deviceA.toJSON());import_assert.default.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "bff048ea-0bf4-4f74-857d-0c5274b84b7d",
                  "parentUUID": "f929b9ff-1f9d-444f-816a-1e928aede51c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57e09735-ca87-4e8e-8e78-278948103689",
                "bff048ea-0bf4-4f74-857d-0c5274b84b7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0fa86b81-d40b-464c-afce-57ebe8c6d0dd",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "d2b8c923-72c6-4f76-a5f6-14d26af02f61",
                  "parentUUID": "0fa86b81-d40b-464c-afce-57ebe8c6d0dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2b8c923-72c6-4f76-a5f6-14d26af02f61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02845fd6-29f5-4de0-acf2-66e2fbdd5567",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b261a660-8bd1-4838-914f-552a2aa2092d",
                  "parentUUID": "02845fd6-29f5-4de0-acf2-66e2fbdd5567",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const result=await device.getState();import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "4f0ac92f-fbcf-422a-b2c4-cbce2f830bd8",
                  "parentUUID": "02845fd6-29f5-4de0-acf2-66e2fbdd5567",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});import_assert.default.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "70da6c08-cffa-45b3-8c8a-35ce9d6aa1d7",
                  "parentUUID": "02845fd6-29f5-4de0-acf2-66e2fbdd5567",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date().toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();const secondResult=await device.getState();import_assert.default.strictEqual(firstResult.dateTime,secondResult.dateTime);import_assert.default.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "7a3dff35-15fc-4eb0-9ec7-0554ff63282a",
                  "parentUUID": "02845fd6-29f5-4de0-acf2-66e2fbdd5567",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date(new Date().getTime()-1e3).toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();import_assert.default.strictEqual(firstResult.position,27);const secondResult=await device.getState();import_assert.default.ok(secondResult.position);import_assert.default.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);import_assert.default.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "086e3893-49b0-4d4d-bdbc-924ee4b8de9f",
                  "parentUUID": "02845fd6-29f5-4de0-acf2-66e2fbdd5567",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f0ac92f-fbcf-422a-b2c4-cbce2f830bd8",
                "70da6c08-cffa-45b3-8c8a-35ce9d6aa1d7",
                "7a3dff35-15fc-4eb0-9ec7-0554ff63282a",
                "086e3893-49b0-4d4d-bdbc-924ee4b8de9f"
              ],
              "failures": [],
              "pending": [
                "b261a660-8bd1-4838-914f-552a2aa2092d"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77ac781b-8f8b-4b4b-8a05-4576e5f3ab51",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({datetime:\"2020-11-07T22:38:43.608030+01:00\",result:\"success\",title:\"Solo: A Star Wars Story\"})})});import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");import_assert.default.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "a4381174-4204-46be-8d29-0ebfafa988dc",
                  "parentUUID": "77ac781b-8f8b-4b4b-8a05-4576e5f3ab51",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4381174-4204-46be-8d29-0ebfafa988dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c18bdb5f-820f-4fc7-bbb2-c08c4aef4754",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:new Date().toJSON(),result:\"success\"})})});const result=await device.getDateTime();import_assert.default.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "a1edbe6f-d3d1-4a9e-84b7-4303afe6004f",
                  "parentUUID": "c18bdb5f-820f-4fc7-bbb2-c08c4aef4754",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1edbe6f-d3d1-4a9e-84b7-4303afe6004f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74b3dd23-d8c7-4c7f-bba8-cf86c1281748",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({hash:\"12345\",result:\"success\"})})});const result=await device.getHash();import_assert.default.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "3e4cf4ac-e0ee-4d8b-8939-4ef8b6c34538",
                  "parentUUID": "74b3dd23-d8c7-4c7f-bba8-cf86c1281748",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e4cf4ac-e0ee-4d8b-8939-4ef8b6c34538"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cff96320-56da-4e2d-9ada-1eb3b483145d",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({media_type:\"video\",result:\"success\"})})});const result=await device.getMediaType();import_assert.default.deepStrictEqual(result,import_types.NodePyATVMediaType.video);import_assert.default.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "310ad8b4-966a-4866-93f3-8bb4c0988425",
                  "parentUUID": "cff96320-56da-4e2d-9ada-1eb3b483145d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "310ad8b4-966a-4866-93f3-8bb4c0988425"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "15675419-c6ec-4b19-b0bc-56577784f7ce",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({device_state:\"seeking\",result:\"success\"})})});const result=await device.getDeviceState();import_assert.default.deepStrictEqual(result,import_types.NodePyATVDeviceState.seeking);import_assert.default.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "385fdf63-648f-4d48-bd78-cd994244b3e3",
                  "parentUUID": "15675419-c6ec-4b19-b0bc-56577784f7ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "385fdf63-648f-4d48-bd78-cd994244b3e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e5d8db6-9a08-4436-b69b-82907594d457",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();import_assert.default.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "6c7dc305-8056-43f2-aebe-97675b2ad361",
                  "parentUUID": "1e5d8db6-9a08-4436-b69b-82907594d457",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c7dc305-8056-43f2-aebe-97675b2ad361"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ef5164a-c3b0-4967-a6c4-964cc71cbf31",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({artist:\"My Artist\",result:\"success\"})})});const result=await device.getArtist();import_assert.default.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "83cf139d-b35d-499b-82ca-62724403877e",
                  "parentUUID": "0ef5164a-c3b0-4967-a6c4-964cc71cbf31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83cf139d-b35d-499b-82ca-62724403877e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8205a31f-6829-423d-b89c-fe0dbb4808f9",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:\"My ALbum\",result:\"success\"})})});const result=await device.getAlbum();import_assert.default.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "7c440474-5bb7-45be-8cf3-8e671849f97c",
                  "parentUUID": "8205a31f-6829-423d-b89c-fe0dbb4808f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c440474-5bb7-45be-8cf3-8e671849f97c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "145ece22-d9b8-4401-a1da-1b2789768ccf",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({genre:\"My Genre\",result:\"success\"})})});const result=await device.getGenre();import_assert.default.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "dd54eeb8-2150-4623-b9ff-4b3582547135",
                  "parentUUID": "145ece22-d9b8-4401-a1da-1b2789768ccf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd54eeb8-2150-4623-b9ff-4b3582547135"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0de5526b-9bd6-4416-8c3d-ed452a6dd152",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();import_assert.default.strictEqual(result,45)",
                  "err": {},
                  "uuid": "efe64bda-111a-4a95-87e9-e5f51edf4e2b",
                  "parentUUID": "0de5526b-9bd6-4416-8c3d-ed452a6dd152",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "efe64bda-111a-4a95-87e9-e5f51edf4e2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d071ea8a-92ab-4cbf-b5e5-c8a85ec669b1",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({position:30,result:\"success\"})})});const result=await device.getPosition();import_assert.default.strictEqual(result,30)",
                  "err": {},
                  "uuid": "95240899-8d73-439f-a749-0a3c1f4ced30",
                  "parentUUID": "d071ea8a-92ab-4cbf-b5e5-c8a85ec669b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95240899-8d73-439f-a749-0a3c1f4ced30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c47ff58e-8786-427d-a432-58d1ef49fa5f",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();import_assert.default.deepStrictEqual(result,import_types.NodePyATVShuffleState.songs);import_assert.default.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "c522a7c3-2ee3-472c-b44b-737e2316ce76",
                  "parentUUID": "c47ff58e-8786-427d-a432-58d1ef49fa5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c522a7c3-2ee3-472c-b44b-737e2316ce76"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "61ced847-3f9e-4d13-a91f-6112f74c08fb",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({repeat:\"all\",result:\"success\"})})});const result=await device.getRepeat();import_assert.default.deepStrictEqual(result,import_types.NodePyATVRepeatState.all);import_assert.default.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "3537add3-c499-4b89-b72c-8555e13c53b0",
                  "parentUUID": "61ced847-3f9e-4d13-a91f-6112f74c08fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3537add3-c499-4b89-b72c-8555e13c53b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89bf494c-741e-4a0a-a4df-30108f6186e3",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app:\"My App\",result:\"success\"})})});const result=await device.getApp();import_assert.default.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "3c14fd69-7c3a-47b3-9aac-a988ee3ef367",
                  "parentUUID": "89bf494c-741e-4a0a-a4df-30108f6186e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c14fd69-7c3a-47b3-9aac-a988ee3ef367"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36043e6a-8f46-42e7-9204-9725a2894279",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app_id:\"app.example.com\",result:\"success\"})})});const result=await device.getAppId();import_assert.default.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "14c11451-bf06-4f61-a55e-ee0d3cf6397b",
                  "parentUUID": "36043e6a-8f46-42e7-9204-9725a2894279",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14c11451-bf06-4f61-a55e-ee0d3cf6397b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e205b41e-f35e-42a6-96df-e4e051607f14",
              "title": "getPowerState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPowerState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({power_state:\"on\",result:\"success\"})})});const result=await device.getPowerState();import_assert.default.strictEqual(result,import_types.NodePyATVPowerState.on)",
                  "err": {},
                  "uuid": "541c9bce-a854-4c56-98fc-c9ca1f9961ac",
                  "parentUUID": "e205b41e-f35e-42a6-96df-e4e051607f14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "541c9bce-a854-4c56-98fc-c9ca1f9961ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c83810cf-ce4b-46a0-bcd6-ce7fc2c68c90",
              "title": "getVolume()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getVolume() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",volume:50})})});const result=await device.getVolume();import_assert.default.strictEqual(result,50)",
                  "err": {},
                  "uuid": "f8ebca68-93e7-41f6-9548-c5ed18b33a84",
                  "parentUUID": "c83810cf-ce4b-46a0-bcd6-ce7fc2c68c90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8ebca68-93e7-41f6-9548-c5ed18b33a84"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "804f7c0a-31e2-4ee1-888d-68d33845517e",
              "title": "getFocusState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getFocusState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({focus_state:\"focused\",result:\"success\"})})});const result=await device.getFocusState();import_assert.default.strictEqual(result,import_types.NodePyATVFocusState.focused)",
                  "err": {},
                  "uuid": "8b23ced9-2ea3-402c-a73c-4041b85ddc47",
                  "parentUUID": "804f7c0a-31e2-4ee1-888d-68d33845517e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b23ced9-2ea3-402c-a73c-4041b85ddc47"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0cce1ab3-ed56-426b-ae83-8d87ce23fb67",
              "title": "getOutputDevices()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getOutputDevices() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({output_devices:[{identifier:\"foo\",name:\"Apple TV\"}],result:\"success\"})})});const result=await device.getOutputDevices();import_assert.default.deepStrictEqual(result,[{identifier:\"foo\",name:\"Apple TV\"}])",
                  "err": {},
                  "uuid": "945edaeb-9fdf-4e9a-979e-be86f49ae3af",
                  "parentUUID": "0cce1ab3-ed56-426b-ae83-8d87ce23fb67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "945edaeb-9fdf-4e9a-979e-be86f49ae3af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8650a47-5bd5-41fc-9f60-5030f2997261",
              "title": "getContentIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getContentIdentifier() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({content_identifier:\"1234\",result:\"success\"})})});const result=await device.getContentIdentifier();import_assert.default.strictEqual(result,\"1234\")",
                  "err": {},
                  "uuid": "a354fdd7-4bc6-45b8-b803-cf72e045d096",
                  "parentUUID": "f8650a47-5bd5-41fc-9f60-5030f2997261",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a354fdd7-4bc6-45b8-b803-cf72e045d096"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ce889fd-ed51-4016-bbbd-db51d214a051",
              "title": "getiTunesStoreIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getiTunesStoreIdentifier() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({itunes_store_identifier:1234,result:\"success\"})})});const result=await device.getiTunesStoreIdentifier();import_assert.default.strictEqual(result,1234)",
                  "err": {},
                  "uuid": "9ac0f911-b258-4001-b43e-6c59465c0061",
                  "parentUUID": "4ce889fd-ed51-4016-bbbd-db51d214a051",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ac0f911-b258-4001-b43e-6c59465c0061"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84d0d849-1c6d-4a7c-8c8b-fa8111031046",
              "title": "getEpisodeNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getEpisodeNumber() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({episode_number:12,result:\"success\"})})});const result=await device.getEpisodeNumber();import_assert.default.strictEqual(result,12)",
                  "err": {},
                  "uuid": "5666a952-0b04-4037-bc25-7209e08b05ac",
                  "parentUUID": "84d0d849-1c6d-4a7c-8c8b-fa8111031046",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5666a952-0b04-4037-bc25-7209e08b05ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "26689970-4f3b-4141-a471-d0e326546a8c",
              "title": "getSeasonNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeasonNumber() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",season_number:2})})});const result=await device.getSeasonNumber();import_assert.default.strictEqual(result,2)",
                  "err": {},
                  "uuid": "88defeee-27fd-4c83-b3fb-8157762a4c93",
                  "parentUUID": "26689970-4f3b-4141-a471-d0e326546a8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88defeee-27fd-4c83-b3fb-8157762a4c93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f67081f2-c885-47ff-8631-12a24c659c16",
              "title": "getSeriesName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeriesName() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",series_name:\"The Testing Disaster\"})})});const result=await device.getSeriesName();import_assert.default.strictEqual(result,\"The Testing Disaster\")",
                  "err": {},
                  "uuid": "4d8c091a-de4d-40fb-94b7-4f145a39d10d",
                  "parentUUID": "f67081f2-c885-47ff-8631-12a24c659c16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d8c091a-de4d-40fb-94b7-4f145a39d10d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "09de4850-28e8-4b74-bd20-f6efc26d9cef",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();import_assert.default.strictEqual(result.length,25);import_assert.default.strictEqual(result[0].id,\"com.apple.Fitness\");import_assert.default.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "c91d7183-b4d1-457e-ade9-2988ca079078",
                  "parentUUID": "09de4850-28e8-4b74-bd20-f6efc26d9cef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c91d7183-b4d1-457e-ade9-2988ca079078"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "66952831-71cd-4d12-a176-99cd67108c98",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(import_types.NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "1f43a037-c445-4495-8c65-5c549d0aab92",
                  "parentUUID": "66952831-71cd-4d12-a176-99cd67108c98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});await import_assert.default.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "29f1e44c-5dfa-4cd3-ab20-53eb1f97ce97",
                  "parentUUID": "66952831-71cd-4d12-a176-99cd67108c98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"failure\"}')})});await import_assert.default.rejects(async()=>{await device.pressKey(import_types.NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "1c7e4c9f-615c-44d8-850c-dba60eb2dc7a",
                  "parentUUID": "66952831-71cd-4d12-a176-99cd67108c98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f43a037-c445-4495-8c65-5c549d0aab92",
                "29f1e44c-5dfa-4cd3-ab20-53eb1f97ce97",
                "1c7e4c9f-615c-44d8-850c-dba60eb2dc7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dae6bf7a-cc1c-4a0a-b4e7-34896449a987",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9515d5f6-b0ef-4183-9e37-bbdc59d756d0",
                  "parentUUID": "dae6bf7a-cc1c-4a0a-b4e7-34896449a987",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9515d5f6-b0ef-4183-9e37-bbdc59d756d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2845f7a9-ce10-46f3-aeb2-2ae712ded383",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b576c44e-d890-4eac-b3f6-9800b9b08adb",
                  "parentUUID": "2845f7a9-ce10-46f3-aeb2-2ae712ded383",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b576c44e-d890-4eac-b3f6-9800b9b08adb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3bfe0f13-b501-44d0-a9ad-c52b779efec9",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "55ee5632-0851-45b9-aeb0-d4626836d76b",
                  "parentUUID": "3bfe0f13-b501-44d0-a9ad-c52b779efec9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55ee5632-0851-45b9-aeb0-d4626836d76b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9125d50e-0f7f-45e3-9041-434770941251",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "34ae8e2a-4da0-49a0-9c33-fe08684d3a72",
                  "parentUUID": "9125d50e-0f7f-45e3-9041-434770941251",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34ae8e2a-4da0-49a0-9c33-fe08684d3a72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f69895da-a85e-4297-9845-74714990503b",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "3b3e9031-c673-43ca-8040-e8b76e09ca3c",
                  "parentUUID": "f69895da-a85e-4297-9845-74714990503b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b3e9031-c673-43ca-8040-e8b76e09ca3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2a1fd663-7318-4aba-ab8e-a38ea2855d0c",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "cfe0cbfa-ba40-409f-a646-784ea90aa825",
                  "parentUUID": "2a1fd663-7318-4aba-ab8e-a38ea2855d0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfe0cbfa-ba40-409f-a646-784ea90aa825"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da732d22-455a-4d1b-9651-94998a4452e7",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "13c62952-2e68-418c-9517-07a94d5b0121",
                  "parentUUID": "da732d22-455a-4d1b-9651-94998a4452e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13c62952-2e68-418c-9517-07a94d5b0121"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33420999-f848-4067-80ab-18f23c9ab0e4",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "54f6f607-d047-496e-a218-51d836779f2d",
                  "parentUUID": "33420999-f848-4067-80ab-18f23c9ab0e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54f6f607-d047-496e-a218-51d836779f2d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa0de123-f39c-4f74-a968-0badac35d136",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "0acf8e03-3390-4a47-ac58-d96f7e9c78ad",
                  "parentUUID": "fa0de123-f39c-4f74-a968-0badac35d136",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0acf8e03-3390-4a47-ac58-d96f7e9c78ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "895c65b1-18da-4047-a73e-f1817d170ced",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1ca07094-dc5e-470f-bf0d-863db6c94f07",
                  "parentUUID": "895c65b1-18da-4047-a73e-f1817d170ced",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ca07094-dc5e-470f-bf0d-863db6c94f07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48c59263-2873-41d3-b524-c8f5e0e89b53",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "cb5d26bb-a442-487d-9d1c-3599de6fa880",
                  "parentUUID": "48c59263-2873-41d3-b524-c8f5e0e89b53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb5d26bb-a442-487d-9d1c-3599de6fa880"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e9e7af2-af2d-427a-9dd9-f9a6b64ec9db",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "67049c27-1305-4c38-a92d-2fb0c09d23c1",
                  "parentUUID": "1e9e7af2-af2d-427a-9dd9-f9a6b64ec9db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67049c27-1305-4c38-a92d-2fb0c09d23c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c1aa812-bcf1-47f1-b22d-30d6f3219de9",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "99057cf6-5705-44b9-b380-2796e43d9351",
                  "parentUUID": "0c1aa812-bcf1-47f1-b22d-30d6f3219de9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99057cf6-5705-44b9-b380-2796e43d9351"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "029c55a4-87d0-440d-99aa-023e54494676",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "937f5bb1-1cfe-4e30-b4a9-020134cb99ec",
                  "parentUUID": "029c55a4-87d0-440d-99aa-023e54494676",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "937f5bb1-1cfe-4e30-b4a9-020134cb99ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c96ea16-e67e-4c32-9674-b1b15e311ce7",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "e6ce71fa-4fff-404a-a934-3f8a93b13410",
                  "parentUUID": "0c96ea16-e67e-4c32-9674-b1b15e311ce7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6ce71fa-4fff-404a-a934-3f8a93b13410"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "20f15ae1-6c77-4eaf-a33f-4d4a6fc8aaee",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "e78496fd-8cbd-497a-b958-5e2e28a018b7",
                  "parentUUID": "20f15ae1-6c77-4eaf-a33f-4d4a6fc8aaee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e78496fd-8cbd-497a-b958-5e2e28a018b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc4431b2-27c6-4811-9ced-4973378f3e7f",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b325b5db-4cb9-4522-8217-2bacde652d85",
                  "parentUUID": "bc4431b2-27c6-4811-9ced-4973378f3e7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b325b5db-4cb9-4522-8217-2bacde652d85"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dfc84af2-6590-4216-b487-19c536370827",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "2fc09445-52f9-4a81-9127-dd8952b6ba12",
                  "parentUUID": "dfc84af2-6590-4216-b487-19c536370827",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fc09445-52f9-4a81-9127-dd8952b6ba12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "12b7aaa5-7e0f-4721-a963-e7cead3f7f1a",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "374b71dc-682d-4512-97b2-854cf85aefd6",
                  "parentUUID": "12b7aaa5-7e0f-4721-a963-e7cead3f7f1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "374b71dc-682d-4512-97b2-854cf85aefd6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c298308f-92e9-4a71-8263-cddc6fae5562",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "6c7bc268-6a3c-48e9-8d69-fc59a9937d4d",
                  "parentUUID": "c298308f-92e9-4a71-8263-cddc6fae5562",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c7bc268-6a3c-48e9-8d69-fc59a9937d4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03310f26-a362-4ff4-a579-df3151f0492c",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1e421518-5ec9-4bab-8450-81ed9802d6ee",
                  "parentUUID": "03310f26-a362-4ff4-a579-df3151f0492c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e421518-5ec9-4bab-8450-81ed9802d6ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f74ed0c5-f086-4bd9-919b-55c8dd521052",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "4c3ffae1-6d88-49be-b7ff-18190741f608",
                  "parentUUID": "f74ed0c5-f086-4bd9-919b-55c8dd521052",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c3ffae1-6d88-49be-b7ff-18190741f608"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22ef2c44-0245-4511-ad25-058f97d75219",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "e0475553-4361-48a4-9743-77f4c6187f21",
                  "parentUUID": "22ef2c44-0245-4511-ad25-058f97d75219",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0475553-4361-48a4-9743-77f4c6187f21"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0dacfeaa-23a7-47b3-85b1-14556b73ae1b",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "9101d952-e1c2-4908-94a7-2f2efba559b9",
                  "parentUUID": "0dacfeaa-23a7-47b3-85b1-14556b73ae1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9101d952-e1c2-4908-94a7-2f2efba559b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e8488a28-060d-4caa-81f9-ebf2031be519",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "229ec59c-e0a3-49f0-a904-a90506871b3c",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 756,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await import_lib.default.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}import_assert.default.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");import_assert.default.ok(result.pyatv.length>=5,\"result.pyatv has content\");import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "d665e063-0a5e-4471-bb14-0c9dc489c8e1",
                  "parentUUID": "229ec59c-e0a3-49f0-a904-a90506871b3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});import_assert.default.ok(result.pyatv);import_assert.default.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "65e69a75-c509-40ec-ba91-499ca7e8608d",
                  "parentUUID": "229ec59c-e0a3-49f0-a904-a90506871b3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())});import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "49db67c3-7123-4227-ba56-f2a58de86cae",
                  "parentUUID": "229ec59c-e0a3-49f0-a904-a90506871b3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({atvremotePath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "97235ba3-139d-46eb-a0f6-8a43cec38762",
                  "parentUUID": "229ec59c-e0a3-49f0-a904-a90506871b3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "3713fb5b-e60a-4dff-a7d3-a456b4edd22e",
                  "parentUUID": "229ec59c-e0a3-49f0-a904-a90506871b3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "7e60e724-ec5a-45e1-bbb0-9b9f764169d1",
                  "parentUUID": "229ec59c-e0a3-49f0-a904-a90506871b3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.stderr(\"Hello World!\").code(123).end())});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "6d17ade9-b60a-4cc9-b51e-9b1dae5b732c",
                  "parentUUID": "229ec59c-e0a3-49f0-a904-a90506871b3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "a1d88558-2835-4593-b523-aeee5cb80887",
                  "parentUUID": "229ec59c-e0a3-49f0-a904-a90506871b3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "be8d4533-6fff-469f-aadf-d692c8dea813",
                  "parentUUID": "229ec59c-e0a3-49f0-a904-a90506871b3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d665e063-0a5e-4471-bb14-0c9dc489c8e1",
                "65e69a75-c509-40ec-ba91-499ca7e8608d",
                "49db67c3-7123-4227-ba56-f2a58de86cae",
                "97235ba3-139d-46eb-a0f6-8a43cec38762",
                "3713fb5b-e60a-4dff-a7d3-a456b4edd22e",
                "7e60e724-ec5a-45e1-bbb0-9b9f764169d1",
                "6d17ade9-b60a-4cc9-b51e-9b1dae5b732c",
                "a1d88558-2835-4593-b523-aeee5cb80887",
                "be8d4533-6fff-469f-aadf-d692c8dea813"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 768,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c082c5de-a947-446c-b112-e6bfe6b08bf3",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5905,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await import_lib.default.check()",
                  "err": {},
                  "uuid": "e7fe2900-d7e7-4357-a0d9-bd738a881a44",
                  "parentUUID": "c082c5de-a947-446c-b112-e6bfe6b08bf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "2c79e3db-140b-48ec-80a9-76283e4f720c",
                  "parentUUID": "c082c5de-a947-446c-b112-e6bfe6b08bf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "dd2e8c23-0733-47c3-8f93-b9e70318fb49",
                  "parentUUID": "c082c5de-a947-446c-b112-e6bfe6b08bf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "37fc093e-98c2-43f9-b30c-d06118a9b505",
                  "parentUUID": "c082c5de-a947-446c-b112-e6bfe6b08bf3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7fe2900-d7e7-4357-a0d9-bd738a881a44",
                "2c79e3db-140b-48ec-80a9-76283e4f720c",
                "dd2e8c23-0733-47c3-8f93-b9e70318fb49",
                "37fc093e-98c2-43f9-b30c-d06118a9b505"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5911,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5455,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await import_lib.default.find();import_assert.default.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "a78ade46-649c-4f14-a197-961073d318a5",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.find({atvscriptPath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "63abac09-28a1-45f5-ab6f-bc2bbe6aa7af",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "52bf5006-090d-4b36-ac78-f8c182dfdf83",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "73e5bed6-c078-413c-8054-bc3c52dda5bc",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\",result:\"failure\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "b1668e1d-1425-4cbb-8a60-922782f5f3d4",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(JSON.stringify({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "61cc59d3-bf58-489f-885f-676f82342c26",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "48db48b8-3bb3-4f7e-af0d-fa77a0638267",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "5318c5eb-ad7b-486e-ac77-a99e4445bce3",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",identifier:\"xxx\",name:\"Vardagsrum\"}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,void 0);import_assert.default.strictEqual(devices[0].modelName,void 0);import_assert.default.strictEqual(devices[0].os,void 0);import_assert.default.strictEqual(devices[0].version,void 0);import_assert.default.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "b340809c-4b2a-48b6-aad7-6733ac0da6a0",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",device_info:{model:\"Gen4K\",model_str:\"Apple TV 4K\",operating_system:\"TvOS\",version:\"15.5.1\"},identifier:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}]}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,\"Gen4K\");import_assert.default.strictEqual(devices[0].modelName,\"Apple TV 4K\");import_assert.default.strictEqual(devices[0].os,\"TvOS\");import_assert.default.strictEqual(devices[0].version,\"15.5.1\");import_assert.default.deepStrictEqual(devices[0].services,[{port:49152,protocol:import_lib.NodePyATVProtocol.mrp},{port:7e3,protocol:import_lib.NodePyATVProtocol.airplay}])",
                  "err": {},
                  "uuid": "d2ab04ff-009f-455b-80fc-caeb42408853",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});import_assert.default.strictEqual(devices.length,4);import_assert.default.strictEqual(devices[0].name,\"Living Room\");import_assert.default.strictEqual(devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(devices[1].name,\"Kitchen\");import_assert.default.strictEqual(devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(devices[2].name,\"Bedroom\");import_assert.default.strictEqual(devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(devices[3].name,\"Basement\");import_assert.default.strictEqual(devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "6caf37d4-9e10-472b-931b-068c9febaff7",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);import_assert.default.strictEqual(response.devices.length,4);import_assert.default.strictEqual(response.errors.length,2);import_assert.default.strictEqual(response.devices[0].name,\"Living Room\");import_assert.default.strictEqual(response.devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(response.devices[1].name,\"Kitchen\");import_assert.default.strictEqual(response.devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(response.devices[2].name,\"Bedroom\");import_assert.default.strictEqual(response.devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(response.devices[3].name,\"Basement\");import_assert.default.strictEqual(response.devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");import_assert.default.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");import_assert.default.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "747ae515-b351-4f76-beb2-f368606e351c",
                  "parentUUID": "f8f206d3-99d6-45c5-847d-ce3c8feaad23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a78ade46-649c-4f14-a197-961073d318a5",
                "63abac09-28a1-45f5-ab6f-bc2bbe6aa7af",
                "52bf5006-090d-4b36-ac78-f8c182dfdf83",
                "73e5bed6-c078-413c-8054-bc3c52dda5bc",
                "b1668e1d-1425-4cbb-8a60-922782f5f3d4",
                "61cc59d3-bf58-489f-885f-676f82342c26",
                "48db48b8-3bb3-4f7e-af0d-fa77a0638267",
                "5318c5eb-ad7b-486e-ac77-a99e4445bce3",
                "b340809c-4b2a-48b6-aad7-6733ac0da6a0",
                "d2ab04ff-009f-455b-80fc-caeb42408853",
                "6caf37d4-9e10-472b-931b-068c9febaff7",
                "747ae515-b351-4f76-beb2-f368606e351c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5469,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff771ffa-9d82-4d7d-96a9-d18f74e26c7e",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=import_lib.default.device({host:\"192.168.178.6\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.6\");import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "2357ea19-2906-4565-a1ec-9c88cec07b5e",
                  "parentUUID": "ff771ffa-9d82-4d7d-96a9-d18f74e26c7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2357ea19-2906-4565-a1ec-9c88cec07b5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc513a07-f595-4f9b-afcb-e2904fbe15ac",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await i.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "defe4dd6-e45c-4a50-986b-cfc2c0d58f4c",
                  "parentUUID": "bc513a07-f595-4f9b-afcb-e2904fbe15ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "defe4dd6-e45c-4a50-986b-cfc2c0d58f4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5cef78ce-5c2c-4049-a809-322bc2e2b6cc",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await import_assert.default.rejects(async()=>{await i.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "33461945-692c-458f-b7f9-ffa312e5fe75",
                  "parentUUID": "5cef78ce-5c2c-4049-a809-322bc2e2b6cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33461945-692c-458f-b7f9-ffa312e5fe75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ca786ce-9281-49ee-b97e-6babe727069b",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvscriptPath:\"test\"});await i.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "c9211e4e-19ad-42a2-bfb4-779df3348823",
                  "parentUUID": "7ca786ce-9281-49ee-b97e-6babe727069b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9211e4e-19ad-42a2-bfb4-779df3348823"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43b4aa7e-85a6-4060-9b02-9f0e394a5473",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({debug:true});const d=i.device({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "d99ca821-8ab8-4e45-8cfc-ee886472227d",
                  "parentUUID": "43b4aa7e-85a6-4060-9b02-9f0e394a5473",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d99ca821-8ab8-4e45-8cfc-ee886472227d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "061750c8-6e0e-497c-baf5-d4652cc8633a",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVProtocol)",
                  "err": {},
                  "uuid": "40d20c8d-8f48-44ca-8ef1-b0c4526ddda2",
                  "parentUUID": "061750c8-6e0e-497c-baf5-d4652cc8633a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVMediaType)",
                  "err": {},
                  "uuid": "832e5e97-c6f1-4e12-a7b3-97b5c5536555",
                  "parentUUID": "061750c8-6e0e-497c-baf5-d4652cc8633a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "f1f4584c-c32b-488c-bd12-bc751ef4402c",
                  "parentUUID": "061750c8-6e0e-497c-baf5-d4652cc8633a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "4abbc57f-ec7d-4575-95f8-00d4be8b993f",
                  "parentUUID": "061750c8-6e0e-497c-baf5-d4652cc8633a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "d566738a-3e33-47d3-a5bf-78c582b4f71f",
                  "parentUUID": "061750c8-6e0e-497c-baf5-d4652cc8633a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "0da4e3ef-9050-458e-af8a-b9b0d546e5d7",
                  "parentUUID": "061750c8-6e0e-497c-baf5-d4652cc8633a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVKeys)",
                  "err": {},
                  "uuid": "cc85f2b5-2f7e-443b-a606-31992df57baa",
                  "parentUUID": "061750c8-6e0e-497c-baf5-d4652cc8633a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVListenerState)",
                  "err": {},
                  "uuid": "984f1d92-1764-4eb2-9f0d-6469c65e8ccd",
                  "parentUUID": "061750c8-6e0e-497c-baf5-d4652cc8633a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVPowerState)",
                  "err": {},
                  "uuid": "322e33d4-c6b2-4b8f-9b2c-b4059d7f3cf9",
                  "parentUUID": "061750c8-6e0e-497c-baf5-d4652cc8633a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40d20c8d-8f48-44ca-8ef1-b0c4526ddda2",
                "832e5e97-c6f1-4e12-a7b3-97b5c5536555",
                "f1f4584c-c32b-488c-bd12-bc751ef4402c",
                "4abbc57f-ec7d-4575-95f8-00d4be8b993f",
                "d566738a-3e33-47d3-a5bf-78c582b4f71f",
                "0da4e3ef-9050-458e-af8a-b9b0d546e5d7",
                "cc85f2b5-2f7e-443b-a606-31992df57baa",
                "984f1d92-1764-4eb2-9f0d-6469c65e8ccd",
                "322e33d4-c6b2-4b8f-9b2c-b4059d7f3cf9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c2825e20-7c24-4e2d-97f5-1fcc72274cb4",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ca9e2211-0fc5-4440-a06e-1cfd1655fe25",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=(0,import_tools.addRequestId)();import_assert.default.strictEqual(typeof id,\"string\");(0,import_tools.removeRequestId)(id)",
                  "err": {},
                  "uuid": "8ccd1529-2581-47f7-b63d-ac76d1bfe010",
                  "parentUUID": "ca9e2211-0fc5-4440-a06e-1cfd1655fe25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.removeRequestId)(\"FOO\")",
                  "err": {},
                  "uuid": "f3c81b4d-6e0c-4647-bcc2-f87424e8826c",
                  "parentUUID": "ca9e2211-0fc5-4440-a06e-1cfd1655fe25",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ccd1529-2581-47f7-b63d-ac76d1bfe010",
                "f3c81b4d-6e0c-4647-bcc2-f87424e8826c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "85998399-ed9f-4c90-9ac3-1ae609627c02",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "439a6d1e-535d-48b0-ae93-dc41cecc616d",
                  "parentUUID": "85998399-ed9f-4c90-9ac3-1ae609627c02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "712c9ae1-e126-4cc1-820a-3b16f5e12e1a",
                  "parentUUID": "85998399-ed9f-4c90-9ac3-1ae609627c02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "9ca52506-49df-4e18-a243-2e9c6ba0c97c",
                  "parentUUID": "85998399-ed9f-4c90-9ac3-1ae609627c02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "6d80c7d2-f561-48a0-a011-f0ca5fb5cc11",
                  "parentUUID": "85998399-ed9f-4c90-9ac3-1ae609627c02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\"),noColors:true})",
                  "err": {},
                  "uuid": "9cf6905a-8c60-46f5-9f89-c8fc0de25e39",
                  "parentUUID": "85998399-ed9f-4c90-9ac3-1ae609627c02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "439a6d1e-535d-48b0-ae93-dc41cecc616d",
                "712c9ae1-e126-4cc1-820a-3b16f5e12e1a",
                "9ca52506-49df-4e18-a243-2e9c6ba0c97c",
                "6d80c7d2-f561-48a0-a011-f0ca5fb5cc11",
                "9cf6905a-8c60-46f5-9f89-c8fc0de25e39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3260f3bb-88af-41c9-a899-6b636edf1fed",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "0ae9111d-776d-4125-a32e-ca78c5453666",
                  "parentUUID": "3260f3bb-88af-41c9-a899-6b636edf1fed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "fbbf8345-84ea-43de-bb09-bf89e27e8466",
                  "parentUUID": "3260f3bb-88af-41c9-a899-6b636edf1fed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "43259f32-66cb-42df-a877-9c9e87791a2e",
                  "parentUUID": "3260f3bb-88af-41c9-a899-6b636edf1fed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "a71645b0-896c-4c8d-a093-afeb37b6f83e",
                  "parentUUID": "3260f3bb-88af-41c9-a899-6b636edf1fed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ae9111d-776d-4125-a32e-ca78c5453666",
                "fbbf8345-84ea-43de-bb09-bf89e27e8466",
                "43259f32-66cb-42df-a877-9c9e87791a2e",
                "a71645b0-896c-4c8d-a093-afeb37b6f83e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a9080be-10a3-4bca-8032-fabaa7599e39",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)();import_assert.default.deepEqual(result,[])",
                  "err": {},
                  "uuid": "1221924e-687c-4ada-a189-630cf213655d",
                  "parentUUID": "4a9080be-10a3-4bca-8032-fabaa7599e39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({host:\"192.168.178.2\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "982e2a73-e92e-42ba-8c30-b820aa82500c",
                  "parentUUID": "4a9080be-10a3-4bca-8032-fabaa7599e39",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({airplayCredentials:\"****\",companionCredentials:\"1234\",dmapCredentials:\"****\",hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",mrpCredentials:\"****\",protocol:import_types.NodePyATVProtocol.mrp,raopCredentials:\"::foo:\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "af08583e-81cf-4176-b1f7-1c973dc26462",
                  "parentUUID": "4a9080be-10a3-4bca-8032-fabaa7599e39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1221924e-687c-4ada-a189-630cf213655d",
                "982e2a73-e92e-42ba-8c30-b820aa82500c",
                "af08583e-81cf-4176-b1f7-1c973dc26462"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f97ad664-c747-44d4-8d63-9bcf35277957",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "1b410d70-7102-4662-88c7-b9954f2fd0e7",
                  "parentUUID": "f97ad664-c747-44d4-8d63-9bcf35277957",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.parseState)(null,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "1e887d18-8427-4ad2-8aec-290e24703a84",
                  "parentUUID": "f97ad664-c747-44d4-8d63-9bcf35277957",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,content_identifier:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",episode_number:null,focus_state:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",itunes_store_identifier:null,media_type:\"video\",output_devices:null,position:27,power_state:null,repeat:\"off\",result:\"success\",season_number:null,series_name:null,shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097,volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "6e2eed97-7b30-4e0d-b9d2-2af875b0de86",
                  "parentUUID": "f97ad664-c747-44d4-8d63-9bcf35277957",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};import_assert.default.throws(()=>{(0,import_tools.parseState)(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "a8e51d8e-264b-47d9-9ce9-65764d07b438",
                  "parentUUID": "f97ad664-c747-44d4-8d63-9bcf35277957",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "0e58ec71-0196-431c-b835-24e9b3205b4c",
                  "parentUUID": "f97ad664-c747-44d4-8d63-9bcf35277957",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:Infinity,app:0,app_id:891645381647289,artist:90,content_identifier:null,datetime:true,device_state:43,episode_number:null,focus_state:null,genre:Math.PI,hash:1337,itunes_store_identifier:null,media_type:false,output_devices:null,position:\"0:30.123\",power_state:null,repeat:true,result:\"success\",season_number:null,series_name:null,shuffle:false,title:void 0,total_time:\"23min\",volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "84e38ccd-ea95-4a14-9998-9f243320465e",
                  "parentUUID": "f97ad664-c747-44d4-8d63-9bcf35277957",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={device_state:\"initiating\",media_type:\"3d-experience\",repeat:\"nothing\",shuffle:\"everything\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "81758fea-8abc-4aa0-b669-242beb4923d8",
                  "parentUUID": "f97ad664-c747-44d4-8d63-9bcf35277957",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b410d70-7102-4662-88c7-b9954f2fd0e7",
                "1e887d18-8427-4ad2-8aec-290e24703a84",
                "6e2eed97-7b30-4e0d-b9d2-2af875b0de86",
                "a8e51d8e-264b-47d9-9ce9-65764d07b438",
                "0e58ec71-0196-431c-b835-24e9b3205b4c",
                "84e38ccd-ea95-4a14-9998-9f243320465e",
                "81758fea-8abc-4aa0-b669-242beb4923d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}