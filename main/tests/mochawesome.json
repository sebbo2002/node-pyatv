{
  "stats": {
    "suites": 93,
    "tests": 165,
    "passes": 163,
    "pending": 2,
    "failures": 0,
    "start": "2024-08-04T09:29:34.739Z",
    "end": "2024-08-04T09:29:46.768Z",
    "duration": 12029,
    "testsRegistered": 165,
    "passPercent": 100,
    "pendingPercent": 1.2121212121212122,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "00988f84-29d8-4a2d-b1cb-5eb35a4247e2",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "99ca0852-e1e6-45a5-a04e-49873912430c",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "66e5d346-95f0-46ab-8902-37d3070ed08d",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "30cfdfca-996f-456c-9ce1-2f2c534180f7",
                  "parentUUID": "66e5d346-95f0-46ab-8902-37d3070ed08d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30cfdfca-996f-456c-9ce1-2f2c534180f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d939151d-3915-4e76-8e38-8c8ead5284bb",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "059edd64-bfbb-42ee-b9c4-e81ae69ec951",
                  "parentUUID": "d939151d-3915-4e76-8e38-8c8ead5284bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "059edd64-bfbb-42ee-b9c4-e81ae69ec951"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4bfbaf6c-9c8e-43d9-83eb-7a5a88faf4d3",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "bb786a8b-e273-456e-8874-5841c09d3c82",
                  "parentUUID": "4bfbaf6c-9c8e-43d9-83eb-7a5a88faf4d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb786a8b-e273-456e-8874-5841c09d3c82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7cadebc9-8f33-4621-ba0e-0758687d0acd",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "f10a3562-2074-4f4e-b8e4-4cc106401150",
                  "parentUUID": "7cadebc9-8f33-4621-ba0e-0758687d0acd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f10a3562-2074-4f4e-b8e4-4cc106401150"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "028a63a3-cb80-4a43-8161-67aebf1c245e",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "aaf0f1f3-0840-45c8-aa46-bf9d42d32504",
                  "parentUUID": "028a63a3-cb80-4a43-8161-67aebf1c245e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aaf0f1f3-0840-45c8-aa46-bf9d42d32504"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7c64a2a1-cc9d-4399-9353-d450f8ec30d0",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:title', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "16e93298-3c64-4a43-929d-140adec38164",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'title');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'My Movie');\n        assert.strictEqual(event.value, 'My Movie');\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "cef1843e-2c9f-49e0-ab36-cba0c8d1507f",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst sort = [];\nawait Promise.race([\n    new Promise(cb => {\n        device.once('update', () => {\n            sort.push('update');\n            cb(undefined);\n        });\n    }),\n    new Promise(cb => {\n        device.once('update:title', () => {\n            sort.push('update:title');\n            cb(undefined);\n        });\n    })\n]);\nassert.deepStrictEqual(sort, ['update:title', 'update']);",
                  "err": {},
                  "uuid": "b7effe05-674a-4f3d-8227-7234358fa4a1",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('error', error => {\n        assert.ok(error instanceof Error);\n        assert.ok(error.toString().includes('invalid credentials: 321'));\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "3f63fee8-9092-48f8-bf85-321b2ef35f9d",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter = 0;\nlet eventCounter = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        if (spawnCounter === 0) {\n            cp.onStdIn(() => cp.end());\n        }\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n        spawnCounter++;\n        if (spawnCounter >= 2) {\n            cp.end();\n        }\n    })\n});\nconst listener = () => {\n    eventCounter++;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\nawait device.getState();\ndevice.off('update', listener);\nassert.strictEqual(spawnCounter, 2);\nassert.strictEqual(eventCounter, 1);",
                  "err": {},
                  "uuid": "7c92f2bc-2b7b-4061-87f5-0db2351e9333",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nlet callCounter = 0;\nconst error = new Error('This is an error. Be nice.');\ndevice.once('error', err => {\n    assert.strictEqual(err, error);\n    callCounter++;\n});\nconst listener = () => {\n    throw error;\n};\ndevice.on('update', listener);\nawait new Promise(cb => setTimeout(cb, 0));\ndevice.off('update', listener);\nassert.strictEqual(callCounter, 1);",
                  "err": {},
                  "uuid": "94bdb6c7-e6c1-423b-aa0b-3293cba54678",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n    })\n});\nawait new Promise(cb => {\n    device.once('update:powerState', event => {\n        assert.ok(event instanceof NodePyATVDeviceEvent);\n        assert.strictEqual(event.key, 'powerState');\n        assert.strictEqual(event.oldValue, null);\n        assert.strictEqual(event.newValue, 'off');\n        assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n        assert.strictEqual(event.value, 'off');\n        assert.strictEqual(event.value, NodePyATVPowerState.off);\n        assert.deepStrictEqual(event.device, device);\n        cb(undefined);\n    });\n});",
                  "err": {},
                  "uuid": "5202357a-ec33-4b35-b6a2-500acb96cf12",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            power_state: 'off'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'powerState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'off');\n    assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n    assert.strictEqual(event.value, 'off');\n    assert.strictEqual(event.value, NodePyATVPowerState.off);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "24eedd68-0365-461f-a08f-8001abb3a64c",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            focus_state: 'unfocused'\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'focusState');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 'unfocused');\n    assert.strictEqual(event.newValue, NodePyATVFocusState.unfocused);\n    assert.strictEqual(event.value, 'unfocused');\n    assert.strictEqual(event.value, NodePyATVFocusState.unfocused);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "3b3c2681-6992-49ea-ab79-e77d8480f133",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            output_devices: [{\n                    name: 'Living room',\n                    identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n                }]\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'outputDevices');\n    assert.strictEqual(event.oldValue, null);\n    assert.deepStrictEqual(event.newValue, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.value, [{\n            name: 'Living room',\n            identifier: 'AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE'\n        }]);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "bc7f3b33-ad0a-4129-be64-4d7ab77b89a2",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            volume: 20.0\n        });\n        cp.end();\n    })\n});\nlet counter = 0;\ndevice.on('update', event => {\n    assert.ok(event instanceof NodePyATVDeviceEvent);\n    assert.strictEqual(event.key, 'volume');\n    assert.strictEqual(event.oldValue, null);\n    assert.strictEqual(event.newValue, 20);\n    assert.strictEqual(event.value, 20);\n    assert.deepStrictEqual(event.device, device);\n    counter++;\n});\nawait new Promise(cb => setTimeout(cb, 10));\nassert.strictEqual(counter, 1);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "5df3d1e9-19e2-436f-97c1-6dc36f3cfdf2",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            foo: 'bar'\n        });\n        cp.end();\n    })\n});\ndevice.on('update', event => {\n    assert.fail(`Got an update event for a new field: ${event}`);\n});\nawait new Promise(cb => setTimeout(cb, 10));\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "965438db-ea9f-4eca-aac3-b31bd14e0410",
                  "parentUUID": "26180658-bf8b-4bb5-92ba-0e46f4a927de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16e93298-3c64-4a43-929d-140adec38164",
                "cef1843e-2c9f-49e0-ab36-cba0c8d1507f",
                "b7effe05-674a-4f3d-8227-7234358fa4a1",
                "3f63fee8-9092-48f8-bf85-321b2ef35f9d",
                "7c92f2bc-2b7b-4061-87f5-0db2351e9333",
                "94bdb6c7-e6c1-423b-aa0b-3293cba54678",
                "5202357a-ec33-4b35-b6a2-500acb96cf12",
                "24eedd68-0365-461f-a08f-8001abb3a64c",
                "3b3c2681-6992-49ea-ab79-e77d8480f133",
                "bc7f3b33-ad0a-4129-be64-4d7ab77b89a2",
                "5df3d1e9-19e2-436f-97c1-6dc36f3cfdf2",
                "965438db-ea9f-4eca-aac3-b31bd14e0410"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "efa7e454-6886-4e5e-a8ff-646a9712078a",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error = new Error();\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.error(error).end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.strictEqual(err, error);\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "ef369f9b-561c-4a92-8f5d-dc95d24cc3ec",
                  "parentUUID": "efa7e454-6886-4e5e-a8ff-646a9712078a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stderr('Hello World!').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "af2763fc-c014-4fa5-9337-2693e80dfafa",
                  "parentUUID": "efa7e454-6886-4e5e-a8ff-646a9712078a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('#').end();\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.on('update', listener);\nawait new Promise(cb => {\n    device.once('error', err => {\n        assert.ok(err instanceof Error);\n        assert.ok(err.toString().includes('Unable to parse stdout json: SyntaxError'));\n        cb(undefined);\n    });\n});\ndevice.off('update', listener);",
                  "err": {},
                  "uuid": "f483d5ab-40f4-41fc-8c13-8ae779d5c251",
                  "parentUUID": "efa7e454-6886-4e5e-a8ff-646a9712078a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9a21f405-0c92-449b-8ebb-e796d5507d76",
                  "parentUUID": "efa7e454-6886-4e5e-a8ff-646a9712078a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef369f9b-561c-4a92-8f5d-dc95d24cc3ec",
                "af2763fc-c014-4fa5-9337-2693e80dfafa",
                "f483d5ab-40f4-41fc-8c13-8ae779d5c251"
              ],
              "failures": [],
              "pending": [
                "9a21f405-0c92-449b-8ebb-e796d5507d76"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f8efa97-8abb-49a1-800f-eb7062df7f84",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\ndevice.removeAllListeners('update');",
                  "err": {},
                  "uuid": "5abaa79c-9f16-4264-a52b-4505990a0eda",
                  "parentUUID": "8f8efa97-8abb-49a1-800f-eb7062df7f84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5abaa79c-9f16-4264-a52b-4505990a0eda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14e049b7-9026-4b1a-8a0c-798807a19f85",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert.strictEqual(e, event);\n    assert.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "344bc48e-6e88-4ef5-8cb8-44fa2d5c7e5d",
                  "parentUUID": "14e049b7-9026-4b1a-8a0c-798807a19f85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "344bc48e-6e88-4ef5-8cb8-44fa2d5c7e5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7e99993-a10d-450e-b737-1590d8bb32b6",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "9d876035-9a25-4b50-b9b4-bbd3c26a3c90",
                  "parentUUID": "e7e99993-a10d-450e-b737-1590d8bb32b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d876035-9a25-4b50-b9b4-bbd3c26a3c90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d02ad094-3077-4e28-8e0f-e63579ddd138",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert.ok(typeof result, 'number');\nassert.ok(result >= 10);",
                  "err": {},
                  "uuid": "875502c5-c76d-4c9e-8b76-060f83432e95",
                  "parentUUID": "d02ad094-3077-4e28-8e0f-e63579ddd138",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "875502c5-c76d-4c9e-8b76-060f83432e95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16fd1248-f430-4ff6-8870-bc84e985e45e",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "90c5078e-aaf8-4139-ab31-baf6a69d6738",
                  "parentUUID": "16fd1248-f430-4ff6-8870-bc84e985e45e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90c5078e-aaf8-4139-ab31-baf6a69d6738"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "556fa382-d1a2-4bb6-9d33-8ba110455fec",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listeners('test').length, 1);\nassert.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "de7bb951-a372-4422-a71c-1662b2c88dd7",
                  "parentUUID": "556fa382-d1a2-4bb6-9d33-8ba110455fec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de7bb951-a372-4422-a71c-1662b2c88dd7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47ab4ed3-4be4-44ce-a32e-70823170a36e",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "082ebe6b-c055-4814-9dd3-b71616bf72cc",
                  "parentUUID": "47ab4ed3-4be4-44ce-a32e-70823170a36e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "082ebe6b-c055-4814-9dd3-b71616bf72cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "163fd3fd-b132-4a72-913e-6b33026bc331",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "3105832a-d4fe-4210-89e0-dbfc71c2bafc",
                  "parentUUID": "163fd3fd-b132-4a72-913e-6b33026bc331",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3105832a-d4fe-4210-89e0-dbfc71c2bafc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f1954ca4-80a2-43b3-8e72-434955e306fb",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.rawListeners('test').length, 1);\nassert.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "b27b76c6-c264-4104-8768-6d94bd7393b3",
                  "parentUUID": "f1954ca4-80a2-43b3-8e72-434955e306fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b27b76c6-c264-4104-8768-6d94bd7393b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02fdabeb-8fc4-4120-906c-75da11a4a114",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    // empty listener\n};\ndevice.addListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 1);\ndevice.removeListener('update', listener);\nassert.deepStrictEqual(device.listenerCount('update'), 0);",
                  "err": {},
                  "uuid": "1789eb3b-f1f7-469c-890c-b60e677445c6",
                  "parentUUID": "02fdabeb-8fc4-4120-906c-75da11a4a114",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1789eb3b-f1f7-469c-890c-b60e677445c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "993e4d15-1b14-4b57-8a18-54bffd285f3e",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4ccb324a-1437-47ef-92d6-30846bc0e85c",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "30e30720-19b8-46e9-b861-c7e9cbe4e953",
                  "parentUUID": "4ccb324a-1437-47ef-92d6-30846bc0e85c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30e30720-19b8-46e9-b861-c7e9cbe4e953"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c2fa4a50-4afc-45af-b5c6-b9042c513810",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "1cc8819d-ceab-4f2c-b324-e5168d6e5a92",
                  "parentUUID": "c2fa4a50-4afc-45af-b5c6-b9042c513810",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1cc8819d-ceab-4f2c-b324-e5168d6e5a92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ebe1521-4195-4c08-a43f-c6b684bc3635",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "cc683cc0-722d-440e-ad0f-70acc53ce997",
                  "parentUUID": "6ebe1521-4195-4c08-a43f-c6b684bc3635",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc683cc0-722d-440e-ad0f-70acc53ce997"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d799fed3-87fe-4d2f-a535-5b2ee3019671",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    allIDs: [\n        'some_id_1',\n        'some_id_2',\n        'some_id_3',\n    ]\n});\nassert.deepStrictEqual(device.allIDs, [\n    'some_id_1',\n    'some_id_2',\n    'some_id_3',\n]);",
                  "err": {},
                  "uuid": "7c61f2e8-82ce-414e-b777-5b69877c2e1b",
                  "parentUUID": "d799fed3-87fe-4d2f-a535-5b2ee3019671",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c61f2e8-82ce-414e-b777-5b69877c2e1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4f1c9bb-830a-41a4-98a0-89751725647e",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.strictEqual(device.protocol, NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "80d34958-268f-4ce0-8e1e-afa3cb41d3a2",
                  "parentUUID": "b4f1c9bb-830a-41a4-98a0-89751725647e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80d34958-268f-4ce0-8e1e-afa3cb41d3a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b565d3d2-bec1-4d76-ba50-2f6017138a68",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    mac: 'AA:BB:CC:DD:EE:FF'\n});\nassert.strictEqual(device.mac, 'AA:BB:CC:DD:EE:FF');",
                  "err": {},
                  "uuid": "817688a2-e887-4a4b-8744-7c6d5f5894ae",
                  "parentUUID": "b565d3d2-bec1-4d76-ba50-2f6017138a68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "817688a2-e887-4a4b-8744-7c6d5f5894ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63935c02-d221-4cfe-9209-4fa673f1f9f1",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    model: 'Gen4K'\n});\nassert.strictEqual(device.model, 'Gen4K');",
                  "err": {},
                  "uuid": "7c631f9b-7869-43ec-a23e-775a4f43a4be",
                  "parentUUID": "63935c02-d221-4cfe-9209-4fa673f1f9f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.model, undefined);",
                  "err": {},
                  "uuid": "e29bd0d7-e929-4011-bdce-84a2162f4145",
                  "parentUUID": "63935c02-d221-4cfe-9209-4fa673f1f9f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c631f9b-7869-43ec-a23e-775a4f43a4be",
                "e29bd0d7-e929-4011-bdce-84a2162f4145"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "965dbdef-7317-42da-9286-b028e221b48d",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    modelName: 'Apple TV 4K'\n});\nassert.strictEqual(device.modelName, 'Apple TV 4K');",
                  "err": {},
                  "uuid": "96df27e1-e80b-497b-b32a-0d69b217061e",
                  "parentUUID": "965dbdef-7317-42da-9286-b028e221b48d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.modelName, undefined);",
                  "err": {},
                  "uuid": "590d4233-65fa-4f01-b6f4-1e5e082048e5",
                  "parentUUID": "965dbdef-7317-42da-9286-b028e221b48d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96df27e1-e80b-497b-b32a-0d69b217061e",
                "590d4233-65fa-4f01-b6f4-1e5e082048e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5fed69d-59fb-40ac-8254-bd7634c74444",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    os: 'TvOS'\n});\nassert.strictEqual(device.os, 'TvOS');",
                  "err": {},
                  "uuid": "1c3957cf-c1c9-49f3-9153-7b58e100315c",
                  "parentUUID": "a5fed69d-59fb-40ac-8254-bd7634c74444",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.os, undefined);",
                  "err": {},
                  "uuid": "7f38ca19-34fe-42e1-bd05-dcb59a02974c",
                  "parentUUID": "a5fed69d-59fb-40ac-8254-bd7634c74444",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c3957cf-c1c9-49f3-9153-7b58e100315c",
                "7f38ca19-34fe-42e1-bd05-dcb59a02974c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83a7434f-0eb5-4cd4-a83f-761afebcb5ce",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    version: '15.5.1'\n});\nassert.strictEqual(device.version, '15.5.1');",
                  "err": {},
                  "uuid": "2618b572-381a-4b33-bc9f-c90e851c9a13",
                  "parentUUID": "83a7434f-0eb5-4cd4-a83f-761afebcb5ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.version, undefined);",
                  "err": {},
                  "uuid": "6013728e-89cb-4723-8b70-134ec01a81ef",
                  "parentUUID": "83a7434f-0eb5-4cd4-a83f-761afebcb5ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2618b572-381a-4b33-bc9f-c90e851c9a13",
                "6013728e-89cb-4723-8b70-134ec01a81ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b7e22ae-fcca-47e3-8022-3381518a8736",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    services: [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]\n});\nassert.deepStrictEqual(device.services, [\n    {\n        protocol: 'mrp',\n        port: 49152\n    },\n    {\n        protocol: 'airplay',\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "b9a20f6f-eb66-4c30-903e-1d31dc4a2ce9",
                  "parentUUID": "4b7e22ae-fcca-47e3-8022-3381518a8736",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.services, undefined);",
                  "err": {},
                  "uuid": "c289b835-679d-4de8-ae78-f6d4885b0dd6",
                  "parentUUID": "4b7e22ae-fcca-47e3-8022-3381518a8736",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9a20f6f-eb66-4c30-903e-1d31dc4a2ce9",
                "c289b835-679d-4de8-ae78-f6d4885b0dd6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c4412dc-7f6d-40b4-8cf0-5641cf062213",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "1dd003b2-4a30-42c8-a2a4-14e839b811e5",
                  "parentUUID": "2c4412dc-7f6d-40b4-8cf0-5641cf062213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn = () => { };\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "99f5cb25-e10a-44a4-b83a-a81fe93979f7",
                  "parentUUID": "2c4412dc-7f6d-40b4-8cf0-5641cf062213",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "3dcc9c38-42ef-4f05-8549-713d9c0461f0",
                  "parentUUID": "2c4412dc-7f6d-40b4-8cf0-5641cf062213",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1dd003b2-4a30-42c8-a2a4-14e839b811e5",
                "99f5cb25-e10a-44a4-b83a-a81fe93979f7",
                "3dcc9c38-42ef-4f05-8549-713d9c0461f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c18cdee9-0971-4f72-acba-643cf00f5623",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "edb80c9c-1763-4f9e-8ef2-a6ea4b43ff97",
                  "parentUUID": "c18cdee9-0971-4f72-acba-643cf00f5623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "269ae297-6f51-4b79-9b92-a9739aa0ab19",
                  "parentUUID": "c18cdee9-0971-4f72-acba-643cf00f5623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "1e295566-9cde-4a42-9068-69c3e04f3c92",
                  "parentUUID": "c18cdee9-0971-4f72-acba-643cf00f5623",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nconst fn = () => {\n};\nassert.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "d2e9942e-457f-4d26-8896-e45857a4a63b",
                  "parentUUID": "c18cdee9-0971-4f72-acba-643cf00f5623",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edb80c9c-1763-4f9e-8ef2-a6ea4b43ff97",
                "269ae297-6f51-4b79-9b92-a9739aa0ab19",
                "1e295566-9cde-4a42-9068-69c3e04f3c92",
                "d2e9942e-457f-4d26-8896-e45857a4a63b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73434bc2-a19b-4127-b222-cdcea91673b9",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "08f665a9-baa1-4484-bea3-a800b2296859",
                  "parentUUID": "73434bc2-a19b-4127-b222-cdcea91673b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n};\nconst deviceA = new NodePyATVDevice(config);\nconst deviceB = new NodePyATVDevice(deviceA.toJSON());\nassert.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "6a72f16e-ddb7-4b00-b06d-f79bba53e664",
                  "parentUUID": "73434bc2-a19b-4127-b222-cdcea91673b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08f665a9-baa1-4484-bea3-a800b2296859",
                "6a72f16e-ddb7-4b00-b06d-f79bba53e664"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac5d5fee-a0d7-442c-ab98-af9077b3080a",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "7326d6c8-f6b6-44ff-8576-c0fdd496446b",
                  "parentUUID": "ac5d5fee-a0d7-442c-ab98-af9077b3080a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7326d6c8-f6b6-44ff-8576-c0fdd496446b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "780a4e29-6ba8-4124-9f76-ea78b3b34ac9",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "99a65a4e-2dfa-46b2-b6bd-a3a7e4eb4278",
                  "parentUUID": "780a4e29-6ba8-4124-9f76-ea78b3b34ac9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst result = await device.getState();\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    focusState: null,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    volume: null,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "6ba03425-d06b-4613-b64e-f451d634da8d",
                  "parentUUID": "780a4e29-6ba8-4124-9f76-ea78b3b34ac9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'failure',\n            datetime: '2021-11-24T21:13:36.424576+03:00',\n            exception: 'invalid credentials: 321',\n            stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n        });\n    })\n});\nassert.rejects(async () => {\n    await device.getState();\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "cf82a59c-c516-49c0-bdfc-2e8629184a37",
                  "parentUUID": "780a4e29-6ba8-4124-9f76-ea78b3b34ac9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nconst secondResult = await device.getState();\nassert.strictEqual(firstResult.dateTime, secondResult.dateTime);\nassert.strictEqual(executions, 1);",
                  "err": {},
                  "uuid": "436cce93-9f28-4525-a1b1-defe27aa630b",
                  "parentUUID": "780a4e29-6ba8-4124-9f76-ea78b3b34ac9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date(new Date().getTime() - 1000).toJSON(),\n            hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n            media_type: 'video',\n            device_state: 'playing',\n            title: 'Solo: A Star Wars Story',\n            artist: null,\n            album: null,\n            genre: null,\n            total_time: 8097,\n            position: 27,\n            shuffle: 'off',\n            repeat: 'off',\n            app: 'Disney+',\n            app_id: 'com.disney.disneyplus'\n        });\n    })\n});\nconst firstResult = await device.getState();\nassert.strictEqual(firstResult.position, 27);\nconst secondResult = await device.getState();\nassert.ok(secondResult.position);\nassert.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\nassert.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);",
                  "err": {},
                  "uuid": "b8b39f38-5012-4223-ae0e-02e7fd64c305",
                  "parentUUID": "780a4e29-6ba8-4124-9f76-ea78b3b34ac9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ba03425-d06b-4613-b64e-f451d634da8d",
                "cf82a59c-c516-49c0-bdfc-2e8629184a37",
                "436cce93-9f28-4525-a1b1-defe27aa630b",
                "b8b39f38-5012-4223-ae0e-02e7fd64c305"
              ],
              "failures": [],
              "pending": [
                "99a65a4e-2dfa-46b2-b6bd-a3a7e4eb4278"
              ],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "390e6949-abff-4d8a-b7aa-618e30656f2d",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions = 0;\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        executions++;\n        cp.end({\n            result: 'success',\n            datetime: '2020-11-07T22:38:43.608030+01:00',\n            title: 'Solo: A Star Wars Story'\n        });\n    })\n});\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\ndevice.clearState();\nassert.deepStrictEqual(await device.getTitle(), 'Solo: A Star Wars Story');\nassert.strictEqual(executions, 2);",
                  "err": {},
                  "uuid": "6a6053f4-baa4-4cd2-a190-d59d1a5cd5ee",
                  "parentUUID": "390e6949-abff-4d8a-b7aa-618e30656f2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a6053f4-baa4-4cd2-a190-d59d1a5cd5ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3121db13-b4a5-4901-ac55-2dbbf96726b4",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            datetime: new Date().toJSON()\n        });\n    })\n});\nconst result = await device.getDateTime();\nassert.ok(result instanceof Date);",
                  "err": {},
                  "uuid": "ce657c99-f9c4-4935-a025-d5fb19999feb",
                  "parentUUID": "3121db13-b4a5-4901-ac55-2dbbf96726b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce657c99-f9c4-4935-a025-d5fb19999feb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1eab576c-2025-45bd-a012-a5355b3b384a",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            hash: '12345'\n        });\n    })\n});\nconst result = await device.getHash();\nassert.strictEqual(result, '12345');",
                  "err": {},
                  "uuid": "69c0aa52-1ac2-454e-a011-e1e212d5184e",
                  "parentUUID": "1eab576c-2025-45bd-a012-a5355b3b384a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69c0aa52-1ac2-454e-a011-e1e212d5184e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "311594eb-c9fe-4524-b1cd-3d214de93bf6",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            media_type: 'video'\n        });\n    })\n});\nconst result = await device.getMediaType();\nassert.deepStrictEqual(result, NodePyATVMediaType.video);\nassert.deepStrictEqual(result, 'video');",
                  "err": {},
                  "uuid": "7f7b025d-1c00-4b8a-97ab-314a8975cdb5",
                  "parentUUID": "311594eb-c9fe-4524-b1cd-3d214de93bf6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f7b025d-1c00-4b8a-97ab-314a8975cdb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70185c98-a6cd-4db0-92f0-b78bd03fe61d",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            device_state: 'seeking'\n        });\n    })\n});\nconst result = await device.getDeviceState();\nassert.deepStrictEqual(result, NodePyATVDeviceState.seeking);\nassert.deepStrictEqual(result, 'seeking');",
                  "err": {},
                  "uuid": "a26163e1-7265-423b-b6f0-c4e5c406ec6c",
                  "parentUUID": "70185c98-a6cd-4db0-92f0-b78bd03fe61d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a26163e1-7265-423b-b6f0-c4e5c406ec6c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0425a18d-6d91-4a13-92fb-f802ff3cf173",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst result = await device.getTitle();\nassert.strictEqual(result, 'My Movie');",
                  "err": {},
                  "uuid": "bd286662-05a4-4e1b-9ec7-8c4ae76ab1e5",
                  "parentUUID": "0425a18d-6d91-4a13-92fb-f802ff3cf173",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd286662-05a4-4e1b-9ec7-8c4ae76ab1e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89f04bbb-48d3-4684-b1f7-22c2322194d7",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            artist: 'My Artist'\n        });\n    })\n});\nconst result = await device.getArtist();\nassert.strictEqual(result, 'My Artist');",
                  "err": {},
                  "uuid": "194722fa-250d-44c3-bb1f-290b435a2d04",
                  "parentUUID": "89f04bbb-48d3-4684-b1f7-22c2322194d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "194722fa-250d-44c3-bb1f-290b435a2d04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b529b33-f0c4-4d4e-a72a-c1fcd293b965",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            album: 'My ALbum'\n        });\n    })\n});\nconst result = await device.getAlbum();\nassert.strictEqual(result, 'My ALbum');",
                  "err": {},
                  "uuid": "8d8aaf57-e461-4dfc-b45f-a325fa2a7002",
                  "parentUUID": "2b529b33-f0c4-4d4e-a72a-c1fcd293b965",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d8aaf57-e461-4dfc-b45f-a325fa2a7002"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53d63d13-9fba-4746-9514-2b8d1f760f23",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            genre: 'My Genre'\n        });\n    })\n});\nconst result = await device.getGenre();\nassert.strictEqual(result, 'My Genre');",
                  "err": {},
                  "uuid": "c0e284ea-c534-4607-971a-b1302c9e5583",
                  "parentUUID": "53d63d13-9fba-4746-9514-2b8d1f760f23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0e284ea-c534-4607-971a-b1302c9e5583"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c83c883c-d937-45b6-9999-0d099b0c5dd4",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            total_time: 45\n        });\n    })\n});\nconst result = await device.getTotalTime();\nassert.strictEqual(result, 45);",
                  "err": {},
                  "uuid": "f537a733-1251-4776-980a-252f64773433",
                  "parentUUID": "c83c883c-d937-45b6-9999-0d099b0c5dd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f537a733-1251-4776-980a-252f64773433"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c275bfb1-9bdf-471a-94e7-d1159a458c53",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            position: 30\n        });\n    })\n});\nconst result = await device.getPosition();\nassert.strictEqual(result, 30);",
                  "err": {},
                  "uuid": "989aee94-8c86-4ff2-8c61-799b96b18c2e",
                  "parentUUID": "c275bfb1-9bdf-471a-94e7-d1159a458c53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "989aee94-8c86-4ff2-8c61-799b96b18c2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb9619e0-7fd3-4946-8b18-9f30b87fb95a",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            shuffle: 'songs'\n        });\n    })\n});\nconst result = await device.getShuffle();\nassert.deepStrictEqual(result, NodePyATVShuffleState.songs);\nassert.deepStrictEqual(result, 'songs');",
                  "err": {},
                  "uuid": "874a41be-326e-4b97-9741-b4421d6372fa",
                  "parentUUID": "cb9619e0-7fd3-4946-8b18-9f30b87fb95a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "874a41be-326e-4b97-9741-b4421d6372fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0919309f-8007-4e1a-9c04-4edd1ca44ca1",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            repeat: 'all'\n        });\n    })\n});\nconst result = await device.getRepeat();\nassert.deepStrictEqual(result, NodePyATVRepeatState.all);\nassert.deepStrictEqual(result, 'all');",
                  "err": {},
                  "uuid": "799b8145-b24a-4e65-9095-506124b1edea",
                  "parentUUID": "0919309f-8007-4e1a-9c04-4edd1ca44ca1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "799b8145-b24a-4e65-9095-506124b1edea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bdcdf85f-ac9a-4547-9f82-ae710cfa2f21",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app: 'My App'\n        });\n    })\n});\nconst result = await device.getApp();\nassert.strictEqual(result, 'My App');",
                  "err": {},
                  "uuid": "61de8475-ce7e-4c8c-8cf8-2119c8d8f37e",
                  "parentUUID": "bdcdf85f-ac9a-4547-9f82-ae710cfa2f21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61de8475-ce7e-4c8c-8cf8-2119c8d8f37e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c06cad4c-26d1-4270-bb2e-518ec43ba2fe",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end({\n            result: 'success',\n            app_id: 'app.example.com'\n        });\n    })\n});\nconst result = await device.getAppId();\nassert.strictEqual(result, 'app.example.com');",
                  "err": {},
                  "uuid": "06cc1f80-8f01-4e20-b5fe-2b22334e5bc9",
                  "parentUUID": "c06cad4c-26d1-4270-bb2e-518ec43ba2fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06cc1f80-8f01-4e20-b5fe-2b22334e5bc9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8410bbd3-b586-468c-ada3-89780e40e80c",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), ' +\n            'App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), ' +\n            'App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App Store ' +\n            '(com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), ' +\n            'App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ ' +\n            '(com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE ' +\n            '(tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek ' +\n            '(de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), ' +\n            'App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), ' +\n            'App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), ' +\n            'App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), ' +\n            'App: Musik (com.apple.TVMusic)');\n    })\n});\nconst result = await device.listApps();\nassert.strictEqual(result.length, 25);\nassert.strictEqual(result[0].id, 'com.apple.Fitness');\nassert.strictEqual(result[0].name, 'Fitness');",
                  "err": {},
                  "uuid": "8b820fbb-ffa2-45bf-b2a6-3da1f6ef95a7",
                  "parentUUID": "8410bbd3-b586-468c-ada3-89780e40e80c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b820fbb-ffa2-45bf-b2a6-3da1f6ef95a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a21c28e1-7363-4c6b-a218-4f823aa65a8a",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\nawait device.pressKey(NodePyATVKeys.home);",
                  "err": {},
                  "uuid": "d4d01869-95a6-4d01-929f-874ecec12d05",
                  "parentUUID": "a21c28e1-7363-4c6b-a218-4f823aa65a8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nawait assert.rejects(async () => {\n    // @ts-ignore\n    await device.pressKey('foo');\n}, /Unsupported key value foo/);",
                  "err": {},
                  "uuid": "6378850c-ce43-41d6-9a48-9e9e6d813a44",
                  "parentUUID": "a21c28e1-7363-4c6b-a218-4f823aa65a8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"failure\"}');\n    })\n});\nawait assert.rejects(async () => {\n    await device.pressKey(NodePyATVKeys.home);\n}, /Unable to parse pyatv response/);",
                  "err": {},
                  "uuid": "7c0b8fd2-a4f3-49d6-9f40-ceac6d7f6e96",
                  "parentUUID": "a21c28e1-7363-4c6b-a218-4f823aa65a8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4d01869-95a6-4d01-929f-874ecec12d05",
                "6378850c-ce43-41d6-9a48-9e9e6d813a44",
                "7c0b8fd2-a4f3-49d6-9f40-ceac6d7f6e96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "732b66fe-1d11-44c5-8395-4e4a5ec04d92",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9109e613-9b99-4119-a7e7-d4853f7f314c",
                  "parentUUID": "732b66fe-1d11-44c5-8395-4e4a5ec04d92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9109e613-9b99-4119-a7e7-d4853f7f314c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d8edac2c-7ae1-4c2e-8eb9-d75f18cf0fba",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "3c11c269-dc7a-4561-adc5-acdf5071caa0",
                  "parentUUID": "d8edac2c-7ae1-4c2e-8eb9-d75f18cf0fba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c11c269-dc7a-4561-adc5-acdf5071caa0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79cd8f33-c1b9-4bbe-b6b0-fff7302aa4f0",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "7a0ac5f6-f8e8-4525-a3ae-85ad1bfb3787",
                  "parentUUID": "79cd8f33-c1b9-4bbe-b6b0-fff7302aa4f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a0ac5f6-f8e8-4525-a3ae-85ad1bfb3787"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "382233d5-b586-4a06-809e-829e8adbcb96",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9b68ebbe-7b08-42ac-98ae-cbe58999cdbe",
                  "parentUUID": "382233d5-b586-4a06-809e-829e8adbcb96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b68ebbe-7b08-42ac-98ae-cbe58999cdbe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "266450f7-060e-471e-be45-7e8b78345c64",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "05e96489-8271-43db-bd4a-e29d418ffea2",
                  "parentUUID": "266450f7-060e-471e-be45-7e8b78345c64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05e96489-8271-43db-bd4a-e29d418ffea2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0294e9c-eb47-463f-b9ed-43903d5e4a1a",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "2c32746d-2b18-49aa-9d4a-9a074c107ea5",
                  "parentUUID": "f0294e9c-eb47-463f-b9ed-43903d5e4a1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c32746d-2b18-49aa-9d4a-9a074c107ea5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "711e6ef3-78e9-487b-b4ab-ee2396187700",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "cb3b60ac-013b-4c98-a05b-6a86bf17c765",
                  "parentUUID": "711e6ef3-78e9-487b-b4ab-ee2396187700",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb3b60ac-013b-4c98-a05b-6a86bf17c765"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff07efe9-32b2-4419-a856-0cdc5209d504",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "f92b48ce-c8b0-464e-8c08-52e823e717cd",
                  "parentUUID": "ff07efe9-32b2-4419-a856-0cdc5209d504",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f92b48ce-c8b0-464e-8c08-52e823e717cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2acfe199-4731-44c0-825c-a81923b1feac",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "519ff4b1-dc48-4276-bf81-6b886d4e9302",
                  "parentUUID": "2acfe199-4731-44c0-825c-a81923b1feac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "519ff4b1-dc48-4276-bf81-6b886d4e9302"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22158248-daee-4985-b54a-f8f7d7e04b9c",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "b70e4957-b286-47b6-b77f-53375241d0f0",
                  "parentUUID": "22158248-daee-4985-b54a-f8f7d7e04b9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b70e4957-b286-47b6-b77f-53375241d0f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e9f632f-4dfd-4f8f-8603-3cb6731cd3d6",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "9db007ca-80e4-448e-8025-503c5bb48139",
                  "parentUUID": "0e9f632f-4dfd-4f8f-8603-3cb6731cd3d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9db007ca-80e4-448e-8025-503c5bb48139"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1f36981-6cbc-4550-af3c-5611e2821a5a",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "5b9bb1ed-fdf7-4609-8f99-cf864eeff6c2",
                  "parentUUID": "e1f36981-6cbc-4550-af3c-5611e2821a5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b9bb1ed-fdf7-4609-8f99-cf864eeff6c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "491991db-f3c7-4ad8-8567-7679c4e43b46",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "0cbe5c86-2b47-4d59-8e4c-e4d662eb52fc",
                  "parentUUID": "491991db-f3c7-4ad8-8567-7679c4e43b46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0cbe5c86-2b47-4d59-8e4c-e4d662eb52fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ae3a5f0-e439-42e8-84dc-2a049a8cec1d",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "3463864a-ba28-443e-ada4-38eb6cc11966",
                  "parentUUID": "4ae3a5f0-e439-42e8-84dc-2a049a8cec1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3463864a-ba28-443e-ada4-38eb6cc11966"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c150e811-a826-429b-bad9-709a9e5cf318",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "37c82290-21ff-470b-98ba-437683b83899",
                  "parentUUID": "c150e811-a826-429b-bad9-709a9e5cf318",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37c82290-21ff-470b-98ba-437683b83899"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b33fb72-91d5-41c0-b17b-fe163b0b342d",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "1ac38614-b382-424a-868b-a6b9572b97a6",
                  "parentUUID": "4b33fb72-91d5-41c0-b17b-fe163b0b342d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ac38614-b382-424a-868b-a6b9572b97a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30086c38-f222-4e5a-9e39-5bcc362c779c",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "6790e1db-708d-491f-adde-96c5b86513e7",
                  "parentUUID": "30086c38-f222-4e5a-9e39-5bcc362c779c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6790e1db-708d-491f-adde-96c5b86513e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94d11d93-f3c2-4a0a-a1ce-532972843b70",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "94b9aded-f8e2-4dcd-9ef4-dbb03bf6cc10",
                  "parentUUID": "94d11d93-f3c2-4a0a-a1ce-532972843b70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94b9aded-f8e2-4dcd-9ef4-dbb03bf6cc10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e591fee-891d-4248-b3c8-eca48950e416",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "cd397540-ec08-474a-8790-fdef6fd12abc",
                  "parentUUID": "2e591fee-891d-4248-b3c8-eca48950e416",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd397540-ec08-474a-8790-fdef6fd12abc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e9ad776-570f-485a-9552-1fd7dc880ebe",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "11c7bb7d-d595-458e-94cc-09bbd3a4116c",
                  "parentUUID": "2e9ad776-570f-485a-9552-1fd7dc880ebe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11c7bb7d-d595-458e-94cc-09bbd3a4116c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29edddaa-354a-47d2-b769-7c443c0d22b1",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "5209acaa-72e0-4a21-aa63-cca6172ceaf9",
                  "parentUUID": "29edddaa-354a-47d2-b769-7c443c0d22b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5209acaa-72e0-4a21-aa63-cca6172ceaf9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d6dcb34-2987-4e80-a627-55d26632f6e1",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "8dc99233-acfe-4413-9304-d77eb786ddd7",
                  "parentUUID": "4d6dcb34-2987-4e80-a627-55d26632f6e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8dc99233-acfe-4413-9304-d77eb786ddd7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "091c424e-2b25-444e-8a86-08a48c3c9c70",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('{\"result\":\"success\"}');\n    })\n});\n// @ts-ignore\nawait device[key]();",
                  "err": {},
                  "uuid": "886c3ada-e6e1-4270-a1b2-009645758453",
                  "parentUUID": "091c424e-2b25-444e-8a86-08a48c3c9c70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "886c3ada-e6e1-4270-a1b2-009645758453"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7d1f1f4e-b2e7-4eea-bc48-b6ed939d2bec",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.end('');\n    })\n});\nawait device.launchApp('com.apple.TVShows');",
                  "err": {},
                  "uuid": "6405327d-c995-458a-9454-65aa746b8ee9",
                  "parentUUID": "7d1f1f4e-b2e7-4eea-bc48-b6ed939d2bec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6405327d-c995-458a-9454-65aa746b8ee9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5e9aa85-8571-41d2-9ed6-9cc09e35f6ca",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "82fd7f28-b331-403e-b3e8-5c243de097e3",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 639,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000);\nconst result = await NodePyATVInstance.version();\nif (result.pyatv === null) {\n    throw new Error('No version found for pyatv. Is it installed in test environment?');\n}\nassert.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\nassert.ok(result.pyatv.length >= 5, 'result.pyatv has content');\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "a4abb60b-e644-4d40-9a69-2625341da235",
                  "parentUUID": "82fd7f28-b331-403e-b3e8-5c243de097e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.code(1);\n        cp.end('atvremote 0.7.4');\n    })\n});\nassert.ok(result.pyatv);\nassert.strictEqual(result.pyatv, '0.7.4');",
                  "err": {},
                  "uuid": "3835762b-8bea-4f54-aa16-9a7834511b49",
                  "parentUUID": "82fd7f28-b331-403e-b3e8-5c243de097e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});\nassert.strictEqual(result.module, version);",
                  "err": {},
                  "uuid": "bfe2213c-ffdf-4a35-b7c7-e02cbbdf243c",
                  "parentUUID": "82fd7f28-b331-403e-b3e8-5c243de097e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    atvremotePath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "0cbae2a7-6f92-4c65-986e-74bc27cfa558",
                  "parentUUID": "82fd7f28-b331-403e-b3e8-5c243de097e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "a2750dd6-9404-4041-8f10-498619e7885d",
                  "parentUUID": "82fd7f28-b331-403e-b3e8-5c243de097e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.version({\n    debug: () => {\n        // no debug log\n    },\n    noColors: true,\n    spawn: createFakeSpawn(cp => cp.code(1).end())\n});",
                  "err": {},
                  "uuid": "7de2aa8f-516d-46e3-9a91-2ad877194e61",
                  "parentUUID": "82fd7f28-b331-403e-b3e8-5c243de097e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "2d7b09ab-40e8-4101-b1d0-3471954d1bff",
                  "parentUUID": "82fd7f28-b331-403e-b3e8-5c243de097e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.error(new Error('Hello world!')).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "ad17b10d-42a3-44ef-bbf5-91214ebf9909",
                  "parentUUID": "82fd7f28-b331-403e-b3e8-5c243de097e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await NodePyATVInstance.version({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout('atvremote 42').code(1).end();\n    })\n});\nassert.strictEqual(result.pyatv, null);",
                  "err": {},
                  "uuid": "7bb000d3-fc6b-42a5-b30b-222774eac554",
                  "parentUUID": "82fd7f28-b331-403e-b3e8-5c243de097e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4abb60b-e644-4d40-9a69-2625341da235",
                "3835762b-8bea-4f54-aa16-9a7834511b49",
                "bfe2213c-ffdf-4a35-b7c7-e02cbbdf243c",
                "0cbae2a7-6f92-4c65-986e-74bc27cfa558",
                "a2750dd6-9404-4041-8f10-498619e7885d",
                "7de2aa8f-516d-46e3-9a91-2ad877194e61",
                "2d7b09ab-40e8-4101-b1d0-3471954d1bff",
                "ad17b10d-42a3-44ef-bbf5-91214ebf9909",
                "7bb000d3-fc6b-42a5-b30b-222774eac554"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 651,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de290496-066e-493b-a2f2-0eb9b4e1f023",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5774,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12000);\nawait NodePyATVInstance.check();",
                  "err": {},
                  "uuid": "e65bc720-2bf9-4488-83bb-3ef30436ae09",
                  "parentUUID": "de290496-066e-493b-a2f2-0eb9b4e1f023",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "479eb13f-a45b-4f6e-8b11-134d098aeec1",
                  "parentUUID": "de290496-066e-493b-a2f2-0eb9b4e1f023",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('atvremote 0.5.1').code(1).end();\n        })\n    });\n}, /Found pyatv, but unforunately it's too old. Please update pyatv./);",
                  "err": {},
                  "uuid": "f8e3a59a-848d-4c42-a589-7b73cae2d806",
                  "parentUUID": "de290496-066e-493b-a2f2-0eb9b4e1f023",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i = 0;\nawait assert.rejects(async () => {\n    await NodePyATVInstance.check({\n        spawn: createFakeSpawn(cp => {\n            if (i === 0) {\n                cp.stdout('atvremote 0.7.0').code(1).end();\n                i++;\n            }\n            else {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            }\n        })\n    });\n}, /Unable to scan for devices/);",
                  "err": {},
                  "uuid": "45d67b2d-0a40-4a12-ad0d-63ad3ef9d53f",
                  "parentUUID": "de290496-066e-493b-a2f2-0eb9b4e1f023",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e65bc720-2bf9-4488-83bb-3ef30436ae09",
                "479eb13f-a45b-4f6e-8b11-134d098aeec1",
                "f8e3a59a-848d-4c42-a589-7b73cae2d806",
                "45d67b2d-0a40-4a12-ad0d-63ad3ef9d53f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5781,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fbc643c1-9751-4edb-98f9-399e6e76c652",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5392,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(10000);\nconst result = await NodePyATVInstance.find();\nassert.ok(Array.isArray(result));",
                  "err": {},
                  "uuid": "16dc276d-eb8a-4b69-9bdd-0e5e8182f2f3",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await NodePyATVInstance.find({\n    atvscriptPath: '/foo/bar',\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), '/foo/bar');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "d8652441-248d-4657-9331-39dec7377cdd",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stderr('Hello World!').code(1).end();\n        })\n    });\n}, /Unable to execute request/);",
                  "err": {},
                  "uuid": "2fd3dc91-96a3-4462-a0b1-25e8224eb32b",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).code(1).end();\n        })\n    });\n}, /Hello world!/);",
                  "err": {},
                  "uuid": "ddad1990-18d5-47d3-be28-3550aefec466",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            // Example output from @maxileith\n            // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n            cp.stdout({\n                result: 'failure',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                error: 'Task exception was never retrieved',\n                exception: '[Errno 113] Connect call failed'\n            }).code(1).end();\n        })\n    });\n}, /Unable to find any devices, but received 1 error: /);",
                  "err": {},
                  "uuid": "dafcac99-f988-4e10-b663-9ede9b5bc492",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout(JSON.stringify({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).substr(1)).end();\n        })\n    });\n}, /Unable to parse result/);",
                  "err": {},
                  "uuid": "83f3d93a-92ec-4c0a-9a0d-70f3a8259764",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'error'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "57a5cde3-0ba9-4b20-9de5-74b47e06344a",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await assert.rejects(async () => {\n    await NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success'\n            }).code(1).end();\n        })\n    });\n}, /Unable to parse pyatv response: /);",
                  "err": {},
                  "uuid": "caf14320-e7f2-4ce5-a184-d63f3c6da419",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx'\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, undefined);\nassert.strictEqual(devices[0].modelName, undefined);\nassert.strictEqual(devices[0].os, undefined);\nassert.strictEqual(devices[0].version, undefined);\nassert.deepStrictEqual(devices[0].services, undefined);",
                  "err": {},
                  "uuid": "ce506074-4701-43ee-9e52-5493b53b4e2d",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        cp.stdout({\n            result: 'success',\n            datetime: '2020-11-06T20:47:30.840022+01:00',\n            devices: [\n                {\n                    name: 'Vardagsrum',\n                    address: '10.0.10.81',\n                    identifier: 'xxx',\n                    device_info: {\n                        'model': 'Gen4K',\n                        'model_str': 'Apple TV 4K',\n                        'operating_system': 'TvOS',\n                        'version': '15.5.1'\n                    },\n                    services: [\n                        {\n                            protocol: 'mrp',\n                            port: 49152\n                        },\n                        {\n                            protocol: 'airplay',\n                            port: 7000\n                        }\n                    ]\n                }\n            ]\n        }).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 1);\nassert.strictEqual(devices[0].name, 'Vardagsrum');\nassert.strictEqual(devices[0].host, '10.0.10.81');\nassert.strictEqual(devices[0].id, 'xxx');\nassert.strictEqual(devices[0].model, 'Gen4K');\nassert.strictEqual(devices[0].modelName, 'Apple TV 4K');\nassert.strictEqual(devices[0].os, 'TvOS');\nassert.strictEqual(devices[0].version, '15.5.1');\nassert.deepStrictEqual(devices[0].services, [\n    {\n        protocol: NodePyATVProtocol.mrp,\n        port: 49152\n    },\n    {\n        protocol: NodePyATVProtocol.airplay,\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "01e473e3-f100-451c-b0be-75803be1eaee",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n});\nassert.strictEqual(devices.length, 4);\nassert.strictEqual(devices[0].name, 'Living Room');\nassert.strictEqual(devices[0].host, '10.0.0.30');\nassert.strictEqual(devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(devices[1].name, 'Kitchen');\nassert.strictEqual(devices[1].host, '10.0.0.79');\nassert.strictEqual(devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(devices[2].name, 'Bedroom');\nassert.strictEqual(devices[2].host, '10.0.0.20');\nassert.strictEqual(devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(devices[3].name, 'Basement');\nassert.strictEqual(devices[3].host, '10.0.0.156');\nassert.strictEqual(devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');",
                  "err": {},
                  "uuid": "757cfd7f-542d-477a-988d-d75efc3048d1",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await NodePyATVInstance.find({\n    spawn: createFakeSpawn(cp => {\n        // Example output from @maxileith\n        // https://github.com/sebbo2002/node-pyatv/issues/324#issue-2360854902\n        cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end();\n    })\n}, true);\nassert.strictEqual(response.devices.length, 4);\nassert.strictEqual(response.errors.length, 2);\nassert.strictEqual(response.devices[0].name, 'Living Room');\nassert.strictEqual(response.devices[0].host, '10.0.0.30');\nassert.strictEqual(response.devices[0].id, '37323C0E-99E6-4CC3-A006-1ED5368FFF8C');\nassert.strictEqual(response.devices[1].name, 'Kitchen');\nassert.strictEqual(response.devices[1].host, '10.0.0.79');\nassert.strictEqual(response.devices[1].id, '45B6A67A-9FAD-497D-95EF-7FC5ECB3371C');\nassert.strictEqual(response.devices[2].name, 'Bedroom');\nassert.strictEqual(response.devices[2].host, '10.0.0.20');\nassert.strictEqual(response.devices[2].id, 'CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40');\nassert.strictEqual(response.devices[3].name, 'Basement');\nassert.strictEqual(response.devices[3].host, '10.0.0.156');\nassert.strictEqual(response.devices[3].id, 'C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4');\nassert.strictEqual(response.errors[0].exception, '[Errno 113] Connect call failed (\\'10.0.0.232\\', 32498)');\nassert.strictEqual(response.errors[1].exception, '[Errno 113] Connect call failed (\\'10.0.0.229\\', 32498)');",
                  "err": {},
                  "uuid": "99a02362-0617-4f0d-9b90-b2bdf13675a8",
                  "parentUUID": "fbc643c1-9751-4edb-98f9-399e6e76c652",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16dc276d-eb8a-4b69-9bdd-0e5e8182f2f3",
                "d8652441-248d-4657-9331-39dec7377cdd",
                "2fd3dc91-96a3-4462-a0b1-25e8224eb32b",
                "ddad1990-18d5-47d3-be28-3550aefec466",
                "dafcac99-f988-4e10-b663-9ede9b5bc492",
                "83f3d93a-92ec-4c0a-9a0d-70f3a8259764",
                "57a5cde3-0ba9-4b20-9de5-74b47e06344a",
                "caf14320-e7f2-4ce5-a184-d63f3c6da419",
                "ce506074-4701-43ee-9e52-5493b53b4e2d",
                "01e473e3-f100-451c-b0be-75803be1eaee",
                "757cfd7f-542d-477a-988d-d75efc3048d1",
                "99a02362-0617-4f0d-9b90-b2bdf13675a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5407,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b07603e-d419-48ac-b720-c463fc596b4b",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = NodePyATVInstance.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert.strictEqual(device.host, '192.168.178.6');\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "aacf36c3-01b2-4719-b984-d7c18c2214f4",
                  "parentUUID": "2b07603e-d419-48ac-b720-c463fc596b4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aacf36c3-01b2-4719-b984-d7c18c2214f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac954749-c1db-4b5d-945c-6325042964e6",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait i.version({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.code(1).end();\n    })\n});",
                  "err": {},
                  "uuid": "93fecbd0-6ec6-4996-9a23-1f5d1a4fb167",
                  "parentUUID": "ac954749-c1db-4b5d-945c-6325042964e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93fecbd0-6ec6-4996-9a23-1f5d1a4fb167"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5aaa8a73-c4af-4ee6-93dc-e9e42e5a1bd7",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvremotePath: 'test' });\nawait assert.rejects(async () => {\n    await i.check({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n        })\n    });\n}, /Unable to find pyatv. Is it installed?/);",
                  "err": {},
                  "uuid": "6d359feb-1dbc-4fb5-b253-b29de1f1f444",
                  "parentUUID": "5aaa8a73-c4af-4ee6-93dc-e9e42e5a1bd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d359feb-1dbc-4fb5-b253-b29de1f1f444"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b7adfe9-218c-42d4-896c-aec82a4488bc",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ atvscriptPath: 'test' });\nawait i.find({\n    spawn: createFakeSpawn(cp => {\n        assert.strictEqual(cp.cmd(), 'test');\n        cp.stdout({\n            'result': 'success',\n            'datetime': '2020-11-06T20:47:30.840022+01:00',\n            'devices': []\n        }).end();\n    })\n});",
                  "err": {},
                  "uuid": "c0954caa-45e5-4998-8530-85819d864478",
                  "parentUUID": "4b7adfe9-218c-42d4-896c-aec82a4488bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0954caa-45e5-4998-8530-85819d864478"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "55b66865-c454-4b21-8f4c-b7f02299e54c",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i = new NodePyATVInstance({ debug: true });\nconst d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\nassert.deepStrictEqual(d.debug, true);",
                  "err": {},
                  "uuid": "fe724f85-a4c4-446a-9302-eae5dc4829d4",
                  "parentUUID": "55b66865-c454-4b21-8f4c-b7f02299e54c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe724f85-a4c4-446a-9302-eae5dc4829d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b6807267-64ca-4a8c-bb79-8767058b5c31",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol);",
                  "err": {},
                  "uuid": "7185909f-e7cf-4d06-81f8-6686f34c7f23",
                  "parentUUID": "b6807267-64ca-4a8c-bb79-8767058b5c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType);",
                  "err": {},
                  "uuid": "42cda01b-8a4b-412a-b8ad-a732e9e419a9",
                  "parentUUID": "b6807267-64ca-4a8c-bb79-8767058b5c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "e5e8842c-977a-4513-b795-2affb4c13096",
                  "parentUUID": "b6807267-64ca-4a8c-bb79-8767058b5c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "07bbacd6-3273-40f7-be4e-5a0a750bb1af",
                  "parentUUID": "b6807267-64ca-4a8c-bb79-8767058b5c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "589e5cb4-4375-41ac-bc96-6f1afe0dccd3",
                  "parentUUID": "b6807267-64ca-4a8c-bb79-8767058b5c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "f1ac046d-6d09-4f3b-87be-87bcf266bb6c",
                  "parentUUID": "b6807267-64ca-4a8c-bb79-8767058b5c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys);",
                  "err": {},
                  "uuid": "794f39e0-90af-4bb8-ac25-de4bb9966ea0",
                  "parentUUID": "b6807267-64ca-4a8c-bb79-8767058b5c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState);",
                  "err": {},
                  "uuid": "dfdfbed5-563d-4c9c-b7c0-4b9d9552d880",
                  "parentUUID": "b6807267-64ca-4a8c-bb79-8767058b5c31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState);",
                  "err": {},
                  "uuid": "0a991701-089b-4277-8b0f-375b1b20c417",
                  "parentUUID": "b6807267-64ca-4a8c-bb79-8767058b5c31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7185909f-e7cf-4d06-81f8-6686f34c7f23",
                "42cda01b-8a4b-412a-b8ad-a732e9e419a9",
                "e5e8842c-977a-4513-b795-2affb4c13096",
                "07bbacd6-3273-40f7-be4e-5a0a750bb1af",
                "589e5cb4-4375-41ac-bc96-6f1afe0dccd3",
                "f1ac046d-6d09-4f3b-87be-87bcf266bb6c",
                "794f39e0-90af-4bb8-ac25-de4bb9966ea0",
                "dfdfbed5-563d-4c9c-b7c0-4b9d9552d880",
                "0a991701-089b-4277-8b0f-375b1b20c417"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "102c3006-dfb4-49f1-8f45-6fe695677f2d",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1a6b15d9-ee31-48c2-928d-52856ed5bdc2",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = addRequestId();\nassert.strictEqual(typeof id, 'string');\nremoveRequestId(id);",
                  "err": {},
                  "uuid": "c473231d-9464-4f43-881e-91b98eaead66",
                  "parentUUID": "1a6b15d9-ee31-48c2-928d-52856ed5bdc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId('FOO');",
                  "err": {},
                  "uuid": "dc719968-dae2-4b59-8d28-cdd4f42b5449",
                  "parentUUID": "1a6b15d9-ee31-48c2-928d-52856ed5bdc2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c473231d-9464-4f43-881e-91b98eaead66",
                "dc719968-dae2-4b59-8d28-cdd4f42b5449"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5064ecb2-f56d-4b05-98f6-6ed94f4104ba",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "196800e9-866a-4bb4-ac55-4348f71ad35b",
                  "parentUUID": "5064ecb2-f56d-4b05-98f6-6ed94f4104ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "d8b18ec5-37a9-4fe1-821e-70aeab274b81",
                  "parentUUID": "5064ecb2-f56d-4b05-98f6-6ed94f4104ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "ae2e7b99-5322-4098-9e7c-14fbb8c6b5fe",
                  "parentUUID": "5064ecb2-f56d-4b05-98f6-6ed94f4104ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "027c9c60-69e6-44d1-a445-03eacad4b87e",
                  "parentUUID": "5064ecb2-f56d-4b05-98f6-6ed94f4104ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "2cdf1674-a222-4b74-b0b4-a6e3d0745fb5",
                  "parentUUID": "5064ecb2-f56d-4b05-98f6-6ed94f4104ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "196800e9-866a-4bb4-ac55-4348f71ad35b",
                "d8b18ec5-37a9-4fe1-821e-70aeab274b81",
                "ae2e7b99-5322-4098-9e7c-14fbb8c6b5fe",
                "027c9c60-69e6-44d1-a445-03eacad4b87e",
                "2cdf1674-a222-4b74-b0b4-a6e3d0745fb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a7a6f42-48e9-4d99-b7f1-1349f61819c7",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "81fad626-905b-4e0a-935f-77d36f3d183b",
                  "parentUUID": "0a7a6f42-48e9-4d99-b7f1-1349f61819c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "b2f90388-c47b-4b3c-8447-2d20c1ccaad4",
                  "parentUUID": "0a7a6f42-48e9-4d99-b7f1-1349f61819c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "ab760ae2-ed17-4721-93dd-e682786d05ab",
                  "parentUUID": "0a7a6f42-48e9-4d99-b7f1-1349f61819c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "38342716-6259-4cc6-8f05-5579ad6fecea",
                  "parentUUID": "0a7a6f42-48e9-4d99-b7f1-1349f61819c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81fad626-905b-4e0a-935f-77d36f3d183b",
                "b2f90388-c47b-4b3c-8447-2d20c1ccaad4",
                "ab760ae2-ed17-4721-93dd-e682786d05ab",
                "38342716-6259-4cc6-8f05-5579ad6fecea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9612a54e-0c62-4d13-85da-db1c5d0dda56",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters();\nassert.deepEqual(result, []);",
                  "err": {},
                  "uuid": "23039659-f081-4f30-aaf7-2685a3d633b8",
                  "parentUUID": "9612a54e-0c62-4d13-85da-db1c5d0dda56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    host: '192.168.178.2'\n});\nassert.deepEqual(result, ['-s', '192.168.178.2']);",
                  "err": {},
                  "uuid": "c7941267-f069-4793-8beb-05f7f7d8b4ca",
                  "parentUUID": "9612a54e-0c62-4d13-85da-db1c5d0dda56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = await getParameters({\n    hosts: ['192.168.178.2', '192.168.178.3'],\n    id: '****',\n    protocol: NodePyATVProtocol.mrp,\n    dmapCredentials: '****',\n    mrpCredentials: '****',\n    airplayCredentials: '****',\n    companionCredentials: '1234',\n    raopCredentials: '::foo:'\n});\nassert.deepEqual(result, [\n    '-s', '192.168.178.2,192.168.178.3',\n    '-i', '****',\n    '--protocol', 'mrp',\n    '--dmap-credentials', '****',\n    '--mrp-credentials', '****',\n    '--airplay-credentials', '****',\n    '--companion-credentials', '1234',\n    '--raop-credentials', '::foo:'\n]);",
                  "err": {},
                  "uuid": "52a20089-bca4-4932-964b-27e4f62209d6",
                  "parentUUID": "9612a54e-0c62-4d13-85da-db1c5d0dda56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23039659-f081-4f30-aaf7-2685a3d633b8",
                "c7941267-f069-4793-8beb-05f7f7d8b4ca",
                "52a20089-bca4-4932-964b-27e4f62209d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c7470a57-3290-41b2-abc6-522fb3ff2305",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "5afe9311-ba90-4c44-8117-93316c8b5e69",
                  "parentUUID": "c7470a57-3290-41b2-abc6-522fb3ff2305",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = parseState(null, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "d5484f79-ef40-4171-baea-f442acd17575",
                  "parentUUID": "c7470a57-3290-41b2-abc6-522fb3ff2305",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "3c89bb78-3cd9-472a-b138-1c4959004db3",
                  "parentUUID": "c7470a57-3290-41b2-abc6-522fb3ff2305",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert.throws(() => {\n    parseState(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "b77daff6-d20d-41ce-ba2f-7ec280e202af",
                  "parentUUID": "c7470a57-3290-41b2-abc6-522fb3ff2305",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "facb5ba4-14f1-497b-bcf9-97c80df39769",
                  "parentUUID": "c7470a57-3290-41b2-abc6-522fb3ff2305",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    power_state: null,\n    focus_state: null,\n    volume: null,\n    output_devices: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "f5d9e81f-753c-4823-b25c-fb64d5c0dc31",
                  "parentUUID": "c7470a57-3290-41b2-abc6-522fb3ff2305",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null,\n    outputDevices: null\n});",
                  "err": {},
                  "uuid": "9d28c26e-7465-4002-b7e4-a8e08d87fe22",
                  "parentUUID": "c7470a57-3290-41b2-abc6-522fb3ff2305",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5afe9311-ba90-4c44-8117-93316c8b5e69",
                "d5484f79-ef40-4171-baea-f442acd17575",
                "3c89bb78-3cd9-472a-b138-1c4959004db3",
                "b77daff6-d20d-41ce-ba2f-7ec280e202af",
                "facb5ba4-14f1-497b-bcf9-97c80df39769",
                "f5d9e81f-753c-4823-b25c-fb64d5c0dc31",
                "9d28c26e-7465-4002-b7e4-a8e08d87fe22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}