{
  "stats": {
    "suites": 91,
    "tests": 155,
    "passes": 153,
    "pending": 2,
    "failures": 0,
    "start": "2023-08-17T18:56:56.761Z",
    "end": "2023-08-17T18:57:08.791Z",
    "duration": 12030,
    "testsRegistered": 155,
    "passPercent": 100,
    "pendingPercent": 1.2903225806451613,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fa759dc2-82aa-4689-b4cd-79ede5e42ce7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "672005e5-bc21-4cc5-815d-562b5b034d9f",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "953db614-cb2e-4ee8-b62b-e838f77539df",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "2f85c040-560e-44eb-8406-eed6dc82a2e2",
                  "parentUUID": "953db614-cb2e-4ee8-b62b-e838f77539df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2f85c040-560e-44eb-8406-eed6dc82a2e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "157b12bd-5b41-4236-87e3-fcb94fd6922f",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "8125f214-b9ad-413a-b922-7f28a3ada4c6",
                  "parentUUID": "157b12bd-5b41-4236-87e3-fcb94fd6922f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8125f214-b9ad-413a-b922-7f28a3ada4c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "91a86816-68f9-465a-a2f8-a795026db056",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "04b818c4-c338-42fb-8b9e-2709e3414f48",
                  "parentUUID": "91a86816-68f9-465a-a2f8-a795026db056",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04b818c4-c338-42fb-8b9e-2709e3414f48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df5945f1-e2fe-4815-a5c1-79c2cf68db24",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new NodePyATVDevice({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "ebddfb05-309b-46ea-8261-332d7b77d079",
                  "parentUUID": "df5945f1-e2fe-4815-a5c1-79c2cf68db24",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebddfb05-309b-46ea-8261-332d7b77d079"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "730a959c-138c-49c3-9526-6ad79e6658be",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "c77a6aab-75d8-4c83-a2ba-8c3f0c1fa8a6",
                  "parentUUID": "730a959c-138c-49c3-9526-6ad79e6658be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c77a6aab-75d8-4c83-a2ba-8c3f0c1fa8a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "55468976-f199-4537-893f-ad305db19a4b",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7a21601c-a527-4a0b-8171-b2630f0bd941",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:title', event => {\n            assert.ok(event instanceof NodePyATVDeviceEvent);\n            assert.strictEqual(event.key, 'title');\n            assert.strictEqual(event.oldValue, null);\n            assert.strictEqual(event.newValue, 'My Movie');\n            assert.strictEqual(event.value, 'My Movie');\n            assert.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "8864c0ad-7344-4f5b-85fb-37dd604a9fbe",
                  "parentUUID": "7a21601c-a527-4a0b-8171-b2630f0bd941",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update', event => {\n            assert.ok(event instanceof NodePyATVDeviceEvent);\n            assert.strictEqual(event.key, 'title');\n            assert.strictEqual(event.oldValue, null);\n            assert.strictEqual(event.newValue, 'My Movie');\n            assert.strictEqual(event.value, 'My Movie');\n            assert.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "6d8dfac1-b6a7-41a3-bec4-d30ae926c86a",
                  "parentUUID": "7a21601c-a527-4a0b-8171-b2630f0bd941",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const sort = [];\n    yield Promise.race([\n        new Promise(cb => {\n            device.once('update', () => {\n                sort.push('update');\n                cb(undefined);\n            });\n        }),\n        new Promise(cb => {\n            device.once('update:title', () => {\n                sort.push('update:title');\n                cb(undefined);\n            });\n        })\n    ]);\n    assert.deepStrictEqual(sort, ['update:title', 'update']);\n});",
                  "err": {},
                  "uuid": "7cdf3f9e-9071-40c6-92d3-bae19e26b795",
                  "parentUUID": "7a21601c-a527-4a0b-8171-b2630f0bd941",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('error', error => {\n            assert.ok(error instanceof Error);\n            assert.ok(error.toString().includes('invalid credentials: 321'));\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "66b7fff3-3001-4f3b-bb06-2a4b21770081",
                  "parentUUID": "7a21601c-a527-4a0b-8171-b2630f0bd941",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let spawnCounter = 0;\n    let eventCounter = 0;\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            if (spawnCounter === 0) {\n                cp.onStdIn(() => cp.end());\n            }\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n            spawnCounter++;\n            if (spawnCounter >= 2) {\n                cp.end();\n            }\n        })\n    });\n    const listener = () => {\n        eventCounter++;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    yield device.getState();\n    device.off('update', listener);\n    assert.strictEqual(spawnCounter, 2);\n    assert.strictEqual(eventCounter, 1);\n});",
                  "err": {},
                  "uuid": "f3a54f7b-624a-4cb2-b8e6-2749f8fd2f43",
                  "parentUUID": "7a21601c-a527-4a0b-8171-b2630f0bd941",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    let callCounter = 0;\n    const error = new Error('This is an error. Be nice.');\n    device.once('error', err => {\n        assert.strictEqual(err, error);\n        callCounter++;\n    });\n    const listener = () => {\n        throw error;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    device.off('update', listener);\n    assert.strictEqual(callCounter, 1);\n});",
                  "err": {},
                  "uuid": "9e919142-657d-4f13-be24-f0f974f37270",
                  "parentUUID": "7a21601c-a527-4a0b-8171-b2630f0bd941",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:powerState', event => {\n            assert.ok(event instanceof NodePyATVDeviceEvent);\n            assert.strictEqual(event.key, 'powerState');\n            assert.strictEqual(event.oldValue, null);\n            assert.strictEqual(event.newValue, 'off');\n            assert.strictEqual(event.newValue, NodePyATVPowerState.off);\n            assert.strictEqual(event.value, 'off');\n            assert.strictEqual(event.value, NodePyATVPowerState.off);\n            assert.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "088cff6c-8209-4a30-a439-03d93b9a974b",
                  "parentUUID": "7a21601c-a527-4a0b-8171-b2630f0bd941",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8864c0ad-7344-4f5b-85fb-37dd604a9fbe",
                "6d8dfac1-b6a7-41a3-bec4-d30ae926c86a",
                "7cdf3f9e-9071-40c6-92d3-bae19e26b795",
                "66b7fff3-3001-4f3b-bb06-2a4b21770081",
                "f3a54f7b-624a-4cb2-b8e6-2749f8fd2f43",
                "9e919142-657d-4f13-be24-f0f974f37270",
                "088cff6c-8209-4a30-a439-03d93b9a974b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3d4279b-3ec1-4dcd-b380-dab63320a7e5",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const error = new Error();\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.error(error).end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert.strictEqual(err, error);\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "901c897c-5d2e-40c8-adae-6c6cfc2aaee3",
                  "parentUUID": "f3d4279b-3ec1-4dcd-b380-dab63320a7e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.stderr('Hello World!').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert.ok(err instanceof Error);\n            assert.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "7354c0aa-594e-47ae-990d-d1f5e29d4266",
                  "parentUUID": "f3d4279b-3ec1-4dcd-b380-dab63320a7e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('#').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert.ok(err instanceof Error);\n            assert.ok(err.toString().includes('Unable to parse stdout json: SyntaxError: ' +\n                'Unexpected token # in JSON at position 0'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "070fcca6-54cb-4d9f-ba21-47ad0304da7e",
                  "parentUUID": "f3d4279b-3ec1-4dcd-b380-dab63320a7e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "dc80b43d-66cc-4768-aab7-bac201f31fc9",
                  "parentUUID": "f3d4279b-3ec1-4dcd-b380-dab63320a7e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "901c897c-5d2e-40c8-adae-6c6cfc2aaee3",
                "7354c0aa-594e-47ae-990d-d1f5e29d4266",
                "070fcca6-54cb-4d9f-ba21-47ad0304da7e"
              ],
              "failures": [],
              "pending": [
                "dc80b43d-66cc-4768-aab7-bac201f31fc9"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8952f9c-f922-4823-8f79-95055f3d9923",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "147bec74-b46c-4e93-99ae-f2bc5ff9c474",
                  "parentUUID": "c8952f9c-f922-4823-8f79-95055f3d9923",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "147bec74-b46c-4e93-99ae-f2bc5ff9c474"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2428b04d-ac21-4a8b-8812-d17e84b7c1b8",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert.strictEqual(e, event);\n    assert.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "e0737d2a-77ac-4dc7-8598-eefb587568a3",
                  "parentUUID": "2428b04d-ac21-4a8b-8812-d17e84b7c1b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0737d2a-77ac-4dc7-8598-eefb587568a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ee0f3d2-320a-4af7-9a86-8db710ffd7d6",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "b2c2e669-ca2b-4fb1-87d9-b275a072be62",
                  "parentUUID": "5ee0f3d2-320a-4af7-9a86-8db710ffd7d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2c2e669-ca2b-4fb1-87d9-b275a072be62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d347b17-0eb0-4af4-ba38-6c1387e88e67",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert.ok(typeof result, 'number');\nassert.ok(result >= 10);",
                  "err": {},
                  "uuid": "786a23b7-856c-4347-b2ad-2ed38c8ed01d",
                  "parentUUID": "9d347b17-0eb0-4af4-ba38-6c1387e88e67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "786a23b7-856c-4347-b2ad-2ed38c8ed01d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e562b4b-bee0-40ae-a389-e9bb01b34dbb",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "abd29ed7-5ee3-42b8-8915-cb9ce19118a4",
                  "parentUUID": "3e562b4b-bee0-40ae-a389-e9bb01b34dbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abd29ed7-5ee3-42b8-8915-cb9ce19118a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03805cec-129e-45bb-ab92-90a939368ced",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.listeners('test').length, 1);\nassert.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "aea1ef46-3e21-462c-a8f5-7fa97d95b107",
                  "parentUUID": "03805cec-129e-45bb-ab92-90a939368ced",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aea1ef46-3e21-462c-a8f5-7fa97d95b107"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3bff0561-b254-4b8a-883c-a88b043f616a",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "08172a33-9bb8-4c98-8b2b-9eb553bc882a",
                  "parentUUID": "3bff0561-b254-4b8a-883c-a88b043f616a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08172a33-9bb8-4c98-8b2b-9eb553bc882a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a6267ef3-8daf-4347-a94b-a4bfb76f4d9e",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "01bf2761-bb65-4e19-96f6-658d339ed52e",
                  "parentUUID": "a6267ef3-8daf-4347-a94b-a4bfb76f4d9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01bf2761-bb65-4e19-96f6-658d339ed52e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0bc41d5b-cc25-44cb-9aee-8f2168375404",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: createFakeSpawn(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert.deepStrictEqual(device.rawListeners('test').length, 1);\nassert.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "1964c08a-7289-4013-831b-b315d5772767",
                  "parentUUID": "0bc41d5b-cc25-44cb-9aee-8f2168375404",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1964c08a-7289-4013-831b-b315d5772767"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ec1f3e46-7dee-49e1-92e1-3e52121a63c2",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    assert.deepStrictEqual(device.listenerCount('update'), 1);\n    device.removeListener('update', listener);\n    assert.deepStrictEqual(device.listenerCount('update'), 0);\n});",
                  "err": {},
                  "uuid": "8387b02b-b581-4692-8299-ca008512442d",
                  "parentUUID": "ec1f3e46-7dee-49e1-92e1-3e52121a63c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8387b02b-b581-4692-8299-ca008512442d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ab327821-7706-4397-a55a-2ce6f3a06bec",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "21757a67-ef20-4f97-b608-0ff2b6580f30",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "ef85cc55-224d-4e87-9e26-f1d9889d349f",
                  "parentUUID": "21757a67-ef20-4f97-b608-0ff2b6580f30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef85cc55-224d-4e87-9e26-f1d9889d349f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83c16283-fea1-4883-a6df-686b1b92dea2",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "dd22176f-698e-427f-8e7c-01c08d181f09",
                  "parentUUID": "83c16283-fea1-4883-a6df-686b1b92dea2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd22176f-698e-427f-8e7c-01c08d181f09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "91d8b936-4211-4aab-b948-06fd16295987",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "faf9c631-2560-46be-8c42-9267f2a9f729",
                  "parentUUID": "91d8b936-4211-4aab-b948-06fd16295987",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "faf9c631-2560-46be-8c42-9267f2a9f729"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8bb18f4c-3510-4141-9121-4b9a993545af",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.strictEqual(device.protocol, NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "b0e87568-b016-4736-a5d3-1e73412a7e51",
                  "parentUUID": "8bb18f4c-3510-4141-9121-4b9a993545af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0e87568-b016-4736-a5d3-1e73412a7e51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fc3ca26-3e82-40e7-8e8f-add786f51981",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    model: 'Gen4K'\n});\nassert.strictEqual(device.model, 'Gen4K');",
                  "err": {},
                  "uuid": "95ff7486-edb5-40d9-af93-3410259ab4ab",
                  "parentUUID": "4fc3ca26-3e82-40e7-8e8f-add786f51981",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.model, undefined);",
                  "err": {},
                  "uuid": "b7127ef1-3bf9-46b6-9b1b-8299accf59a7",
                  "parentUUID": "4fc3ca26-3e82-40e7-8e8f-add786f51981",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95ff7486-edb5-40d9-af93-3410259ab4ab",
                "b7127ef1-3bf9-46b6-9b1b-8299accf59a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff8bd5af-69c1-45d0-91c5-e9d2fcc271c9",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    modelName: 'Apple TV 4K'\n});\nassert.strictEqual(device.modelName, 'Apple TV 4K');",
                  "err": {},
                  "uuid": "7cb2eee0-3b98-4d27-8028-9069ac7d7e28",
                  "parentUUID": "ff8bd5af-69c1-45d0-91c5-e9d2fcc271c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.modelName, undefined);",
                  "err": {},
                  "uuid": "91615851-30ce-4540-a73c-6f9b83c87691",
                  "parentUUID": "ff8bd5af-69c1-45d0-91c5-e9d2fcc271c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7cb2eee0-3b98-4d27-8028-9069ac7d7e28",
                "91615851-30ce-4540-a73c-6f9b83c87691"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5fcc2055-73ab-42bf-81ed-67b030a24f0d",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    os: 'TvOS'\n});\nassert.strictEqual(device.os, 'TvOS');",
                  "err": {},
                  "uuid": "d00cda28-9b69-4be2-bcca-d5aee23f8b72",
                  "parentUUID": "5fcc2055-73ab-42bf-81ed-67b030a24f0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.os, undefined);",
                  "err": {},
                  "uuid": "dbac2a74-fd3e-4096-99b8-52e94b5fa2fb",
                  "parentUUID": "5fcc2055-73ab-42bf-81ed-67b030a24f0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d00cda28-9b69-4be2-bcca-d5aee23f8b72",
                "dbac2a74-fd3e-4096-99b8-52e94b5fa2fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b5d6d0f-c99e-4b0f-a165-3cffb932c264",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    version: '15.5.1'\n});\nassert.strictEqual(device.version, '15.5.1');",
                  "err": {},
                  "uuid": "544462ec-dd31-480b-ae6f-029aa9457828",
                  "parentUUID": "3b5d6d0f-c99e-4b0f-a165-3cffb932c264",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.version, undefined);",
                  "err": {},
                  "uuid": "3d65f6f2-6c15-4dfd-9fa8-8c45c6b25f7f",
                  "parentUUID": "3b5d6d0f-c99e-4b0f-a165-3cffb932c264",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "544462ec-dd31-480b-ae6f-029aa9457828",
                "3d65f6f2-6c15-4dfd-9fa8-8c45c6b25f7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3552dd7e-0f9e-4fe5-bed0-315e0155593b",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81',\n    id: 'xxx',\n    services: [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]\n});\nassert.deepStrictEqual(device.services, [\n    {\n        protocol: 'mrp',\n        port: 49152\n    },\n    {\n        protocol: 'airplay',\n        port: 7000\n    }\n]);",
                  "err": {},
                  "uuid": "8067f087-3cd7-4fcb-bc7e-df457ac61341",
                  "parentUUID": "3552dd7e-0f9e-4fe5-bed0-315e0155593b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'Vardagsrum',\n    host: '10.0.10.81'\n});\nassert.strictEqual(device.services, undefined);",
                  "err": {},
                  "uuid": "2f18dc46-3703-4fea-a9a2-609b7d7d9b92",
                  "parentUUID": "3552dd7e-0f9e-4fe5-bed0-315e0155593b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8067f087-3cd7-4fcb-bc7e-df457ac61341",
                "2f18dc46-3703-4fea-a9a2-609b7d7d9b92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1f86d29-260b-4e72-9adf-09971a320132",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "9fdfa164-7c0d-4ea3-bcdd-469bab5e0644",
                  "parentUUID": "a1f86d29-260b-4e72-9adf-09971a320132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nconst device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "a8f13f9c-a5e5-412b-89aa-f2b92f04b74b",
                  "parentUUID": "a1f86d29-260b-4e72-9adf-09971a320132",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "73fe5a7d-203b-4752-b69e-3e87eb46e3e3",
                  "parentUUID": "a1f86d29-260b-4e72-9adf-09971a320132",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9fdfa164-7c0d-4ea3-bcdd-469bab5e0644",
                "a8f13f9c-a5e5-412b-89aa-f2b92f04b74b",
                "73fe5a7d-203b-4752-b69e-3e87eb46e3e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4de37feb-ece7-455f-b096-2b56cc988b7b",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "914f86e9-3047-43ad-8a07-daf7ed41b238",
                  "parentUUID": "4de37feb-ece7-455f-b096-2b56cc988b7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "a502f307-9a13-4bcf-b562-b7818d84e61b",
                  "parentUUID": "4de37feb-ece7-455f-b096-2b56cc988b7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "543810bc-99e7-4caf-a4b3-75b42e6f1ed3",
                  "parentUUID": "4de37feb-ece7-455f-b096-2b56cc988b7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nassert.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "e67eb0d7-17e7-4cc5-91a1-03089a340db7",
                  "parentUUID": "4de37feb-ece7-455f-b096-2b56cc988b7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "914f86e9-3047-43ad-8a07-daf7ed41b238",
                "a502f307-9a13-4bcf-b562-b7818d84e61b",
                "543810bc-99e7-4caf-a4b3-75b42e6f1ed3",
                "e67eb0d7-17e7-4cc5-91a1-03089a340db7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2557148-669d-49d8-8109-9265314fd641",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});\nassert.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "e934012a-1950-4bef-abbe-7f99b421d750",
                  "parentUUID": "a2557148-669d-49d8-8109-9265314fd641",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: NodePyATVProtocol.airplay\n};\nconst deviceA = new NodePyATVDevice(config);\nconst deviceB = new NodePyATVDevice(deviceA.toJSON());\nassert.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "25c77e8f-731d-4fa1-8360-ae52150835e4",
                  "parentUUID": "a2557148-669d-49d8-8109-9265314fd641",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e934012a-1950-4bef-abbe-7f99b421d750",
                "25c77e8f-731d-4fa1-8360-ae52150835e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b155db19-6b4b-4164-bb52-e54f927cbf35",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "a467c950-e7ad-4d34-b474-40d1f5ed726c",
                  "parentUUID": "b155db19-6b4b-4164-bb52-e54f927cbf35",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a467c950-e7ad-4d34-b474-40d1f5ed726c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6fce0fe3-741c-453c-b36c-123a65af7c8a",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "56e5c872-6fe6-4846-a903-f12d3791ad60",
                  "parentUUID": "6fce0fe3-741c-453c-b36c-123a65af7c8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const result = yield device.getState();\n    assert.deepStrictEqual(result, {\n        dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n        hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n        mediaType: NodePyATVMediaType.video,\n        deviceState: NodePyATVDeviceState.playing,\n        focusState: null,\n        title: 'Solo: A Star Wars Story',\n        artist: null,\n        album: null,\n        genre: null,\n        totalTime: 8097,\n        volume: null,\n        position: 27,\n        shuffle: NodePyATVShuffleState.off,\n        repeat: NodePyATVRepeatState.off,\n        app: 'Disney+',\n        appId: 'com.disney.disneyplus',\n        powerState: null\n    });\n});",
                  "err": {},
                  "uuid": "b88a3a3d-6f0d-4cb6-a865-e069dc6594e8",
                  "parentUUID": "6fce0fe3-741c-453c-b36c-123a65af7c8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.getState();\n    }), /Got pyatv Error: invalid credentials: 321/);\n});",
                  "err": {},
                  "uuid": "724e091e-027a-4a10-b5d3-0757b375c966",
                  "parentUUID": "6fce0fe3-741c-453c-b36c-123a65af7c8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    const secondResult = yield device.getState();\n    assert.strictEqual(firstResult.dateTime, secondResult.dateTime);\n    assert.strictEqual(executions, 1);\n});",
                  "err": {},
                  "uuid": "47d1194c-3f95-4c78-b838-2fcd6e387fdd",
                  "parentUUID": "6fce0fe3-741c-453c-b36c-123a65af7c8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date(new Date().getTime() - 1000).toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    assert.strictEqual(firstResult.position, 27);\n    const secondResult = yield device.getState();\n    assert.ok(secondResult.position);\n    assert.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\n    assert.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);\n});",
                  "err": {},
                  "uuid": "b5fc2dac-782c-4f02-a121-32911eedbf9c",
                  "parentUUID": "6fce0fe3-741c-453c-b36c-123a65af7c8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b88a3a3d-6f0d-4cb6-a865-e069dc6594e8",
                "724e091e-027a-4a10-b5d3-0757b375c966",
                "47d1194c-3f95-4c78-b838-2fcd6e387fdd",
                "b5fc2dac-782c-4f02-a121-32911eedbf9c"
              ],
              "failures": [],
              "pending": [
                "56e5c872-6fe6-4846-a903-f12d3791ad60"
              ],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "843fa6af-a440-45b9-8347-eafad6a28303",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                title: 'Solo: A Star Wars Story'\n            });\n        })\n    });\n    assert.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    device.clearState();\n    assert.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    assert.strictEqual(executions, 2);\n});",
                  "err": {},
                  "uuid": "fbbd7ea1-9dff-4e90-a8de-ea6c1a107dfb",
                  "parentUUID": "843fa6af-a440-45b9-8347-eafad6a28303",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbbd7ea1-9dff-4e90-a8de-ea6c1a107dfb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d0263a3-e6f3-4aae-9c0a-67d236043285",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON()\n            });\n        })\n    });\n    const result = yield device.getDateTime();\n    assert.ok(result instanceof Date);\n});",
                  "err": {},
                  "uuid": "160b247e-df2f-4540-b327-992a0f753cc8",
                  "parentUUID": "4d0263a3-e6f3-4aae-9c0a-67d236043285",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "160b247e-df2f-4540-b327-992a0f753cc8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a0e008c6-7de6-44fa-9491-d9efaf23247f",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                hash: '12345'\n            });\n        })\n    });\n    const result = yield device.getHash();\n    assert.strictEqual(result, '12345');\n});",
                  "err": {},
                  "uuid": "68054572-a852-4573-857f-c84ec85fc26f",
                  "parentUUID": "a0e008c6-7de6-44fa-9491-d9efaf23247f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68054572-a852-4573-857f-c84ec85fc26f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c2704207-9b22-4c7c-934b-a2d7c204caae",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                media_type: 'video'\n            });\n        })\n    });\n    const result = yield device.getMediaType();\n    assert.deepStrictEqual(result, NodePyATVMediaType.video);\n    assert.deepStrictEqual(result, 'video');\n});",
                  "err": {},
                  "uuid": "1de42502-ae66-4e1b-9db0-b81c196d83a3",
                  "parentUUID": "c2704207-9b22-4c7c-934b-a2d7c204caae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1de42502-ae66-4e1b-9db0-b81c196d83a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3375b16-6dd4-472f-9f44-4fca39a39e79",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                device_state: 'seeking'\n            });\n        })\n    });\n    const result = yield device.getDeviceState();\n    assert.deepStrictEqual(result, NodePyATVDeviceState.seeking);\n    assert.deepStrictEqual(result, 'seeking');\n});",
                  "err": {},
                  "uuid": "7732a9aa-023e-4c48-8253-f1a59672569f",
                  "parentUUID": "b3375b16-6dd4-472f-9f44-4fca39a39e79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7732a9aa-023e-4c48-8253-f1a59672569f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c6846333-4ed7-422b-a279-27c5ca3743d4",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const result = yield device.getTitle();\n    assert.strictEqual(result, 'My Movie');\n});",
                  "err": {},
                  "uuid": "075f418e-c6b8-4ef4-b4a2-e1f41dd32f48",
                  "parentUUID": "c6846333-4ed7-422b-a279-27c5ca3743d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "075f418e-c6b8-4ef4-b4a2-e1f41dd32f48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f1137a5-fc02-4033-9c41-8ac8f71a5f3b",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                artist: 'My Artist'\n            });\n        })\n    });\n    const result = yield device.getArtist();\n    assert.strictEqual(result, 'My Artist');\n});",
                  "err": {},
                  "uuid": "a4e49f92-25fb-4755-a30f-3f025e9ae3ad",
                  "parentUUID": "3f1137a5-fc02-4033-9c41-8ac8f71a5f3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4e49f92-25fb-4755-a30f-3f025e9ae3ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c3956ce5-1aee-40cc-97e6-e93b34f00911",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                album: 'My ALbum'\n            });\n        })\n    });\n    const result = yield device.getAlbum();\n    assert.strictEqual(result, 'My ALbum');\n});",
                  "err": {},
                  "uuid": "70e8c73c-1fc1-431b-9a3a-3f12add304bb",
                  "parentUUID": "c3956ce5-1aee-40cc-97e6-e93b34f00911",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70e8c73c-1fc1-431b-9a3a-3f12add304bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2060c6da-a433-4aba-8a19-54176906cb28",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                genre: 'My Genre'\n            });\n        })\n    });\n    const result = yield device.getGenre();\n    assert.strictEqual(result, 'My Genre');\n});",
                  "err": {},
                  "uuid": "a792308d-eab9-4b90-b42b-5fe516fb9e3f",
                  "parentUUID": "2060c6da-a433-4aba-8a19-54176906cb28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a792308d-eab9-4b90-b42b-5fe516fb9e3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "854006ab-2b5c-4d32-8761-8ea609f94ffb",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                total_time: 45\n            });\n        })\n    });\n    const result = yield device.getTotalTime();\n    assert.strictEqual(result, 45);\n});",
                  "err": {},
                  "uuid": "20f23502-2b31-4f64-a93e-29045b079ab5",
                  "parentUUID": "854006ab-2b5c-4d32-8761-8ea609f94ffb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20f23502-2b31-4f64-a93e-29045b079ab5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e769b03-dfad-4d66-aeda-79094f88e9f2",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                position: 30\n            });\n        })\n    });\n    const result = yield device.getPosition();\n    assert.strictEqual(result, 30);\n});",
                  "err": {},
                  "uuid": "a0c1cd15-a26f-4f92-9b47-22d4d56cacde",
                  "parentUUID": "5e769b03-dfad-4d66-aeda-79094f88e9f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0c1cd15-a26f-4f92-9b47-22d4d56cacde"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f9a5545-ee4b-4519-89b0-0e9a4a519c7b",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                shuffle: 'songs'\n            });\n        })\n    });\n    const result = yield device.getShuffle();\n    assert.deepStrictEqual(result, NodePyATVShuffleState.songs);\n    assert.deepStrictEqual(result, 'songs');\n});",
                  "err": {},
                  "uuid": "fd7d434d-7950-4683-8bb6-225b1ea50910",
                  "parentUUID": "5f9a5545-ee4b-4519-89b0-0e9a4a519c7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd7d434d-7950-4683-8bb6-225b1ea50910"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e302afd0-6d13-46c8-b5e0-14784b4f2959",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                repeat: 'all'\n            });\n        })\n    });\n    const result = yield device.getRepeat();\n    assert.deepStrictEqual(result, NodePyATVRepeatState.all);\n    assert.deepStrictEqual(result, 'all');\n});",
                  "err": {},
                  "uuid": "e423e530-33e0-42c5-9dde-79c2dc5c9269",
                  "parentUUID": "e302afd0-6d13-46c8-b5e0-14784b4f2959",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e423e530-33e0-42c5-9dde-79c2dc5c9269"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab51b6fb-75f3-47ea-ac8e-79778142b036",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app: 'My App'\n            });\n        })\n    });\n    const result = yield device.getApp();\n    assert.strictEqual(result, 'My App');\n});",
                  "err": {},
                  "uuid": "3c4d1b7c-0e7b-4677-9e7c-407bfdca558f",
                  "parentUUID": "ab51b6fb-75f3-47ea-ac8e-79778142b036",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c4d1b7c-0e7b-4677-9e7c-407bfdca558f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67f2e50d-494d-4db8-b3c1-2cde86949773",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end({\n                result: 'success',\n                app_id: 'app.example.com'\n            });\n        })\n    });\n    const result = yield device.getAppId();\n    assert.strictEqual(result, 'app.example.com');\n});",
                  "err": {},
                  "uuid": "b8dc0954-6555-4d4b-8973-cf9710717600",
                  "parentUUID": "67f2e50d-494d-4db8-b3c1-2cde86949773",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8dc0954-6555-4d4b-8973-cf9710717600"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95e31859-36fd-4b19-b5ae-279cca29d658",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), ' +\n                'App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), ' +\n                'App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App Store ' +\n                '(com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), ' +\n                'App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ ' +\n                '(com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE ' +\n                '(tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek ' +\n                '(de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), ' +\n                'App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), ' +\n                'App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), ' +\n                'App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), ' +\n                'App: Musik (com.apple.TVMusic)');\n        })\n    });\n    const result = yield device.listApps();\n    assert.strictEqual(result.length, 25);\n    assert.strictEqual(result[0].id, 'com.apple.Fitness');\n    assert.strictEqual(result[0].name, 'Fitness');\n});",
                  "err": {},
                  "uuid": "8be88705-a5e4-4202-b601-ceceb18b2d29",
                  "parentUUID": "95e31859-36fd-4b19-b5ae-279cca29d658",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8be88705-a5e4-4202-b601-ceceb18b2d29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18d356a5-d67b-48d3-bb46-a4c10b01719e",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    yield device.pressKey(NodePyATVKeys.home);\n});",
                  "err": {},
                  "uuid": "eb66e50e-eb3e-4d5b-bf60-e8a0234e0571",
                  "parentUUID": "18d356a5-d67b-48d3-bb46-a4c10b01719e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2'\n    });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        yield device.pressKey('foo');\n    }), /Unsupported key value foo/);\n});",
                  "err": {},
                  "uuid": "0e4a91e3-4a80-4685-9102-1cd7cb780830",
                  "parentUUID": "18d356a5-d67b-48d3-bb46-a4c10b01719e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"failure\"}');\n        })\n    });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.pressKey(NodePyATVKeys.home);\n    }), /Unable to parse pyatv response/);\n});",
                  "err": {},
                  "uuid": "e53ce149-d14f-4ae7-86f4-d2ce726221f1",
                  "parentUUID": "18d356a5-d67b-48d3-bb46-a4c10b01719e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb66e50e-eb3e-4d5b-bf60-e8a0234e0571",
                "0e4a91e3-4a80-4685-9102-1cd7cb780830",
                "e53ce149-d14f-4ae7-86f4-d2ce726221f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c0cc2450-e3aa-4ffd-97ab-1a293bd86a12",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "67c36eab-2004-4a4a-936c-ea9a8f174674",
                  "parentUUID": "c0cc2450-e3aa-4ffd-97ab-1a293bd86a12",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67c36eab-2004-4a4a-936c-ea9a8f174674"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9f336dff-5bd0-415b-9a3d-fc1aac317fe3",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "38b089e6-8cb7-4477-b08e-d90b8f3b80f4",
                  "parentUUID": "9f336dff-5bd0-415b-9a3d-fc1aac317fe3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38b089e6-8cb7-4477-b08e-d90b8f3b80f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "59922db2-8c63-49e5-b7d5-ab5d7fc09cc3",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "4e1dfba3-79b2-4bc7-9e0c-c99624121391",
                  "parentUUID": "59922db2-8c63-49e5-b7d5-ab5d7fc09cc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e1dfba3-79b2-4bc7-9e0c-c99624121391"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a81cd294-8f8b-49de-a160-cdfe1a415891",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "3a6d3729-873e-4ca2-bfcd-b74e206e6762",
                  "parentUUID": "a81cd294-8f8b-49de-a160-cdfe1a415891",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a6d3729-873e-4ca2-bfcd-b74e206e6762"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ff90f2a-141c-4e04-9034-63da70592622",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "a4736bf2-c393-4ce9-92db-78749461008a",
                  "parentUUID": "1ff90f2a-141c-4e04-9034-63da70592622",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4736bf2-c393-4ce9-92db-78749461008a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51aa633d-cb6e-47c2-ac29-eb3b091d7a47",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "5062a3e3-4982-43fc-8340-2e9876b8185a",
                  "parentUUID": "51aa633d-cb6e-47c2-ac29-eb3b091d7a47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5062a3e3-4982-43fc-8340-2e9876b8185a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd61ed99-7571-4d44-8a93-80981c08cbcc",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "9e492ba8-4c1b-46e3-93a3-071fcecfb11b",
                  "parentUUID": "cd61ed99-7571-4d44-8a93-80981c08cbcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e492ba8-4c1b-46e3-93a3-071fcecfb11b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43aa237e-f675-45f8-8564-013eab046832",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c6789245-cbe1-4c95-9214-f94c602035ba",
                  "parentUUID": "43aa237e-f675-45f8-8564-013eab046832",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6789245-cbe1-4c95-9214-f94c602035ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23922ad0-3004-4aad-baa4-730377ad4698",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "150924b6-3883-4963-890c-3dcedb8e9468",
                  "parentUUID": "23922ad0-3004-4aad-baa4-730377ad4698",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "150924b6-3883-4963-890c-3dcedb8e9468"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3dca1870-0fba-4eef-a08e-dffdcf40cc40",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "163f3f1f-bca0-4648-9d58-b05d6c77b3be",
                  "parentUUID": "3dca1870-0fba-4eef-a08e-dffdcf40cc40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "163f3f1f-bca0-4648-9d58-b05d6c77b3be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc0e3afb-b09e-4671-80ed-7c5f67247d17",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "2faad0d9-9e86-4be1-a846-b47aac589ca5",
                  "parentUUID": "dc0e3afb-b09e-4671-80ed-7c5f67247d17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2faad0d9-9e86-4be1-a846-b47aac589ca5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb06dcfc-d41d-4610-bc49-f9064232ef81",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "116f3c5a-0385-4df0-9ec1-a155d7146740",
                  "parentUUID": "bb06dcfc-d41d-4610-bc49-f9064232ef81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "116f3c5a-0385-4df0-9ec1-a155d7146740"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7396dc53-2544-4771-9a7b-6a762ea0e909",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "87882eb9-4f51-46e5-80dc-cd9d8a9e5630",
                  "parentUUID": "7396dc53-2544-4771-9a7b-6a762ea0e909",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87882eb9-4f51-46e5-80dc-cd9d8a9e5630"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "597e4aa3-7893-450a-8e65-7535a45656bc",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "2d079d00-87e2-4b98-9ccf-4a6e9a708978",
                  "parentUUID": "597e4aa3-7893-450a-8e65-7535a45656bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d079d00-87e2-4b98-9ccf-4a6e9a708978"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "089516f2-8be1-46d2-970b-b4608c85601a",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "ee4905ab-f6ce-446c-ae65-d520ab2138a5",
                  "parentUUID": "089516f2-8be1-46d2-970b-b4608c85601a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee4905ab-f6ce-446c-ae65-d520ab2138a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eb2fcf68-c883-4c20-ae26-5f79b427b21c",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "93890cea-7a10-499b-98db-c9e3680600fa",
                  "parentUUID": "eb2fcf68-c883-4c20-ae26-5f79b427b21c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93890cea-7a10-499b-98db-c9e3680600fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a64f0047-7e45-4c54-a436-39e5ab3e9a21",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "8651f347-1422-4e15-8982-c2106aec9024",
                  "parentUUID": "a64f0047-7e45-4c54-a436-39e5ab3e9a21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8651f347-1422-4e15-8982-c2106aec9024"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "602ad00d-78d0-4617-a1b8-37dd3d68d63a",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "9ee3176c-9a12-4eb9-86bb-40415b74e1e5",
                  "parentUUID": "602ad00d-78d0-4617-a1b8-37dd3d68d63a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ee3176c-9a12-4eb9-86bb-40415b74e1e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c51eff2-796f-482b-9ab9-3475766e7385",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "ef1a441c-e01b-4a8d-9a18-f792def46a3f",
                  "parentUUID": "2c51eff2-796f-482b-9ab9-3475766e7385",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef1a441c-e01b-4a8d-9a18-f792def46a3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af23c0b6-2e0e-43f0-be86-e9f050e1dd52",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "1d6f276f-4c58-4445-a5aa-d4322a40b428",
                  "parentUUID": "af23c0b6-2e0e-43f0-be86-e9f050e1dd52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d6f276f-4c58-4445-a5aa-d4322a40b428"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0a12d7a-fc87-4bc0-8885-626ccee1812e",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "f3155301-ab5c-4919-8da9-9f5c77ebb25f",
                  "parentUUID": "d0a12d7a-fc87-4bc0-8885-626ccee1812e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3155301-ab5c-4919-8da9-9f5c77ebb25f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4de91d6-d475-4210-81ff-5f407119ca2b",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "d0d9a12c-fe94-46b5-b1fe-ea16bdbe2859",
                  "parentUUID": "b4de91d6-d475-4210-81ff-5f407119ca2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0d9a12c-fe94-46b5-b1fe-ea16bdbe2859"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03c6a70e-a70a-4597-8d3a-553dcf28d6ec",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "2d41bd67-0a9f-47d3-aecc-ce3d95e6848b",
                  "parentUUID": "03c6a70e-a70a-4597-8d3a-553dcf28d6ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d41bd67-0a9f-47d3-aecc-ce3d95e6848b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef3e54ef-b94e-4876-86ad-6b53ca33f138",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: createFakeSpawn(cp => {\n            cp.end('');\n        })\n    });\n    yield device.launchApp('com.apple.TVShows');\n});",
                  "err": {},
                  "uuid": "9cf43d9e-383b-4d32-b437-694ed4fab26e",
                  "parentUUID": "ef3e54ef-b94e-4876-86ad-6b53ca33f138",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cf43d9e-383b-4d32-b437-694ed4fab26e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "63af776c-cfc5-407c-92f4-fd86a570c0fd",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 508,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(4000);\n    const result = yield NodePyATVInstance.version();\n    if (result.pyatv === null) {\n        throw new Error('No version found for pyatv. Is it installed in test environment?');\n    }\n    assert.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\n    assert.ok(result.pyatv.length >= 5, 'result.pyatv has content');\n    assert.strictEqual(result.module, version);\n});",
                  "err": {},
                  "uuid": "e26de6dd-7ee6-43d6-9fb9-9a3d5e3881e9",
                  "parentUUID": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => {\n            cp.code(1);\n            cp.end('atvremote 0.7.4');\n        })\n    });\n    assert.ok(result.pyatv);\n    assert.strictEqual(result.pyatv, '0.7.4');\n});",
                  "err": {},
                  "uuid": "a08a2737-365d-4299-9309-381734c98628",
                  "parentUUID": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        noColors: true,\n        spawn: createFakeSpawn(cp => cp.code(1).end())\n    });\n    assert.strictEqual(result.module, version);\n});",
                  "err": {},
                  "uuid": "4682ed08-8d0f-44bb-97a4-aa08f4b0649c",
                  "parentUUID": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.version({\n        atvremotePath: '/foo/bar',\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), '/foo/bar');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "5f15b7f1-fc49-464b-958a-b1de23226e6f",
                  "parentUUID": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.version({\n        debug: true,\n        spawn: createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "f718c638-8923-463a-8369-db6ff83ae804",
                  "parentUUID": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.version({\n        debug: () => {\n            // no debug log\n        },\n        noColors: true,\n        spawn: createFakeSpawn(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "0327f8d8-e902-4961-ab7a-6963d380dfa7",
                  "parentUUID": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => cp.stderr('Hello World!').code(123).end())\n    });\n    assert.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "ea52cbaa-0a6f-4a9a-9623-b2f1666b01c7",
                  "parentUUID": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => {\n            cp.error(new Error('Hello world!')).end();\n        })\n    });\n    assert.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "36dbae46-0732-4931-b957-0b3a4d2950c9",
                  "parentUUID": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield NodePyATVInstance.version({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout('atvremote 42').code(1).end();\n        })\n    });\n    assert.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "d3acf59d-ea0d-49c8-91f1-18abad5bc122",
                  "parentUUID": "afc17f87-6a81-4a6e-b3db-c09e6d7dcac3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e26de6dd-7ee6-43d6-9fb9-9a3d5e3881e9",
                "a08a2737-365d-4299-9309-381734c98628",
                "4682ed08-8d0f-44bb-97a4-aa08f4b0649c",
                "5f15b7f1-fc49-464b-958a-b1de23226e6f",
                "f718c638-8923-463a-8369-db6ff83ae804",
                "0327f8d8-e902-4961-ab7a-6963d380dfa7",
                "ea52cbaa-0a6f-4a9a-9623-b2f1666b01c7",
                "36dbae46-0732-4931-b957-0b3a4d2950c9",
                "d3acf59d-ea0d-49c8-91f1-18abad5bc122"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 522,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c0aca07f-65d4-492c-9923-9e506a67e3ee",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5868,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(12000);\n    yield NodePyATVInstance.check();\n});",
                  "err": {},
                  "uuid": "67bcdb99-a2e5-4dfc-ab47-94cbe14e7dd2",
                  "parentUUID": "c0aca07f-65d4-492c-9923-9e506a67e3ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.check({\n            spawn: createFakeSpawn(cp => {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "0d0a18e0-17e7-4e29-8ca1-84d159ade07d",
                  "parentUUID": "c0aca07f-65d4-492c-9923-9e506a67e3ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.check({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout('atvremote 0.5.1').code(1).end();\n            })\n        });\n    }), /Found pyatv, but unforunately it's too old. Please update pyatv./);\n});",
                  "err": {},
                  "uuid": "ef73381e-7f1c-429a-aa4d-f19b5fff1594",
                  "parentUUID": "c0aca07f-65d4-492c-9923-9e506a67e3ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let i = 0;\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.check({\n            spawn: createFakeSpawn(cp => {\n                if (i === 0) {\n                    cp.stdout('atvremote 0.7.0').code(1).end();\n                    i++;\n                }\n                else {\n                    cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n                }\n            })\n        });\n    }), /Unable to scan for devices/);\n});",
                  "err": {},
                  "uuid": "5ffa95fb-2f49-4375-a38e-1f0e611927f7",
                  "parentUUID": "c0aca07f-65d4-492c-9923-9e506a67e3ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67bcdb99-a2e5-4dfc-ab47-94cbe14e7dd2",
                "0d0a18e0-17e7-4e29-8ca1-84d159ade07d",
                "ef73381e-7f1c-429a-aa4d-f19b5fff1594",
                "5ffa95fb-2f49-4375-a38e-1f0e611927f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5875,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5438,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(8000);\n    const result = yield NodePyATVInstance.find();\n    assert.ok(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "6089f7b8-7d46-4f89-8df7-ef68c77c3b3c",
                  "parentUUID": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield NodePyATVInstance.find({\n        atvscriptPath: '/foo/bar',\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), '/foo/bar');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "5b67d9d2-faaa-4530-b0f9-a7ad125a7762",
                  "parentUUID": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stderr('Hello World!').code(1).end();\n            })\n        });\n    }), /Unable to execute request/);\n});",
                  "err": {},
                  "uuid": "a7e2096a-2a5d-4484-bd50-50dff1375549",
                  "parentUUID": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.error(new Error('Hello world!')).code(1).end();\n            })\n        });\n    }), /Hello world!/);\n});",
                  "err": {},
                  "uuid": "a16b2556-abd7-464f-88e3-4c803e90a12b",
                  "parentUUID": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout(JSON.stringify({\n                    'result': 'success',\n                    'datetime': '2020-11-06T20:47:30.840022+01:00',\n                    'devices': []\n                }).substr(1)).end();\n            })\n        });\n    }), /Unable to parse result/);\n});",
                  "err": {},
                  "uuid": "ec1458e6-f0d1-44f0-a82c-30992bbb0eec",
                  "parentUUID": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'error'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "082b4207-418b-4002-be79-4fb3d0a1138d",
                  "parentUUID": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield NodePyATVInstance.find({\n            spawn: createFakeSpawn(cp => {\n                cp.stdout({\n                    result: 'success'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "5d2ea7e8-c59b-4440-8a9d-51d93067a6c3",
                  "parentUUID": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                devices: [\n                    {\n                        name: 'Vardagsrum',\n                        address: '10.0.10.81',\n                        identifier: 'xxx'\n                    }\n                ]\n            }).code(1).end();\n        })\n    });\n    assert.strictEqual(devices.length, 1);\n    assert.strictEqual(devices[0].name, 'Vardagsrum');\n    assert.strictEqual(devices[0].host, '10.0.10.81');\n    assert.strictEqual(devices[0].id, 'xxx');\n    assert.strictEqual(devices[0].model, undefined);\n    assert.strictEqual(devices[0].modelName, undefined);\n    assert.strictEqual(devices[0].os, undefined);\n    assert.strictEqual(devices[0].version, undefined);\n    assert.deepStrictEqual(devices[0].services, undefined);\n});",
                  "err": {},
                  "uuid": "ced0a037-ff46-4225-93b6-25ea4a4abcbf",
                  "parentUUID": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const devices = yield NodePyATVInstance.find({\n        spawn: createFakeSpawn(cp => {\n            cp.stdout({\n                result: 'success',\n                datetime: '2020-11-06T20:47:30.840022+01:00',\n                devices: [\n                    {\n                        name: 'Vardagsrum',\n                        address: '10.0.10.81',\n                        identifier: 'xxx',\n                        device_info: {\n                            'model': 'Gen4K',\n                            'model_str': 'Apple TV 4K',\n                            'operating_system': 'TvOS',\n                            'version': '15.5.1'\n                        },\n                        services: [\n                            {\n                                protocol: 'mrp',\n                                port: 49152\n                            },\n                            {\n                                protocol: 'airplay',\n                                port: 7000\n                            }\n                        ]\n                    }\n                ]\n            }).code(1).end();\n        })\n    });\n    assert.strictEqual(devices.length, 1);\n    assert.strictEqual(devices[0].name, 'Vardagsrum');\n    assert.strictEqual(devices[0].host, '10.0.10.81');\n    assert.strictEqual(devices[0].id, 'xxx');\n    assert.strictEqual(devices[0].model, 'Gen4K');\n    assert.strictEqual(devices[0].modelName, 'Apple TV 4K');\n    assert.strictEqual(devices[0].os, 'TvOS');\n    assert.strictEqual(devices[0].version, '15.5.1');\n    assert.deepStrictEqual(devices[0].services, [\n        {\n            protocol: NodePyATVProtocol.mrp,\n            port: 49152\n        },\n        {\n            protocol: NodePyATVProtocol.airplay,\n            port: 7000\n        }\n    ]);\n});",
                  "err": {},
                  "uuid": "b6ea62c3-38a2-4afe-9d10-482e9d74b6e2",
                  "parentUUID": "c5c6e35e-6b2e-41a7-97d5-fd2025ee1d47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6089f7b8-7d46-4f89-8df7-ef68c77c3b3c",
                "5b67d9d2-faaa-4530-b0f9-a7ad125a7762",
                "a7e2096a-2a5d-4484-bd50-50dff1375549",
                "a16b2556-abd7-464f-88e3-4c803e90a12b",
                "ec1458e6-f0d1-44f0-a82c-30992bbb0eec",
                "082b4207-418b-4002-be79-4fb3d0a1138d",
                "5d2ea7e8-c59b-4440-8a9d-51d93067a6c3",
                "ced0a037-ff46-4225-93b6-25ea4a4abcbf",
                "b6ea62c3-38a2-4afe-9d10-482e9d74b6e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5459,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6672cc64-b7da-48c8-b3df-a0ab957a0a6d",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = NodePyATVInstance.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert.strictEqual(device.host, '192.168.178.6');\nassert.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "41afed2a-cec5-4e34-af2b-cb26db9cc2c4",
                  "parentUUID": "6672cc64-b7da-48c8-b3df-a0ab957a0a6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41afed2a-cec5-4e34-af2b-cb26db9cc2c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2148b77a-bdde-4a59-a391-2196954adafe",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ atvremotePath: 'test' });\n    yield i.version({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "f3fff2e8-4f9d-4089-a25d-f0ff314abd99",
                  "parentUUID": "2148b77a-bdde-4a59-a391-2196954adafe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3fff2e8-4f9d-4089-a25d-f0ff314abd99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "411606d9-2385-4714-a26f-8da1948b16ce",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ atvremotePath: 'test' });\n    yield assert.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield i.check({\n            spawn: createFakeSpawn(cp => {\n                assert.strictEqual(cp.cmd(), 'test');\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "bbb5d3fc-6473-4d0f-b122-7941a63839c5",
                  "parentUUID": "411606d9-2385-4714-a26f-8da1948b16ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbb5d3fc-6473-4d0f-b122-7941a63839c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9327e60b-486b-4bb6-b85c-6d34360f0380",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ atvscriptPath: 'test' });\n    yield i.find({\n        spawn: createFakeSpawn(cp => {\n            assert.strictEqual(cp.cmd(), 'test');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "080e70df-0386-45b2-8ad0-620d92d4c320",
                  "parentUUID": "9327e60b-486b-4bb6-b85c-6d34360f0380",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "080e70df-0386-45b2-8ad0-620d92d4c320"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c83ac4e-b13b-4adc-a6de-95644fc7322e",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new NodePyATVInstance({ debug: true });\n    const d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\n    assert.deepStrictEqual(d.debug, true);\n});",
                  "err": {},
                  "uuid": "229d398e-6ce9-431b-a08e-89b89aa64358",
                  "parentUUID": "9c83ac4e-b13b-4adc-a6de-95644fc7322e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "229d398e-6ce9-431b-a08e-89b89aa64358"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVProtocol);",
                  "err": {},
                  "uuid": "83ff7eaf-b04b-4986-900b-94ee7f3d58d5",
                  "parentUUID": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVMediaType);",
                  "err": {},
                  "uuid": "4f402fc2-4910-439a-9004-56f22b211649",
                  "parentUUID": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "d1790b77-c235-4c7c-893b-41561eff7cc6",
                  "parentUUID": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "00317c8a-9153-4b84-aa18-44d5d7624f75",
                  "parentUUID": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "8394b0be-cbfc-4407-bcb8-acef9b6b2b57",
                  "parentUUID": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "4d082f96-bc0e-40c6-a5f0-7c34e7b3f8fc",
                  "parentUUID": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVKeys);",
                  "err": {},
                  "uuid": "e8ca0d58-4313-4514-b759-79a0c970443a",
                  "parentUUID": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVListenerState);",
                  "err": {},
                  "uuid": "44b3a258-0394-4a7f-8be7-3f682fdaf1bf",
                  "parentUUID": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(NodePyATVPowerState);",
                  "err": {},
                  "uuid": "49ad2208-159c-4dd4-bf37-049db6e7a32b",
                  "parentUUID": "bfddf91c-980b-44a4-b96d-36ae2aee1284",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83ff7eaf-b04b-4986-900b-94ee7f3d58d5",
                "4f402fc2-4910-439a-9004-56f22b211649",
                "d1790b77-c235-4c7c-893b-41561eff7cc6",
                "00317c8a-9153-4b84-aa18-44d5d7624f75",
                "8394b0be-cbfc-4407-bcb8-acef9b6b2b57",
                "4d082f96-bc0e-40c6-a5f0-7c34e7b3f8fc",
                "e8ca0d58-4313-4514-b759-79a0c970443a",
                "44b3a258-0394-4a7f-8be7-3f682fdaf1bf",
                "49ad2208-159c-4dd4-bf37-049db6e7a32b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b9e849f5-3d19-4f2d-a0f6-7391105f3406",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2ca2003d-ada7-435e-b112-b23e5a625c23",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = addRequestId();\nassert.strictEqual(typeof id, 'string');\nremoveRequestId(id);",
                  "err": {},
                  "uuid": "a909a03e-71ab-4fcd-9279-0c5502db9e85",
                  "parentUUID": "2ca2003d-ada7-435e-b112-b23e5a625c23",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "removeRequestId('FOO');",
                  "err": {},
                  "uuid": "f1a08850-e095-4dd3-a22a-9cbf19332485",
                  "parentUUID": "2ca2003d-ada7-435e-b112-b23e5a625c23",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a909a03e-71ab-4fcd-9279-0c5502db9e85",
                "f1a08850-e095-4dd3-a22a-9cbf19332485"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3106eae4-fbd7-4669-9b6c-11303a8f5e13",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "c6ac6979-dd3f-4d97-9a1c-afe31bfdd865",
                  "parentUUID": "3106eae4-fbd7-4669-9b6c-11303a8f5e13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "9620f099-f7a3-4cd6-914d-7943f43c2242",
                  "parentUUID": "3106eae4-fbd7-4669-9b6c-11303a8f5e13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "579f87a8-51b7-421c-b81f-dbb007729710",
                  "parentUUID": "3106eae4-fbd7-4669-9b6c-11303a8f5e13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "8b280074-2cfa-490b-896c-8efa6c6b0701",
                  "parentUUID": "3106eae4-fbd7-4669-9b6c-11303a8f5e13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "debug('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert.strictEqual(this, null);\n        assert.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "e506f9f7-3489-42bc-a8ea-ce810f9f8473",
                  "parentUUID": "3106eae4-fbd7-4669-9b6c-11303a8f5e13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6ac6979-dd3f-4d97-9a1c-afe31bfdd865",
                "9620f099-f7a3-4cd6-914d-7943f43c2242",
                "579f87a8-51b7-421c-b81f-dbb007729710",
                "8b280074-2cfa-490b-896c-8efa6c6b0701",
                "e506f9f7-3489-42bc-a8ea-ce810f9f8473"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1960a30-7b0f-49e7-9dc5-dfc0408fc3fe",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "8e47e7be-b237-4a0c-871f-cc1495bb6a79",
                  "parentUUID": "e1960a30-7b0f-49e7-9dc5-dfc0408fc3fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "062b72b6-ae49-4e7a-a40c-a53a2e8e38ce",
                  "parentUUID": "e1960a30-7b0f-49e7-9dc5-dfc0408fc3fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "2b9f179e-38b3-415e-bfe9-14fb9ab9ac58",
                  "parentUUID": "e1960a30-7b0f-49e7-9dc5-dfc0408fc3fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = getExecutable(NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "73da8967-47a5-4146-b9b1-3e5641d09bce",
                  "parentUUID": "e1960a30-7b0f-49e7-9dc5-dfc0408fc3fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e47e7be-b237-4a0c-871f-cc1495bb6a79",
                "062b72b6-ae49-4e7a-a40c-a53a2e8e38ce",
                "2b9f179e-38b3-415e-bfe9-14fb9ab9ac58",
                "73da8967-47a5-4146-b9b1-3e5641d09bce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "334138b3-704a-42e0-8303-792d9e055083",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield getParamters();\n    assert.deepEqual(result, []);\n});",
                  "err": {},
                  "uuid": "392a70b0-b7e5-47f6-806e-a5e014658928",
                  "parentUUID": "334138b3-704a-42e0-8303-792d9e055083",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield getParamters({\n        host: '192.168.178.2'\n    });\n    assert.deepEqual(result, ['-s', '192.168.178.2']);\n});",
                  "err": {},
                  "uuid": "b3773405-23ea-4d6e-a39e-c49861bd038d",
                  "parentUUID": "334138b3-704a-42e0-8303-792d9e055083",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield getParamters({\n        hosts: ['192.168.178.2', '192.168.178.3'],\n        id: '****',\n        protocol: NodePyATVProtocol.mrp,\n        dmapCredentials: '****',\n        mrpCredentials: '****',\n        airplayCredentials: '****',\n        companionCredentials: '1234',\n        raopCredentials: '::foo:'\n    });\n    assert.deepEqual(result, [\n        '-s', '192.168.178.2,192.168.178.3',\n        '-i', '****',\n        '--protocol', 'mrp',\n        '--dmap-credentials', '****',\n        '--mrp-credentials', '****',\n        '--airplay-credentials', '****',\n        '--companion-credentials', '1234',\n        '--raop-credentials', '::foo:'\n    ]);\n});",
                  "err": {},
                  "uuid": "0c597b96-cef9-4add-a642-b8e9502efdaf",
                  "parentUUID": "334138b3-704a-42e0-8303-792d9e055083",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "392a70b0-b7e5-47f6-806e-a5e014658928",
                "b3773405-23ea-4d6e-a39e-c49861bd038d",
                "0c597b96-cef9-4add-a642-b8e9502efdaf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a2e55a6-4a1a-47e5-ab7c-f472341ae0a7",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null\n});",
                  "err": {},
                  "uuid": "d09f559a-8fca-4c35-b2da-557abf6534c1",
                  "parentUUID": "6a2e55a6-4a1a-47e5-ab7c-f472341ae0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = parseState(null, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null\n});",
                  "err": {},
                  "uuid": "69ef0113-6cee-4269-99ac-c5fbbdcd1415",
                  "parentUUID": "6a2e55a6-4a1a-47e5-ab7c-f472341ae0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    powerState: null,\n    focusState: null,\n    volume: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: NodePyATVMediaType.video,\n    deviceState: NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: NodePyATVShuffleState.off,\n    repeat: NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null,\n    focusState: null,\n    volume: null\n});",
                  "err": {},
                  "uuid": "46e00e60-e44f-4123-a765-713c04423d82",
                  "parentUUID": "6a2e55a6-4a1a-47e5-ab7c-f472341ae0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert.throws(() => {\n    parseState(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "1175a74f-db28-4b4f-b665-2d5b68287606",
                  "parentUUID": "6a2e55a6-4a1a-47e5-ab7c-f472341ae0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null\n});",
                  "err": {},
                  "uuid": "7360d97e-e6e5-4ebb-8d14-af4d5ed33d1b",
                  "parentUUID": "6a2e55a6-4a1a-47e5-ab7c-f472341ae0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    powerState: null,\n    focusState: null,\n    volume: null\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null\n});",
                  "err": {},
                  "uuid": "ed14a52e-35b1-488e-826d-b81663492348",
                  "parentUUID": "6a2e55a6-4a1a-47e5-ab7c-f472341ae0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = parseState(input, '', {});\nassert.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null,\n    focusState: null,\n    volume: null\n});",
                  "err": {},
                  "uuid": "6809b9fa-83f8-43a6-b129-f70e6f7ca121",
                  "parentUUID": "6a2e55a6-4a1a-47e5-ab7c-f472341ae0a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d09f559a-8fca-4c35-b2da-557abf6534c1",
                "69ef0113-6cee-4269-99ac-c5fbbdcd1415",
                "46e00e60-e44f-4123-a765-713c04423d82",
                "1175a74f-db28-4b4f-b665-2d5b68287606",
                "7360d97e-e6e5-4ebb-8d14-af4d5ed33d1b",
                "ed14a52e-35b1-488e-826d-b81663492348",
                "6809b9fa-83f8-43a6-b129-f70e6f7ca121"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}