{
  "stats": {
    "suites": 102,
    "tests": 174,
    "passes": 172,
    "pending": 2,
    "failures": 0,
    "start": "2025-10-28T18:08:07.825Z",
    "end": "2025-10-28T18:08:20.195Z",
    "duration": 12370,
    "testsRegistered": 174,
    "passPercent": 100,
    "pendingPercent": 1.1494252873563218,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "73f0213d-5ff7-49e3-824d-9720bba241a5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "09a1b4ff-b198-4546-a496-90aead94c667",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c2b5c1d6-908d-4411-b063-206a00ae3148",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.key,\"genre\")",
                  "err": {},
                  "uuid": "2442a406-cebc-41be-9ea2-ea29b9bdbede",
                  "parentUUID": "c2b5c1d6-908d-4411-b063-206a00ae3148",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2442a406-cebc-41be-9ea2-ea29b9bdbede"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7534d5b-d3e6-4f17-8dd8-a64bda98e296",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.oldValue,\"Jazz\")",
                  "err": {},
                  "uuid": "3f478380-cc80-4431-bcd7-17e549767897",
                  "parentUUID": "a7534d5b-d3e6-4f17-8dd8-a64bda98e296",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f478380-cc80-4431-bcd7-17e549767897"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0aa78c35-c9c5-48ff-938c-6f92c60e7993",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.newValue,\"Rock\")",
                  "err": {},
                  "uuid": "0ae52a7d-855f-4a02-a27c-cc78f1a1086d",
                  "parentUUID": "0aa78c35-c9c5-48ff-938c-6f92c60e7993",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ae52a7d-855f-4a02-a27c-cc78f1a1086d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc43e66c-22d1-4cf3-a099-610986b22f5d",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new import_device_event.default({device:new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"}),key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.strictEqual(event.value,\"Rock\")",
                  "err": {},
                  "uuid": "e21a5586-f72f-4578-b81b-700a6e654df6",
                  "parentUUID": "cc43e66c-22d1-4cf3-a099-610986b22f5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e21a5586-f72f-4578-b81b-700a6e654df6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "280dc1b4-44d5-4cd5-aeac-06eda4a28c0d",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testinstance\"});const event=new import_device_event.default({device,key:\"genre\",new:\"Rock\",old:\"Jazz\"});import_assert.default.deepEqual(event.device,device)",
                  "err": {},
                  "uuid": "8bb88116-8c92-45e5-9519-41bbf7ba4baf",
                  "parentUUID": "280dc1b4-44d5-4cd5-aeac-06eda4a28c0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bb88116-8c92-45e5-9519-41bbf7ba4baf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0dc4dab4-7de4-40c5-9e21-d029f37f0715",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update:title\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "90b8e888-bfe2-479b-b095-fdb420c8b362",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});await new Promise(cb=>{device.once(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"title\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"My Movie\");import_assert.default.strictEqual(event.value,\"My Movie\");import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "d6406917-feab-4832-90d2-e9d0f163452e",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const sort=[];await Promise.race([new Promise(cb=>{device.once(\"update\",()=>{sort.push(\"update\");cb(void 0)})}),new Promise(cb=>{device.once(\"update:title\",()=>{sort.push(\"update:title\");cb(void 0)})})]);import_assert.default.deepStrictEqual(sort,[\"update:title\",\"update\"])",
                  "err": {},
                  "uuid": "4abe7595-b554-496c-8f58-8e1508c12605",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});await new Promise(cb=>{device.once(\"error\",error=>{import_assert.default.ok(error instanceof Error);import_assert.default.ok(error.toString().includes(\"invalid credentials: 321\"));cb(void 0)})})",
                  "err": {},
                  "uuid": "6551e66b-a3dc-4be5-b019-e3ff082555b6",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let spawnCounter=0;let eventCounter=0;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(spawnCounter===0){cp.onStdIn(()=>cp.end())}cp.stdout({result:\"success\",title:\"My Movie\"});spawnCounter++;if(spawnCounter>=2){cp.end()}})});const listener=__name(()=>{eventCounter++},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));await device.getState();device.off(\"update\",listener);import_assert.default.strictEqual(spawnCounter,2);import_assert.default.strictEqual(eventCounter,1)",
                  "err": {},
                  "uuid": "de39743f-5802-435a-9065-879ba39764e6",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});let callCounter=0;const error=new Error(\"This is an error. Be nice.\");device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);callCounter++});const listener=__name(()=>{throw error},\"listener\");device.on(\"update\",listener);await new Promise(cb=>setTimeout(cb,0));device.off(\"update\",listener);import_assert.default.strictEqual(callCounter,1)",
                  "err": {},
                  "uuid": "0f52f828-f7a1-46b9-8d3e-8996e882e025",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"})})});await new Promise(cb=>{device.once(\"update:powerState\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);cb(void 0)})})",
                  "err": {},
                  "uuid": "249944e4-1493-44fa-8db4-6d2ed7b6e403",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for powerState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for powerState changes",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),power_state:\"off\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"powerState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"off\");import_assert.default.strictEqual(event.newValue,import_lib.NodePyATVPowerState.off);import_assert.default.strictEqual(event.value,\"off\");import_assert.default.strictEqual(event.value,import_lib.NodePyATVPowerState.off);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "79e29117-f89a-4183-a25e-71415b5a4681",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for focusState changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for focusState changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),focus_state:\"unfocused\",result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"focusState\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,\"unfocused\");import_assert.default.strictEqual(event.newValue,import_types.NodePyATVFocusState.unfocused);import_assert.default.strictEqual(event.value,\"unfocused\");import_assert.default.strictEqual(event.value,import_types.NodePyATVFocusState.unfocused);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "75ca8ad6-c0a7-498f-b69c-29e0c3f67e9d",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for outputDevices changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for outputDevices changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),output_devices:[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}],result:\"success\"});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"outputDevices\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.deepStrictEqual(event.newValue,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.value,[{identifier:\"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE\",name:\"Living room\"}]);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "1f93f20a-5bf3-42c7-8513-4fda16afc42f",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only one event for volume changes",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should only one event for volume changes",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),result:\"success\",volume:20});cp.end()})});let counter=0;device.on(\"update\",event=>{import_assert.default.ok(event instanceof import_lib.NodePyATVDeviceEvent);import_assert.default.strictEqual(event.key,\"volume\");import_assert.default.strictEqual(event.oldValue,null);import_assert.default.strictEqual(event.newValue,20);import_assert.default.strictEqual(event.value,20);import_assert.default.deepStrictEqual(event.device,device);counter++});await new Promise(cb=>setTimeout(cb,10));import_assert.default.strictEqual(counter,1);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "47af212a-cb4c-48e7-8e2a-ac766f24826f",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger any events for newly added fields",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not trigger any events for newly added fields",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({datetime:new Date().toJSON(),foo:\"bar\",result:\"success\"});cp.end()})});device.on(\"update\",event=>{import_assert.default.fail(`Got an update event for a new field: ${event}`)});await new Promise(cb=>setTimeout(cb,10));device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "08261f43-6d5d-4ede-b751-66cba5ce1a64",
                  "parentUUID": "4ccf9d69-ebab-42f1-bf78-5f5da7873b3d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90b8e888-bfe2-479b-b095-fdb420c8b362",
                "d6406917-feab-4832-90d2-e9d0f163452e",
                "4abe7595-b554-496c-8f58-8e1508c12605",
                "6551e66b-a3dc-4be5-b019-e3ff082555b6",
                "de39743f-5802-435a-9065-879ba39764e6",
                "0f52f828-f7a1-46b9-8d3e-8996e882e025",
                "249944e4-1493-44fa-8db4-6d2ed7b6e403",
                "79e29117-f89a-4183-a25e-71415b5a4681",
                "75ca8ad6-c0a7-498f-b69c-29e0c3f67e9d",
                "1f93f20a-5bf3-42c7-8513-4fda16afc42f",
                "47af212a-cb4c-48e7-8e2a-ac766f24826f",
                "08261f43-6d5d-4ede-b751-66cba5ce1a64"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 61,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3838b5bf-e51e-417a-ae22-2357a86ea0f3",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const error=new Error;const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(error).end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.strictEqual(err,error);cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "5eadd3a2-38ed-40e0-ada4-48c2fc288686",
                  "parentUUID": "3838b5bf-e51e-417a-ae22-2357a86ea0f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Got stderr output from pyatv: Hello World!\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "45478657-c261-4ef4-ada9-ae0fb6bb4037",
                  "parentUUID": "3838b5bf-e51e-417a-ae22-2357a86ea0f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"#\").end()})});const listener=__name(()=>{},\"listener\");device.on(\"update\",listener);await new Promise(cb=>{device.once(\"error\",err=>{import_assert.default.ok(err instanceof Error);import_assert.default.ok(err.toString().includes(\"Unable to parse stdout json: SyntaxError\"));cb(void 0)})});device.off(\"update\",listener)",
                  "err": {},
                  "uuid": "45a9f1fc-9633-4969-b49d-6f2ec2265087",
                  "parentUUID": "3838b5bf-e51e-417a-ae22-2357a86ea0f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "66860400-90dd-4cf5-9454-7aa5c370b369",
                  "parentUUID": "3838b5bf-e51e-417a-ae22-2357a86ea0f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5eadd3a2-38ed-40e0-ada4-48c2fc288686",
                "45478657-c261-4ef4-ada9-ae0fb6bb4037",
                "45a9f1fc-9633-4969-b49d-6f2ec2265087"
              ],
              "failures": [],
              "pending": [
                "66860400-90dd-4cf5-9454-7aa5c370b369"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6a19098-aea5-4be8-bef7-be83810da30e",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);device.removeAllListeners(\"update\")",
                  "err": {},
                  "uuid": "fa50732b-28eb-4fb3-8eea-5181428ffaa5",
                  "parentUUID": "f6a19098-aea5-4be8-bef7-be83810da30e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa50732b-28eb-4fb3-8eea-5181428ffaa5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cdb5c8db-f500-4a86-bb6d-187aeafcf32d",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const event=new import_lib.NodePyATVDeviceEvent({device,key:\"dateTime\",new:\"bar\",old:\"foo\"});let executions=0;device.once(\"test\",e=>{executions++;import_assert.default.strictEqual(e,event);import_assert.default.strictEqual(executions,1);done()});device.emit(\"test\",event)",
                  "err": {},
                  "uuid": "3e6886bf-5355-4563-8337-74fdad772835",
                  "parentUUID": "cdb5c8db-f500-4a86-bb6d-187aeafcf32d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e6886bf-5355-4563-8337-74fdad772835"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6cc33dfe-6f3b-4997-af16-6ed87abab797",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.eventNames(),[\"test\"]);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "5a58cd57-eca2-4012-b8e9-e876a660ae04",
                  "parentUUID": "6cc33dfe-6f3b-4997-af16-6ed87abab797",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a58cd57-eca2-4012-b8e9-e876a660ae04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86a61305-d3ce-44a9-ba97-3eed75bf00c1",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const result=device.getMaxListeners();import_assert.default.ok(typeof result,\"number\");import_assert.default.ok(result>=10)",
                  "err": {},
                  "uuid": "d24c8ab2-50fb-4329-a8dd-715aa9b5bd2c",
                  "parentUUID": "86a61305-d3ce-44a9-ba97-3eed75bf00c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d24c8ab2-50fb-4329-a8dd-715aa9b5bd2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5fa73b37-7102-4657-80cb-a40c909816c3",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"test\"),1);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "54a54085-c2d3-4fed-9b20-ee64a138ca28",
                  "parentUUID": "5fa73b37-7102-4657-80cb-a40c909816c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54a54085-c2d3-4fed-9b20-ee64a138ca28"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "310d3b41-661f-44c7-b423-f82255f517ec",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.listeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.listeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.listeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "63f22daa-7fd0-4cb4-b854-60f552b4b005",
                  "parentUUID": "310d3b41-661f-44c7-b423-f82255f517ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63f22daa-7fd0-4cb4-b854-60f552b4b005"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0dd401e7-ad66-43e8-aa6c-0251042edf3e",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{device.removeAllListeners(\"update\");done()},\"listener\");device.prependListener(\"update\",listener)",
                  "err": {},
                  "uuid": "9a2699f6-bfb9-4b0b-b946-99af77c8359d",
                  "parentUUID": "0dd401e7-ad66-43e8-aa6c-0251042edf3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a2699f6-bfb9-4b0b-b946-99af77c8359d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ceff6d7a-739b-4fc6-9c6d-33123ab73d45",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});device.prependOnceListener(\"update\",()=>done())",
                  "err": {},
                  "uuid": "9500c449-98a3-401f-bf06-b88b357b3be4",
                  "parentUUID": "ceff6d7a-739b-4fc6-9c6d-33123ab73d45",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9500c449-98a3-401f-bf06-b88b357b3be4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ba694e4-79c8-436b-a563-0ef4acb2918f",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end())})});const listener=__name(()=>{},\"listener\");import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,0);device.on(\"test\",listener);import_assert.default.deepStrictEqual(device.rawListeners(\"test\").length,1);import_assert.default.deepStrictEqual(device.rawListeners(\"test\")[0],listener);device.off(\"test\",listener)",
                  "err": {},
                  "uuid": "b17b51c6-4eb1-403a-bb06-5453740872f0",
                  "parentUUID": "1ba694e4-79c8-436b-a563-0ef4acb2918f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b17b51c6-4eb1-403a-bb06-5453740872f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94c53910-3476-47ff-8c6a-9dd68f15320b",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_lib.NodePyATVDevice({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.onStdIn(()=>cp.end());cp.stdout({result:\"success\",title:\"My Movie\"})})});const listener=__name(()=>{},\"listener\");device.addListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),1);device.removeListener(\"update\",listener);import_assert.default.deepStrictEqual(device.listenerCount(\"update\"),0)",
                  "err": {},
                  "uuid": "07d65df2-2c76-4b3e-9398-64b814808134",
                  "parentUUID": "94c53910-3476-47ff-8c6a-9dd68f15320b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07d65df2-2c76-4b3e-9398-64b814808134"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5339bdf-1d82-4731-bdb5-73aca0a1a956",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac2eaf0f-952e-416d-bee5-c644729b644c",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "11b7bc93-b7ac-43c9-a520-315b0bcf630b",
                  "parentUUID": "ac2eaf0f-952e-416d-bee5-c644729b644c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11b7bc93-b7ac-43c9-a520-315b0bcf630b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ee503d4-f1ac-4fa5-9cec-617767cc00f9",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.2\")",
                  "err": {},
                  "uuid": "79b61bc9-505e-4b61-92d1-b27d070e3912",
                  "parentUUID": "1ee503d4-f1ac-4fa5-9cec-617767cc00f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79b61bc9-505e-4b61-92d1-b27d070e3912"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef4498b4-e2d4-4e31-b98e-9118e0a511f9",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.id,\"*****\")",
                  "err": {},
                  "uuid": "d69d5fab-e25b-4954-b653-7ee71e18621a",
                  "parentUUID": "ef4498b4-e2d4-4e31-b98e-9118e0a511f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d69d5fab-e25b-4954-b653-7ee71e18621a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72536832-199b-4b6d-8d63-e831f1abe82d",
              "title": "get allIDs()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all the IDs",
                  "fullTitle": "NodePyATVDevice get allIDs() should return all the IDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({allIDs:[\"some_id_1\",\"some_id_2\",\"some_id_3\"],host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(device.allIDs,[\"some_id_1\",\"some_id_2\",\"some_id_3\"])",
                  "err": {},
                  "uuid": "443033bf-6511-4b02-bb27-830681327ad7",
                  "parentUUID": "72536832-199b-4b6d-8d63-e831f1abe82d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "443033bf-6511-4b02-bb27-830681327ad7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dcced90f-390c-424e-b087-08b651ce21c1",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.strictEqual(device.protocol,import_types.NodePyATVProtocol.airplay)",
                  "err": {},
                  "uuid": "0a56d502-00da-4720-bc9e-c191969d610e",
                  "parentUUID": "dcced90f-390c-424e-b087-08b651ce21c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a56d502-00da-4720-bc9e-c191969d610e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4bf3daf5-8e0a-4616-92c5-39f94c3a630b",
              "title": "get mac()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the mac",
                  "fullTitle": "NodePyATVDevice get mac() should return the mac",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",mac:\"AA:BB:CC:DD:EE:FF\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.mac,\"AA:BB:CC:DD:EE:FF\")",
                  "err": {},
                  "uuid": "6fb2ee97-2a8f-4875-99c9-120e4528c22b",
                  "parentUUID": "4bf3daf5-8e0a-4616-92c5-39f94c3a630b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6fb2ee97-2a8f-4875-99c9-120e4528c22b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f1a6e4d2-d008-4632-811c-4ea0ef4b5001",
              "title": "get model()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model if set by scan",
                  "fullTitle": "NodePyATVDevice get model() should return the model if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",model:\"Gen4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,\"Gen4K\")",
                  "err": {},
                  "uuid": "0ef811bf-fc38-4691-a882-1c5b26a95ccb",
                  "parentUUID": "f1a6e4d2-d008-4632-811c-4ea0ef4b5001",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get model() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.model,void 0)",
                  "err": {},
                  "uuid": "1fbd5b26-fe65-48da-b116-c64c264fc62f",
                  "parentUUID": "f1a6e4d2-d008-4632-811c-4ea0ef4b5001",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ef811bf-fc38-4691-a882-1c5b26a95ccb",
                "1fbd5b26-fe65-48da-b116-c64c264fc62f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8fc7ecb7-e821-4dfa-ab53-30e1c1ace9cf",
              "title": "get modelName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the model name if set by scan",
                  "fullTitle": "NodePyATVDevice get modelName() should return the model name if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",modelName:\"Apple TV 4K\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,\"Apple TV 4K\")",
                  "err": {},
                  "uuid": "93df5cd8-cb39-4f6b-9b7b-ac152e84ebc5",
                  "parentUUID": "8fc7ecb7-e821-4dfa-ab53-30e1c1ace9cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get modelName() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.modelName,void 0)",
                  "err": {},
                  "uuid": "43257025-60a0-4df4-80bc-f7caaf7604fb",
                  "parentUUID": "8fc7ecb7-e821-4dfa-ab53-30e1c1ace9cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93df5cd8-cb39-4f6b-9b7b-ac152e84ebc5",
                "43257025-60a0-4df4-80bc-f7caaf7604fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5da36f1-ea8f-4df9-a603-0beae3d6b4ee",
              "title": "get os()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the operating system if set by scan",
                  "fullTitle": "NodePyATVDevice get os() should return the operating system if set by scan",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",os:\"TvOS\"});import_assert.default.strictEqual(device.os,\"TvOS\")",
                  "err": {},
                  "uuid": "25a385b1-b2c3-4ae9-a367-5a4d41d0f42c",
                  "parentUUID": "f5da36f1-ea8f-4df9-a603-0beae3d6b4ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get os() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.os,void 0)",
                  "err": {},
                  "uuid": "cc4490d3-8544-41d1-92cc-0f21444b669b",
                  "parentUUID": "f5da36f1-ea8f-4df9-a603-0beae3d6b4ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25a385b1-b2c3-4ae9-a367-5a4d41d0f42c",
                "cc4490d3-8544-41d1-92cc-0f21444b669b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32f0b569-99e2-498a-860f-e83f2cb57a27",
              "title": "get version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the version if set by scan",
                  "fullTitle": "NodePyATVDevice get version() should return the version if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",version:\"15.5.1\"});import_assert.default.strictEqual(device.version,\"15.5.1\")",
                  "err": {},
                  "uuid": "a0e99c4c-0795-467d-b202-ceced9b430e9",
                  "parentUUID": "32f0b569-99e2-498a-860f-e83f2cb57a27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get version() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.version,void 0)",
                  "err": {},
                  "uuid": "26c0ed11-7d41-4678-ba6d-fe5b9ef0722a",
                  "parentUUID": "32f0b569-99e2-498a-860f-e83f2cb57a27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0e99c4c-0795-467d-b202-ceced9b430e9",
                "26c0ed11-7d41-4678-ba6d-fe5b9ef0722a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe29d9f1-5b4d-4272-9ea5-793f86271ef3",
              "title": "get services()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the services if set by scan",
                  "fullTitle": "NodePyATVDevice get services() should return the services if set by scan",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",id:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:import_types.NodePyATVProtocol.mrp},{port:7e3,protocol:import_types.NodePyATVProtocol.airplay}]});import_assert.default.deepStrictEqual(device.services,[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}])",
                  "err": {},
                  "uuid": "502c6a9e-e217-4f87-ab91-f49b70feaf7b",
                  "parentUUID": "fe29d9f1-5b4d-4272-9ea5-793f86271ef3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return undefined otherwise",
                  "fullTitle": "NodePyATVDevice get services() should return undefined otherwise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"10.0.10.81\",name:\"Vardagsrum\"});import_assert.default.strictEqual(device.services,void 0)",
                  "err": {},
                  "uuid": "9a0c5e43-d151-4252-aa7b-9b09cadf3e00",
                  "parentUUID": "fe29d9f1-5b4d-4272-9ea5-793f86271ef3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "502c6a9e-e217-4f87-ab91-f49b70feaf7b",
                "9a0c5e43-d151-4252-aa7b-9b09cadf3e00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0b69f29-e4c3-427e-bf8d-465bace7f5ff",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "c0c97e0c-3d00-40ce-be27-2b9499432d39",
                  "parentUUID": "b0b69f29-e4c3-427e-bf8d-465bace7f5ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fn=__name(()=>{},\"fn\");const device=new import_device.default({debug:fn,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "e655dc02-1f63-45e2-9f6c-e9683fa97c7d",
                  "parentUUID": "b0b69f29-e4c3-427e-bf8d-465bace7f5ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "69b4801f-0083-4994-9939-9b490b0bfefb",
                  "parentUUID": "b0b69f29-e4c3-427e-bf8d-465bace7f5ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0c97e0c-3d00-40ce-be27-2b9499432d39",
                "e655dc02-1f63-45e2-9f6c-e9683fa97c7d",
                "69b4801f-0083-4994-9939-9b490b0bfefb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ecd16255-8d3e-4b51-bbe3-784e872445fe",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,void 0);device.debug=true;import_assert.default.strictEqual(device.debug,true)",
                  "err": {},
                  "uuid": "4b7bac4f-a21c-495c-b170-b1cbe41287d0",
                  "parentUUID": "ecd16255-8d3e-4b51-bbe3-784e872445fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "55b21331-3cf2-4200-ac85-71a005ef24ed",
                  "parentUUID": "ecd16255-8d3e-4b51-bbe3-784e872445fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({debug:true,host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.debug,true);device.debug=void 0;import_assert.default.strictEqual(device.debug,void 0)",
                  "err": {},
                  "uuid": "25d88d7e-e4c3-4171-b9cc-42e14dfdc192",
                  "parentUUID": "ecd16255-8d3e-4b51-bbe3-784e872445fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});const fn=__name(()=>{},\"fn\");import_assert.default.strictEqual(device.debug,void 0);device.debug=fn;import_assert.default.strictEqual(device.debug,fn)",
                  "err": {},
                  "uuid": "6cf13b11-5c0e-4dac-973e-48d23fd48f0c",
                  "parentUUID": "ecd16255-8d3e-4b51-bbe3-784e872445fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b7bac4f-a21c-495c-b170-b1cbe41287d0",
                "55b21331-3cf2-4200-ac85-71a005ef24ed",
                "25d88d7e-e4c3-4171-b9cc-42e14dfdc192",
                "6cf13b11-5c0e-4dac-973e-48d23fd48f0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a78bb28-dfe3-49d2-a923-e21590af1244",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",id:\"*****\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay});import_assert.default.deepEqual(device.toJSON(),{host:\"192.168.178.2\",id:\"*****\",mac:void 0,name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay})",
                  "err": {},
                  "uuid": "a96f06eb-40f8-463a-98bc-9e991fe8bcda",
                  "parentUUID": "9a78bb28-dfe3-49d2-a923-e21590af1244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config={host:\"192.168.178.2\",id:\"*****\",mac:\"469943881251875\",name:\"My Testdevice\",protocol:import_types.NodePyATVProtocol.airplay};const deviceA=new import_device.default(config);const deviceB=new import_device.default(deviceA.toJSON());import_assert.default.deepEqual(deviceB.toJSON(),config)",
                  "err": {},
                  "uuid": "c5f285b4-7a5e-49cc-a0a8-1c3695a7b40c",
                  "parentUUID": "9a78bb28-dfe3-49d2-a923-e21590af1244",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a96f06eb-40f8-463a-98bc-9e991fe8bcda",
                "c5f285b4-7a5e-49cc-a0a8-1c3695a7b40c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86892710-eb70-425e-9be0-8b93962cf230",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.toString(),\"NodePyATVDevice(My Testdevice, 192.168.178.2)\")",
                  "err": {},
                  "uuid": "8f9727ae-26d3-4f12-b1ca-e1910e77323c",
                  "parentUUID": "86892710-eb70-425e-9be0-8b93962cf230",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f9727ae-26d3-4f12-b1ca-e1910e77323c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "196b242a-ebaa-4404-afdc-17053935b940",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "0f0735c9-7938-4eb3-b3da-f4f526da612e",
                  "parentUUID": "196b242a-ebaa-4404-afdc-17053935b940",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const result=await device.getState();import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "c248d023-5f9f-4256-9b60-666eba0e210e",
                  "parentUUID": "196b242a-ebaa-4404-afdc-17053935b940",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'})})});import_assert.default.rejects(async()=>{await device.getState()},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "931797dc-b214-4831-aab5-bbc05921d8ba",
                  "parentUUID": "196b242a-ebaa-4404-afdc-17053935b940",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date().toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();const secondResult=await device.getState();import_assert.default.strictEqual(firstResult.dateTime,secondResult.dateTime);import_assert.default.strictEqual(executions,1)",
                  "err": {},
                  "uuid": "5a6f36ee-024c-48a2-aea5-05b003106b0a",
                  "parentUUID": "196b242a-ebaa-4404-afdc-17053935b940",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,datetime:new Date(new Date().getTime()-1e3).toJSON(),device_state:\"playing\",genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",media_type:\"video\",position:27,repeat:\"off\",result:\"success\",shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097})})});const firstResult=await device.getState();import_assert.default.strictEqual(firstResult.position,27);const secondResult=await device.getState();import_assert.default.ok(secondResult.position);import_assert.default.ok(secondResult.position>27,`Position should be > 27, was ${secondResult.position}`);import_assert.default.ok(secondResult.position<30,`Position should be > 27, was ${secondResult.position}`)",
                  "err": {},
                  "uuid": "e89af946-1a06-4d20-bdab-72d9d9c345c5",
                  "parentUUID": "196b242a-ebaa-4404-afdc-17053935b940",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c248d023-5f9f-4256-9b60-666eba0e210e",
                "931797dc-b214-4831-aab5-bbc05921d8ba",
                "5a6f36ee-024c-48a2-aea5-05b003106b0a",
                "e89af946-1a06-4d20-bdab-72d9d9c345c5"
              ],
              "failures": [],
              "pending": [
                "0f0735c9-7938-4eb3-b3da-f4f526da612e"
              ],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ed92fa4-37e1-4765-9a9c-a7ace6229bfa",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let executions=0;const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{executions++;cp.end({datetime:\"2020-11-07T22:38:43.608030+01:00\",result:\"success\",title:\"Solo: A Star Wars Story\"})})});import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");device.clearState();import_assert.default.deepStrictEqual(await device.getTitle(),\"Solo: A Star Wars Story\");import_assert.default.strictEqual(executions,2)",
                  "err": {},
                  "uuid": "1b9cc968-1624-4ff4-a6b8-12b3337b6555",
                  "parentUUID": "4ed92fa4-37e1-4765-9a9c-a7ace6229bfa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b9cc968-1624-4ff4-a6b8-12b3337b6555"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1746b97d-73fd-4b72-a76d-545aa1764b0c",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({datetime:new Date().toJSON(),result:\"success\"})})});const result=await device.getDateTime();import_assert.default.ok(result instanceof Date)",
                  "err": {},
                  "uuid": "48f9f69c-95df-4984-8c8f-547e25a9c7d7",
                  "parentUUID": "1746b97d-73fd-4b72-a76d-545aa1764b0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48f9f69c-95df-4984-8c8f-547e25a9c7d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "939d4e1f-237e-4114-9a98-e851f3b5eb32",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({hash:\"12345\",result:\"success\"})})});const result=await device.getHash();import_assert.default.strictEqual(result,\"12345\")",
                  "err": {},
                  "uuid": "ca0529bd-3b95-4ba1-9559-757a144b7953",
                  "parentUUID": "939d4e1f-237e-4114-9a98-e851f3b5eb32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca0529bd-3b95-4ba1-9559-757a144b7953"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8709061-65c5-4a9d-9d1b-92d78e43b8f1",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({media_type:\"video\",result:\"success\"})})});const result=await device.getMediaType();import_assert.default.deepStrictEqual(result,import_types.NodePyATVMediaType.video);import_assert.default.deepStrictEqual(result,\"video\")",
                  "err": {},
                  "uuid": "cd9a2c1d-efd7-41fd-b2e9-a4585226b694",
                  "parentUUID": "f8709061-65c5-4a9d-9d1b-92d78e43b8f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd9a2c1d-efd7-41fd-b2e9-a4585226b694"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "42fe4ffa-9f4b-4c45-afbf-79b75f1332a9",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({device_state:\"seeking\",result:\"success\"})})});const result=await device.getDeviceState();import_assert.default.deepStrictEqual(result,import_types.NodePyATVDeviceState.seeking);import_assert.default.deepStrictEqual(result,\"seeking\")",
                  "err": {},
                  "uuid": "7c592fc1-7b7f-45ab-862c-68cbf908e0b1",
                  "parentUUID": "42fe4ffa-9f4b-4c45-afbf-79b75f1332a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c592fc1-7b7f-45ab-862c-68cbf908e0b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0764a61-5004-4d01-8486-2a8539690cef",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",title:\"My Movie\"})})});const result=await device.getTitle();import_assert.default.strictEqual(result,\"My Movie\")",
                  "err": {},
                  "uuid": "c59a8252-6495-4629-9fb9-f87adc874c5d",
                  "parentUUID": "f0764a61-5004-4d01-8486-2a8539690cef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c59a8252-6495-4629-9fb9-f87adc874c5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3c72601-7ae7-4ae7-b9da-7fab180132c9",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({artist:\"My Artist\",result:\"success\"})})});const result=await device.getArtist();import_assert.default.strictEqual(result,\"My Artist\")",
                  "err": {},
                  "uuid": "c15768f5-261c-479c-b10b-ba648ba6c316",
                  "parentUUID": "a3c72601-7ae7-4ae7-b9da-7fab180132c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c15768f5-261c-479c-b10b-ba648ba6c316"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eef40d7e-f68c-425c-9c75-4363a8cfe084",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({album:\"My ALbum\",result:\"success\"})})});const result=await device.getAlbum();import_assert.default.strictEqual(result,\"My ALbum\")",
                  "err": {},
                  "uuid": "0c2de228-fc7b-4d66-ade0-e2c3cab258ca",
                  "parentUUID": "eef40d7e-f68c-425c-9c75-4363a8cfe084",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c2de228-fc7b-4d66-ade0-e2c3cab258ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a0affb5-3d7a-45e5-9827-8c1a11156b13",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({genre:\"My Genre\",result:\"success\"})})});const result=await device.getGenre();import_assert.default.strictEqual(result,\"My Genre\")",
                  "err": {},
                  "uuid": "0f20fa30-7ed2-4aa9-b9a1-429216c5c067",
                  "parentUUID": "7a0affb5-3d7a-45e5-9827-8c1a11156b13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f20fa30-7ed2-4aa9-b9a1-429216c5c067"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3562dace-48bc-47a0-a1c0-871a5fc8511c",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",total_time:45})})});const result=await device.getTotalTime();import_assert.default.strictEqual(result,45)",
                  "err": {},
                  "uuid": "29f41c2e-9625-4511-90de-91f8634ac611",
                  "parentUUID": "3562dace-48bc-47a0-a1c0-871a5fc8511c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29f41c2e-9625-4511-90de-91f8634ac611"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb6fbcc3-c955-4421-a095-9c1975ecb007",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({position:30,result:\"success\"})})});const result=await device.getPosition();import_assert.default.strictEqual(result,30)",
                  "err": {},
                  "uuid": "022a17d1-2fe2-41d7-a6da-51485c54e842",
                  "parentUUID": "cb6fbcc3-c955-4421-a095-9c1975ecb007",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "022a17d1-2fe2-41d7-a6da-51485c54e842"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f70d0f93-b42c-450e-9826-3d48fb0e13e8",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",shuffle:\"songs\"})})});const result=await device.getShuffle();import_assert.default.deepStrictEqual(result,import_types.NodePyATVShuffleState.songs);import_assert.default.deepStrictEqual(result,\"songs\")",
                  "err": {},
                  "uuid": "8913319c-e5e8-45ba-90c1-40deaa71da01",
                  "parentUUID": "f70d0f93-b42c-450e-9826-3d48fb0e13e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8913319c-e5e8-45ba-90c1-40deaa71da01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74774efa-7744-4687-a72f-8ec1868e6699",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({repeat:\"all\",result:\"success\"})})});const result=await device.getRepeat();import_assert.default.deepStrictEqual(result,import_types.NodePyATVRepeatState.all);import_assert.default.deepStrictEqual(result,\"all\")",
                  "err": {},
                  "uuid": "17d195bd-0398-46e9-858e-91e3032feaa0",
                  "parentUUID": "74774efa-7744-4687-a72f-8ec1868e6699",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17d195bd-0398-46e9-858e-91e3032feaa0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a4dba95-d251-4c5d-a6ab-0cb2e75076f4",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app:\"My App\",result:\"success\"})})});const result=await device.getApp();import_assert.default.strictEqual(result,\"My App\")",
                  "err": {},
                  "uuid": "169cebe1-1672-4879-8ef8-b4eafb43ecd7",
                  "parentUUID": "0a4dba95-d251-4c5d-a6ab-0cb2e75076f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "169cebe1-1672-4879-8ef8-b4eafb43ecd7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7381d9d5-34ee-48f6-a0cc-f65fc78d6d78",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({app_id:\"app.example.com\",result:\"success\"})})});const result=await device.getAppId();import_assert.default.strictEqual(result,\"app.example.com\")",
                  "err": {},
                  "uuid": "a3ac2f2a-467b-40a5-bc7a-bbf6c5b49224",
                  "parentUUID": "7381d9d5-34ee-48f6-a0cc-f65fc78d6d78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3ac2f2a-467b-40a5-bc7a-bbf6c5b49224"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "adc4f106-a4de-49a8-a0c2-93c442a57ced",
              "title": "getPowerState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPowerState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({power_state:\"on\",result:\"success\"})})});const result=await device.getPowerState();import_assert.default.strictEqual(result,import_types.NodePyATVPowerState.on)",
                  "err": {},
                  "uuid": "4f0342e3-67de-4173-bdce-3b397f2dcbb3",
                  "parentUUID": "adc4f106-a4de-49a8-a0c2-93c442a57ced",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f0342e3-67de-4173-bdce-3b397f2dcbb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "09c4e99a-d872-4bb6-b44e-e4dda744a13e",
              "title": "getVolume()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getVolume() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",volume:50})})});const result=await device.getVolume();import_assert.default.strictEqual(result,50)",
                  "err": {},
                  "uuid": "bf6d140e-436d-4a0a-a558-9dc38bd3b8ba",
                  "parentUUID": "09c4e99a-d872-4bb6-b44e-e4dda744a13e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf6d140e-436d-4a0a-a558-9dc38bd3b8ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c431653-5dc0-41b3-a7fa-8b57ba64968d",
              "title": "getFocusState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getFocusState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({focus_state:\"focused\",result:\"success\"})})});const result=await device.getFocusState();import_assert.default.strictEqual(result,import_types.NodePyATVFocusState.focused)",
                  "err": {},
                  "uuid": "b63b18f8-489d-4d8f-b232-51fefbf5b7cd",
                  "parentUUID": "1c431653-5dc0-41b3-a7fa-8b57ba64968d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b63b18f8-489d-4d8f-b232-51fefbf5b7cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ff0e791-f2e1-4de1-a79e-1b096093073f",
              "title": "getOutputDevices()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getOutputDevices() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({output_devices:[{identifier:\"foo\",name:\"Apple TV\"}],result:\"success\"})})});const result=await device.getOutputDevices();import_assert.default.deepStrictEqual(result,[{identifier:\"foo\",name:\"Apple TV\"}])",
                  "err": {},
                  "uuid": "1c3e2e92-759b-48e5-9a12-65fe267d1b5e",
                  "parentUUID": "9ff0e791-f2e1-4de1-a79e-1b096093073f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c3e2e92-759b-48e5-9a12-65fe267d1b5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1128aca0-3008-4850-872e-6b3a7555abe7",
              "title": "getContentIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getContentIdentifier() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({content_identifier:\"1234\",result:\"success\"})})});const result=await device.getContentIdentifier();import_assert.default.strictEqual(result,\"1234\")",
                  "err": {},
                  "uuid": "0390d0c7-ac9c-4384-99d0-064ca6f9f44b",
                  "parentUUID": "1128aca0-3008-4850-872e-6b3a7555abe7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0390d0c7-ac9c-4384-99d0-064ca6f9f44b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57f6128e-0f81-4cdc-85de-14d7e22c5df8",
              "title": "getiTunesStoreIdentifier()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getiTunesStoreIdentifier() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({itunes_store_identifier:1234,result:\"success\"})})});const result=await device.getiTunesStoreIdentifier();import_assert.default.strictEqual(result,1234)",
                  "err": {},
                  "uuid": "f6b08c1c-c486-4393-a2af-072b1d3d7277",
                  "parentUUID": "57f6128e-0f81-4cdc-85de-14d7e22c5df8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6b08c1c-c486-4393-a2af-072b1d3d7277"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d7a48619-1c40-4c11-b85f-254020fbdc17",
              "title": "getEpisodeNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getEpisodeNumber() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({episode_number:12,result:\"success\"})})});const result=await device.getEpisodeNumber();import_assert.default.strictEqual(result,12)",
                  "err": {},
                  "uuid": "b532979f-792f-4e9e-85a5-b6e4dbfe1b08",
                  "parentUUID": "d7a48619-1c40-4c11-b85f-254020fbdc17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b532979f-792f-4e9e-85a5-b6e4dbfe1b08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53750249-2a1f-488a-a139-99a6c2a9c19a",
              "title": "getSeasonNumber()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeasonNumber() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",season_number:2})})});const result=await device.getSeasonNumber();import_assert.default.strictEqual(result,2)",
                  "err": {},
                  "uuid": "4bdc41b3-5142-4bdc-b910-38a43bfae353",
                  "parentUUID": "53750249-2a1f-488a-a139-99a6c2a9c19a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4bdc41b3-5142-4bdc-b910-38a43bfae353"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f860f038-b5e1-4dba-bd6f-ce38dd8fb96d",
              "title": "getSeriesName()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getSeriesName() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end({result:\"success\",series_name:\"The Testing Disaster\"})})});const result=await device.getSeriesName();import_assert.default.strictEqual(result,\"The Testing Disaster\")",
                  "err": {},
                  "uuid": "7ae45e43-26bd-4493-aef3-690cd45d3b9e",
                  "parentUUID": "f860f038-b5e1-4dba-bd6f-ce38dd8fb96d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ae45e43-26bd-4493-aef3-690cd45d3b9e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dbbb57ed-e223-491b-a812-b738a23f9fbf",
              "title": "listApps()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice listApps() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"App: Fitness (com.apple.Fitness), App: Podcasts (com.apple.podcasts), App: Filme (com.apple.TVMovies), App: Prime Video (com.amazon.aiv.AIVApp), App: TV (com.apple.TVWatchList), App: Fotos (com.apple.TVPhotos), App: App\\xA0Store (com.apple.TVAppStore), App: Arcade (com.apple.Arcade), App: TV-Sendungen (com.apple.TVShows), App: Suchen (com.apple.TVSearch), App: Live TV (de.couchfunk.WM2014), App: RTL+ (com.rtlinteractive.tvnow), App: Computer (com.apple.TVHomeSharing), App: ARTE (tv.arte.plus7), App: YouTube (com.google.ios.youtube), App: ARD Mediathek (de.swr.avp.ard.tablet), App: Disney+ (com.disney.disneyplus), App: Plex (com.plexapp.plex), App: Joyn (de.prosiebensat1digital.seventv), App: Einstellungen (com.apple.TVSettings), App: ZDFmediathek (de.zdf.mediathek.universal), App: Crossy Road (com.hipsterwhale.crossy), App: Netflix (com.netflix.Netflix), App: Infuse (com.firecore.infuse), App: Musik (com.apple.TVMusic)\")})});const result=await device.listApps();import_assert.default.strictEqual(result.length,25);import_assert.default.strictEqual(result[0].id,\"com.apple.Fitness\");import_assert.default.strictEqual(result[0].name,\"Fitness\")",
                  "err": {},
                  "uuid": "18921287-db4a-4624-9383-97b414b07bd5",
                  "parentUUID": "dbbb57ed-e223-491b-a812-b738a23f9fbf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18921287-db4a-4624-9383-97b414b07bd5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d14b996-ac5e-4a63-af14-cd13936e8917",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device.pressKey(import_types.NodePyATVKeys.home)",
                  "err": {},
                  "uuid": "86978466-1891-4bf2-b3d3-e749c6b0d2c6",
                  "parentUUID": "4d14b996-ac5e-4a63-af14-cd13936e8917",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\"});await import_assert.default.rejects(async()=>{await device.pressKey(\"foo\")},/Unsupported key value foo/)",
                  "err": {},
                  "uuid": "63cabbf2-364f-415a-9401-26c6bde36548",
                  "parentUUID": "4d14b996-ac5e-4a63-af14-cd13936e8917",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"failure\"}')})});await import_assert.default.rejects(async()=>{await device.pressKey(import_types.NodePyATVKeys.home)},/Unable to parse pyatv response/)",
                  "err": {},
                  "uuid": "d124e863-d02c-4861-a7bf-8e2a7e2bc8d9",
                  "parentUUID": "4d14b996-ac5e-4a63-af14-cd13936e8917",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86978466-1891-4bf2-b3d3-e749c6b0d2c6",
                "63cabbf2-364f-415a-9401-26c6bde36548",
                "d124e863-d02c-4861-a7bf-8e2a7e2bc8d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "66f71b24-f031-44c3-b150-d0391ae3cd41",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "74018104-4aa7-4ea5-b36a-2ddc4ac4020c",
                  "parentUUID": "66f71b24-f031-44c3-b150-d0391ae3cd41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74018104-4aa7-4ea5-b36a-2ddc4ac4020c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "304243c9-5019-4758-946d-9d319f6c3528",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "6e711be1-94b8-462b-a6bd-ac922187f79c",
                  "parentUUID": "304243c9-5019-4758-946d-9d319f6c3528",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e711be1-94b8-462b-a6bd-ac922187f79c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d57bbc3-974e-40ab-9e97-ca85b077d1d5",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "e5beceec-0e09-4f0c-a896-0b622df1432f",
                  "parentUUID": "8d57bbc3-974e-40ab-9e97-ca85b077d1d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5beceec-0e09-4f0c-a896-0b622df1432f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb5fcbce-a303-4d83-94cc-360595bde123",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f0351ace-adea-4e87-8e53-c3747a0664d4",
                  "parentUUID": "fb5fcbce-a303-4d83-94cc-360595bde123",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0351ace-adea-4e87-8e53-c3747a0664d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd5674b6-051c-4db3-829b-79159bc2bc5f",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "52245ae0-4035-43c6-9592-0c4ecff5bf91",
                  "parentUUID": "cd5674b6-051c-4db3-829b-79159bc2bc5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52245ae0-4035-43c6-9592-0c4ecff5bf91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8b17c27-b86c-4637-8753-b2ebf173cb0d",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "d845ba07-78ff-405d-acba-fdbeb2f338e2",
                  "parentUUID": "c8b17c27-b86c-4637-8753-b2ebf173cb0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d845ba07-78ff-405d-acba-fdbeb2f338e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d7329557-0435-4e9e-8082-43fd98000af8",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "680ae8c5-ba5d-4ece-8e15-814953137ab1",
                  "parentUUID": "d7329557-0435-4e9e-8082-43fd98000af8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "680ae8c5-ba5d-4ece-8e15-814953137ab1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30cbaf54-72e8-4a4a-86a2-b47dbecb5b15",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "37f7e7d5-e7a8-430b-a300-0dc114ff1cf2",
                  "parentUUID": "30cbaf54-72e8-4a4a-86a2-b47dbecb5b15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37f7e7d5-e7a8-430b-a300-0dc114ff1cf2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "759a6ca1-6f2a-475d-93c0-e44a1dc63e9e",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "4232a437-15e1-4000-b07f-12060c4d39f4",
                  "parentUUID": "759a6ca1-6f2a-475d-93c0-e44a1dc63e9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4232a437-15e1-4000-b07f-12060c4d39f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e1db0bd-0228-4145-a1e1-8b61f9468e1c",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "0c9061b5-6db1-41ad-80f4-e367ce57834d",
                  "parentUUID": "2e1db0bd-0228-4145-a1e1-8b61f9468e1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c9061b5-6db1-41ad-80f4-e367ce57834d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9cec2cca-f5ed-4465-ae7e-c94679ae677c",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "199d0a98-6e08-4000-9fe9-2e4da2e72d9d",
                  "parentUUID": "9cec2cca-f5ed-4465-ae7e-c94679ae677c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "199d0a98-6e08-4000-9fe9-2e4da2e72d9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e2e4d302-3a9f-4fa6-b431-a037c88b3282",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "8f3828c4-a396-4c61-9189-3f30b74db2e3",
                  "parentUUID": "e2e4d302-3a9f-4fa6-b431-a037c88b3282",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f3828c4-a396-4c61-9189-3f30b74db2e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0563d104-9582-432f-b36e-31d513ad286c",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "9b99ebe0-4439-46e1-8880-63414f98c2d0",
                  "parentUUID": "0563d104-9582-432f-b36e-31d513ad286c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b99ebe0-4439-46e1-8880-63414f98c2d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c37b028-08b2-4b93-9d22-9cd0a38f55c2",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "ac5c2bfb-e10c-4e19-8c65-24d07ece2d4c",
                  "parentUUID": "0c37b028-08b2-4b93-9d22-9cd0a38f55c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac5c2bfb-e10c-4e19-8c65-24d07ece2d4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "180c3807-2976-4ff5-bfba-08305b527d91",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "b868f621-9537-44dd-8772-878590186a8c",
                  "parentUUID": "180c3807-2976-4ff5-bfba-08305b527d91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b868f621-9537-44dd-8772-878590186a8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "59953d33-560f-411e-ad38-3ed76b88f203",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "466dbb7a-3632-4865-b0da-01d0e8e5508b",
                  "parentUUID": "59953d33-560f-411e-ad38-3ed76b88f203",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "466dbb7a-3632-4865-b0da-01d0e8e5508b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "09e903dc-3430-4591-bad3-7d35a04a873c",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "55e70759-d01b-490d-a2cc-815013f9c27b",
                  "parentUUID": "09e903dc-3430-4591-bad3-7d35a04a873c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55e70759-d01b-490d-a2cc-815013f9c27b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71b4644d-a28f-4f34-b2e4-08dbb5cb7808",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "1f75d08f-a4a8-4691-aa3b-ce097b565178",
                  "parentUUID": "71b4644d-a28f-4f34-b2e4-08dbb5cb7808",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f75d08f-a4a8-4691-aa3b-ce097b565178"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1059db8c-a050-404d-a290-9a6fa03fa998",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "53f8f6eb-a4a7-4006-86f6-c2c5c090d240",
                  "parentUUID": "1059db8c-a050-404d-a290-9a6fa03fa998",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53f8f6eb-a4a7-4006-86f6-c2c5c090d240"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be0bccca-826f-41d8-8dec-b6857e948916",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "f7ffaa90-968c-42c4-b97a-dbb2f14a3c3f",
                  "parentUUID": "be0bccca-826f-41d8-8dec-b6857e948916",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7ffaa90-968c-42c4-b97a-dbb2f14a3c3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b0167cd-bb1d-47b5-88dd-e54dc4ed7d27",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "89be3df3-207b-4dce-8872-aadd8b0c90cc",
                  "parentUUID": "9b0167cd-bb1d-47b5-88dd-e54dc4ed7d27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89be3df3-207b-4dce-8872-aadd8b0c90cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc99d856-7d1c-4fed-a196-f0dc7b55101c",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "5d9ced23-c033-47b1-b937-92977a59402e",
                  "parentUUID": "dc99d856-7d1c-4fed-a196-f0dc7b55101c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d9ced23-c033-47b1-b937-92977a59402e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7b4f95e-c044-476f-ad78-7a5c61625d64",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end('{\"result\":\"success\"}')})});await device[key]()",
                  "err": {},
                  "uuid": "bb64c9d5-74f4-40f7-96a6-7313209f9ae6",
                  "parentUUID": "a7b4f95e-c044-476f-ad78-7a5c61625d64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb64c9d5-74f4-40f7-96a6-7313209f9ae6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "41814567-708a-464f-85af-46c1925e7355",
              "title": "launchApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice launchApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=new import_device.default({host:\"192.168.178.2\",name:\"My Testdevice\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.end(\"\")})});await device.launchApp(\"com.apple.TVShows\")",
                  "err": {},
                  "uuid": "744c8343-c3ec-41db-b4bd-05ffb28903fe",
                  "parentUUID": "41814567-708a-464f-85af-46c1925e7355",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "744c8343-c3ec-41db-b4bd-05ffb28903fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6c26d24d-59c1-4b8a-aa4b-8bdcdaf006d0",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 955,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4e3);const result=await import_lib.default.version();if(result.pyatv===null){throw new Error(\"No version found for pyatv. Is it installed in test environment?\")}import_assert.default.equal(typeof result.pyatv,\"string\",\"result.pyatv is a string\");import_assert.default.ok(result.pyatv.length>=5,\"result.pyatv has content\");import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "9feb03cd-e304-4006-913a-3c937674fa74",
                  "parentUUID": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.code(1);cp.end(\"atvremote 0.7.4\")})});import_assert.default.ok(result.pyatv);import_assert.default.strictEqual(result.pyatv,\"0.7.4\")",
                  "err": {},
                  "uuid": "b24acb60-c6fb-4f6a-aeb5-4487988be2a1",
                  "parentUUID": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())});import_assert.default.strictEqual(result.module,version)",
                  "err": {},
                  "uuid": "b2778a29-0fab-4bf8-9204-233ba7320826",
                  "parentUUID": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({atvremotePath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "17f3e8ab-e986-4252-83e1-e6faea13e777",
                  "parentUUID": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "f3288fe9-ff03-4146-936b-cbfc1477efab",
                  "parentUUID": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.version({debug:__name(()=>{},\"debug\"),noColors:true,spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.code(1).end())})",
                  "err": {},
                  "uuid": "308ec20a-9abe-40ae-804c-071cc34c5e01",
                  "parentUUID": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>cp.stderr(\"Hello World!\").code(123).end())});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "2789ceba-34f5-4dc1-8195-3346162871da",
                  "parentUUID": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "ec6a0837-7999-4b4f-a13a-dc941af65f5c",
                  "parentUUID": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await import_lib.default.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 42\").code(1).end()})});import_assert.default.strictEqual(result.pyatv,null)",
                  "err": {},
                  "uuid": "f3f179e9-a470-405b-a360-edebf3b1690e",
                  "parentUUID": "22bd2f99-917a-4e0e-a54b-f106548c6c7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9feb03cd-e304-4006-913a-3c937674fa74",
                "b24acb60-c6fb-4f6a-aeb5-4487988be2a1",
                "b2778a29-0fab-4bf8-9204-233ba7320826",
                "17f3e8ab-e986-4252-83e1-e6faea13e777",
                "f3288fe9-ff03-4146-936b-cbfc1477efab",
                "308ec20a-9abe-40ae-804c-071cc34c5e01",
                "2789ceba-34f5-4dc1-8195-3346162871da",
                "ec6a0837-7999-4b4f-a13a-dc941af65f5c",
                "f3f179e9-a470-405b-a360-edebf3b1690e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 968,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ba221e9-f945-4ae3-a963-aa0c86759b1f",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5795,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(12e3);await import_lib.default.check()",
                  "err": {},
                  "uuid": "b6e47bec-7970-41f7-ac8b-e8371066efd0",
                  "parentUUID": "1ba221e9-f945-4ae3-a963-aa0c86759b1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "93336eec-4e3a-415c-9cd5-2e418f2d2b93",
                  "parentUUID": "1ba221e9-f945-4ae3-a963-aa0c86759b1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(\"atvremote 0.5.1\").code(1).end()})})},/Found pyatv, but unforunately it's too old. Please update pyatv./)",
                  "err": {},
                  "uuid": "ce74fc98-662c-41ea-85a9-7cd0c939ccda",
                  "parentUUID": "1ba221e9-f945-4ae3-a963-aa0c86759b1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let i=0;await import_assert.default.rejects(async()=>{await import_lib.default.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{if(i===0){cp.stdout(\"atvremote 0.7.0\").code(1).end();i++}else{cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()}})})},/Unable to scan for devices/)",
                  "err": {},
                  "uuid": "009acf72-b835-4951-9832-20c4248e2f39",
                  "parentUUID": "1ba221e9-f945-4ae3-a963-aa0c86759b1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6e47bec-7970-41f7-ac8b-e8371066efd0",
                "93336eec-4e3a-415c-9cd5-2e418f2d2b93",
                "ce74fc98-662c-41ea-85a9-7cd0c939ccda",
                "009acf72-b835-4951-9832-20c4248e2f39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5801,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5397,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(1e4);const result=await import_lib.default.find();import_assert.default.ok(Array.isArray(result))",
                  "err": {},
                  "uuid": "22898320-f79f-4386-8362-a3b3a492e016",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_lib.default.find({atvscriptPath:\"/foo/bar\",spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"/foo/bar\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "eb7aad75-bf19-4d4a-b1d8-9f838552daba",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stderr(\"Hello World!\").code(1).end()})})},/Unable to execute request/)",
                  "err": {},
                  "uuid": "1c2862fa-3019-4fe5-b613-687a610f7f2a",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.error(new Error(\"Hello world!\")).code(1).end()})})},/Hello world!/)",
                  "err": {},
                  "uuid": "c14fa5ce-5a1d-484c-9dea-74d7e80295c1",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on pyatv failure",
                  "fullTitle": "NodePyATVInstance static find() should throw error on pyatv failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",error:\"Task exception was never retrieved\",exception:\"[Errno 113] Connect call failed\",result:\"failure\"}).code(1).end()})})},/Unable to find any devices, but received 1 error: /)",
                  "err": {},
                  "uuid": "ccaa2d0f-ff56-49a0-b3d1-a3c2e5b529d8",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(JSON.stringify({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).substr(1)).end()})})},/Unable to parse result/)",
                  "err": {},
                  "uuid": "9737cfa0-6966-4843-b965-17af5b128a94",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"error\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "0c3b50b9-dab9-44dc-9cdd-bd85fb850df1",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await import_assert.default.rejects(async()=>{await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({result:\"success\"}).code(1).end()})})},/Unable to parse pyatv response: /)",
                  "err": {},
                  "uuid": "2bf1c3bf-e317-4bd1-a05d-2f29e482ae8a",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are without device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are without device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",identifier:\"xxx\",name:\"Vardagsrum\"}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,void 0);import_assert.default.strictEqual(devices[0].modelName,void 0);import_assert.default.strictEqual(devices[0].os,void 0);import_assert.default.strictEqual(devices[0].version,void 0);import_assert.default.deepStrictEqual(devices[0].services,void 0)",
                  "err": {},
                  "uuid": "13cdb7c8-6934-4bed-b07a-d16130d85ec6",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if devices are with device_info / services",
                  "fullTitle": "NodePyATVInstance static find() should work if devices are with device_info / services",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[{address:\"10.0.10.81\",device_info:{model:\"Gen4K\",model_str:\"Apple TV 4K\",operating_system:\"TvOS\",version:\"15.5.1\"},identifier:\"xxx\",name:\"Vardagsrum\",services:[{port:49152,protocol:\"mrp\"},{port:7e3,protocol:\"airplay\"}]}],result:\"success\"}).code(1).end()})});import_assert.default.strictEqual(devices.length,1);import_assert.default.strictEqual(devices[0].name,\"Vardagsrum\");import_assert.default.strictEqual(devices[0].host,\"10.0.10.81\");import_assert.default.strictEqual(devices[0].id,\"xxx\");import_assert.default.strictEqual(devices[0].model,\"Gen4K\");import_assert.default.strictEqual(devices[0].modelName,\"Apple TV 4K\");import_assert.default.strictEqual(devices[0].os,\"TvOS\");import_assert.default.strictEqual(devices[0].version,\"15.5.1\");import_assert.default.deepStrictEqual(devices[0].services,[{port:49152,protocol:import_lib.NodePyATVProtocol.mrp},{port:7e3,protocol:import_lib.NodePyATVProtocol.airplay}])",
                  "err": {},
                  "uuid": "adedf850-37dc-48b2-9f5c-b9275b986450",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const devices=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})});import_assert.default.strictEqual(devices.length,4);import_assert.default.strictEqual(devices[0].name,\"Living Room\");import_assert.default.strictEqual(devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(devices[1].name,\"Kitchen\");import_assert.default.strictEqual(devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(devices[2].name,\"Bedroom\");import_assert.default.strictEqual(devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(devices[3].name,\"Basement\");import_assert.default.strictEqual(devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\")",
                  "err": {},
                  "uuid": "4607abd4-fc4e-44bb-80f3-9887af9b99cb",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for unicast scans with returnDevicesAndErrors = true",
                  "fullTitle": "NodePyATVInstance static find() should work for unicast scans with returnDevicesAndErrors = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response=await import_lib.default.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{cp.stdout(`{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.103087-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.232', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.232', 32498)\\\\n\"}\n{\"result\": \"failure\", \"datetime\": \"2024-05-18T16:20:18.114744-06:00\", \"error\": \"Task exception was never retrieved\", \"exception\": \"[Errno 113] Connect call failed ('10.0.0.229', 32498)\", \"stacktrace\": \"Traceback (most recent call last):\\\\n  File \\\\\"/var/lib/homebridge/appletv-enhanced/.venv/lib/python3.11/site-packages/pyatv/support/knock.py\\\\\", line 28, in _async_knock\\\\n    _, writer = await asyncio.wait_for(\\\\n                ^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/tasks.py\\\\\", line 479, in wait_for\\\\n    return fut.result()\\\\n           ^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/streams.py\\\\\", line 48, in open_connection\\\\n    transport, _ = await loop.create_connection(\\\\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1085, in create_connection\\\\n    raise exceptions[0]\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 1069, in create_connection\\\\n    sock = await self._connect_sock(\\\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/base_events.py\\\\\", line 973, in _connect_sock\\\\n    await self.sock_connect(sock, address)\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 634, in sock_connect\\\\n    return await fut\\\\n           ^^^^^^^^^\\\\n  File \\\\\"/usr/lib/python3.11/asyncio/selector_events.py\\\\\", line 674, in _sock_connect_cb\\\\n    raise OSError(err, f'Connect call failed {address}')\\\\nOSError: [Errno 113] Connect call failed ('10.0.0.229', 32498)\\\\n\"}\n{\"result\": \"success\", \"datetime\": \"2024-05-18T16:20:20.042648-06:00\", \"devices\": [{\"name\": \"Living Room\", \"address\": \"10.0.0.30\", \"identifier\": \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"all_identifiers\": [\"86B730B2-5189-4B6A-BCAA-CDDB18F05FA8\", \"C8:D0:83:E9:D0:49\", \"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\", \"C8D083E9D049\"], \"device_info\": {\"mac\": \"C8:D0:83:E9:D0:49\", \"model\": \"Gen4K\", \"model_str\": \"Apple TV 4K\", \"operating_system\": \"TvOS\", \"version\": \"17.5\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Kitchen\", \"address\": \"10.0.0.79\", \"identifier\": \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"all_identifiers\": [\"B163C908-000F-4983-BDC7-BEFD76887EF5\", \"C8:69:CD:63:2A:11\", \"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\", \"C869CD632A11\"], \"device_info\": {\"mac\": \"C8:69:CD:63:2A:11\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49157}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Bedroom\", \"address\": \"10.0.0.20\", \"identifier\": \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"all_identifiers\": [\"08:66:98:BC:37:1F\", \"108F35A0-FF21-4884-96C2-145AAAB1B4C4\", \"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\", \"086698BC371F\"], \"device_info\": {\"mac\": \"08:66:98:BC:37:1F\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}, {\"name\": \"Basement\", \"address\": \"10.0.0.156\", \"identifier\": \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"all_identifiers\": [\"8BDB6773-479F-4C01-A185-29FF5516F2C2\", \"D0:03:4B:4C:2A:2E\", \"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\", \"D0034B4C2A2E\"], \"device_info\": {\"mac\": \"D0:03:4B:4C:2A:2E\", \"model\": \"Gen4\", \"model_str\": \"Apple TV 4\", \"operating_system\": \"TvOS\", \"version\": \"17.4\"}, \"services\": [{\"protocol\": \"companion\", \"port\": 49153}, {\"protocol\": \"airplay\", \"port\": 7000}, {\"protocol\": \"mrp\", \"port\": 49154}, {\"protocol\": \"raop\", \"port\": 7000}]}]}`).code(1).end()})},true);import_assert.default.strictEqual(response.devices.length,4);import_assert.default.strictEqual(response.errors.length,2);import_assert.default.strictEqual(response.devices[0].name,\"Living Room\");import_assert.default.strictEqual(response.devices[0].host,\"10.0.0.30\");import_assert.default.strictEqual(response.devices[0].id,\"37323C0E-99E6-4CC3-A006-1ED5368FFF8C\");import_assert.default.strictEqual(response.devices[1].name,\"Kitchen\");import_assert.default.strictEqual(response.devices[1].host,\"10.0.0.79\");import_assert.default.strictEqual(response.devices[1].id,\"45B6A67A-9FAD-497D-95EF-7FC5ECB3371C\");import_assert.default.strictEqual(response.devices[2].name,\"Bedroom\");import_assert.default.strictEqual(response.devices[2].host,\"10.0.0.20\");import_assert.default.strictEqual(response.devices[2].id,\"CA55DA36-ADEF-4DBC-A0B3-BA68B0C53E40\");import_assert.default.strictEqual(response.devices[3].name,\"Basement\");import_assert.default.strictEqual(response.devices[3].host,\"10.0.0.156\");import_assert.default.strictEqual(response.devices[3].id,\"C02B27DB-2AF3-43E7-8EF7-885E1E9AB3B4\");import_assert.default.strictEqual(response.errors[0].exception,\"[Errno 113] Connect call failed ('10.0.0.232', 32498)\");import_assert.default.strictEqual(response.errors[1].exception,\"[Errno 113] Connect call failed ('10.0.0.229', 32498)\")",
                  "err": {},
                  "uuid": "73b3951f-aad1-43bb-ab28-ac8c965a611f",
                  "parentUUID": "80997966-c61e-43c5-b34b-e98f5f5fd33c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22898320-f79f-4386-8362-a3b3a492e016",
                "eb7aad75-bf19-4d4a-b1d8-9f838552daba",
                "1c2862fa-3019-4fe5-b613-687a610f7f2a",
                "c14fa5ce-5a1d-484c-9dea-74d7e80295c1",
                "ccaa2d0f-ff56-49a0-b3d1-a3c2e5b529d8",
                "9737cfa0-6966-4843-b965-17af5b128a94",
                "0c3b50b9-dab9-44dc-9cdd-bd85fb850df1",
                "2bf1c3bf-e317-4bd1-a05d-2f29e482ae8a",
                "13cdb7c8-6934-4bed-b07a-d16130d85ec6",
                "adedf850-37dc-48b2-9f5c-b9275b986450",
                "4607abd4-fc4e-44bb-80f3-9887af9b99cb",
                "73b3951f-aad1-43bb-ab28-ac8c965a611f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5410,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "144fb7d1-592c-48a7-b466-6e1a8a1f8eb8",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device=import_lib.default.device({host:\"192.168.178.6\",name:\"My Testdevice\"});import_assert.default.strictEqual(device.host,\"192.168.178.6\");import_assert.default.strictEqual(device.name,\"My Testdevice\")",
                  "err": {},
                  "uuid": "0cce0e11-573b-4cab-91f3-8ddddf4f80b6",
                  "parentUUID": "144fb7d1-592c-48a7-b466-6e1a8a1f8eb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0cce0e11-573b-4cab-91f3-8ddddf4f80b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6e8d4ca0-5f8f-44d2-84ff-35114d63c4cd",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await i.version({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.code(1).end()})})",
                  "err": {},
                  "uuid": "2a19cc04-de0b-4a3c-8b3f-781c9e553c7d",
                  "parentUUID": "6e8d4ca0-5f8f-44d2-84ff-35114d63c4cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a19cc04-de0b-4a3c-8b3f-781c9e553c7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57a78c9f-827d-4a2d-b55a-b0d1a08cdbae",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvremotePath:\"test\"});await import_assert.default.rejects(async()=>{await i.check({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.error(new Error(\"spawn atvremote ENOENT\")).code(1).end()})})},/Unable to find pyatv. Is it installed?/)",
                  "err": {},
                  "uuid": "a45d3587-93b1-416e-83a4-98e06607af2a",
                  "parentUUID": "57a78c9f-827d-4a2d-b55a-b0d1a08cdbae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a45d3587-93b1-416e-83a4-98e06607af2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74a76e76-761f-498d-a8a9-821b8685272e",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({atvscriptPath:\"test\"});await i.find({spawn:(0,import_fake_spawn.createFakeSpawn)(cp=>{import_assert.default.strictEqual(cp.cmd(),\"test\");cp.stdout({datetime:\"2020-11-06T20:47:30.840022+01:00\",devices:[],result:\"success\"}).end()})})",
                  "err": {},
                  "uuid": "f2624d68-26a4-4885-b729-a4d49024dc2e",
                  "parentUUID": "74a76e76-761f-498d-a8a9-821b8685272e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2624d68-26a4-4885-b729-a4d49024dc2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "476a6aa5-29aa-4866-9a91-20cd01341e94",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const i=new import_lib.default({debug:true});const d=i.device({host:\"192.168.178.2\",name:\"My Testdevice\"});import_assert.default.deepStrictEqual(d.debug,true)",
                  "err": {},
                  "uuid": "76286d52-b7ec-4367-a195-ab6810f50866",
                  "parentUUID": "476a6aa5-29aa-4866-9a91-20cd01341e94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76286d52-b7ec-4367-a195-ab6810f50866"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVProtocol)",
                  "err": {},
                  "uuid": "d4fa8fa6-c134-4dc2-937d-2368d980e58d",
                  "parentUUID": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVMediaType)",
                  "err": {},
                  "uuid": "6502a0f7-e8d3-437b-bce2-235b477900ec",
                  "parentUUID": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceEvent)",
                  "err": {},
                  "uuid": "6bc8f3d2-e7d2-4ddb-b5ab-b6b06484ac11",
                  "parentUUID": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVDeviceState)",
                  "err": {},
                  "uuid": "dae0fc71-a93a-4420-a085-6e6554da0ce4",
                  "parentUUID": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVRepeatState)",
                  "err": {},
                  "uuid": "8f5aba7f-be33-4b09-9f60-72d08f9e8e7b",
                  "parentUUID": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVShuffleState)",
                  "err": {},
                  "uuid": "b550cc38-a24f-4c77-bb96-711480b68a8d",
                  "parentUUID": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVKeys)",
                  "err": {},
                  "uuid": "67b1926d-a5c7-4850-8a28-88e71e92597a",
                  "parentUUID": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVListenerState)",
                  "err": {},
                  "uuid": "171efabb-5a98-454f-9223-e315ccd8b25a",
                  "parentUUID": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "import_assert.default.ok(import_lib.NodePyATVPowerState)",
                  "err": {},
                  "uuid": "4926c429-2965-4556-bb58-90be19533c2a",
                  "parentUUID": "1ed75a8d-03bd-4b76-a3d7-683d8c00a83d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4fa8fa6-c134-4dc2-937d-2368d980e58d",
                "6502a0f7-e8d3-437b-bce2-235b477900ec",
                "6bc8f3d2-e7d2-4ddb-b5ab-b6b06484ac11",
                "dae0fc71-a93a-4420-a085-6e6554da0ce4",
                "8f5aba7f-be33-4b09-9f60-72d08f9e8e7b",
                "b550cc38-a24f-4c77-bb96-711480b68a8d",
                "67b1926d-a5c7-4850-8a28-88e71e92597a",
                "171efabb-5a98-454f-9223-e315ccd8b25a",
                "4926c429-2965-4556-bb58-90be19533c2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0ef3c97f-b88c-4bb4-9628-f586ba148818",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "52dc9e33-daae-4b32-ae2a-8fc164ccf6a4",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id=(0,import_tools.addRequestId)();import_assert.default.strictEqual(typeof id,\"string\");(0,import_tools.removeRequestId)(id)",
                  "err": {},
                  "uuid": "c042741c-f893-40be-b1c9-d5eedfc2957b",
                  "parentUUID": "52dc9e33-daae-4b32-ae2a-8fc164ccf6a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.removeRequestId)(\"FOO\")",
                  "err": {},
                  "uuid": "2c8c7649-d17f-4d9f-b75d-73dcba3a9bfe",
                  "parentUUID": "52dc9e33-daae-4b32-ae2a-8fc164ccf6a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c042741c-f893-40be-b1c9-d5eedfc2957b",
                "2c8c7649-d17f-4d9f-b75d-73dcba3a9bfe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dfb6f2dd-4664-46aa-83a2-2d99159a9e7b",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{})",
                  "err": {},
                  "uuid": "363bd864-97ab-42b9-bca3-4b760cece3c6",
                  "parentUUID": "dfb6f2dd-4664-46aa-83a2-2d99159a9e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:true})",
                  "err": {},
                  "uuid": "ac1f21f3-5124-4fda-bd43-4eb08c284821",
                  "parentUUID": "dfb6f2dd-4664-46aa-83a2-2d99159a9e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.ok(msg.includes(\"Hello World\"))},\"debug\")})",
                  "err": {},
                  "uuid": "ae0818b6-d353-4802-998f-c88045cc8b57",
                  "parentUUID": "dfb6f2dd-4664-46aa-83a2-2d99159a9e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{noColors:true})",
                  "err": {},
                  "uuid": "e970706b-0f71-4c0c-90e7-22ad6421e1ad",
                  "parentUUID": "dfb6f2dd-4664-46aa-83a2-2d99159a9e7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0,import_tools.debug)(\"TEST\",\"Hello World.\",{debug:__name(function(msg){import_assert.default.strictEqual(this,null);import_assert.default.strictEqual(msg,\"[node-pyatv][TEST] Hello World.\")},\"debug\"),noColors:true})",
                  "err": {},
                  "uuid": "b2f28260-e085-43a3-8a32-6751d54b7afa",
                  "parentUUID": "dfb6f2dd-4664-46aa-83a2-2d99159a9e7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "363bd864-97ab-42b9-bca3-4b760cece3c6",
                "ac1f21f3-5124-4fda-bd43-4eb08c284821",
                "ae0818b6-d353-4802-998f-c88045cc8b57",
                "e970706b-0f71-4c0c-90e7-22ad6421e1ad",
                "b2f28260-e085-43a3-8a32-6751d54b7afa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4a63140-39e2-4a94-9c07-f34c175d591e",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/1\")",
                  "err": {},
                  "uuid": "7af4253a-9ab6-471c-9497-75472cc8dcc7",
                  "parentUUID": "e4a63140-39e2-4a94-9c07-f34c175d591e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp/1\",atvscriptPath:\"/tmp/2\"});import_assert.default.strictEqual(result,\"/tmp/2\")",
                  "err": {},
                  "uuid": "cf8bc9ca-47bc-4c5e-b0e1-267a4145fba3",
                  "parentUUID": "e4a63140-39e2-4a94-9c07-f34c175d591e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvremote,{atvscriptPath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvremote\")",
                  "err": {},
                  "uuid": "dcb11024-ec04-4ec4-a0f1-819d27bd1319",
                  "parentUUID": "e4a63140-39e2-4a94-9c07-f34c175d591e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.getExecutable)(import_types.NodePyATVExecutableType.atvscript,{atvremotePath:\"/tmp\"});import_assert.default.strictEqual(result,\"atvscript\")",
                  "err": {},
                  "uuid": "bffc9164-8542-408d-b8ea-98e6b1073f83",
                  "parentUUID": "e4a63140-39e2-4a94-9c07-f34c175d591e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7af4253a-9ab6-471c-9497-75472cc8dcc7",
                "cf8bc9ca-47bc-4c5e-b0e1-267a4145fba3",
                "dcb11024-ec04-4ec4-a0f1-819d27bd1319",
                "bffc9164-8542-408d-b8ea-98e6b1073f83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "067e211f-80e8-4ca4-9712-a571e5e550b1",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)();import_assert.default.deepEqual(result,[])",
                  "err": {},
                  "uuid": "3ebdd4a7-560c-4e1e-8040-5395b406ef86",
                  "parentUUID": "067e211f-80e8-4ca4-9712-a571e5e550b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({host:\"192.168.178.2\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2\"])",
                  "err": {},
                  "uuid": "7b9607be-e2be-47df-b7fc-3efaa6f7042a",
                  "parentUUID": "067e211f-80e8-4ca4-9712-a571e5e550b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=await(0,import_tools.getParameters)({airplayCredentials:\"****\",companionCredentials:\"1234\",dmapCredentials:\"****\",hosts:[\"192.168.178.2\",\"192.168.178.3\"],id:\"****\",mrpCredentials:\"****\",protocol:import_types.NodePyATVProtocol.mrp,raopCredentials:\"::foo:\"});import_assert.default.deepEqual(result,[\"-s\",\"192.168.178.2,192.168.178.3\",\"-i\",\"****\",\"--protocol\",\"mrp\",\"--dmap-credentials\",\"****\",\"--mrp-credentials\",\"****\",\"--airplay-credentials\",\"****\",\"--companion-credentials\",\"1234\",\"--raop-credentials\",\"::foo:\"])",
                  "err": {},
                  "uuid": "6f3a988c-7ddf-4291-972c-c02ddfcfa83a",
                  "parentUUID": "067e211f-80e8-4ca4-9712-a571e5e550b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ebdd4a7-560c-4e1e-8040-5395b406ef86",
                "7b9607be-e2be-47df-b7fc-3efaa6f7042a",
                "6f3a988c-7ddf-4291-972c-c02ddfcfa83a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b070f256-6cf8-45bc-9629-cd418319f904",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "42d068b6-66f5-4433-b94f-48328a26a344",
                  "parentUUID": "b070f256-6cf8-45bc-9629-cd418319f904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result=(0,import_tools.parseState)(null,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "d9daeefd-dbe4-4497-a09f-f67288c72466",
                  "parentUUID": "b070f256-6cf8-45bc-9629-cd418319f904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:null,app:\"Disney+\",app_id:\"com.disney.disneyplus\",artist:null,content_identifier:null,datetime:\"2020-11-07T22:38:43.608030+01:00\",device_state:\"playing\",episode_number:null,focus_state:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",itunes_store_identifier:null,media_type:\"video\",output_devices:null,position:27,power_state:null,repeat:\"off\",result:\"success\",season_number:null,series_name:null,shuffle:\"off\",title:\"Solo: A Star Wars Story\",total_time:8097,volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:\"Disney+\",appId:\"com.disney.disneyplus\",artist:null,contentIdentifier:null,dateTime:new Date(\"2020-11-07T22:38:43.608030+01:00\"),deviceState:import_types.NodePyATVDeviceState.playing,episodeNumber:null,focusState:null,genre:null,hash:\"100e0ab6-6ff5-4199-9c04-a7107ff78712\",iTunesStoreIdentifier:null,mediaType:import_types.NodePyATVMediaType.video,outputDevices:null,position:27,powerState:null,repeat:import_types.NodePyATVRepeatState.off,seasonNumber:null,seriesName:null,shuffle:import_types.NodePyATVShuffleState.off,title:\"Solo: A Star Wars Story\",totalTime:8097,volume:null})",
                  "err": {},
                  "uuid": "edd12913-240e-4ecc-9053-3237da9403f0",
                  "parentUUID": "b070f256-6cf8-45bc-9629-cd418319f904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"2021-11-24T21:13:36.424576+03:00\",exception:\"invalid credentials: 321\",result:\"failure\",stacktrace:'Traceback (most recent call last):\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\"invalid credentials: \" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'};import_assert.default.throws(()=>{(0,import_tools.parseState)(input,\"\",{})},/Got pyatv Error: invalid credentials: 321/)",
                  "err": {},
                  "uuid": "e8935065-5f16-4465-883a-cbd08a418767",
                  "parentUUID": "b070f256-6cf8-45bc-9629-cd418319f904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={datetime:\"today\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "6ca981a8-d51a-4807-9c1d-ff50533aa69c",
                  "parentUUID": "b070f256-6cf8-45bc-9629-cd418319f904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={album:Infinity,app:0,app_id:891645381647289,artist:90,content_identifier:null,datetime:true,device_state:43,episode_number:null,focus_state:null,genre:Math.PI,hash:1337,itunes_store_identifier:null,media_type:false,output_devices:null,position:\"0:30.123\",power_state:null,repeat:true,result:\"success\",season_number:null,series_name:null,shuffle:false,title:void 0,total_time:\"23min\",volume:null};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "54983258-fe27-46fe-b40d-43e31ddc80f5",
                  "parentUUID": "b070f256-6cf8-45bc-9629-cd418319f904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input={device_state:\"initiating\",media_type:\"3d-experience\",repeat:\"nothing\",shuffle:\"everything\"};const result=(0,import_tools.parseState)(input,\"\",{});import_assert.default.deepStrictEqual(result,{album:null,app:null,appId:null,artist:null,contentIdentifier:null,dateTime:null,deviceState:null,episodeNumber:null,focusState:null,genre:null,hash:null,iTunesStoreIdentifier:null,mediaType:null,outputDevices:null,position:null,powerState:null,repeat:null,seasonNumber:null,seriesName:null,shuffle:null,title:null,totalTime:null,volume:null})",
                  "err": {},
                  "uuid": "89c433a9-636e-4871-8165-eceb9fcad38b",
                  "parentUUID": "b070f256-6cf8-45bc-9629-cd418319f904",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42d068b6-66f5-4433-b94f-48328a26a344",
                "d9daeefd-dbe4-4497-a09f-f67288c72466",
                "edd12913-240e-4ecc-9053-3237da9403f0",
                "e8935065-5f16-4465-883a-cbd08a418767",
                "6ca981a8-d51a-4807-9c1d-ff50533aa69c",
                "54983258-fe27-46fe-b40d-43e31ddc80f5",
                "89c433a9-636e-4871-8165-eceb9fcad38b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}