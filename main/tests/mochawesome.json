{
  "stats": {
    "suites": 84,
    "tests": 143,
    "passes": 141,
    "pending": 2,
    "failures": 0,
    "start": "2022-01-24T20:57:32.082Z",
    "end": "2022-01-24T20:57:44.135Z",
    "duration": 12053,
    "testsRegistered": 143,
    "passPercent": 100,
    "pendingPercent": 1.3986013986013985,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "43b23a53-fb91-4b47-bc81-08a363112253",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "16efbf59-f10f-43a9-9915-759343457f93",
          "title": "NodePyATVDeviceEvent",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
          "file": "/test/device-event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "be93d1f4-aa45-4603-871a-f1ede227072e",
              "title": "get key()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get key() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.key, 'genre');",
                  "err": {},
                  "uuid": "0139618c-0da8-49f8-aeb8-c6ab3825efef",
                  "parentUUID": "be93d1f4-aa45-4603-871a-f1ede227072e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0139618c-0da8-49f8-aeb8-c6ab3825efef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a64f6096-fa08-4e4a-ab7f-559eeaa33630",
              "title": "get oldValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get oldValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.oldValue, 'Jazz');",
                  "err": {},
                  "uuid": "0b232dfc-763b-46c6-80ac-fa35d60a823c",
                  "parentUUID": "a64f6096-fa08-4e4a-ab7f-559eeaa33630",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b232dfc-763b-46c6-80ac-fa35d60a823c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "860f10c2-7fe3-44a0-a872-7d6bb637eed8",
              "title": "get newValue()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get newValue() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.newValue, 'Rock');",
                  "err": {},
                  "uuid": "7a688c41-e964-4056-93fd-8b6fc99010eb",
                  "parentUUID": "860f10c2-7fe3-44a0-a872-7d6bb637eed8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a688c41-e964-4056-93fd-8b6fc99010eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca46ed89-7508-4f3c-a1e0-f736014787bf",
              "title": "get value()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get value() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device: new device_1.default({\n        host: '192.168.178.2',\n        name: 'My Testinstance'\n    })\n});\nassert_1.default.strictEqual(event.value, 'Rock');",
                  "err": {},
                  "uuid": "592d22cf-50b0-4063-93a8-bafe2b5ddbba",
                  "parentUUID": "ca46ed89-7508-4f3c-a1e0-f736014787bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "592d22cf-50b0-4063-93a8-bafe2b5ddbba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f870e0f-3eb8-4d23-a3e8-9ef8bb0526dd",
              "title": "get device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-event.ts",
              "file": "/test/device-event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvent get device() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    host: '192.168.178.2',\n    name: 'My Testinstance'\n});\nconst event = new device_event_1.default({\n    key: 'genre',\n    old: 'Jazz',\n    new: 'Rock',\n    device\n});\nassert_1.default.deepEqual(event.device, device);",
                  "err": {},
                  "uuid": "dd2e074f-5eb3-4803-86c3-e80667d63e55",
                  "parentUUID": "3f870e0f-3eb8-4d23-a3e8-9ef8bb0526dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd2e074f-5eb3-4803-86c3-e80667d63e55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb32d147-7953-4c21-a8ca-54f1562ff3dc",
          "title": "NodePyATVDeviceEvents",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
          "file": "/test/device-events.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3ef95b74-da6b-41ef-8184-1c040f7748e9",
              "title": "applyStateAndEmitEvents()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit update:key event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:title', event => {\n            assert_1.default.ok(event instanceof lib_1.NodePyATVDeviceEvent);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "f18344ef-75c5-4bac-9f58-40a94258ce3c",
                  "parentUUID": "3ef95b74-da6b-41ef-8184-1c040f7748e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update event",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update event",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update', event => {\n            assert_1.default.ok(event instanceof lib_1.NodePyATVDeviceEvent);\n            assert_1.default.strictEqual(event.key, 'title');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'My Movie');\n            assert_1.default.strictEqual(event.value, 'My Movie');\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "70817550-3547-4d62-befa-4e2002e8fcc0",
                  "parentUUID": "3ef95b74-da6b-41ef-8184-1c040f7748e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit update:key event before update",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit update:key event before update",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const sort = [];\n    yield Promise.race([\n        new Promise(cb => {\n            device.once('update', () => {\n                sort.push('update');\n                cb(undefined);\n            });\n        }),\n        new Promise(cb => {\n            device.once('update:title', () => {\n                sort.push('update:title');\n                cb(undefined);\n            });\n        })\n    ]);\n    assert_1.default.deepStrictEqual(sort, ['update:title', 'update']);\n});",
                  "err": {},
                  "uuid": "debbfbfb-b1a9-4dcd-9c8c-4fd688b55c7d",
                  "parentUUID": "3ef95b74-da6b-41ef-8184-1c040f7748e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error events on failures",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error events on failures",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('error', error => {\n            assert_1.default.ok(error instanceof Error);\n            assert_1.default.ok(error.toString().includes('invalid credentials: 321'));\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "de5ddfb8-7813-45c2-ac77-06812176e9c4",
                  "parentUUID": "3ef95b74-da6b-41ef-8184-1c040f7748e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not emit an update if new value is same as old one",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should not emit an update if new value is same as old one",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let spawnCounter = 0;\n    let eventCounter = 0;\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            if (spawnCounter === 0) {\n                cp.onStdIn(() => cp.end());\n            }\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n            spawnCounter++;\n            if (spawnCounter >= 2) {\n                cp.end();\n            }\n        })\n    });\n    const listener = () => {\n        eventCounter++;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    yield device.getState();\n    device.off('update', listener);\n    assert_1.default.strictEqual(spawnCounter, 2);\n    assert_1.default.strictEqual(eventCounter, 1);\n});",
                  "err": {},
                  "uuid": "4307dd94-b5db-4607-8309-83c2bf47dbee",
                  "parentUUID": "3ef95b74-da6b-41ef-8184-1c040f7748e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error event if event listener throws an exception",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should emit error event if event listener throws an exception",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    let callCounter = 0;\n    const error = new Error('This is an error. Be nice.');\n    device.once('error', err => {\n        assert_1.default.strictEqual(err, error);\n        callCounter++;\n    });\n    const listener = () => {\n        throw error;\n    };\n    device.on('update', listener);\n    yield new Promise(cb => setTimeout(cb, 0));\n    device.off('update', listener);\n    assert_1.default.strictEqual(callCounter, 1);\n});",
                  "err": {},
                  "uuid": "ec40c063-a38f-408f-8434-7ceaffb63084",
                  "parentUUID": "3ef95b74-da6b-41ef-8184-1c040f7748e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work with powerState",
                  "fullTitle": "NodePyATVDeviceEvents applyStateAndEmitEvents() should also work with powerState",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                power_state: 'off'\n            });\n        })\n    });\n    yield new Promise(cb => {\n        device.once('update:powerState', event => {\n            assert_1.default.ok(event instanceof lib_1.NodePyATVDeviceEvent);\n            assert_1.default.strictEqual(event.key, 'powerState');\n            assert_1.default.strictEqual(event.oldValue, null);\n            assert_1.default.strictEqual(event.newValue, 'off');\n            assert_1.default.strictEqual(event.newValue, lib_1.NodePyATVPowerState.off);\n            assert_1.default.strictEqual(event.value, 'off');\n            assert_1.default.strictEqual(event.value, lib_1.NodePyATVPowerState.off);\n            assert_1.default.deepStrictEqual(event.device, device);\n            cb(undefined);\n        });\n    });\n});",
                  "err": {},
                  "uuid": "68381f42-6c01-49f4-85ec-4fffb41dbecb",
                  "parentUUID": "3ef95b74-da6b-41ef-8184-1c040f7748e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f18344ef-75c5-4bac-9f58-40a94258ce3c",
                "70817550-3547-4d62-befa-4e2002e8fcc0",
                "debbfbfb-b1a9-4dcd-9c8c-4fd688b55c7d",
                "de5ddfb8-7813-45c2-ac77-06812176e9c4",
                "4307dd94-b5db-4607-8309-83c2bf47dbee",
                "ec40c063-a38f-408f-8434-7ceaffb63084",
                "68381f42-6c01-49f4-85ec-4fffb41dbecb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a14c942-8d44-4f1b-9803-06b73b014c1b",
              "title": "start|stopListening()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit error if spawn fails",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if spawn fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const error = new Error();\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.error(error).end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.strictEqual(err, error);\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "65c7df5a-8503-42de-8558-d09236fa10ca",
                  "parentUUID": "6a14c942-8d44-4f1b-9803-06b73b014c1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error on stderr data",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error on stderr data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stderr('Hello World!').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Got stderr output from pyatv: Hello World!'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "cd5a3589-7a4f-4abb-b305-d34a933a17fd",
                  "parentUUID": "6a14c942-8d44-4f1b-9803-06b73b014c1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit error if stdout is not valid json",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should emit error if stdout is not valid json",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('#').end();\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.on('update', listener);\n    yield new Promise(cb => {\n        device.once('error', err => {\n            assert_1.default.ok(err instanceof Error);\n            assert_1.default.ok(err.toString().includes('Unable to parse stdout json: SyntaxError: ' +\n                'Unexpected token # in JSON at position 0'));\n            cb(undefined);\n        });\n    });\n    device.off('update', listener);\n});",
                  "err": {},
                  "uuid": "c6697792-44ac-4b7d-b8a3-8669a7d52082",
                  "parentUUID": "6a14c942-8d44-4f1b-9803-06b73b014c1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should restart the process if it gets killed",
                  "fullTitle": "NodePyATVDeviceEvents start|stopListening() should restart the process if it gets killed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6c05b6fe-3f25-4930-95e5-488c6a31ec98",
                  "parentUUID": "6a14c942-8d44-4f1b-9803-06b73b014c1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65c7df5a-8503-42de-8558-d09236fa10ca",
                "cd5a3589-7a4f-4abb-b305-d34a933a17fd",
                "c6697792-44ac-4b7d-b8a3-8669a7d52082"
              ],
              "failures": [],
              "pending": [
                "6c05b6fe-3f25-4930-95e5-488c6a31ec98"
              ],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf886c9a-35db-4ead-a753-d0cd072780a6",
              "title": "addListener() / removeAllListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents addListener() / removeAllListeners() should work without any exceptions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    device.removeAllListeners('update');\n});",
                  "err": {},
                  "uuid": "dc222096-b430-4754-8768-92c223e27219",
                  "parentUUID": "cf886c9a-35db-4ead-a753-d0cd072780a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc222096-b430-4754-8768-92c223e27219"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "05c4c500-6afc-4029-aa9c-8b7ed35dac28",
              "title": "emit()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents emit() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst event = new lib_1.NodePyATVDeviceEvent({\n    key: 'dateTime',\n    old: 'foo',\n    new: 'bar',\n    device\n});\nlet executions = 0;\ndevice.once('test', (e) => {\n    executions++;\n    assert_1.default.strictEqual(e, event);\n    assert_1.default.strictEqual(executions, 1);\n    done();\n});\ndevice.emit('test', event);",
                  "err": {},
                  "uuid": "5e60adb2-de0b-4d18-9dfe-e39a272c6590",
                  "parentUUID": "05c4c500-6afc-4029-aa9c-8b7ed35dac28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e60adb2-de0b-4d18-9dfe-e39a272c6590"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "442cf463-6332-4f05-bda8-7be4f22ec730",
              "title": "eventNames()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents eventNames() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.eventNames(), ['test']);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "516ad001-e949-4f07-b931-a6cfccdd78f8",
                  "parentUUID": "442cf463-6332-4f05-bda8-7be4f22ec730",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "516ad001-e949-4f07-b931-a6cfccdd78f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cfb668e9-ce64-4dce-a0f5-e2665f4c3c1a",
              "title": "getMaxListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents getMaxListeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst result = device.getMaxListeners();\nassert_1.default.ok(typeof result, 'number');\nassert_1.default.ok(result >= 10);",
                  "err": {},
                  "uuid": "a801c6ee-381a-4ad6-8e4b-7d167ee9e3bc",
                  "parentUUID": "cfb668e9-ce64-4dce-a0f5-e2665f4c3c1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a801c6ee-381a-4ad6-8e4b-7d167ee9e3bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2a713e01-e84b-452a-ac2f-9baa8c213fae",
              "title": "listenerCount()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listenerCount() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listenerCount('test'), 1);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "86c02758-cc5f-472d-91f1-01873b82fe8e",
                  "parentUUID": "2a713e01-e84b-452a-ac2f-9baa8c213fae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86c02758-cc5f-472d-91f1-01873b82fe8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a79d806-67c4-450f-ba8d-4f235f9c28bc",
              "title": "listeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents listeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.listeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.listeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.listeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "f289d7a4-bac5-4491-863e-768b42338907",
                  "parentUUID": "4a79d806-67c4-450f-ba8d-4f235f9c28bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f289d7a4-bac5-4491-863e-768b42338907"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1060126e-71e0-4ac5-84ea-ceab50841ac9",
              "title": "prependListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependListener() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\nconst listener = () => {\n    device.removeAllListeners('update');\n    done();\n};\ndevice.prependListener('update', listener);",
                  "err": {},
                  "uuid": "f98c0e7f-47a9-4605-974f-3809ee338606",
                  "parentUUID": "1060126e-71e0-4ac5-84ea-ceab50841ac9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f98c0e7f-47a9-4605-974f-3809ee338606"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a5cb712-14f4-4987-9357-05a5a712fd07",
              "title": "prependOnceListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents prependOnceListener() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n        cp.stdout({\n            result: 'success',\n            title: 'My Movie'\n        });\n    })\n});\ndevice.prependOnceListener('update', () => done());",
                  "err": {},
                  "uuid": "119e28b7-0e21-47d4-9b99-c26439b24422",
                  "parentUUID": "6a5cb712-14f4-4987-9357-05a5a712fd07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "119e28b7-0e21-47d4-9b99-c26439b24422"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "97a5d88e-4562-458b-9a78-eb0de9f545ea",
              "title": "rawListeners()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDeviceEvents rawListeners() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new lib_1.NodePyATVDevice({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n        cp.onStdIn(() => cp.end());\n    })\n});\nconst listener = () => {\n    // ignore\n};\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 0);\ndevice.on('test', listener);\nassert_1.default.deepStrictEqual(device.rawListeners('test').length, 1);\nassert_1.default.deepStrictEqual(device.rawListeners('test')[0], listener);\ndevice.off('test', listener);",
                  "err": {},
                  "uuid": "f5811c45-052e-4683-9cf1-aa5b305bc833",
                  "parentUUID": "97a5d88e-4562-458b-9a78-eb0de9f545ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5811c45-052e-4683-9cf1-aa5b305bc833"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57077d92-5147-450d-b5f7-abcf267bcca4",
              "title": "removeListener()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device-events.ts",
              "file": "/test/device-events.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any exceptions",
                  "fullTitle": "NodePyATVDeviceEvents removeListener() should work without any exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new lib_1.NodePyATVDevice({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.onStdIn(() => cp.end());\n            cp.stdout({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const listener = () => {\n        // empty listener\n    };\n    device.addListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 1);\n    device.removeListener('update', listener);\n    assert_1.default.deepStrictEqual(device.listenerCount('update'), 0);\n});",
                  "err": {},
                  "uuid": "2ea63aab-2fc0-4362-b3e8-98d326d3b162",
                  "parentUUID": "57077d92-5147-450d-b5f7-abcf267bcca4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ea63aab-2fc0-4362-b3e8-98d326d3b162"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "089afc6f-5564-4b31-b689-9d2c897f61a0",
          "title": "NodePyATVDevice",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
          "file": "/test/device.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d35e7580-b2aa-424c-969a-e15dd06692e9",
              "title": "get name()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the name",
                  "fullTitle": "NodePyATVDevice get name() should return the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "ec8a4e20-98f7-4bcb-afc8-4791981c5369",
                  "parentUUID": "d35e7580-b2aa-424c-969a-e15dd06692e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec8a4e20-98f7-4bcb-afc8-4791981c5369"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a13c8fef-cb96-44c4-87fc-da15312eb72d",
              "title": "get host()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the host",
                  "fullTitle": "NodePyATVDevice get host() should return the host",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.host, '192.168.178.2');",
                  "err": {},
                  "uuid": "47f15e17-16d1-44e3-ae79-378aa08c90c2",
                  "parentUUID": "a13c8fef-cb96-44c4-87fc-da15312eb72d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47f15e17-16d1-44e3-ae79-378aa08c90c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "803036be-ea27-4791-a169-d5e7a290f735",
              "title": "get id()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the id",
                  "fullTitle": "NodePyATVDevice get id() should return the id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****'\n});\nassert_1.default.strictEqual(device.id, '*****');",
                  "err": {},
                  "uuid": "d780f162-088e-4141-b185-c4e238641701",
                  "parentUUID": "803036be-ea27-4791-a169-d5e7a290f735",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d780f162-088e-4141-b185-c4e238641701"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3594a81-a531-480d-9c3d-22c602464d62",
              "title": "get protocol()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return the protocol",
                  "fullTitle": "NodePyATVDevice get protocol() should return the protocol",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.strictEqual(device.protocol, types_1.NodePyATVProtocol.airplay);",
                  "err": {},
                  "uuid": "52263f97-5e79-4d2d-9483-ca6b0f15242d",
                  "parentUUID": "a3594a81-a531-480d-9c3d-22c602464d62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52263f97-5e79-4d2d-9483-ca6b0f15242d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "715d5873-bfab-430e-85bd-551b743e427d",
              "title": "get debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if set to true",
                  "fullTitle": "NodePyATVDevice get debug() should return true if set to true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "210adfc7-57fd-4f64-840c-742973838e00",
                  "parentUUID": "715d5873-bfab-430e-85bd-551b743e427d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return fn if set to custom function",
                  "fullTitle": "NodePyATVDevice get debug() should return fn if set to custom function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nconst device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: fn\n});\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "d3f25cf1-f69c-4660-b55c-0bcf35779a38",
                  "parentUUID": "715d5873-bfab-430e-85bd-551b743e427d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if unset",
                  "fullTitle": "NodePyATVDevice get debug() should return false if unset",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "5d1cb273-6fdd-4945-ad56-063949cac050",
                  "parentUUID": "715d5873-bfab-430e-85bd-551b743e427d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "210adfc7-57fd-4f64-840c-742973838e00",
                "d3f25cf1-f69c-4660-b55c-0bcf35779a38",
                "5d1cb273-6fdd-4945-ad56-063949cac050"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02affc57-e94b-489f-99ee-0c1224cf5dc2",
              "title": "set debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work for debug = true",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = true;\nassert_1.default.strictEqual(device.debug, true);",
                  "err": {},
                  "uuid": "4d49926d-7252-40c0-bbec-bf4b6eef250d",
                  "parentUUID": "02affc57-e94b-489f-99ee-0c1224cf5dc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "56757aa1-c63f-43a5-ad95-aec1120633bb",
                  "parentUUID": "02affc57-e94b-489f-99ee-0c1224cf5dc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = undefined",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    debug: true\n});\nassert_1.default.strictEqual(device.debug, true);\ndevice.debug = undefined;\nassert_1.default.strictEqual(device.debug, undefined);",
                  "err": {},
                  "uuid": "224afdeb-b8c5-4a49-9c71-d4bcde93453a",
                  "parentUUID": "02affc57-e94b-489f-99ee-0c1224cf5dc2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work for debug = fn",
                  "fullTitle": "NodePyATVDevice set debug() should work for debug = fn",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst fn = () => {\n};\nassert_1.default.strictEqual(device.debug, undefined);\ndevice.debug = fn;\nassert_1.default.strictEqual(device.debug, fn);",
                  "err": {},
                  "uuid": "f25f44c0-6a1a-4aa2-9508-998983c46608",
                  "parentUUID": "02affc57-e94b-489f-99ee-0c1224cf5dc2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d49926d-7252-40c0-bbec-bf4b6eef250d",
                "56757aa1-c63f-43a5-ad95-aec1120633bb",
                "224afdeb-b8c5-4a49-9c71-d4bcde93453a",
                "f25f44c0-6a1a-4aa2-9508-998983c46608"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33d409d1-1af2-4118-9b41-2033ba487c8f",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a object representation",
                  "fullTitle": "NodePyATVDevice toJSON() should return a object representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});\nassert_1.default.deepEqual(device.toJSON(), {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n});",
                  "err": {},
                  "uuid": "0fd5db2f-6b6e-4260-b608-8ec7b34dabb5",
                  "parentUUID": "33d409d1-1af2-4118-9b41-2033ba487c8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be possible to create a new device from this",
                  "fullTitle": "NodePyATVDevice toJSON() should be possible to create a new device from this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const config = {\n    name: 'My Testdevice',\n    host: '192.168.178.2',\n    id: '*****',\n    protocol: types_1.NodePyATVProtocol.airplay\n};\nconst deviceA = new device_1.default(config);\nconst deviceB = new device_1.default(deviceA.toJSON());\nassert_1.default.deepEqual(deviceB.toJSON(), config);",
                  "err": {},
                  "uuid": "082840e9-d7fe-48cf-96d3-f56dd22e4b96",
                  "parentUUID": "33d409d1-1af2-4118-9b41-2033ba487c8f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fd5db2f-6b6e-4260-b608-8ec7b34dabb5",
                "082840e9-d7fe-48cf-96d3-f56dd22e4b96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b606abe-fb92-483f-b862-ad6d765717a8",
              "title": "toString()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice toString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = new device_1.default({\n    name: 'My Testdevice',\n    host: '192.168.178.2'\n});\nassert_1.default.strictEqual(device.toString(), 'NodePyATVDevice(My Testdevice, 192.168.178.2)');",
                  "err": {},
                  "uuid": "2aeaee86-6a81-43a3-bef1-cc7eb387015b",
                  "parentUUID": "9b606abe-fb92-483f-b862-ad6d765717a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2aeaee86-6a81-43a3-bef1-cc7eb387015b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3c2e2772-816e-4b60-9559-e0c3860dcbf0",
              "title": "getState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [I]",
                  "fullTitle": "NodePyATVDevice getState() should work [I]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "679db7a7-e7ac-468d-b902-9f63f8f2a855",
                  "parentUUID": "3c2e2772-816e-4b60-9559-e0c3860dcbf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const result = yield device.getState();\n    assert_1.default.deepStrictEqual(result, {\n        dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n        hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n        mediaType: types_1.NodePyATVMediaType.video,\n        deviceState: types_1.NodePyATVDeviceState.playing,\n        title: 'Solo: A Star Wars Story',\n        artist: null,\n        album: null,\n        genre: null,\n        totalTime: 8097,\n        position: 27,\n        shuffle: types_1.NodePyATVShuffleState.off,\n        repeat: types_1.NodePyATVRepeatState.off,\n        app: 'Disney+',\n        appId: 'com.disney.disneyplus',\n        powerState: null\n    });\n});",
                  "err": {},
                  "uuid": "192cf0d6-8b8d-40b9-8daf-dd627bdd54b7",
                  "parentUUID": "3c2e2772-816e-4b60-9559-e0c3860dcbf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject with error if pyatv fails",
                  "fullTitle": "NodePyATVDevice getState() should reject with error if pyatv fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'failure',\n                datetime: '2021-11-24T21:13:36.424576+03:00',\n                exception: 'invalid credentials: 321',\n                stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n            });\n        })\n    });\n    assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.getState();\n    }), /Got pyatv Error: invalid credentials: 321/);\n});",
                  "err": {},
                  "uuid": "dc53ea76-af3a-4f83-b304-68f79b1d24c8",
                  "parentUUID": "3c2e2772-816e-4b60-9559-e0c3860dcbf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache requests for a bit",
                  "fullTitle": "NodePyATVDevice getState() should cache requests for a bit",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    const secondResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.dateTime, secondResult.dateTime);\n    assert_1.default.strictEqual(executions, 1);\n});",
                  "err": {},
                  "uuid": "9f382fd1-ca70-4a74-8c3d-174554e8349a",
                  "parentUUID": "3c2e2772-816e-4b60-9559-e0c3860dcbf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update the position if cache was used",
                  "fullTitle": "NodePyATVDevice getState() should update the position if cache was used",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date(new Date().getTime() - 1000).toJSON(),\n                hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n                media_type: 'video',\n                device_state: 'playing',\n                title: 'Solo: A Star Wars Story',\n                artist: null,\n                album: null,\n                genre: null,\n                total_time: 8097,\n                position: 27,\n                shuffle: 'off',\n                repeat: 'off',\n                app: 'Disney+',\n                app_id: 'com.disney.disneyplus'\n            });\n        })\n    });\n    const firstResult = yield device.getState();\n    assert_1.default.strictEqual(firstResult.position, 27);\n    const secondResult = yield device.getState();\n    assert_1.default.ok(secondResult.position);\n    assert_1.default.ok(secondResult.position > 27, `Position should be > 27, was ${secondResult.position}`);\n    assert_1.default.ok(secondResult.position < 30, `Position should be > 27, was ${secondResult.position}`);\n});",
                  "err": {},
                  "uuid": "569692ee-1218-4f8b-9348-de93b669e3bf",
                  "parentUUID": "3c2e2772-816e-4b60-9559-e0c3860dcbf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "192cf0d6-8b8d-40b9-8daf-dd627bdd54b7",
                "dc53ea76-af3a-4f83-b304-68f79b1d24c8",
                "9f382fd1-ca70-4a74-8c3d-174554e8349a",
                "569692ee-1218-4f8b-9348-de93b669e3bf"
              ],
              "failures": [],
              "pending": [
                "679db7a7-e7ac-468d-b902-9f63f8f2a855"
              ],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dbdea84e-bc1e-4644-a0ac-ec2780661b96",
              "title": "clearState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice clearState() should work",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let executions = 0;\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            executions++;\n            cp.end({\n                result: 'success',\n                datetime: '2020-11-07T22:38:43.608030+01:00',\n                title: 'Solo: A Star Wars Story'\n            });\n        })\n    });\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    device.clearState();\n    assert_1.default.deepStrictEqual(yield device.getTitle(), 'Solo: A Star Wars Story');\n    assert_1.default.strictEqual(executions, 2);\n});",
                  "err": {},
                  "uuid": "333fae01-bdcd-41ca-93c6-5ab07b7d9c0b",
                  "parentUUID": "dbdea84e-bc1e-4644-a0ac-ec2780661b96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "333fae01-bdcd-41ca-93c6-5ab07b7d9c0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "319c21ed-b60e-489f-88ee-56709cb8bd0e",
              "title": "getDateTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDateTime() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                datetime: new Date().toJSON()\n            });\n        })\n    });\n    const result = yield device.getDateTime();\n    assert_1.default.ok(result instanceof Date);\n});",
                  "err": {},
                  "uuid": "80a0e6c1-d1b4-4bd4-83e8-7b8ea4a7c27d",
                  "parentUUID": "319c21ed-b60e-489f-88ee-56709cb8bd0e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80a0e6c1-d1b4-4bd4-83e8-7b8ea4a7c27d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27b083a9-07f9-493d-9926-03621d4831b9",
              "title": "getHash()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getHash() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                hash: '12345'\n            });\n        })\n    });\n    const result = yield device.getHash();\n    assert_1.default.strictEqual(result, '12345');\n});",
                  "err": {},
                  "uuid": "d287632a-5493-4264-9cf5-1290350c8adb",
                  "parentUUID": "27b083a9-07f9-493d-9926-03621d4831b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d287632a-5493-4264-9cf5-1290350c8adb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d0921ce-1ea2-44ee-8dd8-bd61635fb5ba",
              "title": "getMediaType()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getMediaType() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                media_type: 'video'\n            });\n        })\n    });\n    const result = yield device.getMediaType();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVMediaType.video);\n    assert_1.default.deepStrictEqual(result, 'video');\n});",
                  "err": {},
                  "uuid": "290126aa-00a6-44ab-a07e-622b578d5ac6",
                  "parentUUID": "9d0921ce-1ea2-44ee-8dd8-bd61635fb5ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "290126aa-00a6-44ab-a07e-622b578d5ac6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b825eb3-d820-4ef9-b2fe-e244270bce72",
              "title": "getDeviceState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getDeviceState() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                device_state: 'seeking'\n            });\n        })\n    });\n    const result = yield device.getDeviceState();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVDeviceState.seeking);\n    assert_1.default.deepStrictEqual(result, 'seeking');\n});",
                  "err": {},
                  "uuid": "ef2f6961-5f27-441b-a21f-704754f9aeaa",
                  "parentUUID": "2b825eb3-d820-4ef9-b2fe-e244270bce72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef2f6961-5f27-441b-a21f-704754f9aeaa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e05ad829-ad7f-48bb-8649-b0cd1ba4fb90",
              "title": "getTitle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTitle() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                title: 'My Movie'\n            });\n        })\n    });\n    const result = yield device.getTitle();\n    assert_1.default.strictEqual(result, 'My Movie');\n});",
                  "err": {},
                  "uuid": "b1b34d90-a8aa-4c2c-9d42-548cd3ba6b83",
                  "parentUUID": "e05ad829-ad7f-48bb-8649-b0cd1ba4fb90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1b34d90-a8aa-4c2c-9d42-548cd3ba6b83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "020c723e-2b36-4f42-b88e-f2c217fc8cc9",
              "title": "getArtist()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getArtist() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                artist: 'My Artist'\n            });\n        })\n    });\n    const result = yield device.getArtist();\n    assert_1.default.strictEqual(result, 'My Artist');\n});",
                  "err": {},
                  "uuid": "fc7c706c-ea4e-4ca1-9181-506dbae5359c",
                  "parentUUID": "020c723e-2b36-4f42-b88e-f2c217fc8cc9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc7c706c-ea4e-4ca1-9181-506dbae5359c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc7a653b-cb54-41d9-aeaf-61142c115d3f",
              "title": "getAlbum()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAlbum() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                album: 'My ALbum'\n            });\n        })\n    });\n    const result = yield device.getAlbum();\n    assert_1.default.strictEqual(result, 'My ALbum');\n});",
                  "err": {},
                  "uuid": "256a6143-5dbb-4bf1-a070-b2719342b868",
                  "parentUUID": "dc7a653b-cb54-41d9-aeaf-61142c115d3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "256a6143-5dbb-4bf1-a070-b2719342b868"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca585cdd-1a1e-41d8-b078-98abd33be1b0",
              "title": "getGenre()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getGenre() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                genre: 'My Genre'\n            });\n        })\n    });\n    const result = yield device.getGenre();\n    assert_1.default.strictEqual(result, 'My Genre');\n});",
                  "err": {},
                  "uuid": "1a6f2d42-f963-475d-b0aa-8dd07321a2c3",
                  "parentUUID": "ca585cdd-1a1e-41d8-b078-98abd33be1b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a6f2d42-f963-475d-b0aa-8dd07321a2c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67e29545-915e-4185-ba02-62cf7fc07f7a",
              "title": "getTotalTime()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getTotalTime() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                total_time: 45\n            });\n        })\n    });\n    const result = yield device.getTotalTime();\n    assert_1.default.strictEqual(result, 45);\n});",
                  "err": {},
                  "uuid": "d590ce5b-81e1-49dc-b5b0-8e290d62ceac",
                  "parentUUID": "67e29545-915e-4185-ba02-62cf7fc07f7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d590ce5b-81e1-49dc-b5b0-8e290d62ceac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8f60119-a5c4-4389-99c0-629f57678091",
              "title": "getPosition()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getPosition() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                position: 30\n            });\n        })\n    });\n    const result = yield device.getPosition();\n    assert_1.default.strictEqual(result, 30);\n});",
                  "err": {},
                  "uuid": "7eb617ff-259b-47d4-b4db-ff37ec98eb65",
                  "parentUUID": "f8f60119-a5c4-4389-99c0-629f57678091",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7eb617ff-259b-47d4-b4db-ff37ec98eb65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e34a2165-621d-4436-a87d-fb5283b6d782",
              "title": "getShuffle()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getShuffle() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                shuffle: 'songs'\n            });\n        })\n    });\n    const result = yield device.getShuffle();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVShuffleState.songs);\n    assert_1.default.deepStrictEqual(result, 'songs');\n});",
                  "err": {},
                  "uuid": "13e662c0-d1cb-492f-b712-fdba744b7208",
                  "parentUUID": "e34a2165-621d-4436-a87d-fb5283b6d782",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13e662c0-d1cb-492f-b712-fdba744b7208"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f563972-8d3b-41c5-ab73-6a93d1d8d7f3",
              "title": "getRepeat()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getRepeat() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                repeat: 'all'\n            });\n        })\n    });\n    const result = yield device.getRepeat();\n    assert_1.default.deepStrictEqual(result, types_1.NodePyATVRepeatState.all);\n    assert_1.default.deepStrictEqual(result, 'all');\n});",
                  "err": {},
                  "uuid": "4977f431-8b81-4342-bfc6-bbd14cedb850",
                  "parentUUID": "4f563972-8d3b-41c5-ab73-6a93d1d8d7f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4977f431-8b81-4342-bfc6-bbd14cedb850"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cca61f4f-982c-48d5-bc18-1686cc2e69d2",
              "title": "getApp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getApp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                app: 'My App'\n            });\n        })\n    });\n    const result = yield device.getApp();\n    assert_1.default.strictEqual(result, 'My App');\n});",
                  "err": {},
                  "uuid": "c0a8992c-3c16-4be5-b4df-3a5174cfffb1",
                  "parentUUID": "cca61f4f-982c-48d5-bc18-1686cc2e69d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0a8992c-3c16-4be5-b4df-3a5174cfffb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "17b302b1-9334-42fb-8664-1885b807db41",
              "title": "getAppId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice getAppId() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end({\n                result: 'success',\n                app_id: 'app.example.com'\n            });\n        })\n    });\n    const result = yield device.getAppId();\n    assert_1.default.strictEqual(result, 'app.example.com');\n});",
                  "err": {},
                  "uuid": "36570224-8f2d-4a11-8827-0cdc4653b641",
                  "parentUUID": "17b302b1-9334-42fb-8664-1885b807db41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36570224-8f2d-4a11-8827-0cdc4653b641"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a9cc645-2d5c-4492-a7d2-20e81f143ba9",
              "title": "pressKey()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with valid key",
                  "fullTitle": "NodePyATVDevice pressKey() should work with valid key",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    yield device.pressKey(types_1.NodePyATVKeys.home);\n});",
                  "err": {},
                  "uuid": "d5e8b58d-5a17-44d3-b0b7-61c306397d3a",
                  "parentUUID": "9a9cc645-2d5c-4492-a7d2-20e81f143ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error with invalid key",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error with invalid key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2'\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        yield device.pressKey('foo');\n    }), /Unsupported key value foo/);\n});",
                  "err": {},
                  "uuid": "2607bd21-af55-43fb-a73d-9ba6ceac50e3",
                  "parentUUID": "9a9cc645-2d5c-4492-a7d2-20e81f143ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if pyatv result is not success",
                  "fullTitle": "NodePyATVDevice pressKey() should throw error if pyatv result is not success",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"failure\"}');\n        })\n    });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield device.pressKey(types_1.NodePyATVKeys.home);\n    }), /Unable to parse pyatv response/);\n});",
                  "err": {},
                  "uuid": "ef9fe9ab-523e-48f3-a132-dbf9cbc67f98",
                  "parentUUID": "9a9cc645-2d5c-4492-a7d2-20e81f143ba9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5e8b58d-5a17-44d3-b0b7-61c306397d3a",
                "2607bd21-af55-43fb-a73d-9ba6ceac50e3",
                "ef9fe9ab-523e-48f3-a132-dbf9cbc67f98"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "073e9d9f-0974-40f5-9b75-90dfaa114b1d",
              "title": "down()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice down() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "caf871a7-105f-4761-a424-67c31d253363",
                  "parentUUID": "073e9d9f-0974-40f5-9b75-90dfaa114b1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "caf871a7-105f-4761-a424-67c31d253363"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c3c93b7-a651-4cf4-8f10-12535e0bc659",
              "title": "home()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice home() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "ca3ea365-a949-4de6-bc52-b0ae3f0f3264",
                  "parentUUID": "4c3c93b7-a651-4cf4-8f10-12535e0bc659",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca3ea365-a949-4de6-bc52-b0ae3f0f3264"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e2347183-dc4e-4a87-9920-c2377f4f6e88",
              "title": "homeHold()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice homeHold() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "5ca2ab15-44fc-4fb1-9a5c-ce5650d750b1",
                  "parentUUID": "e2347183-dc4e-4a87-9920-c2377f4f6e88",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ca2ab15-44fc-4fb1-9a5c-ce5650d750b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7d135816-7da5-4f01-9b31-6d9525bca1c1",
              "title": "left()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice left() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "b168321a-c86e-4583-98b2-f35567f8ef29",
                  "parentUUID": "7d135816-7da5-4f01-9b31-6d9525bca1c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b168321a-c86e-4583-98b2-f35567f8ef29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f8021eb1-8d96-47a6-a319-f96a22ca2125",
              "title": "menu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice menu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "0449bc3f-bc0f-4d24-931d-c6e49c5bc18f",
                  "parentUUID": "f8021eb1-8d96-47a6-a319-f96a22ca2125",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0449bc3f-bc0f-4d24-931d-c6e49c5bc18f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ecdb28a-791a-421b-b37b-13a87eb1713e",
              "title": "next()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice next() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "8e801138-8225-4465-8c21-74419f0967bd",
                  "parentUUID": "8ecdb28a-791a-421b-b37b-13a87eb1713e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e801138-8225-4465-8c21-74419f0967bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e75f2ae-e185-488e-aeed-6c38728502b4",
              "title": "pause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice pause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "73ab6654-d21c-4881-8a14-85385bc78c71",
                  "parentUUID": "2e75f2ae-e185-488e-aeed-6c38728502b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73ab6654-d21c-4881-8a14-85385bc78c71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53277cf4-7c68-4264-bb94-5413b01ec111",
              "title": "play()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice play() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "cfe275b6-acb7-42f7-9141-0144a1828b4c",
                  "parentUUID": "53277cf4-7c68-4264-bb94-5413b01ec111",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfe275b6-acb7-42f7-9141-0144a1828b4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6f36610-51b6-451d-97af-c693d691046d",
              "title": "playPause()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice playPause() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "12b72f4e-7cc1-494f-94aa-727caf4f455a",
                  "parentUUID": "d6f36610-51b6-451d-97af-c693d691046d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12b72f4e-7cc1-494f-94aa-727caf4f455a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a73fd7e-c951-4b5d-b192-51525e95b376",
              "title": "previous()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice previous() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "d293e881-e61e-4c79-a5be-cbdb3520912f",
                  "parentUUID": "3a73fd7e-c951-4b5d-b192-51525e95b376",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d293e881-e61e-4c79-a5be-cbdb3520912f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d54f23f6-01aa-48dc-8073-069fdb33ecb7",
              "title": "right()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice right() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "70ba66a4-61ca-4d25-9ff6-3e632b215d0c",
                  "parentUUID": "d54f23f6-01aa-48dc-8073-069fdb33ecb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70ba66a4-61ca-4d25-9ff6-3e632b215d0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52c13dce-03e9-43f5-b4b1-f18ccc1c81a7",
              "title": "select()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice select() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "a8ef9482-431d-4416-90cb-c30f23eb3983",
                  "parentUUID": "52c13dce-03e9-43f5-b4b1-f18ccc1c81a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8ef9482-431d-4416-90cb-c30f23eb3983"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d083f9d6-cac3-4184-8f48-bbc8100402bf",
              "title": "skipBackward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipBackward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "87838888-a7fa-4e05-8f7c-7c17571f5648",
                  "parentUUID": "d083f9d6-cac3-4184-8f48-bbc8100402bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87838888-a7fa-4e05-8f7c-7c17571f5648"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98873383-9b6b-4c05-954a-af93e7149d32",
              "title": "skipForward()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice skipForward() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c87d9121-81a7-4db6-80a0-5f3a84a8339d",
                  "parentUUID": "98873383-9b6b-4c05-954a-af93e7149d32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c87d9121-81a7-4db6-80a0-5f3a84a8339d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "076e57fe-29f8-4491-a0c5-3cc398fb6c48",
              "title": "stop()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice stop() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "6a2e22a6-743d-4c66-b52d-19d4dd0c6f5e",
                  "parentUUID": "076e57fe-29f8-4491-a0c5-3cc398fb6c48",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a2e22a6-743d-4c66-b52d-19d4dd0c6f5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "97a6a5bd-41d6-4162-8105-7b2d22657ba7",
              "title": "suspend()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice suspend() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "70078cf6-4fca-4ada-9278-7d157e20ed49",
                  "parentUUID": "97a6a5bd-41d6-4162-8105-7b2d22657ba7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70078cf6-4fca-4ada-9278-7d157e20ed49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a79794f-bcf1-497e-b505-ce848e796d84",
              "title": "topMenu()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice topMenu() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "cd2aed00-0356-4ece-81ab-103388297def",
                  "parentUUID": "0a79794f-bcf1-497e-b505-ce848e796d84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd2aed00-0356-4ece-81ab-103388297def"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee0adad5-c3f5-49d5-912d-77dbef5adf70",
              "title": "up()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice up() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "65bb3ad8-5789-44d0-a680-317bf83b0b14",
                  "parentUUID": "ee0adad5-c3f5-49d5-912d-77dbef5adf70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65bb3ad8-5789-44d0-a680-317bf83b0b14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "04691a82-73ce-4374-8394-f6ee386e165e",
              "title": "volumeDown()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeDown() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "c92a6b59-491a-4d4c-81bd-5638dbf79669",
                  "parentUUID": "04691a82-73ce-4374-8394-f6ee386e165e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c92a6b59-491a-4d4c-81bd-5638dbf79669"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81f5c440-03f1-439d-ac6d-a6c9f453a244",
              "title": "volumeUp()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice volumeUp() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "1a38a16e-cf35-470e-8a02-e03b623dd5e4",
                  "parentUUID": "81f5c440-03f1-439d-ac6d-a6c9f453a244",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a38a16e-cf35-470e-8a02-e03b623dd5e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "90905153-5203-44c1-81d6-ab1b182b2bb2",
              "title": "wakeup()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice wakeup() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "87a34210-ac09-4204-9ad1-8359a76377b8",
                  "parentUUID": "90905153-5203-44c1-81d6-ab1b182b2bb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87a34210-ac09-4204-9ad1-8359a76377b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2e91bde-4389-4169-8906-ef1c3c294270",
              "title": "turnOff()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOff() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "56ebc700-e488-4955-bc18-206da0080240",
                  "parentUUID": "b2e91bde-4389-4169-8906-ef1c3c294270",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56ebc700-e488-4955-bc18-206da0080240"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "151f3028-19ad-476f-96c0-1488f6817b63",
              "title": "turnOn()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/device.ts",
              "file": "/test/device.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "NodePyATVDevice turnOn() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const device = new device_1.default({\n        name: 'My Testdevice',\n        host: '192.168.178.2',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.end('{\"result\":\"success\"}');\n        })\n    });\n    // @ts-ignore\n    yield device[key]();\n});",
                  "err": {},
                  "uuid": "22ae4c29-fd4f-4516-a2db-d5790a9f0f53",
                  "parentUUID": "151f3028-19ad-476f-96c0-1488f6817b63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22ae4c29-fd4f-4516-a2db-d5790a9f0f53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f9a72ae5-278e-4e67-ba72-c0afef13e206",
          "title": "NodePyATVInstance",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
          "file": "/test/instance.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c8d84063-1578-4b28-9b10-fb1c359ec095",
              "title": "static version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with pyatv [L]",
                  "fullTitle": "NodePyATVInstance static version() should work with pyatv [L]",
                  "timedOut": false,
                  "duration": 560,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(4000);\n    const result = yield index_1.default.version();\n    if (result.pyatv === null) {\n        throw new Error('No version found for pyatv. Is it installed in test environment?');\n    }\n    assert_1.default.equal(typeof result.pyatv, 'string', 'result.pyatv is a string');\n    assert_1.default.ok(result.pyatv.length >= 5, 'result.pyatv has content');\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "c1e2b9a2-2522-45f7-880d-5dd3c7eeeedb",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return the pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.code(1);\n            cp.end('atvremote 0.7.4');\n        })\n    });\n    assert_1.default.ok(result.pyatv);\n    assert_1.default.strictEqual(result.pyatv, '0.7.4');\n});",
                  "err": {},
                  "uuid": "8fe6fb8a-5ec6-4fe6-a947-e317d1886c3a",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return the module version",
                  "fullTitle": "NodePyATVInstance static version() should return the module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        noColors: true,\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.code(1).end())\n    });\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    assert_1.default.strictEqual(result.module, require(__dirname + '/../package.json').version || null);\n});",
                  "err": {},
                  "uuid": "cd55bb10-c87b-4e7e-81ca-b2ff74932471",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvremotePath",
                  "fullTitle": "NodePyATVInstance static version() should handle option.atvremotePath",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        atvremotePath: '/foo/bar',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "5cfa4b48-0574-482f-8e1f-27796fd53138",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.debug = true",
                  "fullTitle": "NodePyATVInstance static version() should work with option.debug = true",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: true,\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "ab3caca4-4269-48fe-b2cc-61680c5c8779",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with option.noColors",
                  "fullTitle": "NodePyATVInstance static version() should work with option.noColors",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.version({\n        debug: () => { },\n        noColors: true,\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.code(1).end())\n    });\n});",
                  "err": {},
                  "uuid": "f295e2d0-4fae-4d23-a384-25be9150d23a",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv stderr output",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => cp.stderr('Hello World!').code(123).end())\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "c17673bd-726d-4c50-8ee0-774b49367640",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on pyatv error",
                  "fullTitle": "NodePyATVInstance static version() should return null on pyatv error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.error(new Error('Hello world!')).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "c57dbf97-40f7-4846-ad7d-428cb64466c6",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid pyatv version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid pyatv version",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('atvremote 42').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.pyatv, null);\n});",
                  "err": {},
                  "uuid": "abdcb4ca-2579-4108-bcfa-964e2afb6ec8",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on empty module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on empty module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = {};\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "e357c32f-dc6d-4c5e-a4fe-b87684176f0c",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null on invalid module version",
                  "fullTitle": "NodePyATVInstance static version() should return null on invalid module version",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const path = require.resolve(__dirname + '/../package.json');\n    require(path);\n    const cache = require.cache[path];\n    assert_1.default.ok(cache, 'package.json is in require cache');\n    cache.exports = { version: 42 };\n    const result = yield index_1.default.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            cp.stdout('atvremote 0.7.4').code(1).end();\n        })\n    });\n    assert_1.default.strictEqual(result.module, null);\n});",
                  "err": {},
                  "uuid": "383b9eda-fdf0-4ab5-8e3d-9bde4e421fc0",
                  "parentUUID": "c8d84063-1578-4b28-9b10-fb1c359ec095",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1e2b9a2-2522-45f7-880d-5dd3c7eeeedb",
                "8fe6fb8a-5ec6-4fe6-a947-e317d1886c3a",
                "cd55bb10-c87b-4e7e-81ca-b2ff74932471",
                "5cfa4b48-0574-482f-8e1f-27796fd53138",
                "ab3caca4-4269-48fe-b2cc-61680c5c8779",
                "f295e2d0-4fae-4d23-a384-25be9150d23a",
                "c17673bd-726d-4c50-8ee0-774b49367640",
                "c57dbf97-40f7-4846-ad7d-428cb64466c6",
                "abdcb4ca-2579-4108-bcfa-964e2afb6ec8",
                "e357c32f-dc6d-4c5e-a4fe-b87684176f0c",
                "383b9eda-fdf0-4ab5-8e3d-9bde4e421fc0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 574,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aeb63a5d-6e4a-4bac-be22-be7271772f7f",
              "title": "static check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should resolve in test environment [L]",
                  "fullTitle": "NodePyATVInstance static check() should resolve in test environment [L]",
                  "timedOut": false,
                  "duration": 5885,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(12000);\n    yield index_1.default.check();\n});",
                  "err": {},
                  "uuid": "5ff0081b-1703-4351-a8a6-9b63c1578579",
                  "parentUUID": "aeb63a5d-6e4a-4bac-be22-be7271772f7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if pyatv was not found",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if pyatv was not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "b94a7763-ad6e-4685-8a25-02a4401caa60",
                  "parentUUID": "aeb63a5d-6e4a-4bac-be22-be7271772f7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if myatv is too old",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if myatv is too old",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout('atvremote 0.5.1').code(1).end();\n            })\n        });\n    }), /Found pyatv, but unforunately it's too old. Please update pyatv./);\n});",
                  "err": {},
                  "uuid": "fba9d039-8c53-4fc9-bc42-66f1b4b6f700",
                  "parentUUID": "aeb63a5d-6e4a-4bac-be22-be7271772f7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nice error message if scan failed",
                  "fullTitle": "NodePyATVInstance static check() should return nice error message if scan failed",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    let i = 0;\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                if (i === 0) {\n                    cp.stdout('atvremote 0.7.0').code(1).end();\n                    i++;\n                }\n                else {\n                    cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n                }\n            })\n        });\n    }), /Unable to scan for devices/);\n});",
                  "err": {},
                  "uuid": "ac0f3ba3-c4c4-4f2c-9c52-dd64390a2fd7",
                  "parentUUID": "aeb63a5d-6e4a-4bac-be22-be7271772f7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ff0081b-1703-4351-a8a6-9b63c1578579",
                "b94a7763-ad6e-4685-8a25-02a4401caa60",
                "fba9d039-8c53-4fc9-bc42-66f1b4b6f700",
                "ac0f3ba3-c4c4-4f2c-9c52-dd64390a2fd7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5889,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ed53cb5-f72c-4fa2-9ba6-68e83f211d07",
              "title": "static find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work [L]",
                  "fullTitle": "NodePyATVInstance static find() should work [L]",
                  "timedOut": false,
                  "duration": 5439,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(8000);\n    const result = yield index_1.default.find();\n    assert_1.default.ok(Array.isArray(result));\n});",
                  "err": {},
                  "uuid": "92438b61-eff9-49d9-b543-39e032cf83f6",
                  "parentUUID": "4ed53cb5-f72c-4fa2-9ba6-68e83f211d07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle option.atvscriptPath",
                  "fullTitle": "NodePyATVInstance static find() should handle option.atvscriptPath",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield index_1.default.find({\n        atvscriptPath: '/foo/bar',\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), '/foo/bar');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "829d8f5f-d274-4f81-8335-74475b03fdc7",
                  "parentUUID": "4ed53cb5-f72c-4fa2-9ba6-68e83f211d07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on stderr output",
                  "fullTitle": "NodePyATVInstance static find() should throw error on stderr output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stderr('Hello World!').code(1).end();\n            })\n        });\n    }), /Unable to execute request/);\n});",
                  "err": {},
                  "uuid": "ec767698-48c4-4958-84ec-bea8278813c6",
                  "parentUUID": "4ed53cb5-f72c-4fa2-9ba6-68e83f211d07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error on error",
                  "fullTitle": "NodePyATVInstance static find() should throw error on error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.error(new Error('Hello world!')).code(1).end();\n            })\n        });\n    }), /Hello world!/);\n});",
                  "err": {},
                  "uuid": "581c9395-c72e-4923-9854-c44656c386ba",
                  "parentUUID": "4ed53cb5-f72c-4fa2-9ba6-68e83f211d07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not valid json",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not valid json",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout(JSON.stringify({\n                    'result': 'success',\n                    'datetime': '2020-11-06T20:47:30.840022+01:00',\n                    'devices': []\n                }).substr(1)).end();\n            })\n        });\n    }), /Unable to parse result/);\n});",
                  "err": {},
                  "uuid": "4f697120-5892-4841-a16b-ffcd65ce03b6",
                  "parentUUID": "4ed53cb5-f72c-4fa2-9ba6-68e83f211d07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is not successfull",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is not successfull",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout({\n                    result: 'error'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "254c93e8-433c-4cb8-923a-4b65e4f3631f",
                  "parentUUID": "4ed53cb5-f72c-4fa2-9ba6-68e83f211d07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if atvscript result is without device array",
                  "fullTitle": "NodePyATVInstance static find() should throw error if atvscript result is without device array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield index_1.default.find({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                cp.stdout({\n                    result: 'success'\n                }).code(1).end();\n            })\n        });\n    }), /Unable to parse pyatv response: /);\n});",
                  "err": {},
                  "uuid": "c121356c-306f-4524-8fca-fac58feb33b5",
                  "parentUUID": "4ed53cb5-f72c-4fa2-9ba6-68e83f211d07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92438b61-eff9-49d9-b543-39e032cf83f6",
                "829d8f5f-d274-4f81-8335-74475b03fdc7",
                "ec767698-48c4-4958-84ec-bea8278813c6",
                "581c9395-c72e-4923-9854-c44656c386ba",
                "4f697120-5892-4841-a16b-ffcd65ce03b6",
                "254c93e8-433c-4cb8-923a-4b65e4f3631f",
                "c121356c-306f-4524-8fca-fac58feb33b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5447,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da1608b4-0a0d-4fdb-932e-519938eaa556",
              "title": "static device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should pass options to constructor",
                  "fullTitle": "NodePyATVInstance static device() should pass options to constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const device = index_1.default.device({ host: '192.168.178.6', name: 'My Testdevice' });\nassert_1.default.strictEqual(device.host, '192.168.178.6');\nassert_1.default.strictEqual(device.name, 'My Testdevice');",
                  "err": {},
                  "uuid": "d78c1b24-49cc-4510-9be2-725e12fc3df7",
                  "parentUUID": "da1608b4-0a0d-4fdb-932e-519938eaa556",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d78c1b24-49cc-4510-9be2-725e12fc3df7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a47e9ea0-1a47-4045-ac17-7595248f926b",
              "title": "version()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance version() should merge options from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield i.version({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.code(1).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "f42ca743-f288-4c56-93f2-dd653056c03f",
                  "parentUUID": "a47e9ea0-1a47-4045-ac17-7595248f926b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f42ca743-f288-4c56-93f2-dd653056c03f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77cb41ab-84c2-4278-8b69-4003dcf5d60a",
              "title": "check()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance check() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvremotePath: 'test' });\n    yield assert_1.default.rejects(() => __awaiter(this, void 0, void 0, function* () {\n        yield i.check({\n            spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n                assert_1.default.strictEqual(cp.cmd(), 'test');\n                cp.error(new Error('spawn atvremote ENOENT')).code(1).end();\n            })\n        });\n    }), /Unable to find pyatv. Is it installed?/);\n});",
                  "err": {},
                  "uuid": "d67a004e-6de2-4692-b103-d341e2672793",
                  "parentUUID": "77cb41ab-84c2-4278-8b69-4003dcf5d60a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d67a004e-6de2-4692-b103-d341e2672793"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ef605ad-2838-4d59-80f8-7a93fe22a227",
              "title": "find()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance find() should merge options from constructor",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ atvscriptPath: 'test' });\n    yield i.find({\n        spawn: (0, fake_spawn_1.createFakeSpawn)(cp => {\n            assert_1.default.strictEqual(cp.cmd(), 'test');\n            cp.stdout({\n                'result': 'success',\n                'datetime': '2020-11-06T20:47:30.840022+01:00',\n                'devices': []\n            }).end();\n        })\n    });\n});",
                  "err": {},
                  "uuid": "abf0759c-43da-478f-92b6-d38ca7831629",
                  "parentUUID": "3ef605ad-2838-4d59-80f8-7a93fe22a227",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abf0759c-43da-478f-92b6-d38ca7831629"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eff6e504-da57-438f-87e2-12e7d0b35f68",
              "title": "device()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should merge options from constructor",
                  "fullTitle": "NodePyATVInstance device() should merge options from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const i = new index_1.default({ debug: true });\n    const d = i.device({ name: 'My Testdevice', host: '192.168.178.2' });\n    assert_1.default.deepStrictEqual(d.debug, true);\n});",
                  "err": {},
                  "uuid": "a3c3c597-3735-4831-b64a-af1933c52064",
                  "parentUUID": "eff6e504-da57-438f-87e2-12e7d0b35f68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3c3c597-3735-4831-b64a-af1933c52064"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e420b95-6332-4337-984a-51aa9c42474f",
              "title": "Type Exports",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/instance.ts",
              "file": "/test/instance.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Type NodePyATVProtocol should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVProtocol should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVProtocol);",
                  "err": {},
                  "uuid": "997e9897-028c-4e9c-a546-71b567134db7",
                  "parentUUID": "2e420b95-6332-4337-984a-51aa9c42474f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVMediaType should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVMediaType should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVMediaType);",
                  "err": {},
                  "uuid": "e95d2772-902b-47a2-bb0f-272bd144cb59",
                  "parentUUID": "2e420b95-6332-4337-984a-51aa9c42474f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceEvent should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceEvent should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceEvent);",
                  "err": {},
                  "uuid": "fbb56315-e6f1-4e8b-9b71-a2fe19996289",
                  "parentUUID": "2e420b95-6332-4337-984a-51aa9c42474f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVDeviceState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVDeviceState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVDeviceState);",
                  "err": {},
                  "uuid": "5d7e332e-573b-4859-b781-01a3fcff184c",
                  "parentUUID": "2e420b95-6332-4337-984a-51aa9c42474f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVRepeatState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVRepeatState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVRepeatState);",
                  "err": {},
                  "uuid": "cc64d508-7eec-406b-86b1-b86f13a8dd2b",
                  "parentUUID": "2e420b95-6332-4337-984a-51aa9c42474f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVShuffleState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVShuffleState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVShuffleState);",
                  "err": {},
                  "uuid": "5337abee-b139-4d32-848c-2ff593595ef8",
                  "parentUUID": "2e420b95-6332-4337-984a-51aa9c42474f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVKeys should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVKeys should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVKeys);",
                  "err": {},
                  "uuid": "e62b065c-7b3b-4e45-976c-f9cc10278833",
                  "parentUUID": "2e420b95-6332-4337-984a-51aa9c42474f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVInstanceOptions should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVInstanceOptions should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVListenerState);",
                  "err": {},
                  "uuid": "e6eb6838-9389-41da-98c0-150c0b38a57d",
                  "parentUUID": "2e420b95-6332-4337-984a-51aa9c42474f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Type NodePyATVPowerState should be exported",
                  "fullTitle": "NodePyATVInstance Type Exports Type NodePyATVPowerState should be exported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert_1.default.ok(index_1.NodePyATVPowerState);",
                  "err": {},
                  "uuid": "08687298-32d6-48e4-9280-973a7680457c",
                  "parentUUID": "2e420b95-6332-4337-984a-51aa9c42474f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "997e9897-028c-4e9c-a546-71b567134db7",
                "e95d2772-902b-47a2-bb0f-272bd144cb59",
                "fbb56315-e6f1-4e8b-9b71-a2fe19996289",
                "5d7e332e-573b-4859-b781-01a3fcff184c",
                "cc64d508-7eec-406b-86b1-b86f13a8dd2b",
                "5337abee-b139-4d32-848c-2ff593595ef8",
                "e62b065c-7b3b-4e45-976c-f9cc10278833",
                "e6eb6838-9389-41da-98c0-150c0b38a57d",
                "08687298-32d6-48e4-9280-973a7680457c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1e58270-834d-4387-8dd4-98d5db5004f8",
          "title": "Tools",
          "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cae70ab7-2a99-4e05-9c07-07b2b42e0ebb",
              "title": "addRequestId() / removeRequestId()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a string",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should return a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = (0, tools_1.addRequestId)();\nassert_1.default.strictEqual(typeof id, 'string');\n(0, tools_1.removeRequestId)(id);",
                  "err": {},
                  "uuid": "53db9930-c79e-47e0-bc8c-b67739d9daa1",
                  "parentUUID": "cae70ab7-2a99-4e05-9c07-07b2b42e0ebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work if given id is not in index",
                  "fullTitle": "Tools addRequestId() / removeRequestId() should work if given id is not in index",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.removeRequestId)('FOO');",
                  "err": {},
                  "uuid": "0d21de2c-79bc-4305-b075-02f7d0b93404",
                  "parentUUID": "cae70ab7-2a99-4e05-9c07-07b2b42e0ebb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53db9930-c79e-47e0-bc8c-b67739d9daa1",
                "0d21de2c-79bc-4305-b075-02f7d0b93404"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f1899ea4-d591-4524-8eba-ed54d649bb91",
              "title": "debug()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work without any options",
                  "fullTitle": "Tools debug() should work without any options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', {});",
                  "err": {},
                  "uuid": "198f1c46-dcfb-45eb-ab77-db412ce3ed4b",
                  "parentUUID": "f1899ea4-d591-4524-8eba-ed54d649bb91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with default logger",
                  "fullTitle": "Tools debug() should work with default logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', { debug: true });",
                  "err": {},
                  "uuid": "0e42c2a3-863c-43ff-aa56-69313ed93a21",
                  "parentUUID": "f1899ea4-d591-4524-8eba-ed54d649bb91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger",
                  "fullTitle": "Tools debug() should work with custom logger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', {\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.ok(msg.includes('Hello World'));\n    }\n});",
                  "err": {},
                  "uuid": "5101e33e-0de9-4a1b-9e7d-ca4301feeab8",
                  "parentUUID": "f1899ea4-d591-4524-8eba-ed54d649bb91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with colors disabled",
                  "fullTitle": "Tools debug() should work with colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', { noColors: true });",
                  "err": {},
                  "uuid": "6e5dfe22-e444-465b-af3e-1e6daf775f05",
                  "parentUUID": "f1899ea4-d591-4524-8eba-ed54d649bb91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with custom logger and colors disabled",
                  "fullTitle": "Tools debug() should work with custom logger and colors disabled",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, tools_1.debug)('TEST', 'Hello World.', {\n    noColors: true,\n    debug: function (msg) {\n        assert_1.default.strictEqual(this, null);\n        assert_1.default.strictEqual(msg, '[node-pyatv][TEST] Hello World.');\n    }\n});",
                  "err": {},
                  "uuid": "d7deb0a3-4c2a-436e-8a26-6af983a9dc56",
                  "parentUUID": "f1899ea4-d591-4524-8eba-ed54d649bb91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "198f1c46-dcfb-45eb-ab77-db412ce3ed4b",
                "0e42c2a3-863c-43ff-aa56-69313ed93a21",
                "5101e33e-0de9-4a1b-9e7d-ca4301feeab8",
                "6e5dfe22-e444-465b-af3e-1e6daf775f05",
                "d7deb0a3-4c2a-436e-8a26-6af983a9dc56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33f9d044-23c8-4070-955a-a32c1012d16a",
              "title": "getExecutable()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle atvremotePath if set",
                  "fullTitle": "Tools getExecutable() should handle atvremotePath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvremote, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/1');",
                  "err": {},
                  "uuid": "abaa371b-2f3f-45a0-b9d0-9cf38f1e5b77",
                  "parentUUID": "33f9d044-23c8-4070-955a-a32c1012d16a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle atvscriptPath if set",
                  "fullTitle": "Tools getExecutable() should handle atvscriptPath if set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp/1',\n    atvscriptPath: '/tmp/2'\n});\nassert_1.default.strictEqual(result, '/tmp/2');",
                  "err": {},
                  "uuid": "99de7c11-44ae-41a9-9a84-bfd794944bcc",
                  "parentUUID": "33f9d044-23c8-4070-955a-a32c1012d16a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvremote",
                  "fullTitle": "Tools getExecutable() should handle default for atvremote",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvremote, {\n    atvscriptPath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvremote');",
                  "err": {},
                  "uuid": "42f0ee2e-684d-4174-b896-792c4ed1fefa",
                  "parentUUID": "33f9d044-23c8-4070-955a-a32c1012d16a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle default for atvscript",
                  "fullTitle": "Tools getExecutable() should handle default for atvscript",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = (0, tools_1.getExecutable)(types_1.NodePyATVExecutableType.atvscript, {\n    atvremotePath: '/tmp'\n});\nassert_1.default.strictEqual(result, 'atvscript');",
                  "err": {},
                  "uuid": "775f3f27-f887-4639-b5d7-b1cd278f4fc9",
                  "parentUUID": "33f9d044-23c8-4070-955a-a32c1012d16a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abaa371b-2f3f-45a0-b9d0-9cf38f1e5b77",
                "99de7c11-44ae-41a9-9a84-bfd794944bcc",
                "42f0ee2e-684d-4174-b896-792c4ed1fefa",
                "775f3f27-f887-4639-b5d7-b1cd278f4fc9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ded3520-0e00-4265-9288-563ee6f28db1",
              "title": "getParameters()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "empty case",
                  "fullTitle": "Tools getParameters() empty case",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield (0, tools_1.getParamters)();\n    assert_1.default.deepEqual(result, []);\n});",
                  "err": {},
                  "uuid": "312bdfe7-a750-4918-9aab-7cddcefbdb6f",
                  "parentUUID": "5ded3520-0e00-4265-9288-563ee6f28db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "easy case",
                  "fullTitle": "Tools getParameters() easy case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield (0, tools_1.getParamters)({\n        host: '192.168.178.2'\n    });\n    assert_1.default.deepEqual(result, ['-s', '192.168.178.2']);\n});",
                  "err": {},
                  "uuid": "80c9e0be-c121-41d4-9337-413d40d9cef0",
                  "parentUUID": "5ded3520-0e00-4265-9288-563ee6f28db1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "full case",
                  "fullTitle": "Tools getParameters() full case",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const result = yield (0, tools_1.getParamters)({\n        hosts: ['192.168.178.2', '192.168.178.3'],\n        id: '****',\n        protocol: types_1.NodePyATVProtocol.mrp,\n        dmapCredentials: '****',\n        mrpCredentials: '****',\n        airplayCredentials: '****',\n        companionCredentials: '1234',\n        raopCredentials: '::foo:'\n    });\n    assert_1.default.deepEqual(result, [\n        '-s', '192.168.178.2,192.168.178.3',\n        '-i', '****',\n        '--protocol', 'mrp',\n        '--dmap-credentials', '****',\n        '--mrp-credentials', '****',\n        '--airplay-credentials', '****',\n        '--companion-credentials', '1234',\n        '--raop-credentials', '::foo:'\n    ]);\n});",
                  "err": {},
                  "uuid": "df60264d-98a0-4fa2-bb5c-b5017fc6b7f8",
                  "parentUUID": "5ded3520-0e00-4265-9288-563ee6f28db1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "312bdfe7-a750-4918-9aab-7cddcefbdb6f",
                "80c9e0be-c121-41d4-9337-413d40d9cef0",
                "df60264d-98a0-4fa2-bb5c-b5017fc6b7f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ccfba9e3-d369-4258-a97e-5776a8c4fd5a",
              "title": "parseState()",
              "fullFile": "/home/runner/work/node-pyatv/node-pyatv/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with empty data",
                  "fullTitle": "Tools parseState() should work with empty data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "192b1521-0aaa-49b8-b366-70f3065100af",
                  "parentUUID": "ccfba9e3-d369-4258-a97e-5776a8c4fd5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without data",
                  "fullTitle": "Tools parseState() should work without data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// @ts-ignore\nconst result = (0, tools_1.parseState)(null, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "77679303-1eca-473e-a805-363f104c3870",
                  "parentUUID": "ccfba9e3-d369-4258-a97e-5776a8c4fd5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with example data",
                  "fullTitle": "Tools parseState() should work with example data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: '2020-11-07T22:38:43.608030+01:00',\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    media_type: 'video',\n    device_state: 'playing',\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    total_time: 8097,\n    position: 27,\n    shuffle: 'off',\n    repeat: 'off',\n    app: 'Disney+',\n    app_id: 'com.disney.disneyplus',\n    powerState: null\n};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: new Date('2020-11-07T22:38:43.608030+01:00'),\n    hash: '100e0ab6-6ff5-4199-9c04-a7107ff78712',\n    mediaType: types_1.NodePyATVMediaType.video,\n    deviceState: types_1.NodePyATVDeviceState.playing,\n    title: 'Solo: A Star Wars Story',\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: 8097,\n    position: 27,\n    shuffle: types_1.NodePyATVShuffleState.off,\n    repeat: types_1.NodePyATVRepeatState.off,\n    app: 'Disney+',\n    appId: 'com.disney.disneyplus',\n    powerState: null\n});",
                  "err": {},
                  "uuid": "6f0e2035-3f47-4baf-880e-d2498b51ed55",
                  "parentUUID": "ccfba9e3-d369-4258-a97e-5776a8c4fd5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error for pyatv exceptions",
                  "fullTitle": "Tools parseState() should throw an error for pyatv exceptions",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'failure',\n    datetime: '2021-11-24T21:13:36.424576+03:00',\n    exception: 'invalid credentials: 321',\n    stacktrace: 'Traceback (most recent call last):\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 302, in appstart\\n    print(args.output(await _handle_command(args, abort_sem, loop)), flush=True)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/scripts/atvscript.py\\\", line 196, in _handle_command\\n    atv = await connect(config, loop, protocol=Protocol.MRP)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/__init__.py\\\", line 96, in connect\\n    for setup_data in proto_methods.setup(\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 192, in setup\\n    stream = AirPlayStream(config, service)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/protocols/airplay/__init__.py\\\", line 79, in __init__\\n    self._credentials: HapCredentials = parse_credentials(self.service.credentials)\\n  File \\\"/Users/free/Library/Python/3.8/lib/python/site-packages/pyatv/auth/hap_pairing.py\\\", line 139, in parse_credentials\\n    raise exceptions.InvalidCredentialsError(\\\"invalid credentials: \\\" + detail_string)\\npyatv.exceptions.InvalidCredentialsError: invalid credentials: 321\\n'\n};\nassert_1.default.throws(() => {\n    (0, tools_1.parseState)(input, '', {});\n}, /Got pyatv Error: invalid credentials: 321/);",
                  "err": {},
                  "uuid": "a22046c0-565e-44c5-9a15-1f4fe4656aca",
                  "parentUUID": "ccfba9e3-d369-4258-a97e-5776a8c4fd5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore date if it's an invalid date",
                  "fullTitle": "Tools parseState() should ignore date if it's an invalid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = { datetime: 'today' };\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "b1387e48-92d7-4011-9b14-0d7681b86116",
                  "parentUUID": "ccfba9e3-d369-4258-a97e-5776a8c4fd5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore data if unsupported type",
                  "fullTitle": "Tools parseState() should ignore data if unsupported type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    result: 'success',\n    datetime: true,\n    hash: 1337,\n    media_type: false,\n    device_state: 43,\n    title: undefined,\n    artist: 90,\n    album: Infinity,\n    genre: Math.PI,\n    total_time: '23min',\n    position: '0:30.123',\n    shuffle: false,\n    repeat: true,\n    app: 0,\n    app_id: 891645381647289,\n    powerState: null\n};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "e662a026-5e2f-4536-a4d0-711fd49526f5",
                  "parentUUID": "ccfba9e3-d369-4258-a97e-5776a8c4fd5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore enums with unsupported valid",
                  "fullTitle": "Tools parseState() should ignore enums with unsupported valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const input = {\n    media_type: '3d-experience',\n    device_state: 'initiating',\n    shuffle: 'everything',\n    repeat: 'nothing'\n};\nconst result = (0, tools_1.parseState)(input, '', {});\nassert_1.default.deepStrictEqual(result, {\n    dateTime: null,\n    hash: null,\n    mediaType: null,\n    deviceState: null,\n    title: null,\n    artist: null,\n    album: null,\n    genre: null,\n    totalTime: null,\n    position: null,\n    shuffle: null,\n    repeat: null,\n    app: null,\n    appId: null,\n    powerState: null\n});",
                  "err": {},
                  "uuid": "b8cbcc13-68e4-4353-a14b-214d598448f5",
                  "parentUUID": "ccfba9e3-d369-4258-a97e-5776a8c4fd5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "192b1521-0aaa-49b8-b366-70f3065100af",
                "77679303-1eca-473e-a805-363f104c3870",
                "6f0e2035-3f47-4baf-880e-d2498b51ed55",
                "a22046c0-565e-44c5-9a15-1f4fe4656aca",
                "b1387e48-92d7-4011-9b14-0d7681b86116",
                "e662a026-5e2f-4536-a4d0-711fd49526f5",
                "b8cbcc13-68e4-4353-a14b-214d598448f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}